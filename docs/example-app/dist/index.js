/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./script/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;

  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;

  return [validLen, placeHoldersLen];
}

// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

  var curByte = 0;

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

  for (var i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "./node_modules/bigscreen-player/script/allowedmediatransitions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/allowedmediatransitions.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  function AllowedMediaTransitions(mediaplayer) {
    var player = mediaplayer;

    var MediaPlayerState = {
      EMPTY: 'EMPTY', // No source set
      STOPPED: 'STOPPED', // Source set but no playback
      BUFFERING: 'BUFFERING', // Not enough data to play, waiting to download more
      PLAYING: 'PLAYING', // Media is playing
      PAUSED: 'PAUSED', // Media is paused
      COMPLETE: 'COMPLETE', // Media has reached its end point
      ERROR: 'ERROR' // An error occurred
    };

    function canBePaused() {
      var pausableStates = [MediaPlayerState.BUFFERING, MediaPlayerState.PLAYING];
      return pausableStates.indexOf(player.getState()) !== -1;
    }

    function canBeStopped() {
      var unstoppableStates = [MediaPlayerState.EMPTY, MediaPlayerState.ERROR];
      var stoppable = unstoppableStates.indexOf(player.getState()) === -1;
      return stoppable;
    }

    function canBeginSeek() {
      var unseekableStates = [MediaPlayerState.EMPTY, MediaPlayerState.ERROR];
      var state = player.getState();
      var seekable = state ? unseekableStates.indexOf(state) === -1 : false;
      return seekable;
    }

    function canResume() {
      return player.getState() === MediaPlayerState.PAUSED || player.getState() === MediaPlayerState.BUFFERING;
    }

    return {
      canBePaused: canBePaused,
      canBeStopped: canBeStopped,
      canBeginSeek: canBeginSeek,
      canResume: canResume
    };
  }

  return AllowedMediaTransitions;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/bigscreenplayer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/bigscreenplayer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/models/mediastate */ "./node_modules/bigscreen-player/script/models/mediastate.js"), __webpack_require__(/*! bigscreenplayer/playercomponent */ "./node_modules/bigscreen-player/script/playercomponent.js"), __webpack_require__(/*! bigscreenplayer/models/pausetriggers */ "./node_modules/bigscreen-player/script/models/pausetriggers.js"), __webpack_require__(/*! bigscreenplayer/dynamicwindowutils */ "./node_modules/bigscreen-player/script/dynamicwindowutils.js"), __webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js"), __webpack_require__(/*! bigscreenplayer/mockbigscreenplayer */ "./node_modules/bigscreen-player/script/mockbigscreenplayer.js"), __webpack_require__(/*! bigscreenplayer/plugins */ "./node_modules/bigscreen-player/script/plugins.js"), __webpack_require__(/*! bigscreenplayer/debugger/chronicle */ "./node_modules/bigscreen-player/script/debugger/chronicle.js"), __webpack_require__(/*! bigscreenplayer/debugger/debugtool */ "./node_modules/bigscreen-player/script/debugger/debugtool.js"), __webpack_require__(/*! bigscreenplayer/manifest/manifestloader */ "./node_modules/bigscreen-player/script/manifest/manifestloader.js"), __webpack_require__(/*! bigscreenplayer/utils/timeutils */ "./node_modules/bigscreen-player/script/utils/timeutils.js"), __webpack_require__(/*! bigscreenplayer/utils/livesupportutils */ "./node_modules/bigscreen-player/script/utils/livesupportutils.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (MediaState, PlayerComponent, PauseTriggers, DynamicWindowUtils, WindowTypes, MockBigscreenPlayer, Plugins, Chronicle, DebugTool, ManifestLoader, SlidingWindowUtils, LiveSupportUtils) {
  'use strict';

  function BigscreenPlayer() {
    var stateChangeCallbacks = [];
    var timeUpdateCallbacks = [];

    var mediaKind;
    var initialPlaybackTimeEpoch;
    var serverDate;
    var playerComponent;
    var pauseTrigger;
    var endOfStream;
    var windowType;
    var device;

    function mediaStateUpdateCallback(evt) {
      if (evt.timeUpdate) {
        DebugTool.time(evt.data.currentTime);
        timeUpdateCallbacks.forEach(function (callback) {
          callback({
            currentTime: evt.data.currentTime,
            endOfStream: endOfStream
          });
        });
      } else {
        var stateObject = { state: evt.data.state };
        if (evt.data.state === MediaState.PAUSED) {
          endOfStream = false;
          stateObject.trigger = pauseTrigger || PauseTriggers.DEVICE;
          pauseTrigger = undefined;
        }

        if (evt.data.state === MediaState.FATAL_ERROR) {
          stateObject = {
            state: MediaState.FATAL_ERROR,
            isBufferingTimeoutError: evt.isBufferingTimeoutError
          };
        }
        stateObject.endOfStream = endOfStream;

        stateChangeCallbacks.forEach(function (callback) {
          callback(stateObject);
        });
        DebugTool.event(stateObject);
      }

      if (evt.data.seekableRange) {
        DebugTool.keyValue({ key: 'seekableRangeStart', value: deviceTimeToDate(evt.data.seekableRange.start) });
        DebugTool.keyValue({ key: 'seekableRangeEnd', value: deviceTimeToDate(evt.data.seekableRange.end) });
      }

      if (evt.data.duration) {
        DebugTool.keyValue({ key: 'duration', value: evt.data.duration });
      }
    }

    function deviceTimeToDate(time) {
      if (getWindowStartTime()) {
        return new Date(convertVideoTimeSecondsToEpochMs(time));
      } else {
        return new Date(time * 1000);
      }
    }

    function convertVideoTimeSecondsToEpochMs(seconds) {
      return getWindowStartTime() ? getWindowStartTime() + seconds * 1000 : undefined;
    }

    function bigscreenPlayerDataLoaded(playbackElement, bigscreenPlayerData, enableSubtitles, device, successCallback) {
      if (bigscreenPlayerData.time) {
        serverDate = bigscreenPlayerData.serverDate;

        initialPlaybackTimeEpoch = bigscreenPlayerData.initialPlaybackTime;
        // overwrite initialPlaybackTime with video time (it comes in as epoch time for a sliding/growing window)
        bigscreenPlayerData.initialPlaybackTime = SlidingWindowUtils.convertToSeekableVideoTime(bigscreenPlayerData.initialPlaybackTime, bigscreenPlayerData.time.windowStartTime);
      }

      mediaKind = bigscreenPlayerData.media.kind;
      endOfStream = windowType !== WindowTypes.STATIC && !bigscreenPlayerData.initialPlaybackTime && bigscreenPlayerData.initialPlaybackTime !== 0;

      playerComponent = new PlayerComponent(playbackElement, bigscreenPlayerData, windowType, enableSubtitles, mediaStateUpdateCallback, device);

      if (successCallback) {
        successCallback();
      }

      var availableCdns = bigscreenPlayerData.media.urls.map(function (media) {
        return media.cdn;
      });

      DebugTool.keyValue({ key: 'available cdns', value: availableCdns });
      DebugTool.keyValue({ key: 'current cdn', value: bigscreenPlayerData.media.urls[0].cdn });
      DebugTool.keyValue({ key: 'url', value: bigscreenPlayerData.media.urls[0].url });
    }

    function getWindowStartTime() {
      return playerComponent && playerComponent.getWindowStartTime();
    }

    function getWindowEndTime() {
      return playerComponent && playerComponent.getWindowEndTime();
    }

    return {
      init: function init(playbackElement, bigscreenPlayerData, newWindowType, enableSubtitles, newDevice, callbacks) {
        Chronicle.init();
        device = newDevice;
        windowType = newWindowType;
        serverDate = bigscreenPlayerData.serverDate;
        if (!callbacks) {
          callbacks = {};
        }

        if (LiveSupportUtils.needToGetManifest(windowType, getLiveSupport(device)) && !bigscreenPlayerData.time) {
          ManifestLoader.load(bigscreenPlayerData.media.urls, serverDate, {
            onSuccess: function onSuccess(manifestData) {
              bigscreenPlayerData.media.transferFormat = manifestData.transferFormat;
              bigscreenPlayerData.time = manifestData.time;
              bigscreenPlayerDataLoaded(playbackElement, bigscreenPlayerData, enableSubtitles, device, callbacks.onSuccess);
            },
            onError: function onError() {
              if (callbacks.onError) {
                callbacks.onError({ error: 'manifest' });
              }
            }
          });
        } else {
          bigscreenPlayerDataLoaded(playbackElement, bigscreenPlayerData, enableSubtitles, device, callbacks.onSuccess);
        }
      },

      tearDown: function tearDown() {
        if (playerComponent) {
          playerComponent.tearDown();
          playerComponent = undefined;
        }
        stateChangeCallbacks = [];
        timeUpdateCallbacks = [];
        endOfStream = undefined;
        mediaKind = undefined;
        pauseTrigger = undefined;
        windowType = undefined;
        this.unregisterPlugin();
        DebugTool.tearDown();
        Chronicle.tearDown();
      },

      registerForStateChanges: function registerForStateChanges(callback) {
        stateChangeCallbacks.push(callback);
        return callback;
      },
      unregisterForStateChanges: function unregisterForStateChanges(callback) {
        var indexOf = stateChangeCallbacks.indexOf(callback);
        if (indexOf !== -1) {
          stateChangeCallbacks.splice(indexOf, 1);
        }
      },
      registerForTimeUpdates: function registerForTimeUpdates(callback) {
        timeUpdateCallbacks.push(callback);
        return callback;
      },
      unregisterForTimeUpdates: function unregisterForTimeUpdates(callback) {
        var indexOf = timeUpdateCallbacks.indexOf(callback);

        if (indexOf !== -1) {
          timeUpdateCallbacks.splice(indexOf, 1);
        }
      },
      setCurrentTime: function setCurrentTime(time) {
        DebugTool.apicall('setCurrentTime');
        if (playerComponent) {
          var END_OF_STREAM_TOLERANCE = 10;

          playerComponent.setCurrentTime(time);

          endOfStream = windowType !== WindowTypes.STATIC && Math.abs(this.getSeekableRange().end - time) < END_OF_STREAM_TOLERANCE;
        }
      },
      getCurrentTime: function getCurrentTime() {
        return playerComponent && playerComponent.getCurrentTime() || 0;
      },
      getMediaKind: function getMediaKind() {
        return mediaKind;
      },
      getWindowType: function getWindowType() {
        return windowType;
      },
      getSeekableRange: function getSeekableRange() {
        return playerComponent ? playerComponent.getSeekableRange() : {};
      },
      getLiveWindowData: function getLiveWindowData() {
        if (windowType === WindowTypes.STATIC) {
          return {};
        }
        return {
          windowStartTime: getWindowStartTime(),
          windowEndTime: getWindowEndTime(),
          initialPlaybackTime: initialPlaybackTimeEpoch,
          serverDate: serverDate
        };
      },
      getDuration: function getDuration() {
        return playerComponent && playerComponent.getDuration();
      },
      isPaused: function isPaused() {
        return playerComponent ? playerComponent.isPaused() : true;
      },
      isEnded: function isEnded() {
        return playerComponent ? playerComponent.isEnded() : false;
      },
      play: function play() {
        DebugTool.apicall('play');
        playerComponent.play();
      },
      pause: function pause(opts) {
        DebugTool.apicall('pause');
        pauseTrigger = opts && opts.userPause === false ? PauseTriggers.APP : PauseTriggers.USER;
        playerComponent.pause(opts);
      },
      setSubtitlesEnabled: function setSubtitlesEnabled(value) {
        playerComponent.setSubtitlesEnabled(value);
      },
      isSubtitlesEnabled: function isSubtitlesEnabled() {
        return playerComponent ? playerComponent.isSubtitlesEnabled() : false;
      },
      isSubtitlesAvailable: function isSubtitlesAvailable() {
        return playerComponent ? playerComponent.isSubtitlesAvailable() : false;
      },
      setTransportControlsPosition: function setTransportControlsPosition(position) {
        playerComponent.setTransportControlPosition(position);
      },
      canSeek: function canSeek() {
        return windowType === WindowTypes.STATIC || DynamicWindowUtils.canSeek(getWindowStartTime(), getWindowEndTime(), getLiveSupport(device), this.getSeekableRange());
      },
      canPause: function canPause() {
        return windowType === WindowTypes.STATIC || DynamicWindowUtils.canPause(getWindowStartTime(), getWindowEndTime(), getLiveSupport(device));
      },
      mock: function mock(opts) {
        MockBigscreenPlayer.mock(this, opts);
      },
      unmock: function unmock() {
        MockBigscreenPlayer.unmock(this);
      },
      mockJasmine: function mockJasmine(opts) {
        MockBigscreenPlayer.mockJasmine(this, opts);
      },
      registerPlugin: function registerPlugin(plugin) {
        Plugins.registerPlugin(plugin);
      },
      unregisterPlugin: function unregisterPlugin(plugin) {
        Plugins.unregisterPlugin(plugin);
      },
      transitions: function transitions() {
        return playerComponent ? playerComponent.transitions() : {};
      },
      getPlayerElement: function getPlayerElement() {
        return playerComponent && playerComponent.getPlayerElement();
      },
      convertEpochMsToVideoTimeSeconds: function convertEpochMsToVideoTimeSeconds(epochTime) {
        return getWindowStartTime() ? Math.floor((epochTime - getWindowStartTime()) / 1000) : undefined;
      },
      convertVideoTimeSecondsToEpochMs: convertVideoTimeSecondsToEpochMs
    };
  }

  function getLiveSupport(device) {
    return PlayerComponent.getLiveSupport(device);
  }

  BigscreenPlayer.getLiveSupport = getLiveSupport;

  return BigscreenPlayer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/captions.js":
/*!**********************************************************!*\
  !*** ./node_modules/bigscreen-player/script/captions.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/debugger/debugtool */ "./node_modules/bigscreen-player/script/debugger/debugtool.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (DebugTool) {
  'use strict';

  var elementToStyleMap = [{
    attribute: 'tts:color',
    property: 'color'
  }, {
    attribute: 'tts:backgroundColor',
    property: 'text-shadow'
  }, {
    attribute: 'tts:fontStyle',
    property: 'font-style'
  }, {
    attribute: 'tts:textAlign',
    property: 'text-align'
  }];

  var Captions = function Captions(id, uri, media) {
    var timedItems = [];
    var liveItems = [];
    var iterator = 0;
    var _styles = {};
    var lastTimeSeen = 0;
    var interval = 0;
    var outputElement;

    loadData(uri);

    function loadData(dataFeedUrl) {
      var req = new XMLHttpRequest();

      req.onreadystatechange = function () {
        if (req.readyState === 4) {
          req.onreadystatechange = null;
          if (req.status >= 200 && req.status < 300) {
            if (req.responseXML) {
              try {
                transformXML(req.responseXML);
              } catch (e) {
                DebugTool.info('Error transforming captions response: ' + e);
              }
            }
          } else {
            DebugTool.info('Response Code ' + req.status + '; Error loading captions data: ' + req.responseText);
          }
        }
      };

      try {
        req.open('GET', dataFeedUrl, true);
        req.send(null);
      } catch (e) {
        DebugTool.info('Error transforming captions response: ' + e);
      }
    }

    function render() {
      if (!outputElement) {
        outputElement = document.createElement('div');
        outputElement.id = id;
      }

      return outputElement;
    }

    function start() {
      interval = setInterval(function () {
        update();
      }, 750);

      if (outputElement) {
        outputElement.style.display = 'block';
      }
    }

    function stop() {
      if (outputElement) {
        outputElement.style.display = 'none';
      }

      cleanOldCaptions(media.getDuration());
      clearInterval(interval);
    }

    function update() {
      if (!media) {
        stop();
      }

      var time = media.getCurrentTime();
      updateCaptions(time);
    }

    function transformXML(xml) {
      // Use .getElementsByTagNameNS() when parsing XML as some implementations of .getElementsByTagName() will lowercase its argument before proceding
      var conformsToStandardElements = xml.getElementsByTagNameNS('urn:ebu:tt:metadata', 'conformsToStandard')[0];
      var isEBUTTD = conformsToStandardElements && conformsToStandardElements.textContent === 'urn:ebu:tt:distribution:2014-01';

      var captionValues = {
        ttml: {
          namespace: 'http://www.w3.org/2006/10/ttaf1',
          idAttribute: 'id'
        },
        ebuttd: {
          namespace: 'http://www.w3.org/ns/ttml',
          idAttribute: 'xml:id'
        }
      };

      var captionStandard = isEBUTTD ? captionValues.ebuttd : captionValues.ttml;
      var styles = _styles;
      var styleElements = xml.getElementsByTagNameNS(captionStandard.namespace, 'style');

      var max = styleElements.length;
      // We should get at least one each time. If we don't, then the data
      // is broken or structured in a way this can't cope with.
      // This prevents an infinite loop.
      var seenNonOk = false;
      do {
        for (var i = 0, j = styleElements.length; i < j; i++) {
          var se = styleElements[i];
          if (se.ok) {
            continue;
          }

          var id = se.getAttribute(captionStandard.idAttribute);
          var myStyles = elementToStyle(se);

          if (myStyles) {
            styles[id] = myStyles;
            se.ok = true;
          } else {
            seenNonOk = true;
          }
        }
      } while (seenNonOk && max--);

      var body = xml.getElementsByTagNameNS(captionStandard.namespace, 'body')[0];
      var s = elementToStyle(body);
      var d = document.createElement('div');
      d.setAttribute('style', s);
      d.style.cssText = s;

      if (!outputElement) {
        outputElement = document.createElement('div');
        outputElement.id = id;
      }

      outputElement.appendChild(d);
      outputElement = d;

      var ps = xml.getElementsByTagNameNS(captionStandard.namespace, 'p');
      var items = [];

      for (var k = 0, m = ps.length; k < m; k++) {
        items.push(TimedPiece(ps[k], elementToStyle));
      }

      timedItems = items;
      liveItems = [];
      return items;
    }

    function elementToStyle(el) {
      var stringStyle = '';
      var styles = _styles;
      var inherit = el.getAttribute('style');
      if (inherit) {
        if (styles[inherit]) {
          stringStyle = styles[inherit];
        } else {
          return false;
        }
      }
      for (var i = 0, j = elementToStyleMap.length; i < j; i++) {
        var map = elementToStyleMap[i];
        var value = el.getAttribute(map.attribute);
        if (value === null || value === undefined) {
          continue;
        }
        if (map.conversion) {
          value = map.conversion(value);
        }
        if (map.attribute === 'tts:backgroundColor') {
          value += ' 2px 2px 1px';
        }

        stringStyle += map.property + ': ' + value + '; ';
      }

      return stringStyle;
    }

    function groupUnseenFor(time) {
      // Basic approach first.
      // TODO - seek backwards and do fast seeking if long timestamp
      // differences. Also add a cache for last timestamp seen. If next time is older, reset.
      var it;
      if (time < lastTimeSeen) {
        it = 0;
      } else {
        it = iterator || 0;
      }
      lastTimeSeen = time;
      var itms = timedItems;
      var max = itms.length;

      // The current iterated item was not returned last time.
      // If its time has not come, we return nothing.
      var ready = [];
      var itm = itms[it];
      while (it !== max && itm.start < time) {
        if (itm.end > time) {
          ready.push(itm);
        }
        it++;
        itm = itms[it];
      }
      iterator = it;

      return ready;
    }

    function updateCaptions(time) {
      // Clear out old captions
      cleanOldCaptions(time);
      // Add new captions
      addNewCaptions(time);
    }

    function cleanOldCaptions(time) {
      var live = liveItems;
      for (var i = live.length - 1; i >= 0; i--) {
        if (live[i].removeFromDomIfExpired(time)) {
          live.splice(i, 1);
        }
      }
    }

    function addNewCaptions(time) {
      var live = liveItems;
      var fresh = groupUnseenFor(time);
      liveItems = live.concat(fresh);
      for (var i = 0, j = fresh.length; i < j; i++) {
        fresh[i].addToDom(outputElement);
      }
    }

    return {
      render: render,
      start: start,
      stop: stop,
      update: update,
      loadData: loadData,
      transformXML: transformXML,
      elementToStyle: elementToStyle,
      groupUnseenFor: groupUnseenFor,
      updateCaptions: updateCaptions,
      cleanOldCaptions: cleanOldCaptions,
      addNewCaptions: addNewCaptions
    };
  };

  var TimedPiece = function TimedPiece(timedPieceNode, toStyleFunc) {
    var start = timeStampToSeconds(timedPieceNode.getAttribute('begin'));
    var end = timeStampToSeconds(timedPieceNode.getAttribute('end'));
    var _node = timedPieceNode;
    var htmlElementNode;

    function timeStampToSeconds(timeStamp) {
      var timePieces = timeStamp.split(':');
      var timeSeconds = parseFloat(timePieces.pop(), 10);
      if (timePieces.length) {
        timeSeconds += 60 * parseInt(timePieces.pop(), 10);
      }
      if (timePieces.length) {
        timeSeconds += 60 * 60 * parseInt(timePieces.pop(), 10);
      }
      return timeSeconds;
    }

    function removeFromDomIfExpired(time) {
      if (time > end || time < start) {
        if (htmlElementNode) {
          var e = htmlElementNode;
          if (e.parentNode) {
            e.parentNode.removeChild(e);
          }
        }
        return true;
      }
      return false;
    }

    function addToDom(parentNode) {
      var node = htmlElementNode || generateHtmlElementNode();
      parentNode.appendChild(node);
    }

    function generateHtmlElementNode(node) {
      var source = node || _node;

      var localName = source.localName || source.tagName;
      var html = document.createElement(localName);
      var style = toStyleFunc(source);
      if (style) {
        html.setAttribute('style', style);
        html.style.cssText = style;
      }

      for (var i = 0, j = source.childNodes.length; i < j; i++) {
        var n = source.childNodes[i];
        if (n.nodeType === 3) {
          html.appendChild(document.createTextNode(n.data));
        } else if (n.nodeType === 1) {
          html.appendChild(generateHtmlElementNode(n));
        }
      }
      if (!node) {
        htmlElementNode = html;
      }

      return html;
    }

    return {
      node: timedPieceNode,
      start: start,
      end: end,

      timeStampToSeconds: timeStampToSeconds,
      removeFromDomIfExpired: removeFromDomIfExpired,
      addToDom: addToDom,
      generateHtmlElementNode: generateHtmlElementNode
    };
  };

  return Captions;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/captionscontainer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/captionscontainer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/captions */ "./node_modules/bigscreen-player/script/captions.js"), __webpack_require__(/*! bigscreenplayer/models/transportcontrolposition */ "./node_modules/bigscreen-player/script/models/transportcontrolposition.js"), __webpack_require__(/*! bigscreenplayer/domhelpers */ "./node_modules/bigscreen-player/script/domhelpers.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Captions, TransportControlPosition, DOMHelpers) {
  'use strict';

  return function (mediaPlayer, captionsURL, autoStart, parentElement) {
    var container = document.createElement('div');
    var captions;

    container.id = 'playerCaptionsContainer';
    DOMHelpers.addClass(container, 'playerCaptions');

    if (captionsURL) {
      captions = new Captions('playerCaptions', captionsURL, mediaPlayer, container);
      container.appendChild(captions.render());
    }

    parentElement.appendChild(container);

    if (autoStart) {
      start();
    }

    function start() {
      if (captions) {
        captions.start();
      }
    }

    function stop() {
      if (captions) {
        captions.stop();
      }
    }

    function updatePosition(transportControlPosition) {
      var classes = {
        controlsVisible: TransportControlPosition.CONTROLS_ONLY,
        controlsWithInfoVisible: TransportControlPosition.CONTROLS_WITH_INFO,
        leftCarouselVisible: TransportControlPosition.LEFT_CAROUSEL,
        bottomCarouselVisible: TransportControlPosition.BOTTOM_CAROUSEL
      };

      for (var cssClassName in classes) {
        if (classes.hasOwnProperty(cssClassName)) {
          // Allow multiple flags to be set at once
          if ((classes[cssClassName] & transportControlPosition) === classes[cssClassName]) {
            DOMHelpers.addClass(container, cssClassName);
          } else {
            DOMHelpers.removeClass(container, cssClassName);
          }
        }
      }
    }

    function tearDown() {
      if (container) {
        parentElement.removeChild(container);
      }
    }

    return {
      start: start,
      stop: stop,
      updatePosition: updatePosition,
      tearDown: tearDown
    };
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/debugger/cdndebugoutput.js":
/*!*************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/debugger/cdndebugoutput.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/debugger/debugtool */ "./node_modules/bigscreen-player/script/debugger/debugtool.js"), __webpack_require__(/*! bigscreenplayer/utils/playbackutils */ "./node_modules/bigscreen-player/script/utils/playbackutils.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (DebugTool, Utils) {
  'use strict';

  function CdnDebugOutput(initialMedia) {
    var media = Utils.cloneArray(initialMedia);
    var currentCDN = media[0];

    DebugTool.keyValue({ key: 'available cdns', value: availableCdns() });
    DebugTool.keyValue({ key: 'current cdn', value: currentCDN.cdn });
    DebugTool.keyValue({ key: 'url', value: currentCDN.url });

    function availableCdns() {
      return media.map(function (element) {
        return element && element.cdn;
      });
    }

    function updateMedia() {
      media.shift();
      currentCDN = media[0];
    }

    function update() {
      updateMedia();
      DebugTool.keyValue({ key: 'available cdns', value: availableCdns() });
      DebugTool.keyValue({ key: 'current cdn', value: currentCDN.cdn });
      DebugTool.keyValue({ key: 'url', value: currentCDN.url });
    }

    return {
      update: update,
      tearDown: function tearDown() {
        media = undefined;
        currentCDN = undefined;
      }
    };
  }

  return CdnDebugOutput;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/debugger/chronicle.js":
/*!********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/debugger/chronicle.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  var chronicle = [];
  var firstTimeElement;
  var compressTime;
  var updateCallbacks = [];

  var TYPES = {
    INFO: 'info',
    ERROR: 'error',
    EVENT: 'event',
    APICALL: 'apicall',
    TIME: 'time',
    KEYVALUE: 'keyvalue'
  };

  function init() {
    clear();
  }

  function clear() {
    firstTimeElement = true;
    compressTime = false;
    chronicle = [];
  }

  function registerForUpdates(callback) {
    updateCallbacks.push(callback);
  }

  function unregisterForUpdates(callback) {
    var indexOf = updateCallbacks.indexOf(callback);
    if (indexOf !== -1) {
      updateCallbacks.splice(indexOf, 1);
    }
  }

  function info(message) {
    pushToChronicle({ type: TYPES.INFO, message: message });
  }

  function error(err) {
    pushToChronicle({ type: TYPES.ERROR, error: err });
  }

  function event(event) {
    pushToChronicle({ type: TYPES.EVENT, event: event });
  }

  function apicall(callType) {
    pushToChronicle({ type: TYPES.APICALL, calltype: callType });
  }

  function time(time) {
    if (firstTimeElement) {
      pushToChronicle({ type: TYPES.TIME, currentTime: time });
      firstTimeElement = false;
    } else if (!compressTime) {
      pushToChronicle({ type: TYPES.TIME, currentTime: time });
      compressTime = true;
    } else {
      var lastElement = chronicle.pop();
      lastElement.currentTime = time;
      pushToChronicle(lastElement);
    }
  }

  function keyValue(obj) {
    pushToChronicle({ type: TYPES.KEYVALUE, keyvalue: obj });
  }

  function retrieve() {
    return chronicle.slice();
  }

  function timestamp(obj) {
    obj.timestamp = new Date().getTime();
  }

  function pushToChronicle(obj) {
    if (obj.type !== TYPES.TIME) {
      firstTimeElement = true;
      compressTime = false;
    }
    timestamp(obj);
    chronicle.push(obj);
    updates();
  }

  function updates() {
    updateCallbacks.forEach(function (callback) {
      callback(retrieve());
    });
  }

  function tearDown() {
    clear();
  }

  return {
    init: init,
    TYPES: TYPES,
    clear: clear,
    info: info,
    error: error,
    event: event,
    apicall: apicall,
    time: time,
    keyValue: keyValue,
    retrieve: retrieve,
    tearDown: tearDown,
    registerForUpdates: registerForUpdates,
    unregisterForUpdates: unregisterForUpdates
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/debugger/debugpresenter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/debugger/debugpresenter.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/models/mediastate */ "./node_modules/bigscreen-player/script/models/mediastate.js"), __webpack_require__(/*! bigscreenplayer/debugger/chronicle */ "./node_modules/bigscreen-player/script/debugger/chronicle.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (MediaState, Chronicle) {
  'use strict';

  var view;

  function init(newView) {
    view = newView;
  }

  function update(logs) {
    view.render({ static: parseStaticFields(logs), dynamic: parseDynamicFields(logs) });
  }

  function parseStaticFields(logs) {
    var latestStaticFields = [];
    var staticFields = logs.filter(function (log) {
      return isStaticLog(log);
    });

    var uniqueKeys = findUniqueKeys(staticFields);
    uniqueKeys.forEach(function (key) {
      var matchingStaticLogs = staticFields.filter(function (log) {
        return log.keyvalue.key === key;
      });
      latestStaticFields.push(matchingStaticLogs.pop());
    });

    return latestStaticFields.map(function (field) {
      return { key: sanitiseKeyString(field.keyvalue.key), value: sanitiseValueString(field.keyvalue.value) };
    });
  }

  function parseDynamicFields(logs) {
    var dynamicLogs;

    dynamicLogs = logs.filter(function (log) {
      return !isStaticLog(log);
    }).map(function (log) {
      var dateString = new Date(log.timestamp).toISOString();
      switch (log.type) {
        case Chronicle.TYPES.INFO:
          return dateString + ' - Info: ' + log.message;
        case Chronicle.TYPES.TIME:
          return dateString + ' - Video time: ' + parseFloat(log.currentTime).toFixed(2);
        case Chronicle.TYPES.EVENT:
          return dateString + ' - Event: ' + convertToReadableEvent(log.event.state);
        case Chronicle.TYPES.ERROR:
          return dateString + ' - Error: ' + log.error.errorId + ' | ' + log.error.message;
        case Chronicle.TYPES.APICALL:
          return dateString + ' - Api call: ' + log.calltype;
        default:
          return dateString + ' - Unknown log format';
      }
    });

    return dynamicLogs;
  }

  function isStaticLog(log) {
    return log.type === Chronicle.TYPES.KEYVALUE;
  }

  function findUniqueKeys(logs) {
    var uniqueKeys = [];
    logs.forEach(function (log) {
      if (uniqueKeys.indexOf(log.keyvalue.key) === -1) {
        uniqueKeys.push(log.keyvalue.key);
      }
    });
    return uniqueKeys;
  }

  function sanitiseKeyString(key) {
    return key.replace(/([A-Z])/g, ' $1').toLowerCase();
  }

  function sanitiseValueString(value) {
    if (value instanceof Date) {
      var hours = zeroPadTimeUnits(value.getHours()) + value.getHours();
      var mins = zeroPadTimeUnits(value.getMinutes()) + value.getMinutes();
      var secs = zeroPadTimeUnits(value.getSeconds()) + value.getSeconds();
      return hours + ':' + mins + ':' + secs;
    }
    return value;
  }

  function zeroPadTimeUnits(unit) {
    return unit < 10 ? '0' : '';
  }

  function convertToReadableEvent(type) {
    for (var key in MediaState) {
      if (MediaState[key] === type) {
        return key;
      }
    }
    return type;
  }

  function tearDown() {
    view = undefined;
  }

  return {
    init: init,
    update: update,
    tearDown: tearDown
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/debugger/debugtool.js":
/*!********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/debugger/debugtool.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/debugger/chronicle */ "./node_modules/bigscreen-player/script/debugger/chronicle.js"), __webpack_require__(/*! bigscreenplayer/debugger/debugpresenter */ "./node_modules/bigscreen-player/script/debugger/debugpresenter.js"), __webpack_require__(/*! bigscreenplayer/debugger/debugview */ "./node_modules/bigscreen-player/script/debugger/debugview.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Chronicle, DebugPresenter, DebugView) {
  'use strict';

  function DebugTool() {
    var presenter = DebugPresenter;
    var view;
    var visible = false;

    var staticFieldValues = {};

    function toggleVisibility() {
      if (visible) {
        hide();
      } else {
        show();
      }
    }

    function show() {
      view = DebugView;
      view.init();
      presenter.init(view);
      Chronicle.registerForUpdates(presenter.update);
      visible = true;
    }

    function hide() {
      presenter.tearDown();
      view.tearDown();
      Chronicle.unregisterForUpdates(presenter.update);
      visible = false;
    }

    function updateKeyValue(message) {
      var staticFieldValue = staticFieldValues[message.key];

      if (staticFieldValue) {
        var entry = Chronicle.retrieve()[staticFieldValue.index];
        if (entry) {
          entry.keyvalue = message;
        }
      } else {
        staticFieldValues[message.key] = { value: message.value, index: Chronicle.retrieve().length };
        Chronicle.keyValue(message);
      }
    }

    function tearDown() {
      staticFieldValues = {};
    }

    return {
      toggleVisibility: toggleVisibility,
      info: Chronicle.info,
      error: Chronicle.error,
      event: Chronicle.event,
      time: Chronicle.time,
      apicall: Chronicle.apicall,
      keyValue: updateKeyValue,
      tearDown: tearDown
    };
  }

  var instance;

  if (instance === undefined) {
    instance = new DebugTool();
  }

  return instance;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/debugger/debugview.js":
/*!********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/debugger/debugview.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  var logBox, logContainer, staticContainer, staticBox;
  var appElement = document.getElementById('app');

  function init() {
    logBox = document.createElement('div');
    logContainer = document.createElement('span');
    staticBox = document.createElement('div');
    staticContainer = document.createElement('span');

    logBox.id = 'logBox';
    logBox.style.position = 'absolute';
    logBox.style.width = '63%';
    logBox.style.left = '5%';
    logBox.style.top = '15%';
    logBox.style.bottom = '25%';
    logBox.style.backgroundColor = '#1D1D1D';
    logBox.style.opacity = 0.9;
    logBox.style.overflow = 'hidden';

    staticBox.id = 'staticBox';
    staticBox.style.position = 'absolute';
    staticBox.style.width = '26%';
    staticBox.style.right = '5%';
    staticBox.style.top = '15%';
    staticBox.style.bottom = '25%';
    staticBox.style.backgroundColor = '#1D1D1D';
    staticBox.style.opacity = 0.9;
    staticBox.style.overflow = 'hidden';

    logContainer.id = 'logContainer';
    logContainer.style.color = '#ffffff';
    logContainer.style.fontSize = '11pt';
    logContainer.style.position = 'absolute';
    logContainer.style.bottom = '1%';
    logContainer.style.left = '1%';
    logContainer.style.wordWrap = 'break-word';
    logContainer.style.whiteSpace = 'pre-line';

    staticContainer.id = 'staticContainer';
    staticContainer.style.color = '#ffffff';
    staticContainer.style.fontSize = '11pt';
    staticContainer.style.wordWrap = 'break-word';
    staticContainer.style.left = '1%';
    staticContainer.style.whiteSpace = 'pre-line';

    logBox.appendChild(logContainer);
    staticBox.appendChild(staticContainer);
    appElement.appendChild(logBox);
    appElement.appendChild(staticBox);
  }

  function render(logData) {
    var dynamicLogs = logData.dynamic;
    var LINES_TO_DISPLAY = 29;
    if (dynamicLogs.length === 0) {
      logContainer.innerHTML = '';
    }

    dynamicLogs = dynamicLogs.slice(-LINES_TO_DISPLAY);
    logContainer.innerHTML = dynamicLogs.join('\n');

    var staticLogString = '';
    logData.static.forEach(function (log) {
      staticLogString = staticLogString + log.key + ': ' + log.value + '\n\n';
    });

    staticContainer.innerHTML = staticLogString;
  }

  function tearDown() {
    appElement.removeChild(document.getElementById('logBox'));
    appElement.removeChild(document.getElementById('staticBox'));
    staticContainer = undefined;
    logContainer = undefined;
    logBox = undefined;
    staticBox = undefined;
  }

  return {
    init: init,
    render: render,
    tearDown: tearDown
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/domhelpers.js":
/*!************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/domhelpers.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  var addClass = function addClass(el, className) {
    if (el.classList) {
      el.classList.add(className);
    } else {
      el.className += ' ' + className;
    }
  };

  var removeClass = function removeClass(el, className) {
    if (el.classList) {
      el.classList.remove(className);
    } else {
      el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  };

  var hasClass = function hasClass(el, className) {
    if (el.classList) {
      return el.classList.contains(className);
    } else {
      return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
    }
  };

  return {
    addClass: addClass,
    removeClass: removeClass,
    hasClass: hasClass
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/dynamicwindowutils.js":
/*!********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/dynamicwindowutils.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/models/livesupport */ "./node_modules/bigscreen-player/script/models/livesupport.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (LiveSupport) {
  'use strict';

  var FOUR_MINUTES = 4 * 60;

  function convertMilliSecondsToSeconds(timeInMilis) {
    return Math.floor(timeInMilis / 1000);
  }

  function hasFiniteSeekableRange(seekableRange) {
    var hasRange = true;
    try {
      hasRange = seekableRange.end !== Infinity;
    } catch (e) {}
    return hasRange;
  }

  function canSeek(windowStart, windowEnd, liveSupport, seekableRange) {
    return supportsSeeking(liveSupport) && initialWindowIsBigEnoughForSeeking(windowStart, windowEnd) && hasFiniteSeekableRange(seekableRange);
  }

  function canPause(windowStart, windowEnd, liveSupport) {
    return supportsPause(liveSupport) && initialWindowIsBigEnoughForSeeking(windowStart, windowEnd);
  }

  function initialWindowIsBigEnoughForSeeking(windowStart, windowEnd) {
    var start = convertMilliSecondsToSeconds(windowStart);
    var end = convertMilliSecondsToSeconds(windowEnd);
    return end - start > FOUR_MINUTES;
  }

  function supportsPause(liveSupport) {
    return liveSupport === LiveSupport.SEEKABLE || liveSupport === LiveSupport.RESTARTABLE;
  }

  function supportsSeeking(liveSupport) {
    return liveSupport === LiveSupport.SEEKABLE;
  }

  return {
    canPause: canPause,
    canSeek: canSeek
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/manifest/manifestloader.js":
/*!*************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/manifest/manifestloader.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/manifest/manifestparser */ "./node_modules/bigscreen-player/script/manifest/manifestparser.js"), __webpack_require__(/*! bigscreenplayer/models/transferformats */ "./node_modules/bigscreen-player/script/models/transferformats.js"), __webpack_require__(/*! bigscreenplayer/utils/loadurl */ "./node_modules/bigscreen-player/script/utils/loadurl.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (ManifestParser, TransferFormats, LoadUrl) {
  'use strict';

  function filterHLS(urls) {
    var filtered = [];
    for (var i = 0; i < urls.length; i++) {
      var isHLS = /\.m3u8($|\?.*$)/.test(urls[i].url);
      if (isHLS) {
        filtered.push(urls[i].url);
      }
    }
    return filtered;
  }

  function filterDash(urls) {
    var filtered = [];
    for (var i = 0; i < urls.length; i++) {
      var isDash = /\.mpd($|\?.*$)/.test(urls[i].url);
      if (isDash) {
        filtered.push(urls[i].url);
      }
    }
    return filtered;
  }

  function retrieveDashManifest(url, dateWithOffset, callbacks) {
    var xhr = LoadUrl(url, {
      method: 'GET',
      headers: {},
      timeout: 10000,
      onLoad: function onLoad() {
        try {
          if (xhr.responseXML) {
            callbacks.onSuccess({
              transferFormat: TransferFormats.DASH,
              time: ManifestParser.parse(xhr.responseXML, 'mpd', dateWithOffset)
            });
          } else {
            callbacks.onError('Unable to retrieve DASH XML response');
          }
        } catch (ex) {
          callbacks.onError('Unable to retrieve DASH XML response');
        }
      },
      onError: function onError() {
        callbacks.onError('Network error: Unable to retrieve DASH manifest');
      }
    });
  }

  function retrieveHLSManifest(url, dateWithOffset, callbacks) {
    LoadUrl(url, {
      method: 'GET',
      headers: {},
      timeout: 10000,
      onLoad: function onLoad(responseText) {
        var streamUrl;
        if (responseText) {
          streamUrl = getStreamUrl(responseText);
        }
        if (streamUrl) {
          if (!/^http/.test(streamUrl)) {
            var parts = url.split('/');
            parts.pop();
            parts.push(streamUrl);
            streamUrl = parts.join('/');
          }
          loadLivePlaylist(streamUrl, dateWithOffset, callbacks);
        } else {
          callbacks.onError('Unable to retrieve HLS master playlist');
        }
      },
      onError: function onError() {
        callbacks.onError('Network error: Unable to retrieve HLS master playlist');
      }
    });
  }

  function loadLivePlaylist(url, dateWithOffset, callbacks) {
    LoadUrl(url, {
      method: 'GET',
      headers: {},
      timeout: 10000,
      onLoad: function onLoad(responseText) {
        if (responseText) {
          callbacks.onSuccess({
            transferFormat: TransferFormats.HLS,
            time: ManifestParser.parse(responseText, 'm3u8', dateWithOffset)
          });
        } else {
          callbacks.onError('Unable to retrieve HLS live playlist');
        }
      },
      onError: function onError() {
        callbacks.onError('Network error: Unable to retrieve HLS live playlist');
      }
    });
  }

  function getStreamUrl(data) {
    var match = /#EXT-X-STREAM-INF:.*[\n\r]+(.*)[\n\r]?/.exec(data);
    if (match) {
      return match[1];
    }
  }

  return {
    load: function load(mediaUrls, serverDate, callbacks) {
      var hlsUrl = filterHLS(mediaUrls)[0];
      var dashUrl = filterDash(mediaUrls)[0];

      if (hlsUrl) {
        retrieveHLSManifest(hlsUrl, serverDate, callbacks);
      } else if (dashUrl) {
        retrieveDashManifest(dashUrl, serverDate, callbacks);
      } else {
        callbacks.onError('Invalid media url');
      }
    }
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/manifest/manifestmodifier.js":
/*!***************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/manifest/manifestmodifier.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  function filter(manifest, representationOptions) {
    var constantFps = representationOptions.constantFps;
    var maxFps = representationOptions.maxFps;

    if (constantFps || maxFps) {
      manifest.Period.AdaptationSet = manifest.Period.AdaptationSet.map(function (adaptationSet) {
        if (adaptationSet.contentType === 'video') {
          var frameRates = [];

          adaptationSet.Representation_asArray = adaptationSet.Representation_asArray.filter(function (representation) {
            if (!maxFps || representation.frameRate <= maxFps) {
              frameRates.push(representation.frameRate);
              return true;
            }
          }).filter(function (representation) {
            return !constantFps || representation.frameRate === Math.max.apply(null, frameRates);
          });
        }
        return adaptationSet;
      });
    }
    return manifest;
  }

  function extractBaseUrl(manifest) {
    return manifest.Period && manifest.Period.BaseURL || manifest.BaseURL && manifest.BaseURL.__text;
  }

  function generateBaseUrls(manifest, sources) {
    var baseUrl = extractBaseUrl(manifest);
    if (!baseUrl || baseUrl.match(/^https?:\/\//)) return;

    var baseUrls = sources.map(function (source, priority) {
      var sourceUrl = new URL(baseUrl, source.url);
      return {
        __text: sourceUrl.href,
        'dvb:priority': priority,
        serviceLocation: source.cdn
      };
    });

    manifest.BaseURL_asArray = baseUrls;
    if (manifest && manifest.Period && manifest.Period.BaseURL) delete manifest.Period.BaseURL;
    if (manifest && manifest.Period && manifest.Period.BaseURL_asArray) delete manifest.Period.BaseURL_asArray;
  }

  return {
    filter: filter,
    extractBaseUrl: extractBaseUrl,
    generateBaseUrls: generateBaseUrls
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/manifest/manifestparser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/manifest/manifestparser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/utils/timeutils */ "./node_modules/bigscreen-player/script/utils/timeutils.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (TimeUtils) {
  'use strict';

  function parseMPD(manifest, dateWithOffset) {
    try {
      var mpd = manifest.getElementsByTagName('MPD')[0];

      var availabilityStartTime = Date.parse(mpd.getAttribute('availabilityStartTime'));

      var tsbdAttr = mpd.getAttribute('timeShiftBufferDepth');
      var timeShiftBufferDepth = tsbdAttr && TimeUtils.durationToSeconds(tsbdAttr);

      // Getting zeroth SegmentTemplate may grab either audio or video
      // data. This shouldn't matter as we only use the factor of
      // duration/timescale, which is the same for both.
      var segmentTemplate = manifest.getElementsByTagName('SegmentTemplate')[0];
      var timescale = parseFloat(segmentTemplate.getAttribute('timescale'));
      var duration = parseFloat(segmentTemplate.getAttribute('duration'));
      var oneSegment = 1000 * duration / timescale;

      if (availabilityStartTime && oneSegment) {
        var windowEndTime = dateWithOffset - (timeShiftBufferDepth ? availabilityStartTime : 0) - oneSegment;
        var windowStartTime = timeShiftBufferDepth ? windowEndTime - timeShiftBufferDepth * 1000 : availabilityStartTime;
        var timeCorrection = timeShiftBufferDepth ? windowStartTime / 1000 : 0;
      } else {
        return { error: 'Error parsing DASH manifest attributes' };
      }

      return {
        windowStartTime: windowStartTime,
        windowEndTime: windowEndTime,
        correction: timeCorrection
      };
    } catch (e) {
      return { error: 'Error parsing DASH manifest' };
    }
  }

  function parseM3U8(manifest) {
    var windowStartTime = getM3U8ProgramDateTime(manifest);
    var duration = getM3U8WindowSizeInSeconds(manifest);

    if (windowStartTime && duration) {
      var windowEndTime = windowStartTime + duration * 1000;
    } else {
      return { error: 'Error parsing HLS manifest' };
    }
    return {
      windowStartTime: windowStartTime,
      windowEndTime: windowEndTime
    };
  }

  function getM3U8ProgramDateTime(data) {
    var programDateTime;
    var match = /^#EXT-X-PROGRAM-DATE-TIME:(.*)$/m.exec(data);
    if (match) {
      var parsedDate = Date.parse(match[1]);
      if (!isNaN(parsedDate)) {
        programDateTime = parsedDate;
      }
    }
    return programDateTime;
  }

  function getM3U8WindowSizeInSeconds(data) {
    var regex = /#EXTINF:(\d+(?:\.\d+)?)/g;
    var matches = regex.exec(data);
    var result = 0;
    while (matches) {
      result += +matches[1];
      matches = regex.exec(data);
    }
    return Math.floor(result);
  }

  function parse(manifest, type, dateWithOffset) {
    if (type === 'mpd') {
      return parseMPD(manifest, dateWithOffset);
    } else if (type === 'm3u8') {
      return parseM3U8(manifest);
    }
  }

  return {
    parse: parse
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/mediaresilience.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/mediaresilience.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js"), __webpack_require__(/*! bigscreenplayer/models/livesupport */ "./node_modules/bigscreen-player/script/models/livesupport.js"), __webpack_require__(/*! bigscreenplayer/models/transferformats */ "./node_modules/bigscreen-player/script/models/transferformats.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (WindowTypes, LiveSupport, TransferFormats) {
  'use strict';

  function shouldFailover(remainingUrls, duration, currentTime, liveSupport, windowType, transferFormat) {
    var aboutToEnd = duration && currentTime > duration - 5;
    var shouldStaticFailover = windowType === WindowTypes.STATIC && !aboutToEnd;
    var shouldLiveFailover = windowType !== WindowTypes.STATIC && (transferFormat === TransferFormats.DASH || liveSupport !== LiveSupport.RESTARTABLE);
    return remainingUrls > 1 && (shouldStaticFailover || shouldLiveFailover);
  }

  return {
    shouldFailover: shouldFailover
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/mockbigscreenplayer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/mockbigscreenplayer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/models/mediastate */ "./node_modules/bigscreen-player/script/models/mediastate.js"), __webpack_require__(/*! bigscreenplayer/models/pausetriggers */ "./node_modules/bigscreen-player/script/models/pausetriggers.js"), __webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js"), __webpack_require__(/*! bigscreenplayer/utils/playbackutils */ "./node_modules/bigscreen-player/script/utils/playbackutils.js"), __webpack_require__(/*! bigscreenplayer/plugins */ "./node_modules/bigscreen-player/script/plugins.js"), __webpack_require__(/*! bigscreenplayer/plugindata */ "./node_modules/bigscreen-player/script/plugindata.js"), __webpack_require__(/*! bigscreenplayer/pluginenums */ "./node_modules/bigscreen-player/script/pluginenums.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (MediaState, PauseTriggers, WindowTypes, PlaybackUtils, Plugins, PluginData, PluginEnums) {
  var sourceList;
  var source;
  var cdn;

  var timeUpdateCallbacks = [];
  var stateChangeCallbacks = [];

  var currentTime;
  var seekableRange;
  var duration;
  var liveWindowStart;
  var pausedState = true;
  var endedState;
  var mediaKind;
  var windowType;
  var subtitlesAvailable;
  var subtitlesEnabled;
  var endOfStream;
  var canSeekState;
  var canPauseState;
  var shallowClone;
  var mockModes = {
    NONE: 0,
    PLAIN: 1,
    JASMINE: 2
  };
  var mockStatus = { currentlyMocked: false, mode: mockModes.NONE };
  var initialised;
  var fatalErrorBufferingTimeout;

  var autoProgress;
  var autoProgressInterval;
  var initialBuffering = false;

  var liveWindowData;
  var manifestError;

  function startProgress(progressCause) {
    setTimeout(function () {
      if (!autoProgressInterval) {
        mockingHooks.changeState(MediaState.PLAYING, progressCause);
        autoProgressInterval = setInterval(function () {
          if (windowType !== WindowTypes.STATIC && seekableRange.start && seekableRange.end) {
            seekableRange.start += 0.5;
            seekableRange.end += 0.5;
          }
          mockingHooks.progressTime(currentTime + 0.5);
          if (currentTime >= duration) {
            clearInterval(autoProgressInterval);
            mockingHooks.changeState(MediaState.ENDED);
          }
        }, 500);
      }
    }, 100);
  }

  function stopProgress() {
    if (autoProgressInterval) {
      clearInterval(autoProgressInterval);
      autoProgressInterval = null;
    }
  }

  function mock(BigscreenPlayer, opts) {
    autoProgress = opts && opts.autoProgress;

    if (mockStatus.currentlyMocked) {
      throw new Error('mock() was called while BigscreenPlayer was already mocked');
    }
    shallowClone = PlaybackUtils.clone(BigscreenPlayer);

    // Divert existing functions
    for (var mock in mockFunctions) {
      BigscreenPlayer[mock] = mockFunctions[mock];
    }
    // Add extra functions
    for (var hook in mockingHooks) {
      BigscreenPlayer[hook] = mockingHooks[hook];
    }
    mockStatus = { currentlyMocked: true, mode: mockModes.PLAIN };
  }

  function mockJasmine(BigscreenPlayer, opts) {
    autoProgress = opts && opts.autoProgress;

    if (mockStatus.currentlyMocked) {
      throw new Error('mockJasmine() was called while BigscreenPlayer was already mocked');
    }

    for (var mock in mockFunctions) {
      if (BigscreenPlayer[mock]) {
        spyOn(BigscreenPlayer, mock).and.callFake(mockFunctions[mock]);
      }
    }

    for (var hook in mockingHooks) {
      BigscreenPlayer[hook] = mockingHooks[hook];
    }
    mockStatus = { currentlyMocked: true, mode: mockModes.JASMINE };
  }

  function unmock(BigscreenPlayer) {
    if (!mockStatus.currentlyMocked) {
      throw new Error('unmock() was called before BigscreenPlayer was mocked');
    }

    // Remove extra functions
    for (var hook in mockingHooks) {
      delete BigscreenPlayer[hook];
    }
    // Undo divert existing functions (plain mock only)
    if (mockStatus.mode === mockModes.PLAIN) {
      for (var func in shallowClone) {
        BigscreenPlayer[func] = shallowClone[func];
      }
    }

    timeUpdateCallbacks = [];
    stateChangeCallbacks = [];

    mockStatus = { currentlyMocked: false, mode: mockModes.NONE };
  }

  var mockFunctions = {
    init: function init(playbackElement, bigscreenPlayerData, newWindowType, enableSubtitles, device, callbacks) {
      currentTime = bigscreenPlayerData && bigscreenPlayerData.initialPlaybackTime || 0;
      liveWindowStart = undefined;
      pausedState = true;
      endedState = false;
      mediaKind = bigscreenPlayerData && bigscreenPlayerData.media && bigscreenPlayerData.media.kind || 'video';
      windowType = newWindowType || WindowTypes.STATIC;
      subtitlesAvailable = true;
      subtitlesEnabled = false;
      canSeekState = true;
      canPauseState = true;
      sourceList = bigscreenPlayerData && bigscreenPlayerData.media && bigscreenPlayerData.media.urls;
      source = sourceList && sourceList[0].url;
      cdn = sourceList && sourceList[0].cdn;

      duration = windowType === WindowTypes.STATIC ? 4808 : Infinity;
      seekableRange = { start: 0, end: 4808 };

      if (manifestError) {
        if (callbacks && callbacks.onError) {
          callbacks.onError({ error: 'manifest' });
        }
        return;
      }

      mockingHooks.changeState(MediaState.WAITING);

      if (autoProgress && !initialBuffering) {
        startProgress();
      }

      initialised = true;

      if (callbacks && callbacks.onSuccess) {
        callbacks.onSuccess();
      }
    },
    registerForTimeUpdates: function registerForTimeUpdates(callback) {
      timeUpdateCallbacks.push(callback);
      return callback;
    },
    unregisterForTimeUpdates: function unregisterForTimeUpdates(callback) {
      var indexOf = timeUpdateCallbacks.indexOf(callback);

      if (indexOf !== -1) {
        timeUpdateCallbacks.splice(indexOf, 1);
      }
    },
    registerForStateChanges: function registerForStateChanges(callback) {
      stateChangeCallbacks.push(callback);
      return callback;
    },
    unregisterForStateChanges: function unregisterForStateChanges(callback) {
      var indexOf = stateChangeCallbacks.indexOf(callback);

      if (indexOf !== -1) {
        stateChangeCallbacks.splice(indexOf, 1);
      }
    },
    setCurrentTime: function setCurrentTime(time) {
      currentTime = time;
      if (autoProgress) {
        if (!pausedState) {
          mockingHooks.changeState(MediaState.WAITING, 'other');
          startProgress();
        }
      } else {
        mockingHooks.progressTime(currentTime);
      }
    },
    getCurrentTime: function getCurrentTime() {
      return currentTime;
    },
    getMediaKind: function getMediaKind() {
      return mediaKind;
    },
    getWindowType: function getWindowType() {
      return windowType;
    },
    getSeekableRange: function getSeekableRange() {
      return seekableRange;
    },
    getDuration: function getDuration() {
      return duration;
    },
    isPaused: function isPaused() {
      return pausedState;
    },
    isEnded: function isEnded() {
      return endedState;
    },
    play: function play() {
      if (autoProgress) {
        startProgress('other');
      } else {
        mockingHooks.changeState(MediaState.PLAYING, 'other');
      }
    },
    pause: function pause(opts) {
      mockingHooks.changeState(MediaState.PAUSED, 'other', opts);
    },
    setSubtitlesEnabled: function setSubtitlesEnabled(value) {
      subtitlesEnabled = value;
    },
    isSubtitlesEnabled: function isSubtitlesEnabled() {
      return subtitlesEnabled;
    },
    isSubtitlesAvailable: function isSubtitlesAvailable() {
      return subtitlesAvailable;
    },
    setTransportControlsPosition: function setTransportControlsPosition(position) {},
    canSeek: function canSeek() {
      return canSeekState;
    },
    canPause: function canPause() {
      return canPauseState;
    },
    convertVideoTimeSecondsToEpochMs: function convertVideoTimeSecondsToEpochMs(seconds) {
      return liveWindowStart ? liveWindowStart + seconds * 1000 : undefined;
    },
    transitions: function transitions() {
      return {
        canBePaused: function canBePaused() {
          return true;
        },
        canBeginSeek: function canBeginSeek() {
          return true;
        }
      };
    },
    getPlayerElement: function getPlayerElement() {
      return;
    },
    tearDown: function tearDown() {
      manifestError = false;
      if (!initialised) {
        return;
      }

      Plugins.interface.onBufferingCleared(new PluginData({ status: PluginEnums.STATUS.DISMISSED, stateType: PluginEnums.TYPE.BUFFERING, properties: { dismissed_by: 'teardown' }, isInitialPlay: initialBuffering }));
      Plugins.interface.onErrorCleared(new PluginData({ status: PluginEnums.STATUS.DISMISSED, stateType: PluginEnums.TYPE.ERROR, properties: { dismissed_by: 'teardown' } }));
      Plugins.unregisterPlugin();

      timeUpdateCallbacks = [];
      stateChangeCallbacks = [];

      if (autoProgress) {
        stopProgress();
      }

      initialised = false;
    },
    registerPlugin: function registerPlugin(plugin) {
      Plugins.registerPlugin(plugin);
    },
    unregisterPlugin: function unregisterPlugin(plugin) {
      Plugins.unregisterPlugin(plugin);
    },
    getLiveWindowData: function getLiveWindowData() {
      if (windowType === WindowTypes.STATIC) {
        return {};
      }
      return {
        windowStartTime: liveWindowData.windowStartTime,
        windowEndTime: liveWindowData.windowEndTime,
        initialPlaybackTime: liveWindowData.initialPlaybackTime,
        serverDate: liveWindowData.serverDate
      };
    }
  };

  var mockingHooks = {
    changeState: function changeState(state, eventTrigger, opts) {
      eventTrigger = eventTrigger || 'device';
      var pauseTrigger = opts && opts.userPause === false ? PauseTriggers.APP : PauseTriggers.USER;

      pausedState = state === MediaState.PAUSED || state === MediaState.STOPPED || state === MediaState.ENDED;
      endedState = state === MediaState.ENDED;

      if (state === MediaState.WAITING) {
        fatalErrorBufferingTimeout = true;
        Plugins.interface.onBuffering(new PluginData({ status: PluginEnums.STATUS.STARTED, stateType: PluginEnums.TYPE.BUFFERING }));
      } else {
        Plugins.interface.onBufferingCleared(new PluginData({ status: PluginEnums.STATUS.DISMISSED, stateType: PluginEnums.TYPE.BUFFERING, properties: { dismissed_by: eventTrigger }, isInitialPlay: initialBuffering }));
      }
      Plugins.interface.onErrorCleared(new PluginData({ status: PluginEnums.STATUS.DISMISSED, stateType: PluginEnums.TYPE.ERROR, properties: { dismissed_by: eventTrigger } }));

      if (state === MediaState.FATAL_ERROR) {
        Plugins.interface.onFatalError(new PluginData({ status: PluginEnums.STATUS.FATAL, stateType: PluginEnums.TYPE.ERROR, isBufferingTimeoutError: fatalErrorBufferingTimeout }));
      }

      var stateObject = { state: state };
      if (state === MediaState.PAUSED) {
        stateObject.trigger = pauseTrigger;
        endOfStream = false;
      }
      if (state === MediaState.FATAL_ERROR) {
        stateObject.errorId = opts && opts.error;
        stateObject.isBufferingTimeoutError = opts && opts.isBufferingTimeoutError;
      }
      stateObject.endOfStream = endOfStream;

      stateChangeCallbacks.forEach(function (callback) {
        callback(stateObject);
      });

      if (autoProgress) {
        if (state !== MediaState.PLAYING) {
          stopProgress();
        } else {
          startProgress();
        }
      }
    },
    progressTime: function progressTime(time) {
      currentTime = time;
      timeUpdateCallbacks.forEach(function (callback) {
        callback({
          currentTime: time,
          endOfStream: endOfStream
        });
      });
    },
    setEndOfStream: function setEndOfStream(isEndOfStream) {
      endOfStream = isEndOfStream;
    },
    setDuration: function setDuration(mediaDuration) {
      duration = mediaDuration;
    },
    setSeekableRange: function setSeekableRange(newSeekableRange) {
      seekableRange = newSeekableRange;
    },
    setMediaKind: function setMediaKind(kind) {
      mediaKind = kind;
    },
    setWindowType: function setWindowType(type) {
      windowType = type;
    },
    setCanSeek: function setCanSeek(value) {
      canSeekState = value;
    },
    setCanPause: function setCanPause(value) {
      canPauseState = value;
    },
    setLiveWindowStart: function setLiveWindowStart(value) {
      liveWindowStart = value;
    },
    setSubtitlesAvailable: function setSubtitlesAvailable(value) {
      subtitlesAvailable = value;
    },
    getSource: function getSource() {
      return source;
    },
    triggerError: function triggerError() {
      fatalErrorBufferingTimeout = false;
      Plugins.interface.onError(new PluginData({ status: PluginEnums.STATUS.STARTED, stateType: PluginEnums.TYPE.ERROR, isBufferingTimeoutError: false }));
      this.changeState(MediaState.WAITING);
      stopProgress();
    },
    triggerManifestError: function triggerManifestError() {
      manifestError = true;
    },
    triggerErrorHandled: function triggerErrorHandled() {
      if (sourceList && sourceList.length > 1) {
        sourceList.shift();
        source = sourceList[0].url;
        cdn = sourceList[0].cdn;
      }
      Plugins.interface.onBufferingCleared(new PluginData({ status: PluginEnums.STATUS.DISMISSED, stateType: PluginEnums.TYPE.BUFFERING, properties: { dismissed_by: 'timeout' }, isInitialPlay: initialBuffering }));
      Plugins.interface.onErrorCleared(new PluginData({ status: PluginEnums.STATUS.DISMISSED, stateType: PluginEnums.TYPE.ERROR, properties: { dismissed_by: 'timeout' } }));
      Plugins.interface.onErrorHandled(new PluginData({ status: PluginEnums.STATUS.FAILOVER, stateType: PluginEnums.TYPE.ERROR, isBufferingTimeoutError: fatalErrorBufferingTimeout, cdn: cdn }));

      if (autoProgress) {
        stopProgress();
        startProgress();
      }
    },
    setInitialBuffering: function setInitialBuffering(value) {
      initialBuffering = value;
    },
    setLiveWindowData: function setLiveWindowData(newLiveWindowData) {
      liveWindowData = newLiveWindowData;
    }
  };

  return {
    mock: mock,
    unmock: unmock,
    mockJasmine: mockJasmine
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/models/livesupport.js":
/*!********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/models/livesupport.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  var LiveSupport = {
    NONE: 'none',
    PLAYABLE: 'playable',
    RESTARTABLE: 'restartable',
    SEEKABLE: 'seekable'
  };

  return LiveSupport;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/models/mediakinds.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/models/mediakinds.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  return {
    AUDIO: 'audio',
    VIDEO: 'video'
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/models/mediastate.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/models/mediastate.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  /**
   * Enumeration of possible media states.
   */

  var MediaState = {
    /** Media is stopped and is not attempting to start. */
    STOPPED: 0,
    /** Media is paused. */
    PAUSED: 1,
    /** Media is playing successfully. */
    PLAYING: 2,
    /** Media is waiting for data (buffering). */
    WAITING: 4,
    /** Media is seeking backwards or forwards. */
    ENDED: 5,
    /** Media has thrown a fatal error. */
    FATAL_ERROR: 6
  };

  return MediaState;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/models/pausetriggers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/models/pausetriggers.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  var PauseTriggers = {
    USER: 1,
    APP: 2,
    DEVICE: 3
  };

  return PauseTriggers;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/models/transferformats.js":
/*!************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/models/transferformats.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  return {
    DASH: 'dash',
    HLS: 'hls'
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/models/transportcontrolposition.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/models/transportcontrolposition.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  /**
   * Enumeration of on-screen transport control positions, which can be combined as bit flags.
   */

  var TransportControlPosition = {
    /** No transport controls are visible. */
    NONE: 0,
    /** The basic transport controls are visible. */
    CONTROLS_ONLY: 1,
    /** The transport controls are visible with an expanded info area. */
    CONTROLS_WITH_INFO: 2,
    /** The left-hand onwards navigation carousel is visible. */
    LEFT_CAROUSEL: 4,
    /** The bottom-right onwards navigation carousel is visible. */
    BOTTOM_CAROUSEL: 8,
    /** The whole screen is obscured by a navigation menu. */
    FULLSCREEN: 16
  };

  return TransportControlPosition;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/models/windowtypes.js":
/*!********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/models/windowtypes.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  return {
    STATIC: 'staticWindow',
    GROWING: 'growingWindow',
    SLIDING: 'slidingWindow'
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackspinner.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackspinner.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  return function () {
    var spinnerContainer = document.createElement('div');
    spinnerContainer.id = 'loadingSpinner';
    spinnerContainer.className = 'loadingSpinner loadingSpinner--large ';

    var spinner = document.createElement('div');
    spinner.className = 'loadingSpinner__spinner';

    spinnerContainer.appendChild(spinner);

    return spinnerContainer;
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy sync recursive ^\\.\\/.*$":
/*!*****************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy sync ^\.\/.*$ ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./hybridstrategy": "./node_modules/bigscreen-player/script/playbackstrategy/hybridstrategy.js",
	"./hybridstrategy.js": "./node_modules/bigscreen-player/script/playbackstrategy/hybridstrategy.js",
	"./legacyplayeradapter": "./node_modules/bigscreen-player/script/playbackstrategy/legacyplayeradapter.js",
	"./legacyplayeradapter.js": "./node_modules/bigscreen-player/script/playbackstrategy/legacyplayeradapter.js",
	"./liveglitchcurtain": "./node_modules/bigscreen-player/script/playbackstrategy/liveglitchcurtain.js",
	"./liveglitchcurtain.js": "./node_modules/bigscreen-player/script/playbackstrategy/liveglitchcurtain.js",
	"./mockstrategy": "./node_modules/bigscreen-player/script/playbackstrategy/mockstrategy.js",
	"./mockstrategy.js": "./node_modules/bigscreen-player/script/playbackstrategy/mockstrategy.js",
	"./modifiers/html5": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/html5.js",
	"./modifiers/html5.js": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/html5.js",
	"./modifiers/live/playable": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/playable.js",
	"./modifiers/live/playable.js": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/playable.js",
	"./modifiers/live/restartable": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/restartable.js",
	"./modifiers/live/restartable.js": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/restartable.js",
	"./modifiers/live/seekable": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/seekable.js",
	"./modifiers/live/seekable.js": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/seekable.js",
	"./modifiers/mediaplayerbase": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/mediaplayerbase.js",
	"./modifiers/mediaplayerbase.js": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/mediaplayerbase.js",
	"./msestrategy": "./node_modules/bigscreen-player/script/playbackstrategy/msestrategy.js",
	"./msestrategy.js": "./node_modules/bigscreen-player/script/playbackstrategy/msestrategy.js",
	"./nativestrategy": "./node_modules/bigscreen-player/script/playbackstrategy/nativestrategy.js",
	"./nativestrategy.js": "./node_modules/bigscreen-player/script/playbackstrategy/nativestrategy.js",
	"./strategypicker": "./node_modules/bigscreen-player/script/playbackstrategy/strategypicker.js",
	"./strategypicker.js": "./node_modules/bigscreen-player/script/playbackstrategy/strategypicker.js",
	"./talstrategy": "./node_modules/bigscreen-player/script/playbackstrategy/talstrategy.js",
	"./talstrategy.js": "./node_modules/bigscreen-player/script/playbackstrategy/talstrategy.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/bigscreen-player/script/playbackstrategy sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/hybridstrategy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/hybridstrategy.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/playbackstrategy/nativestrategy */ "./node_modules/bigscreen-player/script/playbackstrategy/nativestrategy.js"), __webpack_require__(/*! bigscreenplayer/playbackstrategy/msestrategy */ "./node_modules/bigscreen-player/script/playbackstrategy/msestrategy.js"), __webpack_require__(/*! bigscreenplayer/playbackstrategy/strategypicker */ "./node_modules/bigscreen-player/script/playbackstrategy/strategypicker.js"), __webpack_require__(/*! bigscreenplayer/models/livesupport */ "./node_modules/bigscreen-player/script/models/livesupport.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Native, MSE, StrategyPicker, LiveSupport) {
  var HybridStrategy = function HybridStrategy(windowType, mediaKind, timeCorrection, videoElement, isUHD, device, cdnDebugOutput) {
    var strategy = StrategyPicker(windowType, isUHD);

    if (strategy === 'mseStrategy') {
      return MSE(windowType, mediaKind, timeCorrection, videoElement, isUHD, device, cdnDebugOutput);
    }

    return Native(windowType, mediaKind, timeCorrection, videoElement, isUHD, device, cdnDebugOutput);
  };

  HybridStrategy.getLiveSupport = function () {
    return LiveSupport.SEEKABLE;
  };

  return HybridStrategy;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/legacyplayeradapter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/legacyplayeradapter.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/allowedmediatransitions */ "./node_modules/bigscreen-player/script/allowedmediatransitions.js"), __webpack_require__(/*! bigscreenplayer/models/mediastate */ "./node_modules/bigscreen-player/script/models/mediastate.js"), __webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js"), __webpack_require__(/*! bigscreenplayer/debugger/debugtool */ "./node_modules/bigscreen-player/script/debugger/debugtool.js"), __webpack_require__(/*! bigscreenplayer/playbackstrategy/liveglitchcurtain */ "./node_modules/bigscreen-player/script/playbackstrategy/liveglitchcurtain.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (AllowedMediaTransitions, MediaState, WindowTypes, DebugTool, LiveGlitchCurtain) {
  return function (windowType, mediaKind, timeData, playbackElement, isUHD, deviceConfig, player) {
    var EVENT_HISTORY_LENGTH = 2;

    var mediaPlayer = player;
    var transitions = new AllowedMediaTransitions(mediaPlayer);
    var eventHistory = [];
    var eventCallback;
    var errorCallback;
    var timeUpdateCallback;
    var currentTime;
    var timeCorrection = timeData && timeData.correction || 0;
    var duration = 0;
    var _isPaused;
    var _isEnded = false;
    var hasStartTime;

    var handleErrorOnExitingSeek;
    var delayPauseOnExitSeek;

    var pauseOnExitSeek;
    var exitingSeek;
    var targetSeekToTime;

    var liveGlitchCurtain;

    var strategy = window.bigscreenPlayer && window.bigscreenPlayer.playbackStrategy;
    var config = deviceConfig;
    var setSourceOpts = {
      disableSentinels: !!isUHD && windowType !== WindowTypes.STATIC && config.streaming && config.streaming.liveUhdDisableSentinels
    };

    mediaPlayer.addEventCallback(this, eventHandler);

    strategy = strategy.match(/.+(?=strategy)/g)[0];

    function eventHandler(event) {
      var handleEvent = {
        'playing': onPlaying,
        'paused': onPaused,
        'buffering': onBuffering,
        'seek-attempted': onSeekAttempted,
        'seek-finished': onSeekFinished,
        'status': onTimeUpdate,
        'complete': onEnded,
        'error': onError
      };

      if (handleEvent.hasOwnProperty(event.type)) {
        handleEvent[event.type].call(this, event);
      } else {
        DebugTool.info(getSelection() + ' Event:' + event.type);
      }

      if (event.type !== 'status') {
        if (eventHistory.length >= EVENT_HISTORY_LENGTH) {
          eventHistory.pop();
        }
        eventHistory.unshift({ type: event.type, time: new Date().getTime() });
      }
    }

    function onPlaying(event) {
      currentTime = event.currentTime - timeCorrection;
      _isPaused = false;
      _isEnded = false;
      duration = duration || event.duration;
      publishMediaState(MediaState.PLAYING);
    }

    function onPaused(event) {
      _isPaused = true;
      publishMediaState(MediaState.PAUSED);
    }

    function onBuffering(event) {
      _isEnded = false;
      publishMediaState(MediaState.WAITING);
    }

    function onTimeUpdate(event) {
      _isPaused = false;
      currentTime = event.currentTime - timeCorrection;
      // Must publish this time update before checkSeekSucceded - which could cause a pause event
      // This is a device specific event ordering issue.
      publishTimeUpdate();
      if ((handleErrorOnExitingSeek || delayPauseOnExitSeek) && exitingSeek) {
        checkSeekSucceeded(event.seekableRange.start, event.currentTime);
      }
    }

    function onEnded() {
      _isPaused = true;
      _isEnded = true;
      publishMediaState(MediaState.ENDED);
    }

    function onError(event) {
      if (handleErrorOnExitingSeek && exitingSeek) {
        restartMediaPlayer();
      } else {
        event.errorProperties = createEventHistoryLabels();
        event.errorProperties.error_mssg = event.errorMessage;
        publishError(event);
      }
    }

    function onSeekAttempted(event) {
      showCurtain();
    }

    function onSeekFinished(event) {
      hideCurtain();
    }

    function publishMediaState(mediaState) {
      if (eventCallback) {
        eventCallback(mediaState);
      }
    }

    function publishError(errorEvent) {
      if (errorCallback) {
        errorCallback(errorEvent);
      }
    }

    function publishTimeUpdate() {
      if (timeUpdateCallback) {
        timeUpdateCallback();
      }
    }

    function getStrategy() {
      return strategy.toUpperCase();
    }

    function createEventHistoryLabels() {
      var properties = {};
      var now = new Date().getTime();
      for (var i = 0; i < eventHistory.length; i++) {
        properties['event_history_' + (i + 1)] = eventHistory[i].type;
        properties['event_history_time_' + (i + 1)] = now - eventHistory[i].time;
      }
      return properties;
    }

    function setupExitSeekWorkarounds(mimeType) {
      handleErrorOnExitingSeek = windowType !== WindowTypes.STATIC && mimeType === 'application/dash+xml';

      var capabilities = config.capabilities || [];
      var deviceFailsPlayAfterPauseOnExitSeek = capabilities.indexOf('playFailsAfterPauseOnExitSeek') !== -1;
      delayPauseOnExitSeek = handleErrorOnExitingSeek || deviceFailsPlayAfterPauseOnExitSeek;
    }

    function checkSeekSucceeded(seekableRangeStart, currentTime) {
      var SEEK_TOLERANCE = 30;

      var clampedSeekToTime = Math.max(seekableRangeStart, targetSeekToTime);
      var successfullySeeked = Math.abs(currentTime - clampedSeekToTime) < SEEK_TOLERANCE;

      if (successfullySeeked) {
        if (pauseOnExitSeek) {
          // Delay call to pause until seek has completed
          // successfully for scenarios which can error upon exiting seek.
          mediaPlayer.pause();
          pauseOnExitSeek = false;
        }
        exitingSeek = false;
      }
    }

    // Dash live streams can error on exiting seek when the start of the
    // seekable range has overtaken the point where the stream was paused
    // Workaround - reset the media player then do a fresh beginPlaybackFrom()
    function restartMediaPlayer() {
      exitingSeek = false;
      pauseOnExitSeek = false;
      var source = mediaPlayer.getSource();
      var mimeType = mediaPlayer.getMimeType();

      reset();
      mediaPlayer.initialiseMedia('video', source, mimeType, playbackElement, setSourceOpts);
      mediaPlayer.beginPlaybackFrom(currentTime + timeCorrection || 0);
    }

    function showCurtain() {
      var doNotForceBeginPlaybackToEndOfWindow = {
        forceBeginPlaybackToEndOfWindow: false
      };

      var streaming = config.streaming || {
        overrides: doNotForceBeginPlaybackToEndOfWindow
      };

      var overrides = streaming.overrides || doNotForceBeginPlaybackToEndOfWindow;

      var shouldShowCurtain = windowType !== WindowTypes.STATIC && (hasStartTime || overrides.forceBeginPlaybackToEndOfWindow);

      if (shouldShowCurtain) {
        liveGlitchCurtain = new LiveGlitchCurtain(playbackElement);
        liveGlitchCurtain.showCurtain();
      }
    }

    function hideCurtain() {
      if (liveGlitchCurtain) {
        liveGlitchCurtain.hideCurtain();
      }
    }

    function reset() {
      if (transitions.canBeStopped()) {
        mediaPlayer.stop();
      }
      mediaPlayer.reset();
    }

    return {
      transitions: transitions,
      addEventCallback: function addEventCallback(thisArg, newCallback) {
        eventCallback = function eventCallback(event) {
          newCallback.call(thisArg, event);
        };
      },
      addErrorCallback: function addErrorCallback(thisArg, newErrorCallback) {
        errorCallback = function errorCallback(event) {
          newErrorCallback.call(thisArg, event);
        };
      },
      addTimeUpdateCallback: function addTimeUpdateCallback(thisArg, newTimeUpdateCallback) {
        timeUpdateCallback = function timeUpdateCallback() {
          newTimeUpdateCallback.call(thisArg);
        };
      },
      load: function load(cdns, mimeType, startTime) {
        var source = cdns[0].url;
        setupExitSeekWorkarounds(mimeType);
        _isPaused = false;

        hasStartTime = startTime || startTime === 0;
        var isPlaybackFromLivePoint = windowType !== WindowTypes.STATIC && !hasStartTime;

        mediaPlayer.initialiseMedia('video', source, mimeType, playbackElement, setSourceOpts);
        if (mediaPlayer.beginPlaybackFrom && !isPlaybackFromLivePoint) {
          currentTime = startTime;
          mediaPlayer.beginPlaybackFrom(startTime + timeCorrection || 0);
        } else {
          mediaPlayer.beginPlayback();
        }
        DebugTool.keyValue({ key: 'strategy', value: getStrategy() });
      },
      play: function play() {
        _isPaused = false;
        if (delayPauseOnExitSeek && exitingSeek) {
          pauseOnExitSeek = false;
        } else {
          if (_isEnded) {
            mediaPlayer.playFrom(0);
          } else if (transitions.canResume()) {
            mediaPlayer.resume();
          } else {
            mediaPlayer.playFrom(currentTime + timeCorrection);
          }
        }
      },
      pause: function pause(options) {
        // TODO - transitions is checked in playerComponent. The check can be removed here.
        if (delayPauseOnExitSeek && exitingSeek && transitions.canBePaused()) {
          pauseOnExitSeek = true;
        } else {
          mediaPlayer.pause(options);
        }
      },
      isPaused: function isPaused() {
        return _isPaused;
      },
      isEnded: function isEnded() {
        return _isEnded;
      },
      getDuration: function getDuration() {
        return duration;
      },
      getPlayerElement: function getPlayerElement() {
        return mediaPlayer.getPlayerElement && mediaPlayer.getPlayerElement();
      },
      getSeekableRange: function getSeekableRange() {
        if (windowType === WindowTypes.STATIC) {
          return {
            start: 0,
            end: duration
          };
        } else {
          var seekableRange = mediaPlayer.getSeekableRange && mediaPlayer.getSeekableRange() || {};
          if (seekableRange.hasOwnProperty('start')) {
            seekableRange.start = seekableRange.start - timeCorrection;
          }
          if (seekableRange.hasOwnProperty('end')) {
            seekableRange.end = seekableRange.end - timeCorrection;
          }
          return seekableRange;
        }
      },
      getCurrentTime: function getCurrentTime() {
        return currentTime;
      },
      setCurrentTime: function setCurrentTime(seekToTime) {
        _isEnded = false;
        currentTime = seekToTime;
        seekToTime += timeCorrection;

        if (handleErrorOnExitingSeek || delayPauseOnExitSeek) {
          targetSeekToTime = seekToTime;
          exitingSeek = true;
          pauseOnExitSeek = _isPaused;
        }

        mediaPlayer.playFrom(seekToTime);
        if (_isPaused && !delayPauseOnExitSeek) {
          mediaPlayer.pause();
        }
      },
      getStrategy: getStrategy(),
      reset: reset,
      tearDown: function tearDown() {
        mediaPlayer.removeAllEventCallbacks();
        pauseOnExitSeek = false;
        exitingSeek = false;
        pauseOnExitSeek = false;
        delayPauseOnExitSeek = false;
        _isPaused = true;
        _isEnded = false;
        if (liveGlitchCurtain) {
          liveGlitchCurtain.tearDown();
          liveGlitchCurtain = undefined;
        }
        eventCallback = undefined;
        errorCallback = undefined;
        timeUpdateCallback = undefined;
      }
    };
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/liveglitchcurtain.js":
/*!************************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/liveglitchcurtain.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/playbackspinner */ "./node_modules/bigscreen-player/script/playbackspinner.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (PlaybackSpinner) {
  return function (parentElement) {
    var curtain;
    var spinner = new PlaybackSpinner();

    curtain = document.createElement('div');

    curtain.id = 'liveGlitchCurtain';
    curtain.style.display = 'none';
    curtain.style.position = 'absolute';
    curtain.style.top = 0;
    curtain.style.left = 0;
    curtain.style.right = 0;
    curtain.style.bottom = 0;
    curtain.style.backgroundColor = '#3c3c3c';

    curtain.appendChild(spinner);

    return {
      showCurtain: function showCurtain() {
        curtain.style.display = 'block';
        parentElement.appendChild(curtain);
      },

      hideCurtain: function hideCurtain() {
        curtain.style.display = 'none';
        curtain.removeChild(spinner);
      },

      tearDown: function tearDown() {
        if (curtain) {
          parentElement.removeChild(curtain);
        }

        if (spinner) {
          spinner = undefined;
        }
      }
    };
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/mockstrategy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/mockstrategy.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  var eventCallback;
  var errorCallback;
  var timeUpdateCallback;
  var instance = {
    transitions: {
      canBePaused: function canBePaused() {
        return true;
      },
      canBeginSeek: function canBeginSeek() {
        return true;
      }
    },
    addEventCallback: function addEventCallback(thisArg, callback) {
      eventCallback = function eventCallback(event) {
        callback.call(thisArg, event);
      };
    },
    addErrorCallback: function addErrorCallback(thisArg, callback) {
      errorCallback = function errorCallback(event) {
        callback.call(thisArg, event);
      };
    },
    addTimeUpdateCallback: function addTimeUpdateCallback(thisArg, callback) {
      timeUpdateCallback = function timeUpdateCallback() {
        callback.call(thisArg);
      };
    },
    getSeekableRange: function getSeekableRange() {
      return {
        start: 0,
        end: 0
      };
    },
    getCurrentTime: function getCurrentTime() {
      return;
    },
    getDuration: function getDuration() {
      return;
    },
    load: function load() {
      return;
    },
    play: function play() {
      return;
    },
    pause: function pause() {
      return;
    },
    reset: function reset() {
      return;
    },
    tearDown: function tearDown() {
      return;
    },
    isEnded: function isEnded() {
      return;
    },
    getPlayerElement: function getPlayerElement() {
      return;
    },
    setCurrentTime: function setCurrentTime() {
      return;
    },
    isPaused: function isPaused() {
      return;
    },
    mockingHooks: {
      fireEvent: function fireEvent(event) {
        eventCallback(event);
      },
      fireErrorEvent: function fireErrorEvent(event) {
        errorCallback(event);
      },
      fireTimeUpdate: function fireTimeUpdate() {
        timeUpdateCallback();
      }
    }
  };

  var MockStrategy = function MockStrategy(playbackFrame, playbackType, streamType, mediaType, timeData, videoContainer) {
    return instance;
  };

  MockStrategy.getLiveSupport = function () {
    return 'seekable';
  };

  return MockStrategy;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/html5.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/modifiers/html5.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/playbackstrategy/modifiers/mediaplayerbase */ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/mediaplayerbase.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (MediaPlayerBase) {
  'use strict';

  function Player(logger) {
    var eventCallback;
    var eventCallbacks = [];
    var state = MediaPlayerBase.STATE.EMPTY;

    var mediaElement;
    var sourceElement;

    var trustZeroes = false;
    var ignoreNextPauseEvent = false;
    var nearEndOfMedia;
    var readyToPlayFrom;

    var mediaType;
    var source;
    var mimeType;

    var postBufferingState;
    var targetSeekTime;

    var disableSentinels;
    var hasSentinelTimeChangedWithinTolerance;
    var enterBufferingSentinelAttemptCount;
    var sentinelSeekTime;
    var seekSentinelTolerance;
    var sentinelInterval;
    var sentinelIntervalNumber;
    var lastSentinelTime;

    var sentinelLimits = {
      pause: {
        maximumAttempts: 2,
        successEvent: MediaPlayerBase.EVENT.SENTINEL_PAUSE,
        failureEvent: MediaPlayerBase.EVENT.SENTINEL_PAUSE_FAILURE,
        currentAttemptCount: 0
      },
      seek: {
        maximumAttempts: 2,
        successEvent: MediaPlayerBase.EVENT.SENTINEL_SEEK,
        failureEvent: MediaPlayerBase.EVENT.SENTINEL_SEEK_FAILURE,
        currentAttemptCount: 0
      }
    };

    function emitEvent(eventType, eventLabels) {
      var event = {
        type: eventType,
        currentTime: getCurrentTime(),
        seekableRange: _getSeekableRange(),
        duration: getDuration(),
        url: getSource(),
        mimeType: getMimeType(),
        state: getState()
      };

      if (eventLabels) {
        for (var key in eventLabels) {
          if (eventLabels.hasOwnProperty(key)) {
            event[key] = eventLabels[key];
          }
        }
      }

      for (var index = 0; index < eventCallbacks.length; index++) {
        eventCallbacks[index](event);
      }
    }

    function getDuration() {
      switch (getState()) {
        case MediaPlayerBase.STATE.STOPPED:
        case MediaPlayerBase.STATE.ERROR:
          return undefined;
        default:
          if (isLiveMedia()) {
            return Infinity;
          }
          return getMediaDuration();
      }
    }

    function getSource() {
      return source;
    }

    function getMimeType() {
      return mimeType;
    }

    function getState() {
      return state;
    }

    function isLiveMedia() {
      return mediaType === MediaPlayerBase.TYPE.LIVE_VIDEO || mediaType === MediaPlayerBase.TYPE.LIVE_AUDIO;
    }

    function setSeekSentinelTolerance() {
      var ON_DEMAND_SEEK_SENTINEL_TOLERANCE = 15;
      var LIVE_SEEK_SENTINEL_TOLERANCE = 30;

      seekSentinelTolerance = ON_DEMAND_SEEK_SENTINEL_TOLERANCE;
      if (isLiveMedia()) {
        seekSentinelTolerance = LIVE_SEEK_SENTINEL_TOLERANCE;
      }
    }

    function generateSourceElement(url, mimeType) {
      var sourceElement = document.createElement('source');
      sourceElement.src = url;
      sourceElement.type = mimeType;
      return sourceElement;
    }

    function appendChildElement(to, el) {
      to.appendChild(el);
    }

    function prependChildElement(to, el) {
      if (to.childNodes.length > 0) {
        to.insertBefore(el, to.childNodes[0]);
      } else {
        to.appendChild(el);
      }
    }

    function removeElement(el) {
      if (el.parentNode) {
        el.parentNode.removeChild(el);
      }
    }

    function toStopped() {
      state = MediaPlayerBase.STATE.STOPPED;
      emitEvent(MediaPlayerBase.EVENT.STOPPED);
      setSentinels([]);
    }

    function enterBufferingSentinel() {
      var sentinelShouldFire = !hasSentinelTimeChangedWithinTolerance && !nearEndOfMedia;

      if (getCurrentTime() === 0) {
        sentinelShouldFire = trustZeroes && sentinelShouldFire;
      }

      if (enterBufferingSentinelAttemptCount === undefined) {
        enterBufferingSentinelAttemptCount = 0;
      }

      if (sentinelShouldFire) {
        enterBufferingSentinelAttemptCount++;
      } else {
        enterBufferingSentinelAttemptCount = 0;
      }

      if (enterBufferingSentinelAttemptCount === 1) {
        sentinelShouldFire = false;
      }

      if (sentinelShouldFire) {
        emitEvent(MediaPlayerBase.EVENT.SENTINEL_ENTER_BUFFERING);
        toBuffering();
        /* Resetting the sentinel attempt count to zero means that the sentinel will only fire once
         even if multiple iterations result in the same conditions.
         This should not be needed as the second iteration, when the enter buffering sentinel is fired
         will cause the media player to go into the buffering state. The enter buffering sentinel is not fired
         when in buffering state
         */
        enterBufferingSentinelAttemptCount = 0;
        return true;
      }

      return false;
    }

    function exitBufferingSentinel() {
      function fireExitBufferingSentinel() {
        emitEvent(MediaPlayerBase.EVENT.SENTINEL_EXIT_BUFFERING);
        exitBuffering();
        return true;
      }

      if (readyToPlayFrom && mediaElement.paused) {
        return fireExitBufferingSentinel();
      }

      if (hasSentinelTimeChangedWithinTolerance) {
        return fireExitBufferingSentinel();
      }
      return false;
    }

    function shouldBeSeekedSentinel() {
      if (sentinelSeekTime === undefined) {
        return false;
      }

      var currentTime = getCurrentTime();
      var sentinelActionTaken = false;

      if (Math.abs(currentTime - sentinelSeekTime) > seekSentinelTolerance) {
        sentinelActionTaken = nextSentinelAttempt(sentinelLimits.seek, function () {
          mediaElement.currentTime = sentinelSeekTime;
        });
      } else if (sentinelIntervalNumber < 3) {
        sentinelSeekTime = currentTime;
      } else {
        sentinelSeekTime = undefined;
      }

      return sentinelActionTaken;
    }

    function shouldBePausedSentinel() {
      var sentinelActionTaken = false;
      if (hasSentinelTimeChangedWithinTolerance) {
        sentinelActionTaken = nextSentinelAttempt(sentinelLimits.pause, function () {
          pauseMediaElement();
        });
      }

      return sentinelActionTaken;
    }

    function nextSentinelAttempt(sentinelInfo, attemptFn) {
      var currentAttemptCount, maxAttemptCount;

      sentinelInfo.currentAttemptCount += 1;
      currentAttemptCount = sentinelInfo.currentAttemptCount;
      maxAttemptCount = sentinelInfo.maximumAttempts;

      if (currentAttemptCount === maxAttemptCount + 1) {
        emitEvent(sentinelInfo.failureEvent);
      }

      if (currentAttemptCount <= maxAttemptCount) {
        attemptFn();
        emitEvent(sentinelInfo.successEvent);
        return true;
      }

      return false;
    }

    function endOfMediaSentinel() {
      if (!hasSentinelTimeChangedWithinTolerance && nearEndOfMedia) {
        emitEvent(MediaPlayerBase.EVENT.SENTINEL_COMPLETE);
        onEndOfMedia();
        return true;
      }
      return false;
    }

    function clearSentinels() {
      clearInterval(sentinelInterval);
    }

    function setSentinels(sentinels) {
      if (disableSentinels) {
        return;
      }

      clearSentinels();
      sentinelIntervalNumber = 0;
      lastSentinelTime = getCurrentTime();
      sentinelInterval = setInterval(function () {
        sentinelIntervalNumber += 1;
        var newTime = getCurrentTime();

        hasSentinelTimeChangedWithinTolerance = Math.abs(newTime - lastSentinelTime) > 0.2;
        nearEndOfMedia = getDuration() - (newTime || lastSentinelTime) <= 1;
        lastSentinelTime = newTime;

        for (var i = 0; i < sentinels.length; i++) {
          var sentinelActivated = sentinels[i].call();

          if (getCurrentTime() > 0) {
            trustZeroes = false;
          }

          if (sentinelActivated) {
            break;
          }
        }
      }, 1100);
    }

    function reportError(errorMessage) {
      logger.error(errorMessage);
      emitEvent(MediaPlayerBase.EVENT.ERROR);
    }

    function toBuffering() {
      state = MediaPlayerBase.STATE.BUFFERING;
      emitEvent(MediaPlayerBase.EVENT.BUFFERING);
      setSentinels([exitBufferingSentinel]);
    }

    function toComplete() {
      state = MediaPlayerBase.STATE.COMPLETE;
      emitEvent(MediaPlayerBase.EVENT.COMPLETE);
      setSentinels([]);
    }

    function toEmpty() {
      wipe();
      state = MediaPlayerBase.STATE.EMPTY;
    }

    function toError(errorMessage) {
      wipe();
      state = MediaPlayerBase.STATE.ERROR;
      reportError(errorMessage);
    }

    function isReadyToPlayFrom() {
      if (readyToPlayFrom !== undefined) {
        return readyToPlayFrom;
      }
      return false;
    }

    function getMediaDuration() {
      if (mediaElement && isReadyToPlayFrom()) {
        return mediaElement.duration;
      }
      return undefined;
    }

    function _getSeekableRange() {
      if (mediaElement) {
        if (isReadyToPlayFrom() && mediaElement.seekable && mediaElement.seekable.length > 0) {
          return {
            start: mediaElement.seekable.start(0),
            end: mediaElement.seekable.end(0)
          };
        } else if (mediaElement.duration !== undefined) {
          return {
            start: 0,
            end: mediaElement.duration
          };
        } else {
          logger.warn('No \'duration\' or \'seekable\' on media element');
        }
      }
      return undefined;
    }

    function onFinishedBuffering() {
      exitBuffering();
    }

    function pauseMediaElement() {
      mediaElement.pause();
      ignoreNextPauseEvent = true;
    }

    function onPause() {
      if (ignoreNextPauseEvent) {
        ignoreNextPauseEvent = false;
        return;
      }

      if (getState() !== MediaPlayerBase.STATE.PAUSED) {
        toPaused();
      }
    }

    function onError() {
      reportError('Media element error code: ' + mediaElement.error.code);
    }

    function onSourceError() {
      reportError('Media source element error');
    }

    function onDeviceBuffering() {
      if (getState() === MediaPlayerBase.STATE.PLAYING) {
        toBuffering();
      }
    }

    function onEndOfMedia() {
      toComplete();
    }

    function onStatus() {
      if (getState() === MediaPlayerBase.STATE.PLAYING) {
        emitEvent(MediaPlayerBase.EVENT.STATUS);
      }
    }

    function onMetadata() {
      metadataLoaded();
    }

    function exitBuffering() {
      metadataLoaded();
      if (getState() !== MediaPlayerBase.STATE.BUFFERING) {
        return;
      } else if (postBufferingState === MediaPlayerBase.STATE.PAUSED) {
        toPaused();
      } else {
        toPlaying();
      }
    }

    function metadataLoaded() {
      readyToPlayFrom = true;
      if (waitingToPlayFrom()) {
        deferredPlayFrom();
      }
    }

    function playFromIfReady() {
      if (isReadyToPlayFrom()) {
        if (waitingToPlayFrom()) {
          deferredPlayFrom();
        }
      }
    }

    function waitingToPlayFrom() {
      return targetSeekTime !== undefined;
    }

    function deferredPlayFrom() {
      seekTo(targetSeekTime);
      mediaElement.play();
      if (postBufferingState === MediaPlayerBase.STATE.PAUSED) {
        pauseMediaElement();
      }
      targetSeekTime = undefined;
    }

    function seekTo(seconds) {
      var clampedTime = getClampedTimeForPlayFrom(seconds);
      mediaElement.currentTime = clampedTime;
      sentinelSeekTime = clampedTime;
    }

    function getCurrentTime() {
      switch (getState()) {
        case MediaPlayerBase.STATE.STOPPED:
        case MediaPlayerBase.STATE.ERROR:
          break;

        default:
          if (mediaElement) {
            return mediaElement.currentTime;
          }
          break;
      }
      return undefined;
    }

    /**
      * Time (in seconds) compared to current time within which seeking has no effect.
      * @constant {Number}
    */
    var CURRENT_TIME_TOLERANCE = 1;

    /**
      * Check whether a time value is near to the current media play time.
      * @param {Number} seconds The time value to test, in seconds from the start of the media
      * @protected
    */
    function isNearToCurrentTime(seconds) {
      var currentTime = getCurrentTime();
      var targetTime = getClampedTime(seconds);
      return Math.abs(currentTime - targetTime) <= CURRENT_TIME_TOLERANCE;
    }

    /**
      * Clamp a time value so it does not exceed the current range.
      * Clamps to near the end instead of the end itself to allow for devices that cannot seek to the very end of the media.
      * @param {Number} seconds The time value to clamp in seconds from the start of the media
      * @protected
    */
    function getClampedTime(seconds) {
      var range = _getSeekableRange();
      var offsetFromEnd = getClampOffsetFromConfig();
      var nearToEnd = Math.max(range.end - offsetFromEnd, range.start);
      if (seconds < range.start) {
        return range.start;
      } else if (seconds > nearToEnd) {
        return nearToEnd;
      } else {
        return seconds;
      }
    }

    /**
      * Offset used when attempting to playFrom() the end of media. This allows the media to play briefly before completing.
      * @constant {Number}
    */
    var CLAMP_OFFSET_FROM_END_OF_RANGE = 1.1;

    function getClampOffsetFromConfig() {
      var clampOffsetFromEndOfRange;

      // TODO: can we tidy this, is it needed any more? If so we can combine it into bigscreen-player configs
      // if (config && config.streaming && config.streaming.overrides) {
      //   clampOffsetFromEndOfRange = config.streaming.overrides.clampOffsetFromEndOfRange;
      // }

      if (clampOffsetFromEndOfRange !== undefined) {
        return clampOffsetFromEndOfRange;
      } else {
        return CLAMP_OFFSET_FROM_END_OF_RANGE;
      }
    }

    function getClampedTimeForPlayFrom(seconds) {
      var clampedTime = getClampedTime(seconds);
      var range = _getSeekableRange();
      if (clampedTime !== seconds) {
        logger.debug('play From ' + seconds + ' clamped to ' + clampedTime + ' - seekable range is { start: ' + range.start + ', end: ' + range.end + ' }');
      }
      return clampedTime;
    }

    function wipe() {
      mediaType = undefined;
      source = undefined;
      mimeType = undefined;
      targetSeekTime = undefined;
      sentinelSeekTime = undefined;
      clearSentinels();
      destroyMediaElement();
      readyToPlayFrom = false;
    }

    function destroyMediaElement() {
      if (mediaElement) {
        mediaElement.removeEventListener('canplay', onFinishedBuffering, false);
        mediaElement.removeEventListener('seeked', onFinishedBuffering, false);
        mediaElement.removeEventListener('playing', onFinishedBuffering, false);
        mediaElement.removeEventListener('error', onError, false);
        mediaElement.removeEventListener('ended', onEndOfMedia, false);
        mediaElement.removeEventListener('waiting', onDeviceBuffering, false);
        mediaElement.removeEventListener('timeupdate', onStatus, false);
        mediaElement.removeEventListener('loadedmetadata', onMetadata, false);
        mediaElement.removeEventListener('pause', onPause, false);
        sourceElement.removeEventListener('error', onSourceError, false);

        removeElement(sourceElement);
        unloadMediaSrc();
        removeElement(mediaElement);

        mediaElement = null;
        sourceElement = null;
      }
    }

    function unloadMediaSrc() {
      // Reset source as advised by HTML5 video spec, section 4.8.10.15:
      // http://www.w3.org/TR/2011/WD-html5-20110405/video.html#best-practices-for-authors-using-media-elements
      mediaElement.removeAttribute('src');
      mediaElement.load();
    }

    function toPaused() {
      state = MediaPlayerBase.STATE.PAUSED;
      emitEvent(MediaPlayerBase.EVENT.PAUSED);
      setSentinels([shouldBeSeekedSentinel, shouldBePausedSentinel]);
    }

    function toPlaying() {
      state = MediaPlayerBase.STATE.PLAYING;
      emitEvent(MediaPlayerBase.EVENT.PLAYING);
      setSentinels([endOfMediaSentinel, shouldBeSeekedSentinel, enterBufferingSentinel]);
    }

    return {
      addEventCallback: function addEventCallback(thisArg, newCallback) {
        eventCallback = function eventCallback(event) {
          newCallback.call(thisArg, event);
        };
        eventCallbacks.push(eventCallback);
      },

      removeEventCallback: function removeEventCallback(callback) {
        var index = eventCallbacks.indexOf(callback);
        if (index !== -1) {
          eventCallbacks.splice(index, 1);
        }
      },

      removeAllEventCallbacks: function removeAllEventCallbacks() {
        eventCallbacks = undefined;
      },

      initialiseMedia: function initialiseMedia(type, url, mediaMimeType, sourceContainer, opts) {
        disableSentinels = opts.disableSentinels;
        mediaType = type;
        source = url;
        mimeType = mediaMimeType;
        opts = opts || {};

        if (getState() === MediaPlayerBase.STATE.EMPTY) {
          var idSuffix = 'Video';
          if (mediaType === MediaPlayerBase.TYPE.AUDIO || mediaType === MediaPlayerBase.TYPE.LIVE_AUDIO) {
            idSuffix = 'Audio';
          }

          setSeekSentinelTolerance();

          mediaElement = document.createElement(idSuffix.toLowerCase(), 'mediaPlayer' + idSuffix);
          mediaElement.autoplay = false;
          mediaElement.style.position = 'absolute';
          mediaElement.style.top = '0px';
          mediaElement.style.left = '0px';
          mediaElement.style.width = '100%';
          mediaElement.style.height = '100%';

          mediaElement.addEventListener('canplay', onFinishedBuffering, false);
          mediaElement.addEventListener('seeked', onFinishedBuffering, false);
          mediaElement.addEventListener('playing', onFinishedBuffering, false);
          mediaElement.addEventListener('error', onError, false);
          mediaElement.addEventListener('ended', onEndOfMedia, false);
          mediaElement.addEventListener('waiting', onDeviceBuffering, false);
          mediaElement.addEventListener('timeupdate', onStatus, false);
          mediaElement.addEventListener('loadedmetadata', onMetadata, false);
          mediaElement.addEventListener('pause', onPause, false);

          prependChildElement(sourceContainer, mediaElement);

          sourceElement = generateSourceElement(url, mimeType);
          sourceElement.addEventListener('error', onSourceError, false);

          mediaElement.preload = 'auto';
          appendChildElement(mediaElement, sourceElement);

          mediaElement.load();

          toStopped();
        } else {
          toError('Cannot set source unless in the \'' + MediaPlayerBase.STATE.EMPTY + '\' state');
        }
      },

      playFrom: function playFrom(seconds) {
        postBufferingState = MediaPlayerBase.STATE.PLAYING;
        targetSeekTime = seconds;
        sentinelLimits.seek.currentAttemptCount = 0;

        switch (getState()) {
          case MediaPlayerBase.STATE.PAUSED:
          case MediaPlayerBase.STATE.COMPLETE:
            trustZeroes = true;
            toBuffering();
            playFromIfReady();
            break;

          case MediaPlayerBase.STATE.BUFFERING:
            playFromIfReady();
            break;

          case MediaPlayerBase.STATE.PLAYING:
            trustZeroes = true;
            toBuffering();
            targetSeekTime = getClampedTimeForPlayFrom(seconds);
            if (isNearToCurrentTime(targetSeekTime)) {
              targetSeekTime = undefined;
              toPlaying();
            } else {
              playFromIfReady();
            }
            break;

          default:
            toError('Cannot playFrom while in the \'' + getState() + '\' state');
            break;
        }
      },

      beginPlayback: function beginPlayback() {
        postBufferingState = MediaPlayerBase.STATE.PLAYING;
        sentinelSeekTime = undefined;
        switch (getState()) {
          case MediaPlayerBase.STATE.STOPPED:
            trustZeroes = true;
            toBuffering();
            mediaElement.play();
            break;

          default:
            toError('Cannot beginPlayback while in the \'' + getState() + '\' state');
            break;
        }
      },

      beginPlaybackFrom: function beginPlaybackFrom(seconds) {
        postBufferingState = MediaPlayerBase.STATE.PLAYING;
        targetSeekTime = seconds;
        sentinelLimits.seek.currentAttemptCount = 0;

        switch (this.getState()) {
          case MediaPlayerBase.STATE.STOPPED:
            trustZeroes = true;
            toBuffering();
            playFromIfReady();
            break;

          default:
            toError('Cannot beginPlaybackFrom while in the \'' + getState() + '\' state');
            break;
        }
      },

      pause: function pause() {
        postBufferingState = MediaPlayerBase.STATE.PAUSED;
        switch (getState()) {
          case MediaPlayerBase.STATE.PAUSED:
            break;

          case MediaPlayerBase.STATE.BUFFERING:
            sentinelLimits.pause.currentAttemptCount = 0;
            if (isReadyToPlayFrom()) {
              // If we are not ready to playFrom, then calling pause would seek to the start of media, which we might not want.
              pauseMediaElement();
            }
            break;

          case MediaPlayerBase.STATE.PLAYING:
            sentinelLimits.pause.currentAttemptCount = 0;
            pauseMediaElement();
            toPaused();
            break;

          default:
            toError('Cannot pause while in the \'' + getState() + '\' state');
            break;
        }
      },

      resume: function resume() {
        postBufferingState = MediaPlayerBase.STATE.PLAYING;
        switch (getState()) {
          case MediaPlayerBase.STATE.PLAYING:
            break;

          case MediaPlayerBase.STATE.BUFFERING:
            if (isReadyToPlayFrom()) {
              // If we are not ready to playFrom, then calling play would seek to the start of media, which we might not want.
              mediaElement.play();
            }
            break;

          case MediaPlayerBase.STATE.PAUSED:
            mediaElement.play();
            toPlaying();
            break;

          default:
            toError('Cannot resume while in the \'' + getState() + '\' state');
            break;
        }
      },

      stop: function stop() {
        switch (getState()) {
          case MediaPlayerBase.STATE.STOPPED:
            break;

          case MediaPlayerBase.STATE.BUFFERING:
          case MediaPlayerBase.STATE.PLAYING:
          case MediaPlayerBase.STATE.PAUSED:
          case MediaPlayerBase.STATE.COMPLETE:
            pauseMediaElement();
            toStopped();
            break;

          default:
            toError('Cannot stop while in the \'' + getState() + '\' state');
            break;
        }
      },

      reset: function reset() {
        switch (getState()) {
          case MediaPlayerBase.STATE.EMPTY:
            break;

          case MediaPlayerBase.STATE.STOPPED:
          case MediaPlayerBase.STATE.ERROR:
            toEmpty();
            break;

          default:
            toError('Cannot reset while in the \'' + getState() + '\' state');
            break;
        }
      },

      getSeekableRange: function getSeekableRange() {
        switch (getState()) {
          case MediaPlayerBase.STATE.STOPPED:
          case MediaPlayerBase.STATE.ERROR:
            break;

          default:
            return _getSeekableRange();
        }
        return undefined;
      },

      getState: function getState() {
        return state;
      },

      getPlayerElement: function getPlayerElement() {
        return mediaElement;
      },

      getSource: getSource,

      getMimeType: getMimeType,

      getCurrentTime: getCurrentTime,

      getDuration: getDuration,

      toPaused: toPaused,

      toPlaying: toPlaying

    };
  }

  return Player;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live sync recursive ^\\.\\/.*$":
/*!********************************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live sync ^\.\/.*$ ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./playable": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/playable.js",
	"./playable.js": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/playable.js",
	"./restartable": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/restartable.js",
	"./restartable.js": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/restartable.js",
	"./seekable": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/seekable.js",
	"./seekable.js": "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/seekable.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/playable.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/playable.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/playbackstrategy/modifiers/html5 */ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/html5.js"), __webpack_require__(/*! bigscreenplayer/playbackstrategy/modifiers/mediaplayerbase */ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/mediaplayerbase.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Html5Player, MediaPlayerBase) {
  'use strict';

  function PlayableLivePlayer(deviceConfig, logger) {
    var mediaPlayer = Html5Player(logger);
    return {
      beginPlayback: function beginPlayback() {
        mediaPlayer.beginPlayback();
      },

      initialiseMedia: function initialiseMedia(mediaType, sourceUrl, mimeType, sourceContainer, opts) {
        if (mediaType === MediaPlayerBase.TYPE.AUDIO) {
          mediaType = MediaPlayerBase.TYPE.LIVE_AUDIO;
        } else {
          mediaType = MediaPlayerBase.TYPE.LIVE_VIDEO;
        }

        mediaPlayer.initialiseMedia(mediaType, sourceUrl, mimeType, sourceContainer, opts);
      },

      stop: function stop() {
        mediaPlayer.stop();
      },

      reset: function reset() {
        mediaPlayer.reset();
      },

      getState: function getState() {
        return mediaPlayer.getState();
      },

      getSource: function getSource() {
        return mediaPlayer.getSource();
      },

      getMimeType: function getMimeType() {
        return mediaPlayer.getMimeType();
      },

      addEventCallback: function addEventCallback(thisArg, callback) {
        mediaPlayer.addEventCallback(thisArg, callback);
      },

      removeEventCallback: function removeEventCallback(thisArg, callback) {
        mediaPlayer.removeEventCallback(thisArg, callback);
      },

      removeAllEventCallbacks: function removeAllEventCallbacks() {
        mediaPlayer.removeAllEventCallbacks();
      },

      getPlayerElement: function getPlayerElement() {
        return mediaPlayer.getPlayerElement();
      }
    };
  }

  return PlayableLivePlayer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/restartable.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/restartable.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/playbackstrategy/modifiers/html5 */ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/html5.js"), __webpack_require__(/*! bigscreenplayer/playbackstrategy/modifiers/mediaplayerbase */ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/mediaplayerbase.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Html5Player, MediaPlayerBase) {
  'use strict';

  var AUTO_RESUME_WINDOW_START_CUSHION_MILLISECONDS = 8000;

  function RestartableLivePlayer(deviceConfig, logger) {
    var mediaPlayer = Html5Player(logger);
    var millisecondsUntilStartOfWindow;
    var bufferingStarted;
    var self = this;

    function determineTimeUntilStartOfWindow() {
      mediaPlayer.addEventCallback(self, detectCurrentTimeCallback);
    }

    function stopDeterminingTimeUntilStartOfWindow() {
      mediaPlayer.removeEventCallback(self, detectCurrentTimeCallback);
    }

    function detectCurrentTimeCallback(event) {
      if (event.state === MediaPlayerBase.STATE.PLAYING && event.currentTime > 0) {
        removeEventCallback(self, detectCurrentTimeCallback);
        millisecondsUntilStartOfWindow = event.currentTime * 1000;
        determineTimeSpentBuffering();
      }
    }

    function autoResumeAtStartOfRange() {
      if (millisecondsUntilStartOfWindow !== null) {
        var resumeTimeOut = Math.max(0, millisecondsUntilStartOfWindow - AUTO_RESUME_WINDOW_START_CUSHION_MILLISECONDS);
        var pauseStarted = new Date().getTime();
        var autoResumeTimer = setTimeout(function () {
          removeEventCallback(self, detectIfUnpaused);
          millisecondsUntilStartOfWindow = 0;
          resume();
        }, resumeTimeOut);

        addEventCallback(self, detectIfUnpaused);
      }

      function detectIfUnpaused(event) {
        if (event.state !== MediaPlayerBase.STATE.PAUSED) {
          removeEventCallback(self, detectIfUnpaused);
          clearTimeout(autoResumeTimer);
          var timePaused = new Date().getTime() - pauseStarted;
          millisecondsUntilStartOfWindow -= timePaused;
        }
      }
    }

    function addEventCallback(thisArg, callback) {
      mediaPlayer.addEventCallback(thisArg, callback);
    }

    function removeEventCallback(thisArg, callback) {
      mediaPlayer.removeEventCallback(thisArg, callback);
    }

    function removeAllEventCallbacks() {
      mediaPlayer.removeAllEventCallbacks();
    }

    function determineTimeSpentBuffering() {
      bufferingStarted = null;
      addEventCallback(self, determineBufferingCallback);
    }

    function stopDeterminingTimeSpentBuffering() {
      removeEventCallback(self, determineBufferingCallback);
    }

    function determineBufferingCallback(event) {
      if (event.state === MediaPlayerBase.STATE.BUFFERING && bufferingStarted === null) {
        bufferingStarted = new Date().getTime();
      } else if (event.state !== MediaPlayerBase.STATE.BUFFERING && bufferingStarted !== null) {
        var timeBuffering = new Date().getTime() - bufferingStarted;
        millisecondsUntilStartOfWindow = Math.max(0, millisecondsUntilStartOfWindow - timeBuffering);
        bufferingStarted = null;
      }
    }

    function resume() {
      mediaPlayer.resume();
    }

    function pause(opts) {
      mediaPlayer.pause();
      opts = opts || {};
      if (opts.disableAutoResume !== true) {
        autoResumeAtStartOfRange();
      }
    }

    return {
      beginPlayback: function beginPlayback() {
        var config = deviceConfig;

        if (config && config.streaming && config.streaming.overrides && config.streaming.overrides.forceBeginPlaybackToEndOfWindow) {
          mediaPlayer.beginPlaybackFrom(Infinity);
        } else {
          mediaPlayer.beginPlayback();
        }

        determineTimeUntilStartOfWindow();
      },

      beginPlaybackFrom: function beginPlaybackFrom(offset) {
        millisecondsUntilStartOfWindow = offset * 1000;
        mediaPlayer.beginPlaybackFrom(offset);
        determineTimeSpentBuffering();
      },

      initialiseMedia: function initialiseMedia(mediaType, sourceUrl, mimeType, sourceContainer, opts) {
        if (mediaType === MediaPlayerBase.TYPE.AUDIO) {
          mediaType = MediaPlayerBase.TYPE.LIVE_AUDIO;
        } else {
          mediaType = MediaPlayerBase.TYPE.LIVE_VIDEO;
        }

        mediaPlayer.initialiseMedia(mediaType, sourceUrl, mimeType, sourceContainer, opts);
      },

      pause: pause,

      resume: resume,

      stop: function stop() {
        mediaPlayer.stop();
        stopDeterminingTimeUntilStartOfWindow();
        stopDeterminingTimeSpentBuffering();
      },

      reset: function reset() {
        mediaPlayer.reset();
      },

      getState: function getState() {
        return mediaPlayer.getState();
      },

      getSource: function getSource() {
        return mediaPlayer.getSource();
      },

      getMimeType: function getMimeType() {
        return mediaPlayer.getMimeType();
      },

      addEventCallback: addEventCallback,

      removeEventCallback: removeEventCallback,

      removeAllEventCallbacks: removeAllEventCallbacks,

      getPlayerElement: function getPlayerElement() {
        return mediaPlayer.getPlayerElement();
      }

    };
  }

  return RestartableLivePlayer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/seekable.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live/seekable.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/playbackstrategy/modifiers/html5 */ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/html5.js"), __webpack_require__(/*! bigscreenplayer/playbackstrategy/modifiers/mediaplayerbase */ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/mediaplayerbase.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Html5Player, MediaPlayerBase) {
  'use strict';

  function SeekableLivePlayer(deviceConfig, logger) {
    var AUTO_RESUME_WINDOW_START_CUSHION_SECONDS = 8;

    var mediaPlayer = Html5Player(logger);

    function addEventCallback(thisArg, callback) {
      mediaPlayer.addEventCallback(thisArg, callback);
    }

    function removeEventCallback(thisArg, callback) {
      mediaPlayer.removeEventCallback(thisArg, callback);
    }

    function removeAllEventCallbacks() {
      mediaPlayer.removeAllEventCallbacks();
    }

    function autoResumeAtStartOfRange() {
      var secondsUntilAutoResume = Math.max(0, mediaPlayer.getCurrentTime() - mediaPlayer.getSeekableRange().start - AUTO_RESUME_WINDOW_START_CUSHION_SECONDS);
      var self = this;
      var autoResumeTimer = setTimeout(function () {
        removeEventCallback(self, detectIfUnpaused);
        resume();
      }, secondsUntilAutoResume * 1000);

      addEventCallback(self, detectIfUnpaused);
      function detectIfUnpaused(event) {
        if (event.state !== MediaPlayerBase.STATE.PAUSED) {
          removeEventCallback(self, detectIfUnpaused);
          clearTimeout(autoResumeTimer);
        }
      }
    }

    function resume() {
      mediaPlayer.resume();
    }

    return {
      initialiseMedia: function initialiseMedia(mediaType, sourceUrl, mimeType, sourceContainer, opts) {
        if (mediaType === MediaPlayerBase.TYPE.AUDIO) {
          mediaType = MediaPlayerBase.TYPE.LIVE_AUDIO;
        } else {
          mediaType = MediaPlayerBase.TYPE.LIVE_VIDEO;
        }

        mediaPlayer.initialiseMedia(mediaType, sourceUrl, mimeType, sourceContainer, opts);
      },

      beginPlayback: function beginPlayback() {
        var config = deviceConfig;
        if (config && config.streaming && config.streaming.overrides && config.streaming.overrides.forceBeginPlaybackToEndOfWindow) {
          mediaPlayer.beginPlaybackFrom(Infinity);
        } else {
          mediaPlayer.beginPlayback();
        }
      },

      beginPlaybackFrom: function beginPlaybackFrom(offset) {
        mediaPlayer.beginPlaybackFrom(offset);
      },

      playFrom: function playFrom(offset) {
        mediaPlayer.playFrom(offset);
      },

      pause: function pause(opts) {
        opts = opts || {};
        var secondsUntilStartOfWindow = mediaPlayer.getCurrentTime() - mediaPlayer.getSeekableRange().start;

        if (opts.disableAutoResume) {
          mediaPlayer.pause();
        } else if (secondsUntilStartOfWindow <= AUTO_RESUME_WINDOW_START_CUSHION_SECONDS) {
          mediaPlayer.toPaused();
          mediaPlayer.toPlaying();
        } else {
          mediaPlayer.pause();
          autoResumeAtStartOfRange();
        }
      },
      resume: resume,

      stop: function stop() {
        mediaPlayer.stop();
      },

      reset: function reset() {
        mediaPlayer.reset();
      },

      getState: function getState() {
        return mediaPlayer.getState();
      },

      getSource: function getSource() {
        return mediaPlayer.getSource();
      },

      getCurrentTime: function getCurrentTime() {
        return mediaPlayer.getCurrentTime();
      },

      getSeekableRange: function getSeekableRange() {
        return mediaPlayer.getSeekableRange();
      },

      getMimeType: function getMimeType() {
        return mediaPlayer.getMimeType();
      },

      addEventCallback: addEventCallback,

      removeEventCallback: removeEventCallback,

      removeAllEventCallbacks: removeAllEventCallbacks,

      getPlayerElement: function getPlayerElement() {
        return mediaPlayer.getPlayerElement();
      },

      getLiveSupport: function getLiveSupport() {
        return MediaPlayerBase.LIVE_SUPPORT.SEEKABLE;
      },

      autoResumeAtStartOfRange: autoResumeAtStartOfRange

    };
  }

  return SeekableLivePlayer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/mediaplayerbase.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/modifiers/mediaplayerbase.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  return {

    STATE: {
      EMPTY: 'EMPTY', // No source set
      STOPPED: 'STOPPED', // Source set but no playback
      BUFFERING: 'BUFFERING', // Not enough data to play, waiting to download more
      PLAYING: 'PLAYING', // Media is playing
      PAUSED: 'PAUSED', // Media is paused
      COMPLETE: 'COMPLETE', // Media has reached its end point
      ERROR: 'ERROR' // An error occurred
    },

    EVENT: {
      STOPPED: 'stopped', // Event fired when playback is stopped
      BUFFERING: 'buffering', // Event fired when playback has to suspend due to buffering
      PLAYING: 'playing', // Event fired when starting (or resuming) playing of the media
      PAUSED: 'paused', // Event fired when media playback pauses
      COMPLETE: 'complete', // Event fired when media playback has reached the end of the media
      ERROR: 'error', // Event fired when an error condition occurs
      STATUS: 'status', // Event fired regularly during play
      SENTINEL_ENTER_BUFFERING: 'sentinel-enter-buffering', // Event fired when a sentinel has to act because the device has started buffering but not reported it
      SENTINEL_EXIT_BUFFERING: 'sentinel-exit-buffering', // Event fired when a sentinel has to act because the device has finished buffering but not reported it
      SENTINEL_PAUSE: 'sentinel-pause', // Event fired when a sentinel has to act because the device has failed to pause when expected
      SENTINEL_PLAY: 'sentinel-play', // Event fired when a sentinel has to act because the device has failed to play when expected
      SENTINEL_SEEK: 'sentinel-seek', // Event fired when a sentinel has to act because the device has failed to seek to the correct location
      SENTINEL_COMPLETE: 'sentinel-complete', // Event fired when a sentinel has to act because the device has completed the media but not reported it
      SENTINEL_PAUSE_FAILURE: 'sentinel-pause-failure', // Event fired when the pause sentinel has failed twice, so it is giving up
      SENTINEL_SEEK_FAILURE: 'sentinel-seek-failure', // Event fired when the seek sentinel has failed twice, so it is giving up
      SEEK_ATTEMPTED: 'seek-attempted', // Event fired when a device using a seekfinishedemitevent modifier sets the source
      SEEK_FINISHED: 'seek-finished' // Event fired when a device using a seekfinishedemitevent modifier has seeked successfully
    },

    TYPE: {
      VIDEO: 'video',
      AUDIO: 'audio',
      LIVE_VIDEO: 'live-video',
      LIVE_AUDIO: 'live-audio'
    }
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/msestrategy.js":
/*!******************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/msestrategy.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/models/mediastate */ "./node_modules/bigscreen-player/script/models/mediastate.js"), __webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js"), __webpack_require__(/*! bigscreenplayer/debugger/debugtool */ "./node_modules/bigscreen-player/script/debugger/debugtool.js"), __webpack_require__(/*! bigscreenplayer/models/mediakinds */ "./node_modules/bigscreen-player/script/models/mediakinds.js"), __webpack_require__(/*! bigscreenplayer/plugins */ "./node_modules/bigscreen-player/script/plugins.js"), __webpack_require__(/*! bigscreenplayer/plugindata */ "./node_modules/bigscreen-player/script/plugindata.js"), __webpack_require__(/*! bigscreenplayer/pluginenums */ "./node_modules/bigscreen-player/script/pluginenums.js"), __webpack_require__(/*! bigscreenplayer/manifest/manifestmodifier */ "./node_modules/bigscreen-player/script/manifest/manifestmodifier.js"), __webpack_require__(/*! bigscreenplayer/utils/playbackutils */ "./node_modules/bigscreen-player/script/utils/playbackutils.js"), __webpack_require__(/*! bigscreenplayer/models/livesupport */ "./node_modules/bigscreen-player/script/models/livesupport.js"),

// static imports
__webpack_require__(/*! dashjs */ "./node_modules/dashjs/index.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (MediaState, WindowTypes, DebugTool, MediaKinds, Plugins, PluginData, PluginEnums, ManifestModifier, PlaybackUtils, LiveSupport) {
  var MSEStrategy = function MSEStrategy(windowType, mediaKind, timeData, playbackElement, isUHD, device, cdnDebugOutput) {
    var mediaPlayer;
    var mediaElement;

    var eventCallback;
    var errorCallback;
    var timeUpdateCallback;

    var timeCorrection = timeData && timeData.correction || 0;
    var failoverTime;
    var _isEnded = false;

    var bitrateInfoList;
    var mediaMetrics;
    var dashMetrics;

    var mediaSources;

    var playerMetadata = {
      playbackBitrate: undefined,
      bufferLength: undefined
    };

    var DashJSEvents = {
      ERROR: 'error',
      MANIFEST_LOADED: 'manifestLoaded',
      DOWNLOAD_MANIFEST_ERROR_CODE: 25,
      DOWNLOAD_SIDX_ERROR_CODE: 26,
      DOWNLOAD_CONTENT_ERROR_CODE: 27,
      DOWNLOAD_ERROR_MESSAGE: 'download',
      MANIFEST_VALIDITY_CHANGED: 'manifestValidityChanged',
      QUALITY_CHANGE_RENDERED: 'qualityChangeRendered',
      CDN_FAILOVER: 'baseUrlSelected',
      METRIC_ADDED: 'metricAdded',
      METRIC_CHANGED: 'metricChanged'
    };

    function onPlaying() {
      _isEnded = false;
      publishMediaState(MediaState.PLAYING);
    }

    function onPaused() {
      publishMediaState(MediaState.PAUSED);
    }

    function onBuffering() {
      _isEnded = false;
      publishMediaState(MediaState.WAITING);
    }

    function onSeeked() {
      DebugTool.info('Seeked Event');
      publishMediaState(isPaused() ? MediaState.PAUSED : MediaState.PLAYING);
    }

    function onEnded() {
      _isEnded = true;
      publishMediaState(MediaState.ENDED);
    }

    function onTimeUpdate() {
      var IN_STREAM_BUFFERING_SECONDS = 20;
      var dvrInfo = mediaPlayer.getDashMetrics().getCurrentDVRInfo(mediaPlayer.getMetricsFor('video'));

      if (dvrInfo && windowType === WindowTypes.SLIDING) {
        failoverTime = Math.max(0, parseInt(dvrInfo.time - dvrInfo.range.start) - IN_STREAM_BUFFERING_SECONDS);
      } else {
        failoverTime = mediaElement.currentTime;
      }

      publishTimeUpdate();
    }

    function onError(event) {
      if (event.error && event.error.data) {
        delete event.error.data;
      }

      event.errorProperties = { error_mssg: event.error };

      if (event.error) {
        if (event.error.message) {
          DebugTool.info('MSE Error: ' + event.error.message);

          // Don't raise an error on fragment download error
          if (event.error.code === DashJSEvents.DOWNLOAD_SIDX_ERROR_CODE || event.error.code === DashJSEvents.DOWNLOAD_CONTENT_ERROR_CODE || event.error.code === DashJSEvents.DOWNLOAD_MANIFEST_ERROR_CODE) {
            return;
          }
        } else {
          DebugTool.info('MSE Error: ' + event.error);

          if (event.error === DashJSEvents.DOWNLOAD_ERROR_MESSAGE && event.event.id === 'content') {
            return;
          }
        }
      }
      publishError(event);
    }

    function onManifestLoaded(event) {
      DebugTool.info('Manifest loaded. Duration is: ' + event.data.mediaPresentationDuration);

      if (event.data) {
        var manifest = event.data;
        ManifestModifier.filter(manifest, window.bigscreenPlayer.representationOptions || {});
        ManifestModifier.generateBaseUrls(manifest, mediaSources);
      }
    }

    function onManifestValidityChange(event) {
      DebugTool.info('Manifest validity changed. Duration is: ' + event.newDuration);
    }

    function onQualityChangeRendered(event) {
      if (event.mediaType === mediaKind) {
        if (!bitrateInfoList) {
          bitrateInfoList = mediaPlayer.getBitrateInfoListFor(event.mediaType);
        }
        if (bitrateInfoList && event.newQuality !== undefined) {
          playerMetadata.playbackBitrate = bitrateInfoList[event.newQuality].bitrate / 1000;

          var oldBitrate = isNaN(event.oldQuality) ? '--' : bitrateInfoList[event.oldQuality].bitrate / 1000;
          var oldRepresentation = isNaN(event.oldQuality) ? 'Start' : event.oldQuality + ' (' + oldBitrate + ' kbps)';
          var newRepresentation = event.newQuality + ' (' + playerMetadata.playbackBitrate + ' kbps)';
          DebugTool.keyValue({ key: event.mediaType + ' Representation', value: newRepresentation });
          DebugTool.info('ABR Change Rendered From Representation ' + oldRepresentation + ' To ' + newRepresentation);
        }
        Plugins.interface.onPlayerInfoUpdated(playerMetadata);
      }
    }

    function createPlaybackProperties() {
      return {
        seekable_range: getSeekableRange().start + ' to ' + getSeekableRange().end,
        current_time: getCurrentTime(),
        duration: getDuration()
      };
    }

    function propagateCdnFailover(event, cdn) {
      // Initial playback
      if (mediaSources.length <= 1 || cdn !== mediaSources[1].cdn) return;

      var errorProperties = PlaybackUtils.merge(createPlaybackProperties(), event.errorProperties);
      var evt = new PluginData({
        status: PluginEnums.STATUS.FAILOVER,
        stateType: PluginEnums.TYPE.ERROR,
        properties: errorProperties,
        isBufferingTimeoutError: false,
        cdn: mediaSources[0].cdn,
        newCdn: mediaSources[1].cdn
      });
      // urls -> sources -> mediaSources (shift the cdns for correct behaviour with buffering timeout failover)
      // TODO: Remove this horrible mutation when failover is pushed down per strategy.
      Plugins.interface.onErrorHandled(evt);
      mediaSources.shift();
      cdnDebugOutput.update();
    }

    function onCdnFailover(event) {
      var pluginEvent = {
        errorProperties: {
          error_mssg: 'download'
        }
      };

      propagateCdnFailover(pluginEvent, event.baseUrl.serviceLocation);
    }

    function onMetricAdded(event) {
      if (event.mediaType === 'video') {
        if (event.metric === 'DroppedFrames') {
          DebugTool.keyValue({ key: 'Dropped Frames', value: event.value.droppedFrames });
        }
      }
      if (event.mediaType === mediaKind && event.metric === 'BufferLevel') {
        mediaMetrics = mediaPlayer.getMetricsFor(event.mediaType);
        dashMetrics = mediaPlayer.getDashMetrics();

        if (mediaMetrics && dashMetrics) {
          playerMetadata.bufferLength = dashMetrics.getCurrentBufferLevel(mediaMetrics);
          DebugTool.keyValue({ key: 'Buffer Length', value: playerMetadata.bufferLength });
          Plugins.interface.onPlayerInfoUpdated(playerMetadata);
        }
      }
    }

    function publishMediaState(mediaState) {
      if (eventCallback) {
        eventCallback(mediaState);
      }
    }

    function publishTimeUpdate() {
      if (timeUpdateCallback) {
        timeUpdateCallback();
      }
    }

    function publishError(errorEvent) {
      if (errorCallback) {
        errorCallback(errorEvent);
      }
    }

    function isPaused() {
      return mediaPlayer && mediaPlayer.isReady() ? mediaPlayer.isPaused() : undefined;
    }

    function getClampedTime(time, range) {
      return Math.min(Math.max(time, range.start), range.end - 1.1);
    }

    function setUpMediaElement(playbackElement) {
      if (mediaKind === MediaKinds.AUDIO) {
        mediaElement = document.createElement('audio');
      } else {
        mediaElement = document.createElement('video');
      }
      mediaElement.style.position = 'absolute';
      mediaElement.style.width = '100%';
      mediaElement.style.height = '100%';

      playbackElement.insertBefore(mediaElement, playbackElement.firstChild);
    }

    function setUpMediaPlayer(sources, playbackTime) {
      mediaPlayer = dashjs.MediaPlayer().create();
      mediaPlayer.getDebug().setLogToBrowserConsole(false);

      mediaPlayer.setBufferToKeep(0);
      mediaPlayer.setBufferAheadToKeep(20);

      mediaPlayer.setBufferTimeAtTopQuality(12);
      mediaPlayer.setBufferTimeAtTopQualityLongForm(12);

      mediaPlayer.initialize(mediaElement, null, true);
      modifySource(sources, playbackTime);
    }

    function modifySource(sources, playbackTime) {
      mediaSources = sources;
      var initialSource = calculateSourceAnchor(sources[0].url, playbackTime);
      mediaPlayer.attachSource(initialSource);
    }

    function setUpMediaListeners() {
      mediaElement.addEventListener('timeupdate', onTimeUpdate);
      mediaElement.addEventListener('playing', onPlaying);
      mediaElement.addEventListener('pause', onPaused);
      mediaElement.addEventListener('waiting', onBuffering);
      mediaElement.addEventListener('seeking', onBuffering);
      mediaElement.addEventListener('seeked', onSeeked);
      mediaElement.addEventListener('ended', onEnded);
      mediaElement.addEventListener('error', onError);
      mediaPlayer.on(DashJSEvents.ERROR, onError);
      mediaPlayer.on(DashJSEvents.MANIFEST_LOADED, onManifestLoaded);
      mediaPlayer.on(DashJSEvents.MANIFEST_VALIDITY_CHANGED, onManifestValidityChange);
      mediaPlayer.on(DashJSEvents.QUALITY_CHANGE_RENDERED, onQualityChangeRendered);
      mediaPlayer.on(DashJSEvents.CDN_FAILOVER, onCdnFailover);
      mediaPlayer.on(DashJSEvents.METRIC_ADDED, onMetricAdded);
    }

    /**
     * Calculates a source url with anchor tags for playback within dashjs
     *
     * Anchor tags applied to the MPD source for playback:
     *
     * #r - relative to the start of the first period defined in the DASH manifest
     * #t - time since the beginning of the first period defined in the DASH manifest
     * @param {String} source
     * @param {Number} startTime
     */
    function calculateSourceAnchor(source, startTime) {
      if (startTime === undefined || isNaN(startTime)) {
        return source;
      }

      if (windowType === WindowTypes.STATIC) {
        return startTime === 0 ? source : source + '#t=' + parseInt(startTime);
      }

      if (windowType === WindowTypes.SLIDING) {
        return startTime === 0 ? source : source + '#r=' + parseInt(startTime);
      }

      if (windowType === WindowTypes.GROWING) {
        var windowStartTimeSeconds = timeData.windowStartTime / 1000;
        var srcWithTimeAnchor = source + '#t=';

        startTime = parseInt(startTime);
        return startTime === 0 ? srcWithTimeAnchor + (windowStartTimeSeconds + 1) : srcWithTimeAnchor + (windowStartTimeSeconds + startTime);
      }
    }

    function getSeekableRange() {
      if (mediaPlayer && mediaPlayer.isReady() && windowType !== WindowTypes.STATIC) {
        var dvrInfo = mediaPlayer.getDashMetrics().getCurrentDVRInfo(mediaPlayer.getMetricsFor(mediaKind));
        if (dvrInfo) {
          return {
            start: dvrInfo.range.start - timeCorrection,
            end: dvrInfo.range.end - timeCorrection
          };
        }
      }
      return {
        start: 0,
        end: getDuration()
      };
    }

    function getDuration() {
      return mediaPlayer && mediaPlayer.isReady() ? mediaPlayer.duration() : 0;
    }

    function getCurrentTime() {
      return mediaElement ? mediaElement.currentTime - timeCorrection : 0;
    }

    return {
      transitions: {
        canBePaused: function canBePaused() {
          return true;
        },
        canBeginSeek: function canBeginSeek() {
          return true;
        }
      },
      addEventCallback: function addEventCallback(thisArg, newCallback) {
        eventCallback = function eventCallback(event) {
          newCallback.call(thisArg, event);
        };
      },
      addErrorCallback: function addErrorCallback(thisArg, newErrorCallback) {
        errorCallback = function errorCallback(event) {
          newErrorCallback.call(thisArg, event);
        };
      },
      addTimeUpdateCallback: function addTimeUpdateCallback(thisArg, newTimeUpdateCallback) {
        timeUpdateCallback = function timeUpdateCallback() {
          newTimeUpdateCallback.call(thisArg);
        };
      },
      load: function load(sources, mimeType, playbackTime) {
        if (sources && sources.length === 0) return;

        if (!mediaPlayer) {
          failoverTime = playbackTime;
          setUpMediaElement(playbackElement);
          setUpMediaPlayer(sources, playbackTime);
          setUpMediaListeners();
        } else {
          modifySource(sources, failoverTime);
        }
      },
      getSeekableRange: getSeekableRange,
      getCurrentTime: getCurrentTime,
      getDuration: getDuration,
      tearDown: function tearDown() {
        mediaPlayer.reset();

        mediaElement.removeEventListener('timeupdate', onTimeUpdate);
        mediaElement.removeEventListener('playing', onPlaying);
        mediaElement.removeEventListener('pause', onPaused);
        mediaElement.removeEventListener('waiting', onBuffering);
        mediaElement.removeEventListener('seeking', onBuffering);
        mediaElement.removeEventListener('seeked', onSeeked);
        mediaElement.removeEventListener('ended', onEnded);
        mediaElement.removeEventListener('error', onError);
        mediaPlayer.off(DashJSEvents.ERROR, onError);
        mediaPlayer.off(DashJSEvents.MANIFEST_LOADED, onManifestLoaded);
        mediaPlayer.off(DashJSEvents.MANIFEST_VALIDITY_CHANGED, onManifestValidityChange);
        mediaPlayer.off(DashJSEvents.QUALITY_CHANGE_RENDERED, onQualityChangeRendered);
        mediaPlayer.off(DashJSEvents.METRIC_ADDED, onMetricAdded);
        mediaPlayer.off(DashJSEvents.CDN_FAILOVER, onCdnFailover);

        mediaElement.parentElement.removeChild(mediaElement);

        mediaPlayer = undefined;
        mediaElement = undefined;
        eventCallback = undefined;
        errorCallback = undefined;
        timeUpdateCallback = undefined;
        timeCorrection = undefined;
        failoverTime = undefined;
        _isEnded = undefined;
        bitrateInfoList = undefined;
        mediaMetrics = undefined;
        dashMetrics = undefined;
        mediaSources = undefined;
      },
      reset: function reset() {
        return;
      },
      isEnded: function isEnded() {
        return _isEnded;
      },
      isPaused: isPaused,
      pause: function pause() {
        mediaPlayer.pause();
      },
      play: function play() {
        mediaPlayer.play();
      },
      setCurrentTime: function setCurrentTime(time) {
        var seekToTime = getClampedTime(time, getSeekableRange());
        if (windowType === WindowTypes.SLIDING) {
          mediaElement.currentTime = seekToTime + timeCorrection;
        } else {
          mediaPlayer.seek(seekToTime);
        }
      }
    };
  };

  MSEStrategy.getLiveSupport = function () {
    return LiveSupport.SEEKABLE;
  };

  return MSEStrategy;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/nativestrategy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/nativestrategy.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/playbackstrategy/legacyplayeradapter */ "./node_modules/bigscreen-player/script/playbackstrategy/legacyplayeradapter.js"), __webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js"), __webpack_require__(/*! bigscreenplayer/playbackstrategy/modifiers/html5 */ "./node_modules/bigscreen-player/script/playbackstrategy/modifiers/html5.js"), __webpack_require__("./node_modules/bigscreen-player/script/playbackstrategy/modifiers/live sync recursive ^\\.\\/.*$")("./" + (window.bigscreenPlayer.liveSupport || 'playable'))], __WEBPACK_AMD_DEFINE_RESULT__ = (function (LegacyAdapter, WindowTypes, Html5Player, LivePlayer) {
  var NativeStrategy = function NativeStrategy(windowType, mediaKind, timeData, playbackElement, isUHD, device) {
    var mediaPlayer;
    var logger = device.getLogger();
    var tempConfig = device.getConfig();

    if (windowType !== WindowTypes.STATIC) {
      mediaPlayer = LivePlayer(tempConfig, logger);
    } else {
      mediaPlayer = Html5Player(logger);
    }

    return LegacyAdapter(windowType, mediaKind, timeData, playbackElement, isUHD, device.getConfig(), mediaPlayer);
  };

  NativeStrategy.getLiveSupport = function () {
    return window.bigscreenPlayer.liveSupport;
  };

  return NativeStrategy;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/strategypicker.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/strategypicker.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  return function (windowType, isUHD) {
    var strategy = 'mseStrategy';

    var mseExceptions = window.bigscreenPlayer.mseExceptions || [];

    if (mseExceptions.indexOf(windowType) !== -1) {
      strategy = 'talStrategy';
    }

    if (isUHD && mseExceptions.indexOf('uhd') !== -1) {
      strategy = 'talStrategy';
    }

    return strategy;
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playbackstrategy/talstrategy.js":
/*!******************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playbackstrategy/talstrategy.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/playbackstrategy/legacyplayeradapter */ "./node_modules/bigscreen-player/script/playbackstrategy/legacyplayeradapter.js"), __webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (LegacyAdapter, WindowTypes) {
  var TALStrategy = function TALStrategy(windowType, mediaKind, timeData, playbackElement, isUHD, device) {
    var mediaPlayer;

    if (windowType === WindowTypes.STATIC) {
      mediaPlayer = device.getMediaPlayer();
    } else {
      mediaPlayer = device.getLivePlayer();
    }

    return LegacyAdapter(windowType, mediaKind, timeData, playbackElement, isUHD, device.getConfig(), mediaPlayer);
  };

  TALStrategy.getLiveSupport = function (device) {
    return device.getLiveSupport();
  };

  return TALStrategy;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/playercomponent.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/playercomponent.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/models/mediastate */ "./node_modules/bigscreen-player/script/models/mediastate.js"), __webpack_require__(/*! bigscreenplayer/captionscontainer */ "./node_modules/bigscreen-player/script/captionscontainer.js"), __webpack_require__("./node_modules/bigscreen-player/script/playbackstrategy sync recursive ^\\.\\/.*$")("./" + window.bigscreenPlayer.playbackStrategy), __webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js"), __webpack_require__(/*! bigscreenplayer/utils/playbackutils */ "./node_modules/bigscreen-player/script/utils/playbackutils.js"), __webpack_require__(/*! bigscreenplayer/plugindata */ "./node_modules/bigscreen-player/script/plugindata.js"), __webpack_require__(/*! bigscreenplayer/pluginenums */ "./node_modules/bigscreen-player/script/pluginenums.js"), __webpack_require__(/*! bigscreenplayer/plugins */ "./node_modules/bigscreen-player/script/plugins.js"), __webpack_require__(/*! bigscreenplayer/debugger/debugtool */ "./node_modules/bigscreen-player/script/debugger/debugtool.js"), __webpack_require__(/*! bigscreenplayer/models/transferformats */ "./node_modules/bigscreen-player/script/models/transferformats.js"), __webpack_require__(/*! bigscreenplayer/manifest/manifestloader */ "./node_modules/bigscreen-player/script/manifest/manifestloader.js"), __webpack_require__(/*! bigscreenplayer/utils/livesupportutils */ "./node_modules/bigscreen-player/script/utils/livesupportutils.js"), __webpack_require__(/*! bigscreenplayer/mediaresilience */ "./node_modules/bigscreen-player/script/mediaresilience.js"), __webpack_require__(/*! bigscreenplayer/debugger/cdndebugoutput */ "./node_modules/bigscreen-player/script/debugger/cdndebugoutput.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (MediaState, CaptionsContainer, PlaybackStrategy, WindowTypes, PlaybackUtils, PluginData, PluginEnums, Plugins, DebugTool, TransferFormats, ManifestLoader, LiveSupportUtils, MediaResilience, CdnDebugOutput) {
  'use strict';

  var PlayerComponent = function PlayerComponent(playbackElement, bigscreenPlayerData, windowType, enableSubtitles, callback, device) {
    var isInitialPlay = true;
    var captionsURL = bigscreenPlayerData.media.captionsUrl;
    var errorTimeoutID = null;
    var mediaKind = bigscreenPlayerData.media.kind;
    var subtitlesEnabled;
    var userInteracted = false;
    var stateUpdateCallback = callback;
    var playbackStrategy;
    var captionsContainer;
    var mediaMetaData;
    var fatalErrorTimeout;
    var fatalError;
    var cdnDebugOutput = new CdnDebugOutput(bigscreenPlayerData.media.urls);
    var transferFormat = bigscreenPlayerData.media.transferFormat;

    playbackStrategy = PlaybackStrategy(windowType, mediaKind, bigscreenPlayerData.time, playbackElement, bigscreenPlayerData.media.isUHD, device, cdnDebugOutput);

    playbackStrategy.addEventCallback(this, eventCallback);
    playbackStrategy.addErrorCallback(this, onError);
    playbackStrategy.addTimeUpdateCallback(this, onTimeUpdate);

    bubbleErrorCleared(createPlaybackProperties());

    setSubtitlesEnabled(enableSubtitles || false);

    initialMediaPlay(bigscreenPlayerData.media, bigscreenPlayerData.initialPlaybackTime);

    function play() {
      userInteracted = true;
      playbackStrategy.play();
    }

    function isEnded() {
      return playbackStrategy.isEnded();
    }

    function pause(opts) {
      opts = opts || {};
      userInteracted = true;
      if (transitions().canBePaused()) {
        var disableAutoResume = windowType === WindowTypes.GROWING ? true : opts.disableAutoResume;
        playbackStrategy.pause({ disableAutoResume: disableAutoResume });
      }
    }

    function getDuration() {
      return playbackStrategy.getDuration();
    }

    function getWindowStartTime() {
      return bigscreenPlayerData.time && bigscreenPlayerData.time.windowStartTime;
    }

    function getWindowEndTime() {
      return bigscreenPlayerData.time && bigscreenPlayerData.time.windowEndTime;
    }

    function getPlayerElement() {
      var element = null;
      if (playbackStrategy && playbackStrategy.getPlayerElement) {
        element = playbackStrategy.getPlayerElement();
      }
      return element;
    }

    function getCurrentTime() {
      return playbackStrategy.getCurrentTime();
    }

    function getSeekableRange() {
      return playbackStrategy.getSeekableRange();
    }

    function setSubtitlesEnabled(enabled) {
      subtitlesEnabled = enabled || false;
      if (isSubtitlesAvailable() && captionsContainer) {
        subtitlesEnabled ? captionsContainer.start() : captionsContainer.stop();
      }
    }

    function isSubtitlesEnabled() {
      return subtitlesEnabled;
    }

    function isSubtitlesAvailable() {
      return !!captionsURL;
    }

    function isPaused() {
      return playbackStrategy.isPaused();
    }

    function setTransportControlPosition(flags) {
      captionsContainer.updatePosition(flags);
    }

    function setCurrentTime(time) {
      userInteracted = true;
      if (transitions().canBeginSeek()) {
        playbackStrategy.setCurrentTime(time);
      }
    }

    function transitions() {
      return playbackStrategy.transitions;
    }

    function tearDownMediaElement() {
      var playbackProperties = createPlaybackProperties();
      playbackProperties.dismissed_by = 'teardown';
      playout(playbackProperties);
      playbackStrategy.reset();
    }

    function eventCallback(mediaState) {
      switch (mediaState) {
        case MediaState.PLAYING:
          onPlaying();
          break;
        case MediaState.PAUSED:
          onPaused();
          break;
        case MediaState.WAITING:
          onBuffering();
          break;
        case MediaState.ENDED:
          onEnded();
          break;
      }
    }

    function onPlaying() {
      playout(createPlaybackProperties());
      publishMediaStateUpdate(MediaState.PLAYING, {});
      isInitialPlay = false;
    }

    function onPaused() {
      publishMediaStateUpdate(MediaState.PAUSED);
      playout(createPlaybackProperties());
    }

    function onBuffering() {
      publishMediaStateUpdate(MediaState.WAITING);
      var playbackProperties = createPlaybackProperties();
      startErrorTimeout(playbackProperties);
      bubbleErrorCleared(playbackProperties);
      bubbleBufferingRaised(playbackProperties);
      userInteracted = false;
    }

    function onEnded() {
      playout(createPlaybackProperties());
      publishMediaStateUpdate(MediaState.ENDED);
    }

    function onTimeUpdate() {
      publishMediaStateUpdate(undefined, { timeUpdate: true });
    }

    function onError(event) {
      var playbackProperties = createPlaybackProperties();
      playbackProperties.dismissed_by = 'error';
      bubbleBufferingCleared(playbackProperties);

      var playbackErrorProperties = createPlaybackErrorProperties(event);
      raiseError(playbackErrorProperties, false);
    }

    function startErrorTimeout(properties) {
      var bufferingTimeout = isInitialPlay ? 30000 : 20000;
      var bufferingClearedProperties = PlaybackUtils.clone(properties);
      clearErrorTimeout();
      errorTimeoutID = setTimeout(function () {
        bufferingClearedProperties.dismissed_by = 'timeout';
        bubbleBufferingCleared(bufferingClearedProperties);
        properties.error_mssg = 'Buffering timed out';
        attemptCdnFailover(properties, true);
      }, bufferingTimeout);
    }

    function raiseError(properties, bufferingTimeoutError) {
      clearErrorTimeout();
      publishMediaStateUpdate(MediaState.WAITING);
      bubbleErrorRaised(properties, bufferingTimeoutError);
      startFatalErrorTimeout(properties, bufferingTimeoutError);
    }

    function startFatalErrorTimeout(errorProperties, bufferingTimeoutError) {
      if (!fatalErrorTimeout && !fatalError) {
        fatalErrorTimeout = setTimeout(function () {
          fatalErrorTimeout = null;
          fatalError = true;
          attemptCdnFailover(errorProperties, bufferingTimeoutError);
        }, 5000);
      }
    }

    function attemptCdnFailover(errorProperties, bufferingTimeoutError) {
      var shouldFailover = MediaResilience.shouldFailover(mediaMetaData.urls.length, getDuration(), getCurrentTime(), getLiveSupport(device), windowType, transferFormat);

      if (shouldFailover) {
        var thenPause = playbackStrategy.isPaused();
        tearDownMediaElement();

        var failoverTime = getCurrentTime();
        if (transferFormat === TransferFormats.HLS && LiveSupportUtils.needToGetManifest(windowType, getLiveSupport(device))) {
          manifestReloadFailover(failoverTime, thenPause, errorProperties, bufferingTimeoutError);
        } else {
          cdnFailover(failoverTime, thenPause, errorProperties, bufferingTimeoutError);
        }
      } else {
        bubbleFatalError(errorProperties, bufferingTimeoutError);
      }
    }

    function manifestReloadFailover(failoverTime, thenPause, errorProperties, bufferingTimeoutError) {
      ManifestLoader.load(bigscreenPlayerData.media.urls, bigscreenPlayerData.serverDate, {
        onSuccess: function onSuccess(manifestData) {
          var windowOffset = manifestData.time.windowStartTime - getWindowStartTime();
          bigscreenPlayerData.time = manifestData.time;
          failoverTime -= windowOffset / 1000;
          cdnFailover(failoverTime, thenPause, errorProperties, bufferingTimeoutError);
        },
        onError: function onError() {
          bubbleFatalError(errorProperties, bufferingTimeoutError);
        }
      });
    }

    function cdnFailover(failoverTime, thenPause, errorProperties, bufferingTimeoutError) {
      var evt = new PluginData({
        status: PluginEnums.STATUS.FAILOVER,
        stateType: PluginEnums.TYPE.ERROR,
        properties: errorProperties,
        isBufferingTimeoutError: bufferingTimeoutError,
        cdn: mediaMetaData.urls[0].cdn,
        newCdn: mediaMetaData.urls[1].cdn
      });
      Plugins.interface.onErrorHandled(evt);
      mediaMetaData.urls.shift();
      cdnDebugOutput.update();
      loadMedia(mediaMetaData.urls, mediaMetaData.type, failoverTime, thenPause);
    }

    function clearFatalErrorTimeout() {
      if (fatalErrorTimeout !== null) {
        clearTimeout(fatalErrorTimeout);
        fatalErrorTimeout = null;
      }
    }

    function clearErrorTimeout() {
      if (errorTimeoutID !== null) {
        clearTimeout(errorTimeoutID);
        errorTimeoutID = null;
      }
    }

    function playout(playbackProperties) {
      clearErrorTimeout();
      clearFatalErrorTimeout();
      fatalError = false;
      bubbleBufferingCleared(playbackProperties);
      bubbleErrorCleared(playbackProperties);
      userInteracted = false;
    }

    function bubbleErrorCleared(playbackProperties) {
      var errorProperties = PlaybackUtils.clone(playbackProperties);
      if (!errorProperties.dismissed_by) {
        if (userInteracted) {
          errorProperties.dismissed_by = 'other';
        } else {
          errorProperties.dismissed_by = 'device';
        }
      }
      var evt = new PluginData({ status: PluginEnums.STATUS.DISMISSED, stateType: PluginEnums.TYPE.ERROR, properties: errorProperties });
      Plugins.interface.onErrorCleared(evt);
    }

    function bubbleErrorRaised(errorProperties, bufferingTimeoutError) {
      var evt = new PluginData({ status: PluginEnums.STATUS.STARTED, stateType: PluginEnums.TYPE.ERROR, properties: errorProperties, isBufferingTimeoutError: bufferingTimeoutError });
      Plugins.interface.onError(evt);
    }

    function bubbleBufferingRaised(playbackProperties) {
      var evt = new PluginData({ status: PluginEnums.STATUS.STARTED, stateType: PluginEnums.TYPE.BUFFERING, properties: playbackProperties });
      Plugins.interface.onBuffering(evt);
    }

    function bubbleBufferingCleared(playbackProperties) {
      var bufferingProperties = PlaybackUtils.clone(playbackProperties);
      if (!bufferingProperties.dismissed_by) {
        if (userInteracted) {
          bufferingProperties.dismissed_by = 'other';
        } else {
          bufferingProperties.dismissed_by = 'device';
        }
      }
      var evt = new PluginData({ status: PluginEnums.STATUS.DISMISSED, stateType: PluginEnums.TYPE.BUFFERING, properties: bufferingProperties, isInitialPlay: isInitialPlay });
      Plugins.interface.onBufferingCleared(evt);
    }

    function bubbleFatalError(errorProperties, bufferingTimeoutError) {
      var evt = new PluginData({ status: PluginEnums.STATUS.FATAL, stateType: PluginEnums.TYPE.ERROR, properties: errorProperties, isBufferingTimeoutError: bufferingTimeoutError });
      Plugins.interface.onFatalError(evt);
      publishMediaStateUpdate(MediaState.FATAL_ERROR, { isBufferingTimeoutError: bufferingTimeoutError });
    }

    function createPlaybackProperties() {
      var playbackProperties = {};

      playbackProperties.seekable_range = getSeekableRange().start + ' to ' + getSeekableRange().end;
      playbackProperties.current_time = getCurrentTime();
      playbackProperties.duration = getDuration();

      return playbackProperties;
    }

    function createPlaybackErrorProperties(event) {
      return PlaybackUtils.merge(createPlaybackProperties(), event.errorProperties);
    }

    function publishMediaStateUpdate(state, opts) {
      var mediaData = {};
      mediaData.currentTime = getCurrentTime();
      mediaData.seekableRange = getSeekableRange();
      mediaData.subtitles = {
        enabled: isSubtitlesEnabled(),
        available: isSubtitlesAvailable()
      };
      mediaData.state = state;
      mediaData.duration = getDuration();

      stateUpdateCallback({ data: mediaData, timeUpdate: opts && opts.timeUpdate, isBufferingTimeoutError: opts && opts.isBufferingTimeoutError || false });
    }

    function initialMediaPlay(media, startTime) {
      mediaMetaData = media;
      loadMedia(media.urls, media.type, startTime);

      if (!captionsContainer) {
        captionsContainer = new CaptionsContainer(playbackStrategy, captionsURL, isSubtitlesEnabled(), playbackElement);
      }
    }

    function loadMedia(urls, type, startTime, thenPause) {
      playbackStrategy.load(urls, type, startTime);
      if (thenPause) {
        pause();
      }
    }

    function tearDown() {
      userInteracted = false;
      tearDownMediaElement();

      playbackStrategy.tearDown();
      playbackStrategy = null;

      if (captionsContainer) {
        captionsContainer.stop();
        captionsContainer.tearDown();
        captionsContainer = null;
      }

      if (cdnDebugOutput) {
        cdnDebugOutput.tearDown();
        cdnDebugOutput = undefined;
      }

      isInitialPlay = true;
      captionsURL = undefined;
      errorTimeoutID = undefined;
      windowType = undefined;
      mediaKind = undefined;
      subtitlesEnabled = undefined;
      userInteracted = undefined;
      stateUpdateCallback = undefined;
      mediaMetaData = undefined;
      fatalErrorTimeout = undefined;
      fatalError = undefined;
    }

    return {
      play: play,
      pause: pause,
      transitions: transitions,
      isEnded: isEnded,
      setCurrentTime: setCurrentTime,
      getCurrentTime: getCurrentTime,
      getDuration: getDuration,
      getWindowStartTime: getWindowStartTime,
      getWindowEndTime: getWindowEndTime,
      getSeekableRange: getSeekableRange,
      getPlayerElement: getPlayerElement,
      isSubtitlesAvailable: isSubtitlesAvailable,
      isSubtitlesEnabled: isSubtitlesEnabled,
      setSubtitlesEnabled: setSubtitlesEnabled,
      isPaused: isPaused,
      setTransportControlPosition: setTransportControlPosition,
      tearDown: tearDown
    };
  };

  function getLiveSupport(device) {
    return PlaybackStrategy.getLiveSupport(device);
  }

  PlayerComponent.getLiveSupport = getLiveSupport;

  return PlayerComponent;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/plugindata.js":
/*!************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/plugindata.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  function PluginData(args) {
    this.status = args.status;
    this.stateType = args.stateType;
    this.properties = args.properties || {};
    this.isBufferingTimeoutError = args.isBufferingTimeoutError || false;
    this.isInitialPlay = args.isInitialPlay;
    this.cdn = args.cdn;
    this.newCdn = args.newCdn;
    this.timeStamp = new Date();
  }

  return PluginData;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/pluginenums.js":
/*!*************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/pluginenums.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  return {
    STATUS: {
      STARTED: 'started',
      DISMISSED: 'dismissed',
      FATAL: 'fatal',
      FAILOVER: 'failover'
    },
    TYPE: {
      BUFFERING: 'buffering',
      ERROR: 'error'
    }
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/plugins.js":
/*!*********************************************************!*\
  !*** ./node_modules/bigscreen-player/script/plugins.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/utils/playbackutils */ "./node_modules/bigscreen-player/script/utils/playbackutils.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (PlaybackUtils) {
  var plugins = [];

  function callOnAllPlugins(funcKey, evt) {
    var clonedEvent = PlaybackUtils.deepClone(evt);
    for (var i in plugins) {
      if (plugins[i][funcKey]) {
        plugins[i][funcKey](clonedEvent);
      }
    }
  }

  return {
    registerPlugin: function registerPlugin(plugin) {
      plugins.push(plugin);
    },
    unregisterPlugin: function unregisterPlugin(plugin) {
      if (!plugin && plugins.length > 0) {
        plugins = [];
      } else {
        for (var i = plugins.length - 1; i >= 0; i--) {
          if (plugins[i] === plugin) {
            plugins.splice(i, 1);
          }
        }
      }
    },
    interface: {
      onError: function onError(evt) {
        callOnAllPlugins('onError', evt);
      },
      onFatalError: function onFatalError(evt) {
        callOnAllPlugins('onFatalError', evt);
      },
      onErrorCleared: function onErrorCleared(evt) {
        callOnAllPlugins('onErrorCleared', evt);
      },
      onErrorHandled: function onErrorHandled(evt) {
        callOnAllPlugins('onErrorHandled', evt);
      },
      onBuffering: function onBuffering(evt) {
        callOnAllPlugins('onBuffering', evt);
      },
      onBufferingCleared: function onBufferingCleared(evt) {
        callOnAllPlugins('onBufferingCleared', evt);
      },
      onScreenCapabilityDetermined: function onScreenCapabilityDetermined(tvInfo) {
        callOnAllPlugins('onScreenCapabilityDetermined', tvInfo);
      },
      onPlayerInfoUpdated: function onPlayerInfoUpdated(evt) {
        callOnAllPlugins('onPlayerInfoUpdated', evt);
      }
    }
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/utils/livesupportutils.js":
/*!************************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/utils/livesupportutils.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (WindowTypes) {
  'use strict';

  function needToGetManifest(windowType, liveSupport) {
    var requiresSeekingData = {
      restartable: true,
      seekable: true,
      playable: false,
      none: false
    };

    return windowType !== WindowTypes.STATIC && requiresSeekingData[liveSupport];
  }

  return {
    needToGetManifest: needToGetManifest
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/utils/loadurl.js":
/*!***************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/utils/loadurl.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  return function (url, opts) {
    var xhr = new XMLHttpRequest();
    if (opts.timeout) {
      xhr.timeout = opts.timeout;
    }
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        xhr.onreadystatechange = null;
        if (xhr.status >= 200 && xhr.status < 300) {
          if (opts.onLoad) {
            opts.onLoad(xhr.responseText, xhr.status);
          }
        } else {
          if (opts.onError) {
            opts.onError(xhr.responseText, xhr.status);
          }
        }
      }
    };

    try {
      xhr.open(opts.method || 'GET', url, true);
      // TODO The opts protection in the following expression is redundant as there are lots of other places an undefined opts will cause TypeError to be thrown
      if (opts && opts.headers) {
        for (var header in opts.headers) {
          if (opts.headers.hasOwnProperty(header)) {
            xhr.setRequestHeader(header, opts.headers[header]);
          }
        }
      }
      xhr.send(opts.data || null);
    } catch (ex) {
      if (opts.onError) {
        opts.onError(ex);
      }
    }
    return xhr;
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/utils/playbackutils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/utils/playbackutils.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  return {
    clone: function clone(args) {
      var clone = {};
      for (var prop in args) {
        if (args.hasOwnProperty(prop)) {
          clone[prop] = args[prop];
        }
      }
      return clone;
    },

    deepClone: function deepClone(objectToClone) {
      if (!objectToClone) {
        return objectToClone;
      }

      var clone, propValue, propName;
      clone = Array.isArray(objectToClone) ? [] : {};
      for (propName in objectToClone) {
        propValue = objectToClone[propName];

        // check for date
        if (propValue && Object.prototype.toString.call(propValue) === '[object Date]') {
          clone[propName] = new Date(propValue);
          continue;
        }

        clone[propName] = (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) === 'object' ? this.deepClone(propValue) : propValue;
      }
      return clone;
    },

    cloneArray: function cloneArray(arr) {
      var clone = [];

      for (var i = 0, n = arr.length; i < n; i++) {
        clone.push(this.clone(arr[i]));
      }

      return clone;
    },

    merge: function merge() {
      var merged = {};

      for (var i = 0; i < arguments.length; i++) {
        var obj = arguments[i];
        for (var param in obj) {
          merged[param] = obj[param];
        }
      }

      return merged;
    },

    arrayStartsWith: function arrayStartsWith(array, partial) {
      for (var i = 0; i < partial.length; i++) {
        if (array[i] !== partial[i]) {
          return false;
        }
      }

      return true;
    },

    find: function find(array, predicate) {
      return array.reduce(function (acc, it, i) {
        return acc !== false ? acc : predicate(it) && it;
      }, false);
    },

    findIndex: function findIndex(array, predicate) {
      return array.reduce(function (acc, it, i) {
        return acc !== false ? acc : predicate(it) && i;
      }, false);
    },

    swap: function swap(array, i, j) {
      var arr = array.slice();
      var temp = arr[i];

      arr[i] = arr[j];
      arr[j] = temp;

      return arr;
    },

    pluck: function pluck(array, property) {
      var plucked = [];

      for (var i = 0; i < array.length; i++) {
        plucked.push(array[i][property]);
      }

      return plucked;
    },

    flatten: function flatten(arr) {
      return [].concat.apply([], arr);
    },

    without: function without(arr, value) {
      var newArray = [];

      for (var i = 0; i < arr.length; i++) {
        if (arr[i] !== value) {
          newArray.push(arr[i]);
        }
      }

      return newArray;
    },

    contains: function contains(arr, subset) {
      return [].concat(subset).every(function (item) {
        return [].concat(arr).indexOf(item) > -1;
      });
    },

    pickRandomFromArray: function pickRandomFromArray(arr) {
      return arr[Math.floor(Math.random() * arr.length)];
    },

    filter: function filter(arr, predicate) {
      var filteredArray = [];

      for (var i = 0; i < arr.length; i++) {
        if (predicate(arr[i])) {
          filteredArray.push(arr[i]);
        }
      }

      return filteredArray;
    },

    noop: function noop() {},

    generateUUID: function generateUUID() {
      var d = new Date().getTime();

      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
      });
    },

    path: function path(object, keys) {
      return (keys || []).reduce(function (accum, key) {
        return (accum || {})[key];
      }, object || {});
    }
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/bigscreen-player/script/utils/timeutils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bigscreen-player/script/utils/timeutils.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  'use strict';

  function durationToSeconds(duration) {
    var matches = duration.match(/^PT(\d+(?:[,\.]\d+)?H)?(\d+(?:[,\.]\d+)?M)?(\d+(?:[,\.]\d+)?S)?/) || [];

    var hours = parseFloat(matches[1] || 0) * 60 * 60;
    var mins = parseFloat(matches[2] || 0) * 60;
    var secs = parseFloat(matches[3] || 0);

    return hours + mins + secs || undefined;
  }

  function convertToSeekableVideoTime(epochTime, windowStartEpochTime) {
    // Wont allow a 0 value for this due to device issue, this should be sorted in the TAL strategy.
    return Math.max(0.1, convertToVideoTime(epochTime, windowStartEpochTime));
  }

  function convertToVideoTime(epochTime, windowStartEpochTime) {
    return Math.floor(convertMilliSecondsToSeconds(epochTime - windowStartEpochTime));
  }

  function convertMilliSecondsToSeconds(timeInMilis) {
    return Math.floor(timeInMilis / 1000);
  }

  return {
    durationToSeconds: durationToSeconds,
    convertToSeekableVideoTime: convertToSeekableVideoTime,
    convertToVideoTime: convertToVideoTime
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
        return 42;
      } };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/codem-isoboxer/dist/iso_boxer.js":
/*!*******************************************************!*\
  !*** ./node_modules/codem-isoboxer/dist/iso_boxer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! codem-isoboxer v0.3.6 https://github.com/madebyhiro/codem-isoboxer/blob/master/LICENSE.txt */
var ISOBoxer = {};

ISOBoxer.parseBuffer = function (arrayBuffer) {
  return new ISOFile(arrayBuffer).parse();
};

ISOBoxer.addBoxProcessor = function (type, parser) {
  if (typeof type !== 'string' || typeof parser !== 'function') {
    return;
  }
  ISOBox.prototype._boxProcessors[type] = parser;
};

ISOBoxer.createFile = function () {
  return new ISOFile();
};

// See ISOBoxer.append() for 'pos' parameter syntax
ISOBoxer.createBox = function (type, parent, pos) {
  var newBox = ISOBox.create(type);
  if (parent) {
    parent.append(newBox, pos);
  }
  return newBox;
};

// See ISOBoxer.append() for 'pos' parameter syntax
ISOBoxer.createFullBox = function (type, parent, pos) {
  var newBox = ISOBoxer.createBox(type, parent, pos);
  newBox.version = 0;
  newBox.flags = 0;
  return newBox;
};

ISOBoxer.Utils = {};
ISOBoxer.Utils.dataViewToString = function (dataView, encoding) {
  var impliedEncoding = encoding || 'utf-8';
  if (typeof TextDecoder !== 'undefined') {
    return new TextDecoder(impliedEncoding).decode(dataView);
  }
  var a = [];
  var i = 0;

  if (impliedEncoding === 'utf-8') {
    /* The following algorithm is essentially a rewrite of the UTF8.decode at
    http://bannister.us/weblog/2007/simple-base64-encodedecode-javascript/
    */

    while (i < dataView.byteLength) {
      var c = dataView.getUint8(i++);
      if (c < 0x80) {
        // 1-byte character (7 bits)
      } else if (c < 0xe0) {
        // 2-byte character (11 bits)
        c = (c & 0x1f) << 6;
        c |= dataView.getUint8(i++) & 0x3f;
      } else if (c < 0xf0) {
        // 3-byte character (16 bits)
        c = (c & 0xf) << 12;
        c |= (dataView.getUint8(i++) & 0x3f) << 6;
        c |= dataView.getUint8(i++) & 0x3f;
      } else {
        // 4-byte character (21 bits)
        c = (c & 0x7) << 18;
        c |= (dataView.getUint8(i++) & 0x3f) << 12;
        c |= (dataView.getUint8(i++) & 0x3f) << 6;
        c |= dataView.getUint8(i++) & 0x3f;
      }
      a.push(String.fromCharCode(c));
    }
  } else {
    // Just map byte-by-byte (probably wrong)
    while (i < dataView.byteLength) {
      a.push(String.fromCharCode(dataView.getUint8(i++)));
    }
  }
  return a.join('');
};

ISOBoxer.Utils.utf8ToByteArray = function (string) {
  // Only UTF-8 encoding is supported by TextEncoder
  var u, i;
  if (typeof TextEncoder !== 'undefined') {
    u = new TextEncoder().encode(string);
  } else {
    u = [];
    for (i = 0; i < string.length; ++i) {
      var c = string.charCodeAt(i);
      if (c < 0x80) {
        u.push(c);
      } else if (c < 0x800) {
        u.push(0xC0 | c >> 6);
        u.push(0x80 | 63 & c);
      } else if (c < 0x10000) {
        u.push(0xE0 | c >> 12);
        u.push(0x80 | 63 & c >> 6);
        u.push(0x80 | 63 & c);
      } else {
        u.push(0xF0 | c >> 18);
        u.push(0x80 | 63 & c >> 12);
        u.push(0x80 | 63 & c >> 6);
        u.push(0x80 | 63 & c);
      }
    }
  }
  return u;
};

// Method to append a box in the list of child boxes
// The 'pos' parameter can be either:
//   - (number) a position index at which to insert the new box
//   - (string) the type of the box after which to insert the new box
//   - (object) the box after which to insert the new box
ISOBoxer.Utils.appendBox = function (parent, box, pos) {
  box._offset = parent._cursor.offset;
  box._root = parent._root ? parent._root : parent;
  box._raw = parent._raw;
  box._parent = parent;

  if (pos === -1) {
    // The new box is a sub-box of the parent but not added in boxes array,
    // for example when the new box is set as an entry (see dref and stsd for example)
    return;
  }

  if (pos === undefined || pos === null) {
    parent.boxes.push(box);
    return;
  }

  var index = -1,
      type;

  if (typeof pos === "number") {
    index = pos;
  } else {
    if (typeof pos === "string") {
      type = pos;
    } else if ((typeof pos === 'undefined' ? 'undefined' : _typeof(pos)) === "object" && pos.type) {
      type = pos.type;
    } else {
      parent.boxes.push(box);
      return;
    }

    for (var i = 0; i < parent.boxes.length; i++) {
      if (type === parent.boxes[i].type) {
        index = i + 1;
        break;
      }
    }
  }
  parent.boxes.splice(index, 0, box);
};

if (true) {
  exports.parseBuffer = ISOBoxer.parseBuffer;
  exports.addBoxProcessor = ISOBoxer.addBoxProcessor;
  exports.createFile = ISOBoxer.createFile;
  exports.createBox = ISOBoxer.createBox;
  exports.createFullBox = ISOBoxer.createFullBox;
  exports.Utils = ISOBoxer.Utils;
}

ISOBoxer.Cursor = function (initialOffset) {
  this.offset = typeof initialOffset == 'undefined' ? 0 : initialOffset;
};

var ISOFile = function ISOFile(arrayBuffer) {
  this._cursor = new ISOBoxer.Cursor();
  this.boxes = [];
  if (arrayBuffer) {
    this._raw = new DataView(arrayBuffer);
  }
};

ISOFile.prototype.fetch = function (type) {
  var result = this.fetchAll(type, true);
  return result.length ? result[0] : null;
};

ISOFile.prototype.fetchAll = function (type, returnEarly) {
  var result = [];
  ISOFile._sweep.call(this, type, result, returnEarly);
  return result;
};

ISOFile.prototype.parse = function () {
  this._cursor.offset = 0;
  this.boxes = [];
  while (this._cursor.offset < this._raw.byteLength) {
    var box = ISOBox.parse(this);

    // Box could not be parsed
    if (typeof box.type === 'undefined') break;

    this.boxes.push(box);
  }
  return this;
};

ISOFile._sweep = function (type, result, returnEarly) {
  if (this.type && this.type == type) result.push(this);
  for (var box in this.boxes) {
    if (result.length && returnEarly) return;
    ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);
  }
};

ISOFile.prototype.write = function () {

  var length = 0,
      i;

  for (i = 0; i < this.boxes.length; i++) {
    length += this.boxes[i].getLength(false);
  }

  var bytes = new Uint8Array(length);
  this._rawo = new DataView(bytes.buffer);
  this.bytes = bytes;
  this._cursor.offset = 0;

  for (i = 0; i < this.boxes.length; i++) {
    this.boxes[i].write();
  }

  return bytes.buffer;
};

ISOFile.prototype.append = function (box, pos) {
  ISOBoxer.Utils.appendBox(this, box, pos);
};
var ISOBox = function ISOBox() {
  this._cursor = new ISOBoxer.Cursor();
};

ISOBox.parse = function (parent) {
  var newBox = new ISOBox();
  newBox._offset = parent._cursor.offset;
  newBox._root = parent._root ? parent._root : parent;
  newBox._raw = parent._raw;
  newBox._parent = parent;
  newBox._parseBox();
  parent._cursor.offset = newBox._raw.byteOffset + newBox._raw.byteLength;
  return newBox;
};

ISOBox.create = function (type) {
  var newBox = new ISOBox();
  newBox.type = type;
  newBox.boxes = [];
  return newBox;
};

ISOBox.prototype._boxContainers = ['dinf', 'edts', 'mdia', 'meco', 'mfra', 'minf', 'moof', 'moov', 'mvex', 'stbl', 'strk', 'traf', 'trak', 'tref', 'udta', 'vttc', 'sinf', 'schi', 'encv', 'enca'];

ISOBox.prototype._boxProcessors = {};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Generic read/write functions

ISOBox.prototype._procField = function (name, type, size) {
  if (this._parsing) {
    this[name] = this._readField(type, size);
  } else {
    this._writeField(type, size, this[name]);
  }
};

ISOBox.prototype._procFieldArray = function (name, length, type, size) {
  var i;
  if (this._parsing) {
    this[name] = [];
    for (i = 0; i < length; i++) {
      this[name][i] = this._readField(type, size);
    }
  } else {
    for (i = 0; i < this[name].length; i++) {
      this._writeField(type, size, this[name][i]);
    }
  }
};

ISOBox.prototype._procFullBox = function () {
  this._procField('version', 'uint', 8);
  this._procField('flags', 'uint', 24);
};

ISOBox.prototype._procEntries = function (name, length, fn) {
  var i;
  if (this._parsing) {
    this[name] = [];
    for (i = 0; i < length; i++) {
      this[name].push({});
      fn.call(this, this[name][i]);
    }
  } else {
    for (i = 0; i < length; i++) {
      fn.call(this, this[name][i]);
    }
  }
};

ISOBox.prototype._procSubEntries = function (entry, name, length, fn) {
  var i;
  if (this._parsing) {
    entry[name] = [];
    for (i = 0; i < length; i++) {
      entry[name].push({});
      fn.call(this, entry[name][i]);
    }
  } else {
    for (i = 0; i < length; i++) {
      fn.call(this, entry[name][i]);
    }
  }
};

ISOBox.prototype._procEntryField = function (entry, name, type, size) {
  if (this._parsing) {
    entry[name] = this._readField(type, size);
  } else {
    this._writeField(type, size, entry[name]);
  }
};

ISOBox.prototype._procSubBoxes = function (name, length) {
  var i;
  if (this._parsing) {
    this[name] = [];
    for (i = 0; i < length; i++) {
      this[name].push(ISOBox.parse(this));
    }
  } else {
    for (i = 0; i < length; i++) {
      if (this._rawo) {
        this[name][i].write();
      } else {
        this.size += this[name][i].getLength();
      }
    }
  }
};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Read/parse functions

ISOBox.prototype._readField = function (type, size) {
  switch (type) {
    case 'uint':
      return this._readUint(size);
    case 'int':
      return this._readInt(size);
    case 'template':
      return this._readTemplate(size);
    case 'string':
      return size === -1 ? this._readTerminatedString() : this._readString(size);
    case 'data':
      return this._readData(size);
    case 'utf8':
      return this._readUTF8String();
    default:
      return -1;
  }
};

ISOBox.prototype._readInt = function (size) {
  var result = null,
      offset = this._cursor.offset - this._raw.byteOffset;
  switch (size) {
    case 8:
      result = this._raw.getInt8(offset);
      break;
    case 16:
      result = this._raw.getInt16(offset);
      break;
    case 32:
      result = this._raw.getInt32(offset);
      break;
    case 64:
      // Warning: JavaScript cannot handle 64-bit integers natively.
      // This will give unexpected results for integers >= 2^53
      var s1 = this._raw.getInt32(offset);
      var s2 = this._raw.getInt32(offset + 4);
      result = s1 * Math.pow(2, 32) + s2;
      break;
  }
  this._cursor.offset += size >> 3;
  return result;
};

ISOBox.prototype._readUint = function (size) {
  var result = null,
      offset = this._cursor.offset - this._raw.byteOffset,
      s1,
      s2;
  switch (size) {
    case 8:
      result = this._raw.getUint8(offset);
      break;
    case 16:
      result = this._raw.getUint16(offset);
      break;
    case 24:
      s1 = this._raw.getUint16(offset);
      s2 = this._raw.getUint8(offset + 2);
      result = (s1 << 8) + s2;
      break;
    case 32:
      result = this._raw.getUint32(offset);
      break;
    case 64:
      // Warning: JavaScript cannot handle 64-bit integers natively.
      // This will give unexpected results for integers >= 2^53
      s1 = this._raw.getUint32(offset);
      s2 = this._raw.getUint32(offset + 4);
      result = s1 * Math.pow(2, 32) + s2;
      break;
  }
  this._cursor.offset += size >> 3;
  return result;
};

ISOBox.prototype._readString = function (length) {
  var str = '';
  for (var c = 0; c < length; c++) {
    var char = this._readUint(8);
    str += String.fromCharCode(char);
  }
  return str;
};

ISOBox.prototype._readTemplate = function (size) {
  var pre = this._readUint(size / 2);
  var post = this._readUint(size / 2);
  return pre + post / Math.pow(2, size / 2);
};

ISOBox.prototype._readTerminatedString = function () {
  var str = '';
  while (this._cursor.offset - this._offset < this._raw.byteLength) {
    var char = this._readUint(8);
    if (char === 0) break;
    str += String.fromCharCode(char);
  }
  return str;
};

ISOBox.prototype._readData = function (size) {
  var length = size > 0 ? size : this._raw.byteLength - (this._cursor.offset - this._offset);
  if (length > 0) {
    var data = new Uint8Array(this._raw.buffer, this._cursor.offset, length);

    this._cursor.offset += length;
    return data;
  } else {
    return null;
  }
};

ISOBox.prototype._readUTF8String = function () {
  var length = this._raw.byteLength - (this._cursor.offset - this._offset);
  var data = null;
  if (length > 0) {
    data = new DataView(this._raw.buffer, this._cursor.offset, length);
    this._cursor.offset += length;
  }

  return data ? ISOBoxer.Utils.dataViewToString(data) : data;
};

ISOBox.prototype._parseBox = function () {
  this._parsing = true;
  this._cursor.offset = this._offset;

  // return immediately if there are not enough bytes to read the header
  if (this._offset + 8 > this._raw.buffer.byteLength) {
    this._root._incomplete = true;
    return;
  }

  this._procField('size', 'uint', 32);
  this._procField('type', 'string', 4);

  if (this.size === 1) {
    this._procField('largesize', 'uint', 64);
  }
  if (this.type === 'uuid') {
    this._procFieldArray('usertype', 16, 'uint', 8);
  }

  switch (this.size) {
    case 0:
      this._raw = new DataView(this._raw.buffer, this._offset, this._raw.byteLength - this._cursor.offset + 8);
      break;
    case 1:
      if (this._offset + this.size > this._raw.buffer.byteLength) {
        this._incomplete = true;
        this._root._incomplete = true;
      } else {
        this._raw = new DataView(this._raw.buffer, this._offset, this.largesize);
      }
      break;
    default:
      if (this._offset + this.size > this._raw.buffer.byteLength) {
        this._incomplete = true;
        this._root._incomplete = true;
      } else {
        this._raw = new DataView(this._raw.buffer, this._offset, this.size);
      }
  }

  // additional parsing
  if (!this._incomplete) {
    if (this._boxProcessors[this.type]) {
      this._boxProcessors[this.type].call(this);
    }
    if (this._boxContainers.indexOf(this.type) !== -1) {
      this._parseContainerBox();
    } else {
      // Unknown box => read and store box content
      this._data = this._readData();
    }
  }
};

ISOBox.prototype._parseFullBox = function () {
  this.version = this._readUint(8);
  this.flags = this._readUint(24);
};

ISOBox.prototype._parseContainerBox = function () {
  this.boxes = [];
  while (this._cursor.offset - this._raw.byteOffset < this._raw.byteLength) {
    this.boxes.push(ISOBox.parse(this));
  }
};

///////////////////////////////////////////////////////////////////////////////////////////////////
// Write functions

ISOBox.prototype.append = function (box, pos) {
  ISOBoxer.Utils.appendBox(this, box, pos);
};

ISOBox.prototype.getLength = function () {
  this._parsing = false;
  this._rawo = null;

  this.size = 0;
  this._procField('size', 'uint', 32);
  this._procField('type', 'string', 4);

  if (this.size === 1) {
    this._procField('largesize', 'uint', 64);
  }
  if (this.type === 'uuid') {
    this._procFieldArray('usertype', 16, 'uint', 8);
  }

  if (this._boxProcessors[this.type]) {
    this._boxProcessors[this.type].call(this);
  }

  if (this._boxContainers.indexOf(this.type) !== -1) {
    for (var i = 0; i < this.boxes.length; i++) {
      this.size += this.boxes[i].getLength();
    }
  }

  if (this._data) {
    this._writeData(this._data);
  }

  return this.size;
};

ISOBox.prototype.write = function () {
  this._parsing = false;
  this._cursor.offset = this._parent._cursor.offset;

  switch (this.size) {
    case 0:
      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.parent._rawo.byteLength - this._cursor.offset);
      break;
    case 1:
      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.largesize);
      break;
    default:
      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.size);
  }

  this._procField('size', 'uint', 32);
  this._procField('type', 'string', 4);

  if (this.size === 1) {
    this._procField('largesize', 'uint', 64);
  }
  if (this.type === 'uuid') {
    this._procFieldArray('usertype', 16, 'uint', 8);
  }

  if (this._boxProcessors[this.type]) {
    this._boxProcessors[this.type].call(this);
  }

  if (this._boxContainers.indexOf(this.type) !== -1) {
    for (var i = 0; i < this.boxes.length; i++) {
      this.boxes[i].write();
    }
  }

  if (this._data) {
    this._writeData(this._data);
  }

  this._parent._cursor.offset += this.size;

  return this.size;
};

ISOBox.prototype._writeInt = function (size, value) {
  if (this._rawo) {
    var offset = this._cursor.offset - this._rawo.byteOffset;
    switch (size) {
      case 8:
        this._rawo.setInt8(offset, value);
        break;
      case 16:
        this._rawo.setInt16(offset, value);
        break;
      case 32:
        this._rawo.setInt32(offset, value);
        break;
      case 64:
        // Warning: JavaScript cannot handle 64-bit integers natively.
        // This will give unexpected results for integers >= 2^53
        var s1 = Math.floor(value / Math.pow(2, 32));
        var s2 = value - s1 * Math.pow(2, 32);
        this._rawo.setUint32(offset, s1);
        this._rawo.setUint32(offset + 4, s2);
        break;
    }
    this._cursor.offset += size >> 3;
  } else {
    this.size += size >> 3;
  }
};

ISOBox.prototype._writeUint = function (size, value) {

  if (this._rawo) {
    var offset = this._cursor.offset - this._rawo.byteOffset,
        s1,
        s2;
    switch (size) {
      case 8:
        this._rawo.setUint8(offset, value);
        break;
      case 16:
        this._rawo.setUint16(offset, value);
        break;
      case 24:
        s1 = (value & 0xFFFF00) >> 8;
        s2 = value & 0x0000FF;
        this._rawo.setUint16(offset, s1);
        this._rawo.setUint8(offset + 2, s2);
        break;
      case 32:
        this._rawo.setUint32(offset, value);
        break;
      case 64:
        // Warning: JavaScript cannot handle 64-bit integers natively.
        // This will give unexpected results for integers >= 2^53
        s1 = Math.floor(value / Math.pow(2, 32));
        s2 = value - s1 * Math.pow(2, 32);
        this._rawo.setUint32(offset, s1);
        this._rawo.setUint32(offset + 4, s2);
        break;
    }
    this._cursor.offset += size >> 3;
  } else {
    this.size += size >> 3;
  }
};

ISOBox.prototype._writeString = function (size, str) {
  for (var c = 0; c < size; c++) {
    this._writeUint(8, str.charCodeAt(c));
  }
};

ISOBox.prototype._writeTerminatedString = function (str) {
  if (str.length === 0) {
    return;
  }
  for (var c = 0; c < str.length; c++) {
    this._writeUint(8, str.charCodeAt(c));
  }
  this._writeUint(8, 0);
};

ISOBox.prototype._writeTemplate = function (size, value) {
  var pre = Math.floor(value);
  var post = (value - pre) * Math.pow(2, size / 2);
  this._writeUint(size / 2, pre);
  this._writeUint(size / 2, post);
};

ISOBox.prototype._writeData = function (data) {
  var i;
  //data to copy
  if (data) {
    if (this._rawo) {
      //Array and Uint8Array has also to be managed
      if (data instanceof Array) {
        var offset = this._cursor.offset - this._rawo.byteOffset;
        for (var i = 0; i < data.length; i++) {
          this._rawo.setInt8(offset + i, data[i]);
        }
        this._cursor.offset += data.length;
      }

      if (data instanceof Uint8Array) {
        this._root.bytes.set(data, this._cursor.offset);
        this._cursor.offset += data.length;
      }
    } else {
      //nothing to copy only size to compute
      this.size += data.length;
    }
  }
};

ISOBox.prototype._writeUTF8String = function (string) {
  var u = ISOBoxer.Utils.utf8ToByteArray(string);
  if (this._rawo) {
    var dataView = new DataView(this._rawo.buffer, this._cursor.offset, u.length);
    for (var i = 0; i < u.length; i++) {
      dataView.setUint8(i, u[i]);
    }
  } else {
    this.size += u.length;
  }
};

ISOBox.prototype._writeField = function (type, size, value) {
  switch (type) {
    case 'uint':
      this._writeUint(size, value);
      break;
    case 'int':
      this._writeInt(size, value);
      break;
    case 'template':
      this._writeTemplate(size, value);
      break;
    case 'string':
      if (size == -1) {
        this._writeTerminatedString(value);
      } else {
        this._writeString(size, value);
      }
      break;
    case 'data':
      this._writeData(value);
      break;
    case 'utf8':
      this._writeUTF8String(value);
      break;
    default:
      break;
  }
};

// ISO/IEC 14496-15:2014 - avc1 box
ISOBox.prototype._boxProcessors['avc1'] = ISOBox.prototype._boxProcessors['encv'] = function () {
  // SampleEntry fields
  this._procFieldArray('reserved1', 6, 'uint', 8);
  this._procField('data_reference_index', 'uint', 16);
  // VisualSampleEntry fields
  this._procField('pre_defined1', 'uint', 16);
  this._procField('reserved2', 'uint', 16);
  this._procFieldArray('pre_defined2', 3, 'uint', 32);
  this._procField('width', 'uint', 16);
  this._procField('height', 'uint', 16);
  this._procField('horizresolution', 'template', 32);
  this._procField('vertresolution', 'template', 32);
  this._procField('reserved3', 'uint', 32);
  this._procField('frame_count', 'uint', 16);
  this._procFieldArray('compressorname', 32, 'uint', 8);
  this._procField('depth', 'uint', 16);
  this._procField('pre_defined3', 'int', 16);
  // AVCSampleEntry fields
  this._procField('config', 'data', -1);
};

// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box
ISOBox.prototype._boxProcessors['dref'] = function () {
  this._procFullBox();
  this._procField('entry_count', 'uint', 32);
  this._procSubBoxes('entries', this.entry_count);
};

// ISO/IEC 14496-12:2012 - 8.6.6 Edit List Box
ISOBox.prototype._boxProcessors['elst'] = function () {
  this._procFullBox();
  this._procField('entry_count', 'uint', 32);
  this._procEntries('entries', this.entry_count, function (entry) {
    this._procEntryField(entry, 'segment_duration', 'uint', this.version === 1 ? 64 : 32);
    this._procEntryField(entry, 'media_time', 'int', this.version === 1 ? 64 : 32);
    this._procEntryField(entry, 'media_rate_integer', 'int', 16);
    this._procEntryField(entry, 'media_rate_fraction', 'int', 16);
  });
};

// ISO/IEC 23009-1:2014 - 5.10.3.3 Event Message Box
ISOBox.prototype._boxProcessors['emsg'] = function () {
  this._procFullBox();
  if (this.version == 1) {
    this._procField('timescale', 'uint', 32);
    this._procField('presentation_time', 'uint', 64);
    this._procField('event_duration', 'uint', 32);
    this._procField('id', 'uint', 32);
    this._procField('scheme_id_uri', 'string', -1);
    this._procField('value', 'string', -1);
  } else {
    this._procField('scheme_id_uri', 'string', -1);
    this._procField('value', 'string', -1);
    this._procField('timescale', 'uint', 32);
    this._procField('presentation_time_delta', 'uint', 32);
    this._procField('event_duration', 'uint', 32);
    this._procField('id', 'uint', 32);
  }
  this._procField('message_data', 'data', -1);
};
// ISO/IEC 14496-12:2012 - 8.1.2 Free Space Box
ISOBox.prototype._boxProcessors['free'] = ISOBox.prototype._boxProcessors['skip'] = function () {
  this._procField('data', 'data', -1);
};

// ISO/IEC 14496-12:2012 - 8.12.2 Original Format Box
ISOBox.prototype._boxProcessors['frma'] = function () {
  this._procField('data_format', 'uint', 32);
};
// ISO/IEC 14496-12:2012 - 4.3 File Type Box / 8.16.2 Segment Type Box
ISOBox.prototype._boxProcessors['ftyp'] = ISOBox.prototype._boxProcessors['styp'] = function () {
  this._procField('major_brand', 'string', 4);
  this._procField('minor_version', 'uint', 32);
  var nbCompatibleBrands = -1;
  if (this._parsing) {
    nbCompatibleBrands = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset)) / 4;
  }
  this._procFieldArray('compatible_brands', nbCompatibleBrands, 'string', 4);
};

// ISO/IEC 14496-12:2012 - 8.4.3 Handler Reference Box
ISOBox.prototype._boxProcessors['hdlr'] = function () {
  this._procFullBox();
  this._procField('pre_defined', 'uint', 32);
  this._procField('handler_type', 'string', 4);
  this._procFieldArray('reserved', 3, 'uint', 32);
  this._procField('name', 'string', -1);
};

// ISO/IEC 14496-12:2012 - 8.1.1 Media Data Box
ISOBox.prototype._boxProcessors['mdat'] = function () {
  this._procField('data', 'data', -1);
};

// ISO/IEC 14496-12:2012 - 8.4.2 Media Header Box
ISOBox.prototype._boxProcessors['mdhd'] = function () {
  this._procFullBox();
  this._procField('creation_time', 'uint', this.version == 1 ? 64 : 32);
  this._procField('modification_time', 'uint', this.version == 1 ? 64 : 32);
  this._procField('timescale', 'uint', 32);
  this._procField('duration', 'uint', this.version == 1 ? 64 : 32);
  if (!this._parsing && typeof this.language === 'string') {
    // In case of writing and language has been set as a string, then convert it into char codes array
    this.language = this.language.charCodeAt(0) - 0x60 << 10 | this.language.charCodeAt(1) - 0x60 << 5 | this.language.charCodeAt(2) - 0x60;
  }
  this._procField('language', 'uint', 16);
  if (this._parsing) {
    this.language = String.fromCharCode((this.language >> 10 & 0x1F) + 0x60, (this.language >> 5 & 0x1F) + 0x60, (this.language & 0x1F) + 0x60);
  }
  this._procField('pre_defined', 'uint', 16);
};

// ISO/IEC 14496-12:2012 - 8.8.2 Movie Extends Header Box
ISOBox.prototype._boxProcessors['mehd'] = function () {
  this._procFullBox();
  this._procField('fragment_duration', 'uint', this.version == 1 ? 64 : 32);
};

// ISO/IEC 14496-12:2012 - 8.8.5 Movie Fragment Header Box
ISOBox.prototype._boxProcessors['mfhd'] = function () {
  this._procFullBox();
  this._procField('sequence_number', 'uint', 32);
};

// ISO/IEC 14496-12:2012 - 8.8.11 Movie Fragment Random Access Box
ISOBox.prototype._boxProcessors['mfro'] = function () {
  this._procFullBox();
  this._procField('mfra_size', 'uint', 32); // Called mfra_size to distinguish from the normal "size" attribute of a box
};

// ISO/IEC 14496-12:2012 - 8.5.2.2 mp4a box (use AudioSampleEntry definition and naming)
ISOBox.prototype._boxProcessors['mp4a'] = ISOBox.prototype._boxProcessors['enca'] = function () {
  // SampleEntry fields
  this._procFieldArray('reserved1', 6, 'uint', 8);
  this._procField('data_reference_index', 'uint', 16);
  // AudioSampleEntry fields
  this._procFieldArray('reserved2', 2, 'uint', 32);
  this._procField('channelcount', 'uint', 16);
  this._procField('samplesize', 'uint', 16);
  this._procField('pre_defined', 'uint', 16);
  this._procField('reserved3', 'uint', 16);
  this._procField('samplerate', 'template', 32);
  // ESDescriptor fields
  this._procField('esds', 'data', -1);
};

// ISO/IEC 14496-12:2012 - 8.2.2 Movie Header Box
ISOBox.prototype._boxProcessors['mvhd'] = function () {
  this._procFullBox();
  this._procField('creation_time', 'uint', this.version == 1 ? 64 : 32);
  this._procField('modification_time', 'uint', this.version == 1 ? 64 : 32);
  this._procField('timescale', 'uint', 32);
  this._procField('duration', 'uint', this.version == 1 ? 64 : 32);
  this._procField('rate', 'template', 32);
  this._procField('volume', 'template', 16);
  this._procField('reserved1', 'uint', 16);
  this._procFieldArray('reserved2', 2, 'uint', 32);
  this._procFieldArray('matrix', 9, 'template', 32);
  this._procFieldArray('pre_defined', 6, 'uint', 32);
  this._procField('next_track_ID', 'uint', 32);
};

// ISO/IEC 14496-30:2014 - WebVTT Cue Payload Box.
ISOBox.prototype._boxProcessors['payl'] = function () {
  this._procField('cue_text', 'utf8');
};

//ISO/IEC 23001-7:2011 - 8.1 Protection System Specific Header Box
ISOBox.prototype._boxProcessors['pssh'] = function () {
  this._procFullBox();

  this._procFieldArray('SystemID', 16, 'uint', 8);
  this._procField('DataSize', 'uint', 32);
  this._procFieldArray('Data', this.DataSize, 'uint', 8);
};
// ISO/IEC 14496-12:2012 - 8.12.5 Scheme Type Box
ISOBox.prototype._boxProcessors['schm'] = function () {
  this._procFullBox();

  this._procField('scheme_type', 'uint', 32);
  this._procField('scheme_version', 'uint', 32);

  if (this.flags & 0x000001) {
    this._procField('scheme_uri', 'string', -1);
  }
};
// ISO/IEC 14496-12:2012 - 8.6.4.1 sdtp box 
ISOBox.prototype._boxProcessors['sdtp'] = function () {
  this._procFullBox();

  var sample_count = -1;
  if (this._parsing) {
    sample_count = this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset);
  }

  this._procFieldArray('sample_dependency_table', sample_count, 'uint', 8);
};

// ISO/IEC 14496-12:2012 - 8.16.3 Segment Index Box
ISOBox.prototype._boxProcessors['sidx'] = function () {
  this._procFullBox();
  this._procField('reference_ID', 'uint', 32);
  this._procField('timescale', 'uint', 32);
  this._procField('earliest_presentation_time', 'uint', this.version == 1 ? 64 : 32);
  this._procField('first_offset', 'uint', this.version == 1 ? 64 : 32);
  this._procField('reserved', 'uint', 16);
  this._procField('reference_count', 'uint', 16);
  this._procEntries('references', this.reference_count, function (entry) {
    if (!this._parsing) {
      entry.reference = (entry.reference_type & 0x00000001) << 31;
      entry.reference |= entry.referenced_size & 0x7FFFFFFF;
      entry.sap = (entry.starts_with_SAP & 0x00000001) << 31;
      entry.sap |= (entry.SAP_type & 0x00000003) << 28;
      entry.sap |= entry.SAP_delta_time & 0x0FFFFFFF;
    }
    this._procEntryField(entry, 'reference', 'uint', 32);
    this._procEntryField(entry, 'subsegment_duration', 'uint', 32);
    this._procEntryField(entry, 'sap', 'uint', 32);
    if (this._parsing) {
      entry.reference_type = entry.reference >> 31 & 0x00000001;
      entry.referenced_size = entry.reference & 0x7FFFFFFF;
      entry.starts_with_SAP = entry.sap >> 31 & 0x00000001;
      entry.SAP_type = entry.sap >> 28 & 0x00000007;
      entry.SAP_delta_time = entry.sap & 0x0FFFFFFF;
    }
  });
};

// ISO/IEC 14496-12:2012 - 8.4.5.3 Sound Media Header Box
ISOBox.prototype._boxProcessors['smhd'] = function () {
  this._procFullBox();
  this._procField('balance', 'uint', 16);
  this._procField('reserved', 'uint', 16);
};

// ISO/IEC 14496-12:2012 - 8.16.4 Subsegment Index Box
ISOBox.prototype._boxProcessors['ssix'] = function () {
  this._procFullBox();
  this._procField('subsegment_count', 'uint', 32);
  this._procEntries('subsegments', this.subsegment_count, function (subsegment) {
    this._procEntryField(subsegment, 'ranges_count', 'uint', 32);
    this._procSubEntries(subsegment, 'ranges', subsegment.ranges_count, function (range) {
      this._procEntryField(range, 'level', 'uint', 8);
      this._procEntryField(range, 'range_size', 'uint', 24);
    });
  });
};

// ISO/IEC 14496-12:2012 - 8.5.2 Sample Description Box
ISOBox.prototype._boxProcessors['stsd'] = function () {
  this._procFullBox();
  this._procField('entry_count', 'uint', 32);
  this._procSubBoxes('entries', this.entry_count);
};

// ISO/IEC 14496-12:2015 - 8.7.7 Sub-Sample Information Box
ISOBox.prototype._boxProcessors['subs'] = function () {
  this._procFullBox();
  this._procField('entry_count', 'uint', 32);
  this._procEntries('entries', this.entry_count, function (entry) {
    this._procEntryField(entry, 'sample_delta', 'uint', 32);
    this._procEntryField(entry, 'subsample_count', 'uint', 16);
    this._procSubEntries(entry, 'subsamples', entry.subsample_count, function (subsample) {
      this._procEntryField(subsample, 'subsample_size', 'uint', this.version === 1 ? 32 : 16);
      this._procEntryField(subsample, 'subsample_priority', 'uint', 8);
      this._procEntryField(subsample, 'discardable', 'uint', 8);
      this._procEntryField(subsample, 'codec_specific_parameters', 'uint', 32);
    });
  });
};

//ISO/IEC 23001-7:2011 - 8.2 Track Encryption Box
ISOBox.prototype._boxProcessors['tenc'] = function () {
  this._procFullBox();

  this._procField('default_IsEncrypted', 'uint', 24);
  this._procField('default_IV_size', 'uint', 8);
  this._procFieldArray('default_KID', 16, 'uint', 8);
};

// ISO/IEC 14496-12:2012 - 8.8.12 Track Fragmnent Decode Time
ISOBox.prototype._boxProcessors['tfdt'] = function () {
  this._procFullBox();
  this._procField('baseMediaDecodeTime', 'uint', this.version == 1 ? 64 : 32);
};

// ISO/IEC 14496-12:2012 - 8.8.7 Track Fragment Header Box
ISOBox.prototype._boxProcessors['tfhd'] = function () {
  this._procFullBox();
  this._procField('track_ID', 'uint', 32);
  if (this.flags & 0x01) this._procField('base_data_offset', 'uint', 64);
  if (this.flags & 0x02) this._procField('sample_description_offset', 'uint', 32);
  if (this.flags & 0x08) this._procField('default_sample_duration', 'uint', 32);
  if (this.flags & 0x10) this._procField('default_sample_size', 'uint', 32);
  if (this.flags & 0x20) this._procField('default_sample_flags', 'uint', 32);
};

// ISO/IEC 14496-12:2012 - 8.8.10 Track Fragment Random Access Box
ISOBox.prototype._boxProcessors['tfra'] = function () {
  this._procFullBox();
  this._procField('track_ID', 'uint', 32);
  if (!this._parsing) {
    this.reserved = 0;
    this.reserved |= (this.length_size_of_traf_num & 0x00000030) << 4;
    this.reserved |= (this.length_size_of_trun_num & 0x0000000C) << 2;
    this.reserved |= this.length_size_of_sample_num & 0x00000003;
  }
  this._procField('reserved', 'uint', 32);
  if (this._parsing) {
    this.length_size_of_traf_num = (this.reserved & 0x00000030) >> 4;
    this.length_size_of_trun_num = (this.reserved & 0x0000000C) >> 2;
    this.length_size_of_sample_num = this.reserved & 0x00000003;
  }
  this._procField('number_of_entry', 'uint', 32);
  this._procEntries('entries', this.number_of_entry, function (entry) {
    this._procEntryField(entry, 'time', 'uint', this.version === 1 ? 64 : 32);
    this._procEntryField(entry, 'moof_offset', 'uint', this.version === 1 ? 64 : 32);
    this._procEntryField(entry, 'traf_number', 'uint', (this.length_size_of_traf_num + 1) * 8);
    this._procEntryField(entry, 'trun_number', 'uint', (this.length_size_of_trun_num + 1) * 8);
    this._procEntryField(entry, 'sample_number', 'uint', (this.length_size_of_sample_num + 1) * 8);
  });
};

// ISO/IEC 14496-12:2012 - 8.3.2 Track Header Box
ISOBox.prototype._boxProcessors['tkhd'] = function () {
  this._procFullBox();
  this._procField('creation_time', 'uint', this.version == 1 ? 64 : 32);
  this._procField('modification_time', 'uint', this.version == 1 ? 64 : 32);
  this._procField('track_ID', 'uint', 32);
  this._procField('reserved1', 'uint', 32);
  this._procField('duration', 'uint', this.version == 1 ? 64 : 32);
  this._procFieldArray('reserved2', 2, 'uint', 32);
  this._procField('layer', 'uint', 16);
  this._procField('alternate_group', 'uint', 16);
  this._procField('volume', 'template', 16);
  this._procField('reserved3', 'uint', 16);
  this._procFieldArray('matrix', 9, 'template', 32);
  this._procField('width', 'template', 32);
  this._procField('height', 'template', 32);
};

// ISO/IEC 14496-12:2012 - 8.8.3 Track Extends Box
ISOBox.prototype._boxProcessors['trex'] = function () {
  this._procFullBox();
  this._procField('track_ID', 'uint', 32);
  this._procField('default_sample_description_index', 'uint', 32);
  this._procField('default_sample_duration', 'uint', 32);
  this._procField('default_sample_size', 'uint', 32);
  this._procField('default_sample_flags', 'uint', 32);
};

// ISO/IEC 14496-12:2012 - 8.8.8 Track Run Box
// Note: the 'trun' box has a direct relation to the 'tfhd' box for defaults.
// These defaults are not set explicitly here, but are left to resolve for the user.
ISOBox.prototype._boxProcessors['trun'] = function () {
  this._procFullBox();
  this._procField('sample_count', 'uint', 32);
  if (this.flags & 0x1) this._procField('data_offset', 'int', 32);
  if (this.flags & 0x4) this._procField('first_sample_flags', 'uint', 32);
  this._procEntries('samples', this.sample_count, function (sample) {
    if (this.flags & 0x100) this._procEntryField(sample, 'sample_duration', 'uint', 32);
    if (this.flags & 0x200) this._procEntryField(sample, 'sample_size', 'uint', 32);
    if (this.flags & 0x400) this._procEntryField(sample, 'sample_flags', 'uint', 32);
    if (this.flags & 0x800) this._procEntryField(sample, 'sample_composition_time_offset', this.version === 1 ? 'int' : 'uint', 32);
  });
};

// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box
ISOBox.prototype._boxProcessors['url '] = ISOBox.prototype._boxProcessors['urn '] = function () {
  this._procFullBox();
  if (this.type === 'urn ') {
    this._procField('name', 'string', -1);
  }
  this._procField('location', 'string', -1);
};

// ISO/IEC 14496-30:2014 - WebVTT Source Label Box
ISOBox.prototype._boxProcessors['vlab'] = function () {
  this._procField('source_label', 'utf8');
};

// ISO/IEC 14496-12:2012 - 8.4.5.2 Video Media Header Box
ISOBox.prototype._boxProcessors['vmhd'] = function () {
  this._procFullBox();
  this._procField('graphicsmode', 'uint', 16);
  this._procFieldArray('opcolor', 3, 'uint', 16);
};

// ISO/IEC 14496-30:2014 - WebVTT Configuration Box
ISOBox.prototype._boxProcessors['vttC'] = function () {
  this._procField('config', 'utf8');
};

// ISO/IEC 14496-30:2014 - WebVTT Empty Sample Box
ISOBox.prototype._boxProcessors['vtte'] = function () {
  // Nothing should happen here.
};

/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/dashjs/externals/base64.js":
/*!*************************************************!*\
  !*** ./node_modules/dashjs/externals/base64.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* $Date: 2007-06-12 18:02:31 $ */

// from: http://bannister.us/weblog/2007/06/09/simple-base64-encodedecode-javascript/
// Handles encode/decode of ASCII and Unicode strings.

var UTF8 = {};
UTF8.encode = function (s) {
    var u = [];
    for (var i = 0; i < s.length; ++i) {
        var c = s.charCodeAt(i);
        if (c < 0x80) {
            u.push(c);
        } else if (c < 0x800) {
            u.push(0xC0 | c >> 6);
            u.push(0x80 | 63 & c);
        } else if (c < 0x10000) {
            u.push(0xE0 | c >> 12);
            u.push(0x80 | 63 & c >> 6);
            u.push(0x80 | 63 & c);
        } else {
            u.push(0xF0 | c >> 18);
            u.push(0x80 | 63 & c >> 12);
            u.push(0x80 | 63 & c >> 6);
            u.push(0x80 | 63 & c);
        }
    }
    return u;
};
UTF8.decode = function (u) {
    var a = [];
    var i = 0;
    while (i < u.length) {
        var v = u[i++];
        if (v < 0x80) {
            // no need to mask byte
        } else if (v < 0xE0) {
            v = (31 & v) << 6;
            v |= 63 & u[i++];
        } else if (v < 0xF0) {
            v = (15 & v) << 12;
            v |= (63 & u[i++]) << 6;
            v |= 63 & u[i++];
        } else {
            v = (7 & v) << 18;
            v |= (63 & u[i++]) << 12;
            v |= (63 & u[i++]) << 6;
            v |= 63 & u[i++];
        }
        a.push(String.fromCharCode(v));
    }
    return a.join('');
};

var BASE64 = {};
(function (T) {
    var encodeArray = function encodeArray(u) {
        var i = 0;
        var a = [];
        var n = 0 | u.length / 3;
        while (0 < n--) {
            var v = (u[i] << 16) + (u[i + 1] << 8) + u[i + 2];
            i += 3;
            a.push(T.charAt(63 & v >> 18));
            a.push(T.charAt(63 & v >> 12));
            a.push(T.charAt(63 & v >> 6));
            a.push(T.charAt(63 & v));
        }
        if (2 == u.length - i) {
            var v = (u[i] << 16) + (u[i + 1] << 8);
            a.push(T.charAt(63 & v >> 18));
            a.push(T.charAt(63 & v >> 12));
            a.push(T.charAt(63 & v >> 6));
            a.push('=');
        } else if (1 == u.length - i) {
            var v = u[i] << 16;
            a.push(T.charAt(63 & v >> 18));
            a.push(T.charAt(63 & v >> 12));
            a.push('==');
        }
        return a.join('');
    };
    var R = function () {
        var a = [];
        for (var i = 0; i < T.length; ++i) {
            a[T.charCodeAt(i)] = i;
        }
        a['='.charCodeAt(0)] = 0;
        return a;
    }();
    var decodeArray = function decodeArray(s) {
        var i = 0;
        var u = [];
        var n = 0 | s.length / 4;
        while (0 < n--) {
            var v = (R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i + 1)] << 12) + (R[s.charCodeAt(i + 2)] << 6) + R[s.charCodeAt(i + 3)];
            u.push(255 & v >> 16);
            u.push(255 & v >> 8);
            u.push(255 & v);
            i += 4;
        }
        if (u) {
            if ('=' == s.charAt(i - 2)) {
                u.pop();
                u.pop();
            } else if ('=' == s.charAt(i - 1)) {
                u.pop();
            }
        }
        return u;
    };
    var ASCII = {};
    ASCII.encode = function (s) {
        var u = [];
        for (var i = 0; i < s.length; ++i) {
            u.push(s.charCodeAt(i));
        }
        return u;
    };
    ASCII.decode = function (u) {
        for (var i = 0; i < s.length; ++i) {
            a[i] = String.fromCharCode(a[i]);
        }
        return a.join('');
    };
    BASE64.decodeArray = function (s) {
        var u = decodeArray(s);
        return new Uint8Array(u);
    };
    BASE64.encodeASCII = function (s) {
        var u = ASCII.encode(s);
        return encodeArray(u);
    };
    BASE64.decodeASCII = function (s) {
        var a = decodeArray(s);
        return ASCII.decode(a);
    };
    BASE64.encode = function (s) {
        var u = UTF8.encode(s);
        return encodeArray(u);
    };
    BASE64.decode = function (s) {
        var u = decodeArray(s);
        return UTF8.decode(u);
    };
})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");

/*The following polyfills are not used in dash.js but have caused multiplayer integration issues.
 Therefore commenting them out.
if (undefined === btoa) {
    var btoa = BASE64.encode;
}
if (undefined === atob) {
    var atob = BASE64.decode;
}
*/

if (true) {
    exports.decode = BASE64.decode;
    exports.decodeArray = BASE64.decodeArray;
    exports.encode = BASE64.encode;
    exports.encodeASCII = BASE64.encodeASCII;
}

/***/ }),

/***/ "./node_modules/dashjs/externals/cea608-parser.js":
/*!********************************************************!*\
  !*** ./node_modules/dashjs/externals/cea608-parser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2015-2016, DASH Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  2. Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
(function (exports) {

    "use strict";

    /**
     *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
     */

    var specialCea608CharsCodes = {
        0x2a: 0xe1, // lowercase a, acute accent
        0x5c: 0xe9, // lowercase e, acute accent
        0x5e: 0xed, // lowercase i, acute accent
        0x5f: 0xf3, // lowercase o, acute accent
        0x60: 0xfa, // lowercase u, acute accent
        0x7b: 0xe7, // lowercase c with cedilla
        0x7c: 0xf7, // division symbol
        0x7d: 0xd1, // uppercase N tilde
        0x7e: 0xf1, // lowercase n tilde
        0x7f: 0x2588, // Full block
        // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
        // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
        // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
        0x80: 0xae, // Registered symbol (R)
        0x81: 0xb0, // degree sign
        0x82: 0xbd, // 1/2 symbol
        0x83: 0xbf, // Inverted (open) question mark
        0x84: 0x2122, // Trademark symbol (TM)
        0x85: 0xa2, // Cents symbol
        0x86: 0xa3, // Pounds sterling
        0x87: 0x266a, // Music 8'th note
        0x88: 0xe0, // lowercase a, grave accent
        0x89: 0x20, // transparent space (regular)
        0x8a: 0xe8, // lowercase e, grave accent
        0x8b: 0xe2, // lowercase a, circumflex accent
        0x8c: 0xea, // lowercase e, circumflex accent
        0x8d: 0xee, // lowercase i, circumflex accent
        0x8e: 0xf4, // lowercase o, circumflex accent
        0x8f: 0xfb, // lowercase u, circumflex accent
        // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
        // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
        0x90: 0xc1, // capital letter A with acute
        0x91: 0xc9, // capital letter E with acute
        0x92: 0xd3, // capital letter O with acute
        0x93: 0xda, // capital letter U with acute
        0x94: 0xdc, // capital letter U with diaresis
        0x95: 0xfc, // lowercase letter U with diaeresis
        0x96: 0x2018, // opening single quote
        0x97: 0xa1, // inverted exclamation mark
        0x98: 0x2a, // asterisk
        0x99: 0x2019, // closing single quote
        0x9a: 0x2501, // box drawings heavy horizontal
        0x9b: 0xa9, // copyright sign
        0x9c: 0x2120, // Service mark
        0x9d: 0x2022, // (round) bullet
        0x9e: 0x201c, // Left double quotation mark
        0x9f: 0x201d, // Right double quotation mark
        0xa0: 0xc0, // uppercase A, grave accent
        0xa1: 0xc2, // uppercase A, circumflex
        0xa2: 0xc7, // uppercase C with cedilla
        0xa3: 0xc8, // uppercase E, grave accent
        0xa4: 0xca, // uppercase E, circumflex
        0xa5: 0xcb, // capital letter E with diaresis
        0xa6: 0xeb, // lowercase letter e with diaresis
        0xa7: 0xce, // uppercase I, circumflex
        0xa8: 0xcf, // uppercase I, with diaresis
        0xa9: 0xef, // lowercase i, with diaresis
        0xaa: 0xd4, // uppercase O, circumflex
        0xab: 0xd9, // uppercase U, grave accent
        0xac: 0xf9, // lowercase u, grave accent
        0xad: 0xdb, // uppercase U, circumflex
        0xae: 0xab, // left-pointing double angle quotation mark
        0xaf: 0xbb, // right-pointing double angle quotation mark
        // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
        // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
        0xb0: 0xc3, // Uppercase A, tilde
        0xb1: 0xe3, // Lowercase a, tilde
        0xb2: 0xcd, // Uppercase I, acute accent
        0xb3: 0xcc, // Uppercase I, grave accent
        0xb4: 0xec, // Lowercase i, grave accent
        0xb5: 0xd2, // Uppercase O, grave accent
        0xb6: 0xf2, // Lowercase o, grave accent
        0xb7: 0xd5, // Uppercase O, tilde
        0xb8: 0xf5, // Lowercase o, tilde
        0xb9: 0x7b, // Open curly brace
        0xba: 0x7d, // Closing curly brace
        0xbb: 0x5c, // Backslash
        0xbc: 0x5e, // Caret
        0xbd: 0x5f, // Underscore
        0xbe: 0x7c, // Pipe (vertical line)
        0xbf: 0x223c, // Tilde operator
        0xc0: 0xc4, // Uppercase A, umlaut
        0xc1: 0xe4, // Lowercase A, umlaut
        0xc2: 0xd6, // Uppercase O, umlaut
        0xc3: 0xf6, // Lowercase o, umlaut
        0xc4: 0xdf, // Esszett (sharp S)
        0xc5: 0xa5, // Yen symbol
        0xc6: 0xa4, // Generic currency sign
        0xc7: 0x2503, // Box drawings heavy vertical
        0xc8: 0xc5, // Uppercase A, ring
        0xc9: 0xe5, // Lowercase A, ring
        0xca: 0xd8, // Uppercase O, stroke
        0xcb: 0xf8, // Lowercase o, strok
        0xcc: 0x250f, // Box drawings heavy down and right
        0xcd: 0x2513, // Box drawings heavy down and left
        0xce: 0x2517, // Box drawings heavy up and right
        0xcf: 0x251b // Box drawings heavy up and left
    };

    /**
     * Get Unicode Character from CEA-608 byte code
     */
    var getCharForByte = function getCharForByte(byte) {
        var charCode = byte;
        if (specialCea608CharsCodes.hasOwnProperty(byte)) {
            charCode = specialCea608CharsCodes[byte];
        }
        return String.fromCharCode(charCode);
    };

    var NR_ROWS = 15,
        NR_COLS = 32;
    // Tables to look up row from PAC data
    var rowsLowCh1 = { 0x11: 1, 0x12: 3, 0x15: 5, 0x16: 7, 0x17: 9, 0x10: 11, 0x13: 12, 0x14: 14 };
    var rowsHighCh1 = { 0x11: 2, 0x12: 4, 0x15: 6, 0x16: 8, 0x17: 10, 0x13: 13, 0x14: 15 };
    var rowsLowCh2 = { 0x19: 1, 0x1A: 3, 0x1D: 5, 0x1E: 7, 0x1F: 9, 0x18: 11, 0x1B: 12, 0x1C: 14 };
    var rowsHighCh2 = { 0x19: 2, 0x1A: 4, 0x1D: 6, 0x1E: 8, 0x1F: 10, 0x1B: 13, 0x1C: 15 };

    var backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];

    /**
     * Simple logger class to be able to write with time-stamps and filter on level.
     */
    var logger = {
        verboseFilter: { 'DATA': 3, 'DEBUG': 3, 'INFO': 2, 'WARNING': 2, 'TEXT': 1, 'ERROR': 0 },
        time: null,
        verboseLevel: 0, // Only write errors
        setTime: function setTime(newTime) {
            this.time = newTime;
        },
        log: function log(severity, msg) {
            var minLevel = this.verboseFilter[severity];
            if (this.verboseLevel >= minLevel) {
                console.log(this.time + " [" + severity + "] " + msg);
            }
        }
    };

    var numArrayToHexArray = function numArrayToHexArray(numArray) {
        var hexArray = [];
        for (var j = 0; j < numArray.length; j++) {
            hexArray.push(numArray[j].toString(16));
        }
        return hexArray;
    };

    /**
     * State of CEA-608 pen or character
     * @constructor
     */
    var PenState = function PenState(foreground, underline, italics, background, flash) {
        this.foreground = foreground || "white";
        this.underline = underline || false;
        this.italics = italics || false;
        this.background = background || "black";
        this.flash = flash || false;
    };

    PenState.prototype = {

        reset: function reset() {
            this.foreground = "white";
            this.underline = false;
            this.italics = false;
            this.background = "black";
            this.flash = false;
        },

        setStyles: function setStyles(styles) {
            var attribs = ["foreground", "underline", "italics", "background", "flash"];
            for (var i = 0; i < attribs.length; i++) {
                var style = attribs[i];
                if (styles.hasOwnProperty(style)) {
                    this[style] = styles[style];
                }
            }
        },

        isDefault: function isDefault() {
            return this.foreground === "white" && !this.underline && !this.italics && this.background === "black" && !this.flash;
        },

        equals: function equals(other) {
            return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
        },

        copy: function copy(newPenState) {
            this.foreground = newPenState.foreground;
            this.underline = newPenState.underline;
            this.italics = newPenState.italics;
            this.background = newPenState.background;
            this.flash = newPenState.flash;
        },

        toString: function toString() {
            return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
        }
    };

    /**
     * Unicode character with styling and background.
     * @constructor
     */
    var StyledUnicodeChar = function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {
        this.uchar = uchar || ' '; // unicode character
        this.penState = new PenState(foreground, underline, italics, background, flash);
    };

    StyledUnicodeChar.prototype = {

        reset: function reset() {
            this.uchar = ' ';
            this.penState.reset();
        },

        setChar: function setChar(uchar, newPenState) {
            this.uchar = uchar;
            this.penState.copy(newPenState);
        },

        setPenState: function setPenState(newPenState) {
            this.penState.copy(newPenState);
        },

        equals: function equals(other) {
            return this.uchar === other.uchar && this.penState.equals(other.penState);
        },

        copy: function copy(newChar) {
            this.uchar = newChar.uchar;
            this.penState.copy(newChar.penState);
        },

        isEmpty: function isEmpty() {
            return this.uchar === ' ' && this.penState.isDefault();
        }
    };

    /**
     * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
     * @constructor
     */
    var Row = function Row() {
        this.chars = [];
        for (var i = 0; i < NR_COLS; i++) {
            this.chars.push(new StyledUnicodeChar());
        }
        this.pos = 0;
        this.currPenState = new PenState();
    };

    Row.prototype = {

        equals: function equals(other) {
            var equal = true;
            for (var i = 0; i < NR_COLS; i++) {
                if (!this.chars[i].equals(other.chars[i])) {
                    equal = false;
                    break;
                }
            }
            return equal;
        },

        copy: function copy(other) {
            for (var i = 0; i < NR_COLS; i++) {
                this.chars[i].copy(other.chars[i]);
            }
        },

        isEmpty: function isEmpty() {
            var empty = true;
            for (var i = 0; i < NR_COLS; i++) {
                if (!this.chars[i].isEmpty()) {
                    empty = false;
                    break;
                }
            }
            return empty;
        },

        /**
         *  Set the cursor to a valid column.
         */
        setCursor: function setCursor(absPos) {
            if (this.pos !== absPos) {
                this.pos = absPos;
            }
            if (this.pos < 0) {
                logger.log("ERROR", "Negative cursor position " + this.pos);
                this.pos = 0;
            } else if (this.pos > NR_COLS) {
                logger.log("ERROR", "Too large cursor position " + this.pos);
                this.pos = NR_COLS;
            }
        },

        /** 
         * Move the cursor relative to current position.
         */
        moveCursor: function moveCursor(relPos) {
            var newPos = this.pos + relPos;
            if (relPos > 1) {
                for (var i = this.pos + 1; i < newPos + 1; i++) {
                    this.chars[i].setPenState(this.currPenState);
                }
            }
            this.setCursor(newPos);
        },

        /**
         * Backspace, move one step back and clear character.
         */
        backSpace: function backSpace() {
            this.moveCursor(-1);
            this.chars[this.pos].setChar(' ', this.currPenState);
        },

        insertChar: function insertChar(byte) {
            if (byte >= 0x90) {
                //Extended char
                this.backSpace();
            }
            var char = getCharForByte(byte);
            if (this.pos >= NR_COLS) {
                logger.log("ERROR", "Cannot insert " + byte.toString(16) + " (" + char + ") at position " + this.pos + ". Skipping it!");
                return;
            }
            this.chars[this.pos].setChar(char, this.currPenState);
            this.moveCursor(1);
        },

        clearFromPos: function clearFromPos(startPos) {
            var i;
            for (i = startPos; i < NR_COLS; i++) {
                this.chars[i].reset();
            }
        },

        clear: function clear() {
            this.clearFromPos(0);
            this.pos = 0;
            this.currPenState.reset();
        },

        clearToEndOfRow: function clearToEndOfRow() {
            this.clearFromPos(this.pos);
        },

        getTextString: function getTextString() {
            var chars = [];
            var empty = true;
            for (var i = 0; i < NR_COLS; i++) {
                var char = this.chars[i].uchar;
                if (char !== " ") {
                    empty = false;
                }
                chars.push(char);
            }
            if (empty) {
                return "";
            } else {
                return chars.join("");
            }
        },

        setPenStyles: function setPenStyles(styles) {
            this.currPenState.setStyles(styles);
            var currChar = this.chars[this.pos];
            currChar.setPenState(this.currPenState);
        }
    };

    /**
     * Keep a CEA-608 screen of 32x15 styled characters
     * @constructor
    */
    var CaptionScreen = function CaptionScreen() {

        this.rows = [];
        for (var i = 0; i < NR_ROWS; i++) {
            this.rows.push(new Row()); // Note that we use zero-based numbering (0-14)
        }
        this.currRow = NR_ROWS - 1;
        this.nrRollUpRows = null;
        this.reset();
    };

    CaptionScreen.prototype = {

        reset: function reset() {
            for (var i = 0; i < NR_ROWS; i++) {
                this.rows[i].clear();
            }
            this.currRow = NR_ROWS - 1;
        },

        equals: function equals(other) {
            var equal = true;
            for (var i = 0; i < NR_ROWS; i++) {
                if (!this.rows[i].equals(other.rows[i])) {
                    equal = false;
                    break;
                }
            }
            return equal;
        },

        copy: function copy(other) {
            for (var i = 0; i < NR_ROWS; i++) {
                this.rows[i].copy(other.rows[i]);
            }
        },

        isEmpty: function isEmpty() {
            var empty = true;
            for (var i = 0; i < NR_ROWS; i++) {
                if (!this.rows[i].isEmpty()) {
                    empty = false;
                    break;
                }
            }
            return empty;
        },

        backSpace: function backSpace() {
            var row = this.rows[this.currRow];
            row.backSpace();
        },

        clearToEndOfRow: function clearToEndOfRow() {
            var row = this.rows[this.currRow];
            row.clearToEndOfRow();
        },

        /**
         * Insert a character (without styling) in the current row.
         */
        insertChar: function insertChar(char) {
            var row = this.rows[this.currRow];
            row.insertChar(char);
        },

        setPen: function setPen(styles) {
            var row = this.rows[this.currRow];
            row.setPenStyles(styles);
        },

        moveCursor: function moveCursor(relPos) {
            var row = this.rows[this.currRow];
            row.moveCursor(relPos);
        },

        setCursor: function setCursor(absPos) {
            logger.log("INFO", "setCursor: " + absPos);
            var row = this.rows[this.currRow];
            row.setCursor(absPos);
        },

        setPAC: function setPAC(pacData) {
            logger.log("INFO", "pacData = " + JSON.stringify(pacData));
            var newRow = pacData.row - 1;
            if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {
                newRow = this.nrRollUpRows - 1;
            }
            this.currRow = newRow;
            var row = this.rows[this.currRow];
            if (pacData.indent !== null) {
                var indent = pacData.indent;
                var prevPos = Math.max(indent - 1, 0);
                row.setCursor(pacData.indent);
                pacData.color = row.chars[prevPos].penState.foreground;
            }
            var styles = { foreground: pacData.color, underline: pacData.underline, italics: pacData.italics, background: 'black', flash: false };
            this.setPen(styles);
        },

        /**
         * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
         */
        setBkgData: function setBkgData(bkgData) {

            logger.log("INFO", "bkgData = " + JSON.stringify(bkgData));
            this.backSpace();
            this.setPen(bkgData);
            this.insertChar(0x20); //Space
        },

        setRollUpRows: function setRollUpRows(nrRows) {
            this.nrRollUpRows = nrRows;
        },

        rollUp: function rollUp() {
            if (this.nrRollUpRows === null) {
                logger.log("DEBUG", "roll_up but nrRollUpRows not set yet");
                return; //Not properly setup
            }
            logger.log("TEXT", this.getDisplayText());
            var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
            var topRow = this.rows.splice(topRowIndex, 1)[0];
            topRow.clear();
            this.rows.splice(this.currRow, 0, topRow);
            logger.log("INFO", "Rolling up");
            //logger.log("TEXT", this.get_display_text())
        },

        /**
         * Get all non-empty rows with as unicode text. 
         */
        getDisplayText: function getDisplayText(asOneRow) {
            asOneRow = asOneRow || false;
            var displayText = [];
            var text = "";
            var rowNr = -1;
            for (var i = 0; i < NR_ROWS; i++) {
                var rowText = this.rows[i].getTextString();
                if (rowText) {
                    rowNr = i + 1;
                    if (asOneRow) {
                        displayText.push("Row " + rowNr + ': "' + rowText + '"');
                    } else {
                        displayText.push(rowText.trim());
                    }
                }
            }
            if (displayText.length > 0) {
                if (asOneRow) {
                    text = "[" + displayText.join(" | ") + "]";
                } else {
                    text = displayText.join("\n");
                }
            }
            return text;
        },

        getTextAndFormat: function getTextAndFormat() {
            return this.rows;
        }
    };

    /**
     * Handle a CEA-608 channel and send decoded data to outputFilter
     * @constructor
     * @param {Number} channelNumber (1 or 2)
     * @param {CueHandler} outputFilter Output from channel1 newCue(startTime, endTime, captionScreen)
    */
    var Cea608Channel = function Cea608Channel(channelNumber, outputFilter) {

        this.chNr = channelNumber;
        this.outputFilter = outputFilter;
        this.mode = null;
        this.verbose = 0;
        this.displayedMemory = new CaptionScreen();
        this.nonDisplayedMemory = new CaptionScreen();
        this.lastOutputScreen = new CaptionScreen();
        this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
        this.writeScreen = this.displayedMemory;
        this.mode = null;
        this.cueStartTime = null; // Keeps track of where a cue started.
    };

    Cea608Channel.prototype = {

        modes: ["MODE_ROLL-UP", "MODE_POP-ON", "MODE_PAINT-ON", "MODE_TEXT"],

        reset: function reset() {
            this.mode = null;
            this.displayedMemory.reset();
            this.nonDisplayedMemory.reset();
            this.lastOutputScreen.reset();
            this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
            this.writeScreen = this.displayedMemory;
            this.mode = null;
            this.cueStartTime = null;
            this.lastCueEndTime = null;
        },

        getHandler: function getHandler() {
            return this.outputFilter;
        },

        setHandler: function setHandler(newHandler) {
            this.outputFilter = newHandler;
        },

        setPAC: function setPAC(pacData) {
            this.writeScreen.setPAC(pacData);
        },

        setBkgData: function setBkgData(bkgData) {
            this.writeScreen.setBkgData(bkgData);
        },

        setMode: function setMode(newMode) {
            if (newMode === this.mode) {
                return;
            }
            this.mode = newMode;
            logger.log("INFO", "MODE=" + newMode);
            if (this.mode == "MODE_POP-ON") {
                this.writeScreen = this.nonDisplayedMemory;
            } else {
                this.writeScreen = this.displayedMemory;
                this.writeScreen.reset();
            }
            if (this.mode !== "MODE_ROLL-UP") {
                this.displayedMemory.nrRollUpRows = null;
                this.nonDisplayedMemory.nrRollUpRows = null;
            }
            this.mode = newMode;
        },

        insertChars: function insertChars(chars) {
            for (var i = 0; i < chars.length; i++) {
                this.writeScreen.insertChar(chars[i]);
            }
            var screen = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
            logger.log("INFO", screen + ": " + this.writeScreen.getDisplayText(true));
            if (this.mode === "MODE_PAINT-ON" || this.mode === "MODE_ROLL-UP") {
                logger.log("TEXT", "DISPLAYED: " + this.displayedMemory.getDisplayText(true));
                this.outputDataUpdate();
            }
        },

        cc_RCL: function cc_RCL() {
            // Resume Caption Loading (switch mode to Pop On)
            logger.log("INFO", "RCL - Resume Caption Loading");
            this.setMode("MODE_POP-ON");
        },
        cc_BS: function cc_BS() {
            // BackSpace
            logger.log("INFO", "BS - BackSpace");
            if (this.mode === "MODE_TEXT") {
                return;
            }
            this.writeScreen.backSpace();
            if (this.writeScreen === this.displayedMemory) {
                this.outputDataUpdate();
            }
        },
        cc_AOF: function cc_AOF() {
            // Reserved (formerly Alarm Off)
            return;
        },
        cc_AON: function cc_AON() {
            // Reserved (formerly Alarm On)
            return;
        },
        cc_DER: function cc_DER() {
            // Delete to End of Row
            logger.log("INFO", "DER- Delete to End of Row");
            this.writeScreen.clearToEndOfRow();
            this.outputDataUpdate();
        },
        cc_RU: function cc_RU(nrRows) {
            //Roll-Up Captions-2,3,or 4 Rows
            logger.log("INFO", "RU(" + nrRows + ") - Roll Up");
            this.writeScreen = this.displayedMemory;
            this.setMode("MODE_ROLL-UP");
            this.writeScreen.setRollUpRows(nrRows);
        },
        cc_FON: function cc_FON() {
            //Flash On
            logger.log("INFO", "FON - Flash On");
            this.writeScreen.setPen({ flash: true });
        },
        cc_RDC: function cc_RDC() {
            // Resume Direct Captioning (switch mode to PaintOn)
            logger.log("INFO", "RDC - Resume Direct Captioning");
            this.setMode("MODE_PAINT-ON");
        },
        cc_TR: function cc_TR() {
            // Text Restart in text mode (not supported, however)
            logger.log("INFO", "TR");
            this.setMode("MODE_TEXT");
        },
        cc_RTD: function cc_RTD() {
            // Resume Text Display in Text mode (not supported, however)
            logger.log("INFO", "RTD");
            this.setMode("MODE_TEXT");
        },
        cc_EDM: function cc_EDM() {
            // Erase Displayed Memory
            logger.log("INFO", "EDM - Erase Displayed Memory");
            this.displayedMemory.reset();
            this.outputDataUpdate();
        },
        cc_CR: function cc_CR() {
            // Carriage Return
            logger.log("CR - Carriage Return");
            this.writeScreen.rollUp();
            this.outputDataUpdate();
        },
        cc_ENM: function cc_ENM() {
            //Erase Non-Displayed Memory
            logger.log("INFO", "ENM - Erase Non-displayed Memory");
            this.nonDisplayedMemory.reset();
        },
        cc_EOC: function cc_EOC() {
            //End of Caption (Flip Memories)
            logger.log("INFO", "EOC - End Of Caption");
            if (this.mode === "MODE_POP-ON") {
                var tmp = this.displayedMemory;
                this.displayedMemory = this.nonDisplayedMemory;
                this.nonDisplayedMemory = tmp;
                this.writeScreen = this.nonDisplayedMemory;
                logger.log("TEXT", "DISP: " + this.displayedMemory.getDisplayText());
            }
            this.outputDataUpdate();
        },
        cc_TO: function cc_TO(nrCols) {
            // Tab Offset 1,2, or 3 columns
            logger.log("INFO", "TO(" + nrCols + ") - Tab Offset");
            this.writeScreen.moveCursor(nrCols);
        },
        cc_MIDROW: function cc_MIDROW(secondByte) {
            // Parse MIDROW command
            var styles = { flash: false };
            styles.underline = secondByte % 2 === 1;
            styles.italics = secondByte >= 0x2e;
            if (!styles.italics) {
                var colorIndex = Math.floor(secondByte / 2) - 0x10;
                var colors = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"];
                styles.foreground = colors[colorIndex];
            } else {
                styles.foreground = "white";
            }
            logger.log("INFO", "MIDROW: " + JSON.stringify(styles));
            this.writeScreen.setPen(styles);
        },

        outputDataUpdate: function outputDataUpdate() {
            var t = logger.time;
            if (t === null) {
                return;
            }
            if (this.outputFilter) {
                if (this.outputFilter.updateData) {
                    this.outputFilter.updateData(t, this.displayedMemory);
                }
                if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {
                    // Start of a new cue
                    this.cueStartTime = t;
                } else {
                    if (!this.displayedMemory.equals(this.lastOutputScreen)) {
                        if (this.outputFilter.newCue) {
                            this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen);
                        }
                        this.cueStartTime = this.displayedMemory.isEmpty() ? null : t;
                    }
                }
                this.lastOutputScreen.copy(this.displayedMemory);
            }
        },

        cueSplitAtTime: function cueSplitAtTime(t) {
            if (this.outputFilter) {
                if (!this.displayedMemory.isEmpty()) {
                    if (this.outputFilter.newCue) {
                        this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);
                    }
                    this.cueStartTime = t;
                }
            }
        }
    };

    /**
     * Parse CEA-608 data and send decoded data to out1 and out2.
     * @constructor
     * @param {Number} field  CEA-608 field (1 or 2)
     * @param {CueHandler} out1 Output from channel1 newCue(startTime, endTime, captionScreen)
     * @param {CueHandler} out2 Output from channel2 newCue(startTime, endTime, captionScreen)
     */
    var Cea608Parser = function Cea608Parser(field, out1, out2) {
        this.field = field || 1;
        this.outputs = [out1, out2];
        this.channels = [new Cea608Channel(1, out1), new Cea608Channel(2, out2)];
        this.currChNr = -1; // Will be 1 or 2
        this.lastCmdA = null; // First byte of last command
        this.lastCmdB = null; // Second byte of last command
        this.bufferedData = [];
        this.startTime = null;
        this.lastTime = null;
        this.dataCounters = { 'padding': 0, 'char': 0, 'cmd': 0, 'other': 0 };
    };

    Cea608Parser.prototype = {

        getHandler: function getHandler(index) {
            return this.channels[index].getHandler();
        },

        setHandler: function setHandler(index, newHandler) {
            this.channels[index].setHandler(newHandler);
        },

        /**
         * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
         */
        addData: function addData(t, byteList) {
            var cmdFound,
                a,
                b,
                charsFound = false;

            this.lastTime = t;
            logger.setTime(t);

            for (var i = 0; i < byteList.length; i += 2) {
                a = byteList[i] & 0x7f;
                b = byteList[i + 1] & 0x7f;

                if (a >= 0x10 && a <= 0x1f && a === this.lastCmdA && b === this.lastCmdB) {
                    this.lastCmdA = null;
                    this.lastCmdB = null;
                    logger.log("DEBUG", "Repeated command (" + numArrayToHexArray([a, b]) + ") is dropped");
                    continue; // Repeated commands are dropped (once)
                }

                if (a === 0 && b === 0) {
                    this.dataCounters.padding += 2;
                    continue;
                } else {
                    logger.log("DATA", "[" + numArrayToHexArray([byteList[i], byteList[i + 1]]) + "] -> (" + numArrayToHexArray([a, b]) + ")");
                }
                cmdFound = this.parseCmd(a, b);
                if (!cmdFound) {
                    cmdFound = this.parseMidrow(a, b);
                }
                if (!cmdFound) {
                    cmdFound = this.parsePAC(a, b);
                }
                if (!cmdFound) {
                    cmdFound = this.parseBackgroundAttributes(a, b);
                }
                if (!cmdFound) {
                    charsFound = this.parseChars(a, b);
                    if (charsFound) {
                        if (this.currChNr && this.currChNr >= 0) {
                            var channel = this.channels[this.currChNr - 1];
                            channel.insertChars(charsFound);
                        } else {
                            logger.log("WARNING", "No channel found yet. TEXT-MODE?");
                        }
                    }
                }
                if (cmdFound) {
                    this.dataCounters.cmd += 2;
                } else if (charsFound) {
                    this.dataCounters.char += 2;
                } else {
                    this.dataCounters.other += 2;
                    logger.log("WARNING", "Couldn't parse cleaned data " + numArrayToHexArray([a, b]) + " orig: " + numArrayToHexArray([byteList[i], byteList[i + 1]]));
                }
            }
        },

        /**
         * Parse Command.
         * @returns {Boolean} Tells if a command was found
         */
        parseCmd: function parseCmd(a, b) {
            var chNr = null;

            var cond1 = (a === 0x14 || a === 0x15 || a === 0x1C || a === 0x1D) && 0x20 <= b && b <= 0x2F;
            var cond2 = (a === 0x17 || a === 0x1F) && 0x21 <= b && b <= 0x23;
            if (!(cond1 || cond2)) {
                return false;
            }

            if (a === 0x14 || a === 0x15 || a === 0x17) {
                chNr = 1;
            } else {
                chNr = 2; // (a === 0x1C || a === 0x1D || a=== 0x1f)
            }

            var channel = this.channels[chNr - 1];

            if (a === 0x14 || a === 0x15 || a === 0x1C || a === 0x1D) {
                if (b === 0x20) {
                    channel.cc_RCL();
                } else if (b === 0x21) {
                    channel.cc_BS();
                } else if (b === 0x22) {
                    channel.cc_AOF();
                } else if (b === 0x23) {
                    channel.cc_AON();
                } else if (b === 0x24) {
                    channel.cc_DER();
                } else if (b === 0x25) {
                    channel.cc_RU(2);
                } else if (b === 0x26) {
                    channel.cc_RU(3);
                } else if (b === 0x27) {
                    channel.cc_RU(4);
                } else if (b === 0x28) {
                    channel.cc_FON();
                } else if (b === 0x29) {
                    channel.cc_RDC();
                } else if (b === 0x2A) {
                    channel.cc_TR();
                } else if (b === 0x2B) {
                    channel.cc_RTD();
                } else if (b === 0x2C) {
                    channel.cc_EDM();
                } else if (b === 0x2D) {
                    channel.cc_CR();
                } else if (b === 0x2E) {
                    channel.cc_ENM();
                } else if (b === 0x2F) {
                    channel.cc_EOC();
                }
            } else {
                //a == 0x17 || a == 0x1F
                channel.cc_TO(b - 0x20);
            }
            this.lastCmdA = a;
            this.lastCmdB = b;
            this.currChNr = chNr;
            return true;
        },

        /**
         * Parse midrow styling command
         * @returns {Boolean}
         */
        parseMidrow: function parseMidrow(a, b) {
            var chNr = null;

            if ((a === 0x11 || a === 0x19) && 0x20 <= b && b <= 0x2f) {
                if (a === 0x11) {
                    chNr = 1;
                } else {
                    chNr = 2;
                }
                if (chNr !== this.currChNr) {
                    logger.log("ERROR", "Mismatch channel in midrow parsing");
                    return false;
                }
                var channel = this.channels[chNr - 1];
                // cea608 spec says midrow codes should inject a space
                channel.insertChars([0x20]);
                channel.cc_MIDROW(b);
                logger.log("DEBUG", "MIDROW (" + numArrayToHexArray([a, b]) + ")");
                this.lastCmdA = a;
                this.lastCmdB = b;
                return true;
            }
            return false;
        },
        /**
         * Parse Preable Access Codes (Table 53).
         * @returns {Boolean} Tells if PAC found
         */
        parsePAC: function parsePAC(a, b) {

            var chNr = null;
            var row = null;

            var case1 = (0x11 <= a && a <= 0x17 || 0x19 <= a && a <= 0x1F) && 0x40 <= b && b <= 0x7F;
            var case2 = (a === 0x10 || a === 0x18) && 0x40 <= b && b <= 0x5F;
            if (!(case1 || case2)) {
                return false;
            }

            chNr = a <= 0x17 ? 1 : 2;

            if (0x40 <= b && b <= 0x5F) {
                row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];
            } else {
                // 0x60 <= b <= 0x7F
                row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];
            }
            var pacData = this.interpretPAC(row, b);
            var channel = this.channels[chNr - 1];
            channel.setPAC(pacData);
            this.lastCmdA = a;
            this.lastCmdB = b;
            this.currChNr = chNr;
            return true;
        },

        /**
         * Interpret the second byte of the pac, and return the information.
         * @returns {Object} pacData with style parameters.
         */
        interpretPAC: function interpretPAC(row, byte) {
            var pacIndex = byte;
            var pacData = { color: null, italics: false, indent: null, underline: false, row: row };

            if (byte > 0x5F) {
                pacIndex = byte - 0x60;
            } else {
                pacIndex = byte - 0x40;
            }
            pacData.underline = (pacIndex & 1) === 1;
            if (pacIndex <= 0xd) {
                pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];
            } else if (pacIndex <= 0xf) {
                pacData.italics = true;
                pacData.color = 'white';
            } else {
                pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;
            }
            return pacData; // Note that row has zero offset. The spec uses 1.
        },

        /**
         * Parse characters.
         * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
         */
        parseChars: function parseChars(a, b) {

            var channelNr = null,
                charCodes = null,
                charCode1 = null,
                charCode2 = null;

            if (a >= 0x19) {
                channelNr = 2;
                charCode1 = a - 8;
            } else {
                channelNr = 1;
                charCode1 = a;
            }
            if (0x11 <= charCode1 && charCode1 <= 0x13) {
                // Special character
                var oneCode = b;
                if (charCode1 === 0x11) {
                    oneCode = b + 0x50;
                } else if (charCode1 === 0x12) {
                    oneCode = b + 0x70;
                } else {
                    oneCode = b + 0x90;
                }
                logger.log("INFO", "Special char '" + getCharForByte(oneCode) + "' in channel " + channelNr);
                charCodes = [oneCode];
                this.lastCmdA = a;
                this.lastCmdB = b;
            } else if (0x20 <= a && a <= 0x7f) {
                charCodes = b === 0 ? [a] : [a, b];
                this.lastCmdA = null;
                this.lastCmdB = null;
            }
            if (charCodes) {
                var hexCodes = numArrayToHexArray(charCodes);
                logger.log("DEBUG", "Char codes =  " + hexCodes.join(","));
            }
            return charCodes;
        },

        /**
        * Parse extended background attributes as well as new foreground color black.
        * @returns{Boolean} Tells if background attributes are found
        */
        parseBackgroundAttributes: function parseBackgroundAttributes(a, b) {
            var bkgData, index, chNr, channel;

            var case1 = (a === 0x10 || a === 0x18) && 0x20 <= b && b <= 0x2f;
            var case2 = (a === 0x17 || a === 0x1f) && 0x2d <= b && b <= 0x2f;
            if (!(case1 || case2)) {
                return false;
            }
            bkgData = {};
            if (a === 0x10 || a === 0x18) {
                index = Math.floor((b - 0x20) / 2);
                bkgData.background = backgroundColors[index];
                if (b % 2 === 1) {
                    bkgData.background = bkgData.background + "_semi";
                }
            } else if (b === 0x2d) {
                bkgData.background = "transparent";
            } else {
                bkgData.foreground = "black";
                if (b === 0x2f) {
                    bkgData.underline = true;
                }
            }
            chNr = a < 0x18 ? 1 : 2;
            channel = this.channels[chNr - 1];
            channel.setBkgData(bkgData);
            this.lastCmdA = a;
            this.lastCmdB = b;
            return true;
        },

        /**
         * Reset state of parser and its channels.
         */
        reset: function reset() {
            for (var i = 0; i < this.channels.length; i++) {
                if (this.channels[i]) {
                    this.channels[i].reset();
                }
            }
            this.lastCmdA = null;
            this.lastCmdB = null;
        },

        /**
         * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
         */
        cueSplitAtTime: function cueSplitAtTime(t) {
            for (var i = 0; i < this.channels.length; i++) {
                if (this.channels[i]) {
                    this.channels[i].cueSplitAtTime(t);
                }
            }
        }
    };

    /**
     * Find ranges corresponding to SEA CEA-608 NALUS in sizeprepended NALU array.
     * @param {raw} dataView of binary data
     * @param {startPos} start position in raw
     * @param {size} total size of data in raw to consider
     * @returns 
     */
    var findCea608Nalus = function findCea608Nalus(raw, startPos, size) {
        var nalSize = 0,
            cursor = startPos,
            nalType = 0,
            cea608NaluRanges = [],

        // Check SEI data according to ANSI-SCTE 128
        isCEA608SEI = function isCEA608SEI(payloadType, payloadSize, raw, pos) {
            if (payloadType !== 4 || payloadSize < 8) {
                return null;
            }
            var countryCode = raw.getUint8(pos);
            var providerCode = raw.getUint16(pos + 1);
            var userIdentifier = raw.getUint32(pos + 3);
            var userDataTypeCode = raw.getUint8(pos + 7);
            return countryCode == 0xB5 && providerCode == 0x31 && userIdentifier == 0x47413934 && userDataTypeCode == 0x3;
        };
        while (cursor < startPos + size) {
            nalSize = raw.getUint32(cursor);
            nalType = raw.getUint8(cursor + 4) & 0x1F;
            //console.log(time + "  NAL " + nalType);
            if (nalType === 6) {
                // SEI NAL Unit. The NAL header is the first byte
                //console.log("SEI NALU of size " + nalSize + " at time " + time);
                var pos = cursor + 5;
                var payloadType = -1;
                while (pos < cursor + 4 + nalSize - 1) {
                    // The last byte should be rbsp_trailing_bits
                    payloadType = 0;
                    var b = 0xFF;
                    while (b === 0xFF) {
                        b = raw.getUint8(pos);
                        payloadType += b;
                        pos++;
                    }
                    var payloadSize = 0;
                    b = 0xFF;
                    while (b === 0xFF) {
                        b = raw.getUint8(pos);
                        payloadSize += b;
                        pos++;
                    }
                    if (isCEA608SEI(payloadType, payloadSize, raw, pos)) {
                        //console.log("CEA608 SEI " + time + " " + payloadSize);
                        cea608NaluRanges.push([pos, payloadSize]);
                    }
                    pos += payloadSize;
                }
            }
            cursor += nalSize + 4;
        }
        return cea608NaluRanges;
    };

    var extractCea608DataFromRange = function extractCea608DataFromRange(raw, cea608Range) {
        var pos = cea608Range[0];
        var fieldData = [[], []];

        pos += 8; // Skip the identifier up to userDataTypeCode
        var ccCount = raw.getUint8(pos) & 0x1f;
        pos += 2; // Advance 1 and skip reserved byte

        for (var i = 0; i < ccCount; i++) {
            var byte = raw.getUint8(pos);
            var ccValid = byte & 0x4;
            var ccType = byte & 0x3;
            pos++;
            var ccData1 = raw.getUint8(pos); // Keep parity bit
            pos++;
            var ccData2 = raw.getUint8(pos); // Keep parity bit
            pos++;
            if (ccValid && (ccData1 & 0x7f) + (ccData2 & 0x7f) !== 0) {
                //Check validity and non-empty data
                if (ccType === 0) {
                    fieldData[0].push(ccData1);
                    fieldData[0].push(ccData2);
                } else if (ccType === 1) {
                    fieldData[1].push(ccData1);
                    fieldData[1].push(ccData2);
                }
            }
        }
        return fieldData;
    };

    exports.logger = logger;
    exports.PenState = PenState;
    exports.CaptionScreen = CaptionScreen;
    exports.Cea608Parser = Cea608Parser;
    exports.findCea608Nalus = findCea608Nalus;
    exports.extractCea608DataFromRange = extractCea608DataFromRange;
})( false ? undefined : exports);

/***/ }),

/***/ "./node_modules/dashjs/externals/xml2json.js":
/*!***************************************************!*\
  !*** ./node_modules/dashjs/externals/xml2json.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/*
 Copyright 2011-2013 Abdulla Abdurakhmanov
 Original sources are available at https://code.google.com/p/x2js/

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
  Further modified for dashjs to:
  - keep track of children nodes in order in attribute __children.
  - add type conversion matchers
  - re-add ignoreRoot
  - allow zero-length attributePrefix
  - don't add white-space text nodes
*/

function X2JS(config) {
    'use strict';

    var VERSION = "1.2.0";

    config = config || {};
    initConfigDefaults();
    initRequiredPolyfills();

    function initConfigDefaults() {
        if (config.escapeMode === undefined) {
            config.escapeMode = true;
        }

        if (config.attributePrefix === undefined) {
            config.attributePrefix = "_";
        }

        config.arrayAccessForm = config.arrayAccessForm || "none";
        config.emptyNodeForm = config.emptyNodeForm || "text";

        if (config.enableToStringFunc === undefined) {
            config.enableToStringFunc = true;
        }
        config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];
        if (config.skipEmptyTextNodesForObj === undefined) {
            config.skipEmptyTextNodesForObj = true;
        }
        if (config.stripWhitespaces === undefined) {
            config.stripWhitespaces = true;
        }
        config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];

        if (config.useDoubleQuotes === undefined) {
            config.useDoubleQuotes = false;
        }

        config.xmlElementsFilter = config.xmlElementsFilter || [];
        config.jsonPropertiesFilter = config.jsonPropertiesFilter || [];

        if (config.keepCData === undefined) {
            config.keepCData = false;
        }

        if (config.ignoreRoot === undefined) {
            config.ignoreRoot = false;
        }
    }

    var DOMNodeTypes = {
        ELEMENT_NODE: 1,
        TEXT_NODE: 3,
        CDATA_SECTION_NODE: 4,
        COMMENT_NODE: 8,
        DOCUMENT_NODE: 9
    };

    function initRequiredPolyfills() {}

    function getNodeLocalName(node) {
        var nodeLocalName = node.localName;
        if (nodeLocalName == null) // Yeah, this is IE!!
            nodeLocalName = node.baseName;
        if (nodeLocalName == null || nodeLocalName == "") // =="" is IE too
            nodeLocalName = node.nodeName;
        return nodeLocalName;
    }

    function getNodePrefix(node) {
        return node.prefix;
    }

    function escapeXmlChars(str) {
        if (typeof str == "string") return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');else return str;
    }

    function unescapeXmlChars(str) {
        return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&amp;/g, '&');
    }

    function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {
        var idx = 0;
        for (; idx < stdFiltersArrayForm.length; idx++) {
            var filterPath = stdFiltersArrayForm[idx];
            if (typeof filterPath === "string") {
                if (filterPath == path) break;
            } else if (filterPath instanceof RegExp) {
                if (filterPath.test(path)) break;
            } else if (typeof filterPath === "function") {
                if (filterPath(obj, name, path)) break;
            }
        }
        return idx != stdFiltersArrayForm.length;
    }

    function toArrayAccessForm(obj, childName, path) {
        switch (config.arrayAccessForm) {
            case "property":
                if (!(obj[childName] instanceof Array)) obj[childName + "_asArray"] = [obj[childName]];else obj[childName + "_asArray"] = obj[childName];
                break;
            /*case "none":
                break;*/
        }

        if (!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {
            if (checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path)) {
                obj[childName] = [obj[childName]];
            }
        }
    }

    function fromXmlDateTime(prop) {
        // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
        // Improved to support full spec and optional parts
        var bits = prop.split(/[-T:+Z]/g);

        var d = new Date(bits[0], bits[1] - 1, bits[2]);
        var secondBits = bits[5].split("\.");
        d.setHours(bits[3], bits[4], secondBits[0]);
        if (secondBits.length > 1) d.setMilliseconds(secondBits[1]);

        // Get supplied time zone offset in minutes
        if (bits[6] && bits[7]) {
            var offsetMinutes = bits[6] * 60 + Number(bits[7]);
            var sign = /\d\d-\d\d:\d\d$/.test(prop) ? '-' : '+';

            // Apply the sign
            offsetMinutes = 0 + (sign == '-' ? -1 * offsetMinutes : offsetMinutes);

            // Apply offset and local timezone
            d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset());
        } else if (prop.indexOf("Z", prop.length - 1) !== -1) {
            d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));
        }

        // d is now a local time equivalent to the supplied time
        return d;
    }

    function checkFromXmlDateTimePaths(value, childName, fullPath) {
        if (config.datetimeAccessFormPaths.length > 0) {
            var path = fullPath.split("\.#")[0];
            if (checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path)) {
                return fromXmlDateTime(value);
            } else return value;
        } else return value;
    }

    function checkXmlElementsFilter(obj, childType, childName, childPath) {
        if (childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) {
            return checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);
        } else return true;
    }

    function parseDOMChildren(node, path) {
        if (node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {
            var result = new Object();
            var nodeChildren = node.childNodes;
            // Alternative for firstElementChild which is not supported in some environments
            for (var cidx = 0; cidx < nodeChildren.length; cidx++) {
                var child = nodeChildren[cidx];
                if (child.nodeType == DOMNodeTypes.ELEMENT_NODE) {
                    if (config.ignoreRoot) {
                        result = parseDOMChildren(child);
                    } else {
                        result = {};
                        var childName = getNodeLocalName(child);
                        result[childName] = parseDOMChildren(child);
                    }
                }
            }
            return result;
        } else if (node.nodeType == DOMNodeTypes.ELEMENT_NODE) {
            var result = new Object();
            result.__cnt = 0;

            var children = [];
            var nodeChildren = node.childNodes;

            // Children nodes
            for (var cidx = 0; cidx < nodeChildren.length; cidx++) {
                var child = nodeChildren[cidx];
                var childName = getNodeLocalName(child);

                if (child.nodeType != DOMNodeTypes.COMMENT_NODE) {
                    var childPath = path + "." + childName;
                    if (checkXmlElementsFilter(result, child.nodeType, childName, childPath)) {
                        result.__cnt++;
                        if (result[childName] == null) {
                            var c = parseDOMChildren(child, childPath);
                            if (childName != "#text" || /[^\s]/.test(c)) {
                                var o = {};
                                o[childName] = c;
                                children.push(o);
                            }
                            result[childName] = c;
                            toArrayAccessForm(result, childName, childPath);
                        } else {
                            if (result[childName] != null) {
                                if (!(result[childName] instanceof Array)) {
                                    result[childName] = [result[childName]];
                                    toArrayAccessForm(result, childName, childPath);
                                }
                            }

                            var c = parseDOMChildren(child, childPath);
                            if (childName != "#text" || /[^\s]/.test(c)) {
                                // Don't add white-space text nodes
                                var o = {};
                                o[childName] = c;
                                children.push(o);
                            }
                            result[childName][result[childName].length] = c;
                        }
                    }
                }
            }

            result.__children = children;

            // Attributes
            var nodeLocalName = getNodeLocalName(node);
            for (var aidx = 0; aidx < node.attributes.length; aidx++) {
                var attr = node.attributes[aidx];
                result.__cnt++;

                var value2 = attr.value;
                for (var m = 0, ml = config.matchers.length; m < ml; m++) {
                    var matchobj = config.matchers[m];
                    if (matchobj.test(attr, nodeLocalName)) value2 = matchobj.converter(attr.value);
                }

                result[config.attributePrefix + attr.name] = value2;
            }

            // Node namespace prefix
            var nodePrefix = getNodePrefix(node);
            if (nodePrefix != null && nodePrefix != "") {
                result.__cnt++;
                result.__prefix = nodePrefix;
            }

            if (result["#text"] != null) {
                result.__text = result["#text"];
                if (result.__text instanceof Array) {
                    result.__text = result.__text.join("\n");
                }
                //if(config.escapeMode)
                //	result.__text = unescapeXmlChars(result.__text);
                if (config.stripWhitespaces) result.__text = result.__text.trim();
                delete result["#text"];
                if (config.arrayAccessForm == "property") delete result["#text_asArray"];
                result.__text = checkFromXmlDateTimePaths(result.__text, childName, path + "." + childName);
            }
            if (result["#cdata-section"] != null) {
                result.__cdata = result["#cdata-section"];
                delete result["#cdata-section"];
                if (config.arrayAccessForm == "property") delete result["#cdata-section_asArray"];
            }

            if (result.__cnt == 0 && config.emptyNodeForm == "text") {
                result = '';
            } else if (result.__cnt == 1 && result.__text != null) {
                result = result.__text;
            } else if (result.__cnt == 1 && result.__cdata != null && !config.keepCData) {
                result = result.__cdata;
            } else if (result.__cnt > 1 && result.__text != null && config.skipEmptyTextNodesForObj) {
                if (config.stripWhitespaces && result.__text == "" || result.__text.trim() == "") {
                    delete result.__text;
                }
            }
            delete result.__cnt;

            if (config.enableToStringFunc && (result.__text != null || result.__cdata != null)) {
                result.toString = function () {
                    return (this.__text != null ? this.__text : '') + (this.__cdata != null ? this.__cdata : '');
                };
            }

            return result;
        } else if (node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {
            return node.nodeValue;
        }
    }

    function startTag(jsonObj, element, attrList, closed) {
        var resultStr = "<" + (jsonObj != null && jsonObj.__prefix != null ? jsonObj.__prefix + ":" : "") + element;
        if (attrList != null) {
            for (var aidx = 0; aidx < attrList.length; aidx++) {
                var attrName = attrList[aidx];
                var attrVal = jsonObj[attrName];
                if (config.escapeMode) attrVal = escapeXmlChars(attrVal);
                resultStr += " " + attrName.substr(config.attributePrefix.length) + "=";
                if (config.useDoubleQuotes) resultStr += '"' + attrVal + '"';else resultStr += "'" + attrVal + "'";
            }
        }
        if (!closed) resultStr += ">";else resultStr += "/>";
        return resultStr;
    }

    function endTag(jsonObj, elementName) {
        return "</" + (jsonObj.__prefix != null ? jsonObj.__prefix + ":" : "") + elementName + ">";
    }

    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }

    function jsonXmlSpecialElem(jsonObj, jsonObjField) {
        if (config.arrayAccessForm == "property" && endsWith(jsonObjField.toString(), "_asArray") || jsonObjField.toString().indexOf(config.attributePrefix) == 0 || jsonObjField.toString().indexOf("__") == 0 || jsonObj[jsonObjField] instanceof Function) return true;else return false;
    }

    function jsonXmlElemCount(jsonObj) {
        var elementsCnt = 0;
        if (jsonObj instanceof Object) {
            for (var it in jsonObj) {
                if (jsonXmlSpecialElem(jsonObj, it)) continue;
                elementsCnt++;
            }
        }
        return elementsCnt;
    }

    function checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {
        return config.jsonPropertiesFilter.length == 0 || jsonObjPath == "" || checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);
    }

    function parseJSONAttributes(jsonObj) {
        var attrList = [];
        if (jsonObj instanceof Object) {
            for (var ait in jsonObj) {
                if (ait.toString().indexOf("__") == -1 && ait.toString().indexOf(config.attributePrefix) == 0) {
                    attrList.push(ait);
                }
            }
        }
        return attrList;
    }

    function parseJSONTextAttrs(jsonTxtObj) {
        var result = "";

        if (jsonTxtObj.__cdata != null) {
            result += "<![CDATA[" + jsonTxtObj.__cdata + "]]>";
        }

        if (jsonTxtObj.__text != null) {
            if (config.escapeMode) result += escapeXmlChars(jsonTxtObj.__text);else result += jsonTxtObj.__text;
        }
        return result;
    }

    function parseJSONTextObject(jsonTxtObj) {
        var result = "";

        if (jsonTxtObj instanceof Object) {
            result += parseJSONTextAttrs(jsonTxtObj);
        } else if (jsonTxtObj != null) {
            if (config.escapeMode) result += escapeXmlChars(jsonTxtObj);else result += jsonTxtObj;
        }

        return result;
    }

    function getJsonPropertyPath(jsonObjPath, jsonPropName) {
        if (jsonObjPath === "") {
            return jsonPropName;
        } else return jsonObjPath + "." + jsonPropName;
    }

    function parseJSONArray(jsonArrRoot, jsonArrObj, attrList, jsonObjPath) {
        var result = "";
        if (jsonArrRoot.length == 0) {
            result += startTag(jsonArrRoot, jsonArrObj, attrList, true);
        } else {
            for (var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {
                result += startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);
                result += parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath, jsonArrObj));
                result += endTag(jsonArrRoot[arIdx], jsonArrObj);
            }
        }
        return result;
    }

    function parseJSONObject(jsonObj, jsonObjPath) {
        var result = "";

        var elementsCnt = jsonXmlElemCount(jsonObj);

        if (elementsCnt > 0) {
            for (var it in jsonObj) {

                if (jsonXmlSpecialElem(jsonObj, it) || jsonObjPath != "" && !checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath, it))) continue;

                var subObj = jsonObj[it];

                var attrList = parseJSONAttributes(subObj);

                if (subObj == null || subObj == undefined) {
                    result += startTag(subObj, it, attrList, true);
                } else if (subObj instanceof Object) {

                    if (subObj instanceof Array) {
                        result += parseJSONArray(subObj, it, attrList, jsonObjPath);
                    } else if (subObj instanceof Date) {
                        result += startTag(subObj, it, attrList, false);
                        result += subObj.toISOString();
                        result += endTag(subObj, it);
                    } else {
                        var subObjElementsCnt = jsonXmlElemCount(subObj);
                        if (subObjElementsCnt > 0 || subObj.__text != null || subObj.__cdata != null) {
                            result += startTag(subObj, it, attrList, false);
                            result += parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath, it));
                            result += endTag(subObj, it);
                        } else {
                            result += startTag(subObj, it, attrList, true);
                        }
                    }
                } else {
                    result += startTag(subObj, it, attrList, false);
                    result += parseJSONTextObject(subObj);
                    result += endTag(subObj, it);
                }
            }
        }
        result += parseJSONTextObject(jsonObj);

        return result;
    }

    this.parseXmlString = function (xmlDocStr) {
        var isIEParser = window.ActiveXObject || "ActiveXObject" in window;
        if (xmlDocStr === undefined) {
            return null;
        }
        var xmlDoc;
        var parsererrorNS = null;
        if (window.DOMParser) {
            var parser = new window.DOMParser();
            // IE9+ now is here
            if (!isIEParser) {
                try {
                    parsererrorNS = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0].namespaceURI;
                } catch (err) {
                    parsererrorNS = null;
                }
            }
            try {
                xmlDoc = parser.parseFromString(xmlDocStr, "text/xml");
                if (xmlDoc.getElementsByTagNameNS("*", "parsererror").length > 0) {
                    xmlDoc = null;
                }
            } catch (err) {
                xmlDoc = null;
            }
        }
        if (!parsererrorNS) {
            // IE :(
            if (xmlDocStr.indexOf("<?") == 0) {
                xmlDocStr = xmlDocStr.substr(xmlDocStr.indexOf("?>") + 2);
            }
            try {
                xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = "false";
                xmlDoc.loadXML(xmlDocStr);
            } catch (e) {
                try {
                    xmlDoc = parser.parseFromString(xmlDocStr, "application/xml");
                } catch (e) {}
            }
        }
        return xmlDoc;
    };

    this.asArray = function (prop) {
        if (prop === undefined || prop == null) return [];else if (prop instanceof Array) return prop;else return [prop];
    };

    this.toXmlDateTime = function (dt) {
        if (dt instanceof Date) return dt.toISOString();else if (typeof dt === 'number') return new Date(dt).toISOString();else return null;
    };

    this.asDateTime = function (prop) {
        if (typeof prop == "string") {
            return fromXmlDateTime(prop);
        } else return prop;
    };

    this.xml2json = function (xmlDoc) {
        return parseDOMChildren(xmlDoc);
    };

    this.xml_str2json = function (xmlDocStr) {
        var xmlDoc = this.parseXmlString(xmlDocStr);
        if (xmlDoc != null) return this.xml2json(xmlDoc);else return null;
    };

    this.json2xml_str = function (jsonObj) {
        return parseJSONObject(jsonObj, "");
    };

    this.json2xml = function (jsonObj) {
        var xmlDocStr = this.json2xml_str(jsonObj);
        return this.parseXmlString(xmlDocStr);
    };

    this.getVersion = function () {
        return VERSION;
    };
}

exports.default = X2JS;

/***/ }),

/***/ "./node_modules/dashjs/index.js":
/*!**************************************!*\
  !*** ./node_modules/dashjs/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Debug = exports.MediaPlayerFactory = exports.MetricsReporting = exports.Protection = exports.MediaPlayer = undefined;

var _index_mediaplayerOnly = __webpack_require__(/*! ./index_mediaplayerOnly */ "./node_modules/dashjs/index_mediaplayerOnly.js");

var _MetricsReporting = __webpack_require__(/*! ./src/streaming/metrics/MetricsReporting */ "./node_modules/dashjs/src/streaming/metrics/MetricsReporting.js");

var _MetricsReporting2 = _interopRequireDefault(_MetricsReporting);

var _Protection = __webpack_require__(/*! ./src/streaming/protection/Protection */ "./node_modules/dashjs/src/streaming/protection/Protection.js");

var _Protection2 = _interopRequireDefault(_Protection);

var _MediaPlayerFactory = __webpack_require__(/*! ./src/streaming/MediaPlayerFactory */ "./node_modules/dashjs/src/streaming/MediaPlayerFactory.js");

var _MediaPlayerFactory2 = _interopRequireDefault(_MediaPlayerFactory);

var _Debug = __webpack_require__(/*! ./src/core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

dashjs.Protection = _Protection2.default; /**
                                           * The copyright in this software is being made available under the BSD License,
                                           * included below. This software may be subject to other third party and contributor
                                           * rights, including patent rights, and no such rights are granted under this license.
                                           *
                                           * Copyright (c) 2013, Dash Industry Forum.
                                           * All rights reserved.
                                           *
                                           * Redistribution and use in source and binary forms, with or without modification,
                                           * are permitted provided that the following conditions are met:
                                           *  * Redistributions of source code must retain the above copyright notice, this
                                           *  list of conditions and the following disclaimer.
                                           *  * Redistributions in binary form must reproduce the above copyright notice,
                                           *  this list of conditions and the following disclaimer in the documentation and/or
                                           *  other materials provided with the distribution.
                                           *  * Neither the name of Dash Industry Forum nor the names of its
                                           *  contributors may be used to endorse or promote products derived from this software
                                           *  without specific prior written permission.
                                           *
                                           *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                           *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                           *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                           *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                           *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                           *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                           *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                           *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                           *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                           *  POSSIBILITY OF SUCH DAMAGE.
                                           */

dashjs.MetricsReporting = _MetricsReporting2.default;
dashjs.MediaPlayerFactory = _MediaPlayerFactory2.default;
dashjs.Debug = _Debug2.default;

exports.default = dashjs;
exports.MediaPlayer = _index_mediaplayerOnly.MediaPlayer;
exports.Protection = _Protection2.default;
exports.MetricsReporting = _MetricsReporting2.default;
exports.MediaPlayerFactory = _MediaPlayerFactory2.default;
exports.Debug = _Debug2.default;

/***/ }),

/***/ "./node_modules/dashjs/index_mediaplayerOnly.js":
/*!******************************************************!*\
  !*** ./node_modules/dashjs/index_mediaplayerOnly.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Debug = exports.FactoryMaker = exports.MediaPlayer = undefined;

var _MediaPlayer = __webpack_require__(/*! ./src/streaming/MediaPlayer */ "./node_modules/dashjs/src/streaming/MediaPlayer.js");

var _MediaPlayer2 = _interopRequireDefault(_MediaPlayer);

var _FactoryMaker = __webpack_require__(/*! ./src/core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ./src/core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _Version = __webpack_require__(/*! ./src/core/Version */ "./node_modules/dashjs/src/core/Version.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Shove both of these into the global scope
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

var context = typeof window !== 'undefined' && window || global;

var dashjs = context.dashjs;
if (!dashjs) {
  dashjs = context.dashjs = {};
}

dashjs.MediaPlayer = _MediaPlayer2.default;
dashjs.FactoryMaker = _FactoryMaker2.default;
dashjs.Debug = _Debug2.default;
dashjs.Version = (0, _Version.getVersionString)();

exports.default = dashjs;
exports.MediaPlayer = _MediaPlayer2.default;
exports.FactoryMaker = _FactoryMaker2.default;
exports.Debug = _Debug2.default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/dashjs/src/core/Debug.js":
/*!***********************************************!*\
  !*** ./node_modules/dashjs/src/core/Debug.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _EventBus = __webpack_require__(/*! ./EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ./events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ./FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LOG_LEVEL_NONE = 0; /**
                         * The copyright in this software is being made available under the BSD License,
                         * included below. This software may be subject to other third party and contributor
                         * rights, including patent rights, and no such rights are granted under this license.
                         *
                         * Copyright (c) 2013, Dash Industry Forum.
                         * All rights reserved.
                         *
                         * Redistribution and use in source and binary forms, with or without modification,
                         * are permitted provided that the following conditions are met:
                         *  * Redistributions of source code must retain the above copyright notice, this
                         *  list of conditions and the following disclaimer.
                         *  * Redistributions in binary form must reproduce the above copyright notice,
                         *  this list of conditions and the following disclaimer in the documentation and/or
                         *  other materials provided with the distribution.
                         *  * Neither the name of Dash Industry Forum nor the names of its
                         *  contributors may be used to endorse or promote products derived from this software
                         *  without specific prior written permission.
                         *
                         *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                         *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                         *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                         *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                         *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                         *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                         *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                         *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                         *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                         *  POSSIBILITY OF SUCH DAMAGE.
                         */

var LOG_LEVEL_FATAL = 1;
var LOG_LEVEL_ERROR = 2;
var LOG_LEVEL_WARNING = 3;
var LOG_LEVEL_INFO = 4;
var LOG_LEVEL_DEBUG = 5;

/**
 * @module Debug
 */
function Debug() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var logFn = [];

    var instance = void 0,
        showLogTimestamp = void 0,
        showCalleeName = void 0,
        startTime = void 0,
        logLevel = void 0;

    function setup() {
        showLogTimestamp = true;
        showCalleeName = true;
        logLevel = LOG_LEVEL_WARNING;
        startTime = new Date().getTime();

        if (typeof window !== 'undefined' && window.console) {
            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);
            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);
            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);
            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);
            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);
        }
    }

    function getLogFn(fn) {
        if (fn && fn.bind) {
            return fn.bind(window.console);
        }
        // if not define, return the default function for reporting logs
        return window.console.log.bind(window.console);
    }

    /**
     * Retrieves a logger which can be used to write logging information in browser console.
     * @param {object} instance Object for which the logger is created. It is used
     * to include calle object information in log messages.
     * @memberof module:Debug
     * @returns {Logger}
     * @instance
     */
    function getLogger(instance) {
        return {
            fatal: fatal.bind(instance),
            error: error.bind(instance),
            warn: warn.bind(instance),
            info: info.bind(instance),
            debug: debug.bind(instance)
        };
    }

    /**
     * Sets up the log level. The levels are cumulative. For example, if you set the log level
     * to dashjs.Debug.LOG_LEVEL_WARNING all warnings, errors and fatals will be logged. Possible values
     *
     * <ul>
     * <li>dashjs.Debug.LOG_LEVEL_NONE<br/>
     * No message is written in the browser console.
     *
     * <li>dashjs.Debug.LOG_LEVEL_FATAL<br/>
     * Log fatal errors. An error is considered fatal when it causes playback to fail completely.
     *
     * <li>dashjs.Debug.LOG_LEVEL_ERROR<br/>
     * Log error messages.
     *
     * <li>dashjs.Debug.LOG_LEVEL_WARNING<br/>
     * Log warning messages.
     *
     * <li>dashjs.Debug.LOG_LEVEL_INFO<br/>
     * Log info messages.
     *
     * <li>dashjs.Debug.LOG_LEVEL_DEBUG<br/>
     * Log debug messages.
     * </ul>
     * @param {number} value Log level
     * @default true
     * @memberof module:Debug
     * @instance
     */
    function setLogLevel(value) {
        logLevel = value;
    }

    /**
     * Use this method to get the current log level.
     * @memberof module:Debug
     * @instance
     */
    function getLogLevel() {
        return logLevel;
    }

    /**
     * Prepends a timestamp in milliseconds to each log message.
     * @param {boolean} value Set to true if you want to see a timestamp in each log message.
     * @default LOG_LEVEL_WARNING
     * @memberof module:Debug
     * @instance
     */
    function setLogTimestampVisible(value) {
        showLogTimestamp = value;
    }
    /**
     * Prepends the callee object name, and media type if available, to each log message.
     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.
     * @default true
     * @memberof module:Debug
     * @instance
     */
    function setCalleeNameVisible(value) {
        showCalleeName = value;
    }
    /**
     * Toggles logging to the browser's javascript console.  If you set to false you will still receive a log event with the same message.
     * @param {boolean} value Set to false if you want to turn off logging to the browser's console.
     * @default true
     * @memberof module:Debug
     * @instance
     * @deprecated
     */
    function setLogToBrowserConsole(value) {
        // Replicate functionality previous to log levels feature
        if (value) {
            logLevel = LOG_LEVEL_DEBUG;
        } else {
            logLevel = LOG_LEVEL_NONE;
        }
    }
    /**
     * Use this method to get the state of logToBrowserConsole.
     * @returns {boolean} The current value of logToBrowserConsole
     * @memberof module:Debug
     * @instance
     * @deprecated
     */
    function getLogToBrowserConsole() {
        return logLevel !== LOG_LEVEL_NONE;
    }

    function fatal() {
        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        doLog.apply(undefined, [LOG_LEVEL_FATAL, this].concat(params));
    }

    function error() {
        for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            params[_key2] = arguments[_key2];
        }

        doLog.apply(undefined, [LOG_LEVEL_ERROR, this].concat(params));
    }

    function warn() {
        for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            params[_key3] = arguments[_key3];
        }

        doLog.apply(undefined, [LOG_LEVEL_WARNING, this].concat(params));
    }

    function info() {
        for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            params[_key4] = arguments[_key4];
        }

        doLog.apply(undefined, [LOG_LEVEL_INFO, this].concat(params));
    }

    function debug() {
        for (var _len5 = arguments.length, params = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            params[_key5] = arguments[_key5];
        }

        doLog.apply(undefined, [LOG_LEVEL_DEBUG, this].concat(params));
    }

    function doLog(level, _this) {
        var message = '';
        var logTime = null;

        if (showLogTimestamp) {
            logTime = new Date().getTime();
            message += '[' + (logTime - startTime) + ']';
        }

        if (showCalleeName && _this && _this.getClassName) {
            message += '[' + _this.getClassName() + ']';
            if (_this.getType) {
                message += '[' + _this.getType() + ']';
            }
        }

        if (message.length > 0) {
            message += ' ';
        }

        for (var _len6 = arguments.length, params = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
            params[_key6 - 2] = arguments[_key6];
        }

        Array.apply(null, params).forEach(function (item) {
            message += item + ' ';
        });

        // log to console if the log level is high enough
        if (logFn[level] && logLevel >= level) {
            logFn[level](message);
        }

        // send log event regardless of log level
        eventBus.trigger(_Events2.default.LOG, { message: message, level: level });
    }

    instance = {
        getLogger: getLogger,
        setLogTimestampVisible: setLogTimestampVisible,
        setCalleeNameVisible: setCalleeNameVisible,
        setLogToBrowserConsole: setLogToBrowserConsole,
        getLogToBrowserConsole: getLogToBrowserConsole,
        setLogLevel: setLogLevel,
        getLogLevel: getLogLevel
    };

    setup();

    return instance;
}

Debug.__dashjs_factory_name = 'Debug';

var factory = _FactoryMaker2.default.getSingletonFactory(Debug);
factory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;
factory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;
factory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;
factory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;
factory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;
factory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;
_FactoryMaker2.default.updateSingletonFactory(Debug.__dashjs_factory_name, factory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/core/EventBus.js":
/*!**************************************************!*\
  !*** ./node_modules/dashjs/src/core/EventBus.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ./FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EVENT_PRIORITY_LOW = 0; /**
                             * The copyright in this software is being made available under the BSD License,
                             * included below. This software may be subject to other third party and contributor
                             * rights, including patent rights, and no such rights are granted under this license.
                             *
                             * Copyright (c) 2013, Dash Industry Forum.
                             * All rights reserved.
                             *
                             * Redistribution and use in source and binary forms, with or without modification,
                             * are permitted provided that the following conditions are met:
                             *  * Redistributions of source code must retain the above copyright notice, this
                             *  list of conditions and the following disclaimer.
                             *  * Redistributions in binary form must reproduce the above copyright notice,
                             *  this list of conditions and the following disclaimer in the documentation and/or
                             *  other materials provided with the distribution.
                             *  * Neither the name of Dash Industry Forum nor the names of its
                             *  contributors may be used to endorse or promote products derived from this software
                             *  without specific prior written permission.
                             *
                             *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                             *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                             *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                             *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                             *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                             *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                             *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                             *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                             *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                             *  POSSIBILITY OF SUCH DAMAGE.
                             */

var EVENT_PRIORITY_HIGH = 5000;

function EventBus() {

    var handlers = {};

    function on(type, listener, scope) {
        var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EVENT_PRIORITY_LOW;


        if (!type) {
            throw new Error('event type cannot be null or undefined');
        }
        if (!listener || typeof listener !== 'function') {
            throw new Error('listener must be a function: ' + listener);
        }

        if (getHandlerIdx(type, listener, scope) >= 0) return;

        handlers[type] = handlers[type] || [];

        var handler = {
            callback: listener,
            scope: scope,
            priority: priority
        };

        var inserted = handlers[type].some(function (item, idx) {
            if (item && priority > item.priority) {
                handlers[type].splice(idx, 0, handler);
                return true;
            }
        });

        if (!inserted) {
            handlers[type].push(handler);
        }
    }

    function off(type, listener, scope) {
        if (!type || !listener || !handlers[type]) return;
        var idx = getHandlerIdx(type, listener, scope);
        if (idx < 0) return;
        handlers[type][idx] = null;
    }

    function trigger(type, payload) {
        if (!type || !handlers[type]) return;

        payload = payload || {};

        if (payload.hasOwnProperty('type')) throw new Error('\'type\' is a reserved word for event dispatching');

        payload.type = type;

        handlers[type] = handlers[type].filter(function (item) {
            return item;
        });
        handlers[type].forEach(function (handler) {
            return handler && handler.callback.call(handler.scope, payload);
        });
    }

    function getHandlerIdx(type, listener, scope) {

        var idx = -1;

        if (!handlers[type]) return idx;

        handlers[type].some(function (item, index) {
            if (item && item.callback === listener && (!scope || scope === item.scope)) {
                idx = index;
                return true;
            }
        });
        return idx;
    }

    function reset() {
        handlers = {};
    }

    var instance = {
        on: on,
        off: off,
        trigger: trigger,
        reset: reset
    };

    return instance;
}

EventBus.__dashjs_factory_name = 'EventBus';
var factory = _FactoryMaker2.default.getSingletonFactory(EventBus);
factory.EVENT_PRIORITY_LOW = EVENT_PRIORITY_LOW;
factory.EVENT_PRIORITY_HIGH = EVENT_PRIORITY_HIGH;
_FactoryMaker2.default.updateSingletonFactory(EventBus.__dashjs_factory_name, factory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/core/FactoryMaker.js":
/*!******************************************************!*\
  !*** ./node_modules/dashjs/src/core/FactoryMaker.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @module FactoryMaker
 */
var FactoryMaker = function () {

    var instance = void 0;
    var singletonContexts = [];
    var singletonFactories = {};
    var classFactories = {};

    function extend(name, childInstance, override, context) {
        if (!context[name] && childInstance) {
            context[name] = {
                instance: childInstance,
                override: override
            };
        }
    }

    /**
     * Use this method from your extended object.  this.factory is injected into your object.
     * this.factory.getSingletonInstance(this.context, 'VideoModel')
     * will return the video model for use in the extended object.
     *
     * @param {Object} context - injected into extended object as this.context
     * @param {string} className - string name found in all dash.js objects
     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.
     * @returns {*} Context aware instance of specified singleton name.
     * @memberof module:FactoryMaker
     * @instance
     */
    function getSingletonInstance(context, className) {
        for (var i in singletonContexts) {
            var obj = singletonContexts[i];
            if (obj.context === context && obj.name === className) {
                return obj.instance;
            }
        }
        return null;
    }

    /**
     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.
     *
     * @param {Object} context
     * @param {string} className
     * @param {Object} instance
     * @memberof module:FactoryMaker
     * @instance
     */
    function setSingletonInstance(context, className, instance) {
        for (var i in singletonContexts) {
            var obj = singletonContexts[i];
            if (obj.context === context && obj.name === className) {
                singletonContexts[i].instance = instance;
                return;
            }
        }
        singletonContexts.push({
            name: className,
            context: context,
            instance: instance
        });
    }

    /*------------------------------------------------------------------------------------------*/

    // Factories storage Management

    /*------------------------------------------------------------------------------------------*/

    function getFactoryByName(name, factoriesArray) {
        return factoriesArray[name];
    }

    function updateFactory(name, factory, factoriesArray) {
        if (name in factoriesArray) {
            factoriesArray[name] = factory;
        }
    }

    /*------------------------------------------------------------------------------------------*/

    // Class Factories Management

    /*------------------------------------------------------------------------------------------*/

    function updateClassFactory(name, factory) {
        updateFactory(name, factory, classFactories);
    }

    function getClassFactoryByName(name) {
        return getFactoryByName(name, classFactories);
    }

    function getClassFactory(classConstructor) {
        var factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);

        if (!factory) {
            factory = function factory(context) {
                if (context === undefined) {
                    context = {};
                }
                return {
                    create: function create() {
                        return merge(classConstructor, context, arguments);
                    }
                };
            };

            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory
        }
        return factory;
    }

    /*------------------------------------------------------------------------------------------*/

    // Singleton Factory MAangement

    /*------------------------------------------------------------------------------------------*/

    function updateSingletonFactory(name, factory) {
        updateFactory(name, factory, singletonFactories);
    }

    function getSingletonFactoryByName(name) {
        return getFactoryByName(name, singletonFactories);
    }

    function getSingletonFactory(classConstructor) {
        var factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);
        if (!factory) {
            factory = function factory(context) {
                var instance = void 0;
                if (context === undefined) {
                    context = {};
                }
                return {
                    getInstance: function getInstance() {
                        // If we don't have an instance yet check for one on the context
                        if (!instance) {
                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);
                        }
                        // If there's no instance on the context then create one
                        if (!instance) {
                            instance = merge(classConstructor, context, arguments);
                            singletonContexts.push({
                                name: classConstructor.__dashjs_factory_name,
                                context: context,
                                instance: instance
                            });
                        }
                        return instance;
                    }
                };
            };
            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory
        }

        return factory;
    }

    function merge(classConstructor, context, args) {

        var classInstance = void 0;
        var className = classConstructor.__dashjs_factory_name;
        var extensionObject = context[className];

        if (extensionObject) {

            var extension = extensionObject.instance;

            if (extensionObject.override) {
                //Override public methods in parent but keep parent.

                classInstance = classConstructor.apply({ context: context }, args);
                extension = extension.apply({
                    context: context,
                    factory: instance,
                    parent: classInstance
                }, args);

                for (var prop in extension) {
                    if (classInstance.hasOwnProperty(prop)) {
                        classInstance[prop] = extension[prop];
                    }
                }
            } else {
                //replace parent object completely with new object. Same as dijon.

                return extension.apply({
                    context: context,
                    factory: instance
                }, args);
            }
        } else {
            // Create new instance of the class
            classInstance = classConstructor.apply({ context: context }, args);
        }

        // Add getClassName function to class instance prototype (used by Debug)
        classInstance.getClassName = function () {
            return className;
        };

        return classInstance;
    }

    instance = {
        extend: extend,
        getSingletonInstance: getSingletonInstance,
        setSingletonInstance: setSingletonInstance,
        getSingletonFactory: getSingletonFactory,
        getSingletonFactoryByName: getSingletonFactoryByName,
        updateSingletonFactory: updateSingletonFactory,
        getClassFactory: getClassFactory,
        getClassFactoryByName: getClassFactoryByName,
        updateClassFactory: updateClassFactory
    };

    return instance;
}();

exports.default = FactoryMaker;

/***/ }),

/***/ "./node_modules/dashjs/src/core/Version.js":
/*!*************************************************!*\
  !*** ./node_modules/dashjs/src/core/Version.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getVersionString = getVersionString;
var VERSION = '2.9.3';
function getVersionString() {
    return VERSION;
}

/***/ }),

/***/ "./node_modules/dashjs/src/core/errors/Errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/dashjs/src/core/errors/Errors.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ErrorsBase2 = __webpack_require__(/*! ./ErrorsBase */ "./node_modules/dashjs/src/core/errors/ErrorsBase.js");

var _ErrorsBase3 = _interopRequireDefault(_ErrorsBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *






                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * Errors declaration
 * @class
 */
var Errors = function (_ErrorsBase) {
  _inherits(Errors, _ErrorsBase);

  function Errors() {
    _classCallCheck(this, Errors);

    /**
     * Error code returned when a manifest parsing error occurs
     */
    var _this = _possibleConstructorReturn(this, (Errors.__proto__ || Object.getPrototypeOf(Errors)).call(this));

    _this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE = 10;
    /**
     * Error code returned when a manifest loading error occurs
     */
    _this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE = 11;
    /**
     * Error code returned when a xlink loading error occurs
     */
    _this.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE = 12;
    /**
     * Error code returned when the update of segments list has failed
     */
    _this.SEGMENTS_UPDATE_FAILED_ERROR_CODE = 13;
    _this.SEGMENTS_UNAVAILABLE_ERROR_CODE = 14;
    _this.SEGMENT_BASE_LOADER_ERROR_CODE = 15;
    _this.TIME_SYNC_FAILED_ERROR_CODE = 16;
    _this.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE = 17;
    _this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE = 18;
    _this.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 19;
    _this.APPEND_ERROR_CODE = 20;
    _this.REMOVE_ERROR_CODE = 21;
    _this.DATA_UPDATE_FAILED_ERROR_CODE = 22;
    /**
     * Error code returned when MediaSource is not supported by the browser
     */
    _this.CAPABILITY_MEDIASOURCE_ERROR_CODE = 23;
    /**
     * Error code returned when Protected contents are not supported
     */
    _this.CAPABILITY_MEDIAKEYS_ERROR_CODE = 24;

    _this.DOWNLOAD_ERROR_ID_MANIFEST_CODE = 25;
    /*
     *@deprecated
     */
    _this.DOWNLOAD_ERROR_ID_MANIFEST = 'manifest';
    _this.DOWNLOAD_ERROR_ID_SIDX_CODE = 26;
    _this.DOWNLOAD_ERROR_ID_CONTENT_CODE = 27;

    /*
     *@deprecated
     */
    _this.DOWNLOAD_ERROR_ID_CONTENT = 'content';
    _this.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE = 28;
    /*
     *@deprecated
     */
    _this.DOWNLOAD_ERROR_ID_INITIALIZATION = 'initialization';
    _this.DOWNLOAD_ERROR_ID_XLINK_CODE = 29;
    /*
     *@deprecated
     */
    _this.DOWNLOAD_ERROR_ID_XLINK = 'xlink';

    _this.MANIFEST_ERROR_ID_CODEC_CODE = 30;
    _this.MANIFEST_ERROR_ID_PARSE_CODE = 31;

    /**
     * Error code returned when no stream (period) has been detected in the manifest
     */
    _this.MANIFEST_ERROR_ID_NOSTREAMS_CODE = 32;
    /**
     * Error code returned when something wrong has append during subtitles parsing (TTML or VTT)
     */
    _this.TIMED_TEXT_ERROR_ID_PARSE_CODE = 33;
    /**
     * Error code returned when a 'muxed' media type has been detected in the manifest. This type is not supported
     */
    _this.MANIFEST_ERROR_ID_MULTIPLEXED_CODE = 34;
    /**
     * Error code returned when a media source type is not supported
     */
    _this.MEDIASOURCE_TYPE_UNSUPPORTED_CODE = 35;
    _this.DOWNLOAD_CONTENT_LENGTH_MISMATCH = 36;

    _this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE = 'parsing failed for ';
    _this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading manifest: ';
    _this.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading Xlink element: ';
    _this.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE = 'Segments update failed';
    _this.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE = 'no segments are available yet';
    _this.SEGMENT_BASE_LOADER_ERROR_MESSAGE = 'error loading segments';
    _this.TIME_SYNC_FAILED_ERROR_MESSAGE = 'Failed to synchronize time';
    _this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE = 'request is null';
    _this.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = 'Failed to resolve a valid URL';
    _this.APPEND_ERROR_MESSAGE = 'chunk is not defined';
    _this.REMOVE_ERROR_MESSAGE = 'buffer is not defined';
    _this.DATA_UPDATE_FAILED_ERROR_MESSAGE = 'Data update failed';

    _this.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE = 'mediasource is not supported';
    _this.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE = 'mediakeys is not supported';
    _this.TIMED_TEXT_ERROR_MESSAGE_PARSE = 'parsing error :';
    _this.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE = 'Error creating source buffer of type : ';
    return _this;
  }

  return Errors;
}(_ErrorsBase3.default);

var errors = new Errors();
exports.default = errors;

/***/ }),

/***/ "./node_modules/dashjs/src/core/errors/ErrorsBase.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/core/errors/ErrorsBase.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var ErrorsBase = function () {
    function ErrorsBase() {
        _classCallCheck(this, ErrorsBase);
    }

    _createClass(ErrorsBase, [{
        key: 'extend',
        value: function extend(errors, config) {
            if (!errors) return;

            var override = config ? config.override : false;
            var publicOnly = config ? config.publicOnly : false;

            for (var err in errors) {
                if (!errors.hasOwnProperty(err) || this[err] && !override) continue;
                if (publicOnly && errors[err].indexOf('public_') === -1) continue;
                this[err] = errors[err];
            }
        }
    }]);

    return ErrorsBase;
}();

exports.default = ErrorsBase;

/***/ }),

/***/ "./node_modules/dashjs/src/core/events/CoreEvents.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/core/events/CoreEvents.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _EventsBase2 = __webpack_require__(/*! ./EventsBase */ "./node_modules/dashjs/src/core/events/EventsBase.js");

var _EventsBase3 = _interopRequireDefault(_EventsBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * These are internal events that should not be needed at the player level.
 * If you find and event in here that you would like access to from MediaPlayer level
 * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new
 * @class
 * @ignore
 */
var CoreEvents = function (_EventsBase) {
    _inherits(CoreEvents, _EventsBase);

    function CoreEvents() {
        _classCallCheck(this, CoreEvents);

        var _this = _possibleConstructorReturn(this, (CoreEvents.__proto__ || Object.getPrototypeOf(CoreEvents)).call(this));

        _this.BUFFERING_COMPLETED = 'bufferingCompleted';
        _this.BUFFER_CLEARED = 'bufferCleared';
        _this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';
        _this.BYTES_APPENDED = 'bytesAppended';
        _this.BYTES_APPENDED_END_FRAGMENT = 'bytesAppendedEndFragment';
        _this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';
        _this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';
        _this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';
        _this.DATA_UPDATE_STARTED = 'dataUpdateStarted';
        _this.INITIALIZATION_LOADED = 'initializationLoaded';
        _this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';
        _this.INIT_REQUESTED = 'initRequested';
        _this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';
        _this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';
        _this.LOADING_COMPLETED = 'loadingCompleted';
        _this.LOADING_PROGRESS = 'loadingProgress';
        _this.LOADING_DATA_PROGRESS = 'loadingDataProgress';
        _this.LOADING_ABANDONED = 'loadingAborted';
        _this.MANIFEST_UPDATED = 'manifestUpdated';
        _this.QUOTA_EXCEEDED = 'quotaExceeded';
        _this.REPRESENTATION_UPDATED = 'representationUpdated';
        _this.SEGMENTS_LOADED = 'segmentsLoaded';
        _this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';
        _this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';
        _this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';
        _this.STREAMS_COMPOSED = 'streamsComposed';
        _this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';
        _this.STREAM_COMPLETED = 'streamCompleted';
        _this.TEXT_TRACKS_QUEUE_INITIALIZED = 'textTracksQueueInitialized';
        _this.TIMED_TEXT_REQUESTED = 'timedTextRequested';
        _this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';
        _this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';
        _this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';
        _this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';
        _this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';
        _this.XLINK_READY = 'xlinkReady';
        return _this;
    }

    return CoreEvents;
}(_EventsBase3.default);

exports.default = CoreEvents;

/***/ }),

/***/ "./node_modules/dashjs/src/core/events/Events.js":
/*!*******************************************************!*\
  !*** ./node_modules/dashjs/src/core/events/Events.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CoreEvents2 = __webpack_require__(/*! ./CoreEvents */ "./node_modules/dashjs/src/core/events/CoreEvents.js");

var _CoreEvents3 = _interopRequireDefault(_CoreEvents2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @class
 * @ignore
 */


var Events = function (_CoreEvents) {
  _inherits(Events, _CoreEvents);

  function Events() {
    _classCallCheck(this, Events);

    return _possibleConstructorReturn(this, (Events.__proto__ || Object.getPrototypeOf(Events)).apply(this, arguments));
  }

  return Events;
}(_CoreEvents3.default);

var events = new Events();
exports.default = events;

/***/ }),

/***/ "./node_modules/dashjs/src/core/events/EventsBase.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/core/events/EventsBase.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var EventsBase = function () {
    function EventsBase() {
        _classCallCheck(this, EventsBase);
    }

    _createClass(EventsBase, [{
        key: 'extend',
        value: function extend(events, config) {
            if (!events) return;

            var override = config ? config.override : false;
            var publicOnly = config ? config.publicOnly : false;

            for (var evt in events) {
                if (!events.hasOwnProperty(evt) || this[evt] && !override) continue;
                if (publicOnly && events[evt].indexOf('public_') === -1) continue;
                this[evt] = events[evt];
            }
        }
    }]);

    return EventsBase;
}();

exports.default = EventsBase;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/DashAdapter.js":
/*!*****************************************************!*\
  !*** ./node_modules/dashjs/src/dash/DashAdapter.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../streaming/constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _DashConstants = __webpack_require__(/*! ./constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

var _RepresentationInfo = __webpack_require__(/*! ../streaming/vo/RepresentationInfo */ "./node_modules/dashjs/src/streaming/vo/RepresentationInfo.js");

var _RepresentationInfo2 = _interopRequireDefault(_RepresentationInfo);

var _MediaInfo = __webpack_require__(/*! ../streaming/vo/MediaInfo */ "./node_modules/dashjs/src/streaming/vo/MediaInfo.js");

var _MediaInfo2 = _interopRequireDefault(_MediaInfo);

var _StreamInfo = __webpack_require__(/*! ../streaming/vo/StreamInfo */ "./node_modules/dashjs/src/streaming/vo/StreamInfo.js");

var _StreamInfo2 = _interopRequireDefault(_StreamInfo);

var _ManifestInfo = __webpack_require__(/*! ../streaming/vo/ManifestInfo */ "./node_modules/dashjs/src/streaming/vo/ManifestInfo.js");

var _ManifestInfo2 = _interopRequireDefault(_ManifestInfo);

var _Event = __webpack_require__(/*! ./vo/Event */ "./node_modules/dashjs/src/dash/vo/Event.js");

var _Event2 = _interopRequireDefault(_Event);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _cea608Parser = __webpack_require__(/*! ../../externals/cea608-parser */ "./node_modules/dashjs/externals/cea608-parser.js");

var _cea608Parser2 = _interopRequireDefault(_cea608Parser);

var _SupervisorTools = __webpack_require__(/*! ../streaming/utils/SupervisorTools */ "./node_modules/dashjs/src/streaming/utils/SupervisorTools.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function DashAdapter() {
    var instance = void 0,
        dashManifestModel = void 0,
        voPeriods = void 0,
        voAdaptations = void 0,
        currentMediaInfo = void 0;

    function setup() {
        reset();
    }

    function setConfig(config) {
        if (!config) return;

        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
    }

    function getRepresentationForRepresentationInfo(representationInfo, representationController) {
        return representationController && representationInfo ? representationController.getRepresentationForQuality(representationInfo.quality) : null;
    }

    function getAdaptationForMediaInfo(mediaInfo) {

        if (!mediaInfo || !mediaInfo.streamInfo || mediaInfo.streamInfo.id === undefined || !voAdaptations[mediaInfo.streamInfo.id]) return null;
        return voAdaptations[mediaInfo.streamInfo.id][mediaInfo.index];
    }

    function getPeriodForStreamInfo(streamInfo, voPeriodsArray) {
        var ln = voPeriodsArray.length;

        for (var i = 0; i < ln; i++) {
            var voPeriod = voPeriodsArray[i];

            if (streamInfo.id === voPeriod.id) return voPeriod;
        }

        return null;
    }

    function convertRepresentationToRepresentationInfo(voRepresentation) {
        var representationInfo = new _RepresentationInfo2.default();
        var realAdaptation = voRepresentation.adaptation.period.mpd.manifest.Period_asArray[voRepresentation.adaptation.period.index].AdaptationSet_asArray[voRepresentation.adaptation.index];
        var realRepresentation = dashManifestModel.getRepresentationFor(voRepresentation.index, realAdaptation);

        representationInfo.id = voRepresentation.id;
        representationInfo.quality = voRepresentation.index;
        representationInfo.bandwidth = dashManifestModel.getBandwidth(realRepresentation);
        representationInfo.DVRWindow = voRepresentation.segmentAvailabilityRange;
        representationInfo.fragmentDuration = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length > 0 ? voRepresentation.segments[0].duration : NaN);
        representationInfo.MSETimeOffset = voRepresentation.MSETimeOffset;
        representationInfo.useCalculatedLiveEdgeTime = voRepresentation.useCalculatedLiveEdgeTime;
        representationInfo.mediaInfo = convertAdaptationToMediaInfo(voRepresentation.adaptation);

        return representationInfo;
    }

    function convertAdaptationToMediaInfo(adaptation) {
        var mediaInfo = new _MediaInfo2.default();
        var realAdaptation = adaptation.period.mpd.manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index];
        var viewpoint = void 0;

        mediaInfo.id = adaptation.id;
        mediaInfo.index = adaptation.index;
        mediaInfo.type = adaptation.type;
        mediaInfo.streamInfo = convertPeriodToStreamInfo(adaptation.period);
        mediaInfo.representationCount = dashManifestModel.getRepresentationCount(realAdaptation);
        mediaInfo.labels = dashManifestModel.getLabelsForAdaptation(realAdaptation);
        mediaInfo.lang = dashManifestModel.getLanguageForAdaptation(realAdaptation);
        viewpoint = dashManifestModel.getViewpointForAdaptation(realAdaptation);
        mediaInfo.viewpoint = viewpoint ? viewpoint.value : undefined;
        mediaInfo.accessibility = dashManifestModel.getAccessibilityForAdaptation(realAdaptation).map(function (accessibility) {
            var accessibilityValue = accessibility.value;
            var accessibilityData = accessibilityValue;
            if (accessibility.schemeIdUri && accessibility.schemeIdUri.search('cea-608') >= 0 && typeof _cea608Parser2.default !== 'undefined') {
                if (accessibilityValue) {
                    accessibilityData = 'cea-608:' + accessibilityValue;
                } else {
                    accessibilityData = 'cea-608';
                }
                mediaInfo.embeddedCaptions = true;
            }
            return accessibilityData;
        });

        mediaInfo.audioChannelConfiguration = dashManifestModel.getAudioChannelConfigurationForAdaptation(realAdaptation).map(function (audioChannelConfiguration) {
            return audioChannelConfiguration.value;
        });
        mediaInfo.roles = dashManifestModel.getRolesForAdaptation(realAdaptation).map(function (role) {
            return role.value;
        });
        mediaInfo.codec = dashManifestModel.getCodec(realAdaptation);
        mediaInfo.mimeType = dashManifestModel.getMimeType(realAdaptation);
        mediaInfo.contentProtection = dashManifestModel.getContentProtectionData(realAdaptation);
        mediaInfo.bitrateList = dashManifestModel.getBitrateListForAdaptation(realAdaptation);

        if (mediaInfo.contentProtection) {
            mediaInfo.contentProtection.forEach(function (item) {
                item.KID = dashManifestModel.getKID(item);
            });
        }

        mediaInfo.isText = dashManifestModel.getIsTextTrack(mediaInfo.mimeType);

        return mediaInfo;
    }

    function convertVideoInfoToEmbeddedTextInfo(mediaInfo, channel, lang) {
        mediaInfo.id = channel; // CC1, CC2, CC3, or CC4
        mediaInfo.index = 100 + parseInt(channel.substring(2, 3));
        mediaInfo.type = _Constants2.default.EMBEDDED_TEXT;
        mediaInfo.codec = 'cea-608-in-SEI';
        mediaInfo.isText = true;
        mediaInfo.isEmbedded = true;
        mediaInfo.lang = lang;
        mediaInfo.roles = ['caption'];
    }

    function convertVideoInfoToThumbnailInfo(mediaInfo) {
        mediaInfo.type = _Constants2.default.IMAGE;
    }

    function convertPeriodToStreamInfo(period) {
        var streamInfo = new _StreamInfo2.default();
        var THRESHOLD = 1;

        streamInfo.id = period.id;
        streamInfo.index = period.index;
        streamInfo.start = period.start;
        streamInfo.duration = period.duration;
        streamInfo.manifestInfo = convertMpdToManifestInfo(period.mpd);
        streamInfo.isLast = period.mpd.manifest.Period_asArray.length === 1 || Math.abs(streamInfo.start + streamInfo.duration - streamInfo.manifestInfo.duration) < THRESHOLD;

        return streamInfo;
    }

    function convertMpdToManifestInfo(mpd) {
        var manifestInfo = new _ManifestInfo2.default();

        manifestInfo.DVRWindowSize = mpd.timeShiftBufferDepth;
        manifestInfo.loadedTime = mpd.manifest.loadedTime;
        manifestInfo.availableFrom = mpd.availabilityStartTime;
        manifestInfo.minBufferTime = mpd.manifest.minBufferTime;
        manifestInfo.maxFragmentDuration = mpd.maxSegmentDuration;
        manifestInfo.duration = dashManifestModel.getDuration(mpd.manifest);
        manifestInfo.isDynamic = dashManifestModel.getIsDynamic(mpd.manifest);

        return manifestInfo;
    }

    function getMediaInfoForType(streamInfo, type) {

        if (voPeriods.length === 0) {
            return null;
        }

        var manifest = voPeriods[0].mpd.manifest;
        var realAdaptation = getAdaptationForType(manifest, streamInfo.index, type, streamInfo);
        if (!realAdaptation) return null;

        var selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voPeriods);
        var periodId = selectedVoPeriod.id;
        var idx = dashManifestModel.getIndexForAdaptation(realAdaptation, manifest, streamInfo.index);

        voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod);

        return convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);
    }

    function getIsMain(adaptation) {
        return dashManifestModel.getRolesForAdaptation(adaptation).filter(function (role) {
            return role.value === _DashConstants2.default.MAIN;
        })[0];
    }

    function getAdaptationForType(manifest, periodIndex, type, streamInfo) {
        var adaptations = dashManifestModel.getAdaptationsForType(manifest, periodIndex, type);

        if (!adaptations || adaptations.length === 0) return null;

        if (adaptations.length > 1 && streamInfo) {
            var allMediaInfoForType = getAllMediaInfoForType(streamInfo, type);

            if (currentMediaInfo[streamInfo.id] && currentMediaInfo[streamInfo.id][type]) {
                for (var i = 0, ln = adaptations.length; i < ln; i++) {
                    if (currentMediaInfo[streamInfo.id][type].isMediaInfoEqual(allMediaInfoForType[i])) {
                        return adaptations[i];
                    }
                }
            }

            for (var _i = 0, _ln = adaptations.length; _i < _ln; _i++) {
                if (getIsMain(adaptations[_i])) {
                    return adaptations[_i];
                }
            }
        }

        return adaptations[0];
    }

    function getAllMediaInfoForType(streamInfo, type, externalManifest) {
        var voLocalPeriods = voPeriods;
        var manifest = externalManifest;
        var mediaArr = [];
        var data = void 0,
            media = void 0,
            idx = void 0,
            i = void 0,
            j = void 0,
            ln = void 0;

        if (manifest) {
            checkSetConfigCall();
            var mpd = dashManifestModel.getMpd(manifest);

            voLocalPeriods = dashManifestModel.getRegularPeriods(mpd);
        } else {
            if (voPeriods.length > 0) {
                manifest = voPeriods[0].mpd.manifest;
            } else {
                return mediaArr;
            }
        }

        var selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voLocalPeriods);
        var periodId = selectedVoPeriod.id;
        var adaptationsForType = dashManifestModel.getAdaptationsForType(manifest, streamInfo.index, type !== _Constants2.default.EMBEDDED_TEXT ? type : _Constants2.default.VIDEO);

        if (!adaptationsForType) return mediaArr;

        voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod);

        for (i = 0, ln = adaptationsForType.length; i < ln; i++) {
            data = adaptationsForType[i];
            idx = dashManifestModel.getIndexForAdaptation(data, manifest, streamInfo.index);
            media = convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);

            if (type === _Constants2.default.EMBEDDED_TEXT) {
                var accessibilityLength = media.accessibility.length;
                for (j = 0; j < accessibilityLength; j++) {
                    if (!media) {
                        continue;
                    }
                    var accessibility = media.accessibility[j];
                    if (accessibility.indexOf('cea-608:') === 0) {
                        var value = accessibility.substring(8);
                        var parts = value.split(';');
                        if (parts[0].substring(0, 2) === 'CC') {
                            for (j = 0; j < parts.length; j++) {
                                if (!media) {
                                    media = convertAdaptationToMediaInfo.call(this, voAdaptations[periodId][idx]);
                                }
                                convertVideoInfoToEmbeddedTextInfo(media, parts[j].substring(0, 3), parts[j].substring(4));
                                mediaArr.push(media);
                                media = null;
                            }
                        } else {
                            for (j = 0; j < parts.length; j++) {
                                // Only languages for CC1, CC2, ...
                                if (!media) {
                                    media = convertAdaptationToMediaInfo.call(this, voAdaptations[periodId][idx]);
                                }
                                convertVideoInfoToEmbeddedTextInfo(media, 'CC' + (j + 1), parts[j]);
                                mediaArr.push(media);
                                media = null;
                            }
                        }
                    } else if (accessibility.indexOf('cea-608') === 0) {
                        // Nothing known. We interpret it as CC1=eng
                        convertVideoInfoToEmbeddedTextInfo(media, _Constants2.default.CC1, 'eng');
                        mediaArr.push(media);
                        media = null;
                    }
                }
            } else if (type === _Constants2.default.IMAGE) {
                convertVideoInfoToThumbnailInfo(media);
                mediaArr.push(media);
                media = null;
            } else if (media) {
                mediaArr.push(media);
            }
        }

        return mediaArr;
    }

    function checkSetConfigCall() {
        if (!dashManifestModel || !dashManifestModel.hasOwnProperty('getMpd') || !dashManifestModel.hasOwnProperty('getRegularPeriods')) {
            throw new Error('setConfig function has to be called previously');
        }
    }

    function updatePeriods(newManifest) {
        if (!newManifest) return null;

        checkSetConfigCall();

        var mpd = dashManifestModel.getMpd(newManifest);

        voPeriods = dashManifestModel.getRegularPeriods(mpd);
        voAdaptations = {};
    }

    function getStreamsInfo(externalManifest, maxStreamsInfo) {
        var streams = [];
        var voLocalPeriods = voPeriods;

        //if manifest is defined, getStreamsInfo is for an outside manifest, not the current one
        if (externalManifest) {
            checkSetConfigCall();
            var mpd = dashManifestModel.getMpd(externalManifest);

            voLocalPeriods = dashManifestModel.getRegularPeriods(mpd);
        }

        if (!maxStreamsInfo) {
            maxStreamsInfo = voLocalPeriods.length;
        }
        for (var i = 0; i < maxStreamsInfo; i++) {
            streams.push(convertPeriodToStreamInfo(voLocalPeriods[i]));
        }

        return streams;
    }

    function checkStreamProcessor(streamProcessor) {
        if (!streamProcessor || !streamProcessor.hasOwnProperty('getRepresentationController') || !streamProcessor.hasOwnProperty('getIndexHandler') || !streamProcessor.hasOwnProperty('getMediaInfo') || !streamProcessor.hasOwnProperty('getType') || !streamProcessor.hasOwnProperty('getStreamInfo')) {
            throw new Error('streamProcessor parameter is missing or malformed!');
        }
    }

    function checkRepresentationController(representationController) {
        if (!representationController || !representationController.hasOwnProperty('getRepresentationForQuality') || !representationController.hasOwnProperty('getCurrentRepresentation')) {
            throw new Error('representationController parameter is missing or malformed!');
        }
    }

    function getInitRequest(streamProcessor, quality) {
        var representationController = void 0,
            representation = void 0,
            indexHandler = void 0;

        checkStreamProcessor(streamProcessor);
        (0, _SupervisorTools.checkInteger)(quality);

        representationController = streamProcessor.getRepresentationController();
        indexHandler = streamProcessor.getIndexHandler();

        representation = representationController ? representationController.getRepresentationForQuality(quality) : null;

        return indexHandler ? indexHandler.getInitRequest(representation) : null;
    }

    function getFragmentRequest(streamProcessor, representationInfo, time, options) {
        var representationController = void 0,
            representation = void 0,
            indexHandler = void 0;

        var fragRequest = null;

        checkStreamProcessor(streamProcessor);

        representationController = streamProcessor.getRepresentationController();
        representation = getRepresentationForRepresentationInfo(representationInfo, representationController);
        indexHandler = streamProcessor.getIndexHandler();

        if (indexHandler) {
            //if time and options are undefined, it means the next segment is requested
            //otherwise, the segment at this specific time is requested.
            if (time !== undefined && options !== undefined) {
                fragRequest = indexHandler.getSegmentRequestForTime(representation, time, options);
            } else {
                fragRequest = indexHandler.getNextSegmentRequest(representation);
            }
        }

        return fragRequest;
    }

    function getIndexHandlerTime(streamProcessor) {
        checkStreamProcessor(streamProcessor);

        var indexHandler = streamProcessor.getIndexHandler();

        return indexHandler ? indexHandler.getCurrentTime() : NaN;
    }

    function setIndexHandlerTime(streamProcessor, value) {
        checkStreamProcessor(streamProcessor);

        var indexHandler = streamProcessor.getIndexHandler();
        if (indexHandler) {
            indexHandler.setCurrentTime(value);
        }
    }

    function resetIndexHandler(streamProcessor) {
        checkStreamProcessor(streamProcessor);

        var indexHandler = streamProcessor.getIndexHandler();
        if (indexHandler) {
            indexHandler.resetIndex();
        }
    }

    function updateData(streamProcessor) {
        checkStreamProcessor(streamProcessor);

        var selectedVoPeriod = getPeriodForStreamInfo(streamProcessor.getStreamInfo(), voPeriods);
        var mediaInfo = streamProcessor.getMediaInfo();
        var voAdaptation = getAdaptationForMediaInfo(mediaInfo);
        var type = streamProcessor.getType();

        var id = void 0,
            realAdaptation = void 0;

        id = mediaInfo ? mediaInfo.id : null;
        if (voPeriods.length > 0) {
            realAdaptation = id ? dashManifestModel.getAdaptationForId(id, voPeriods[0].mpd.manifest, selectedVoPeriod.index) : dashManifestModel.getAdaptationForIndex(mediaInfo.index, voPeriods[0].mpd.manifest, selectedVoPeriod.index);
            streamProcessor.getRepresentationController().updateData(realAdaptation, voAdaptation, type);
        }
    }

    /**
     * Get a specific voRepresentation. If quality parameter is defined, this function will return the voRepresentation for this quality.
     * Otherwise, this function will return the current voRepresentation used by the representationController.
     * @param {RepresentationController} representationController - RepresentationController reference
     * @param {number} quality - quality index of the voRepresentaion expected.
     */
    function getRepresentationInfo(representationController, quality) {
        checkRepresentationController(representationController);
        var voRepresentation = void 0;

        if (quality !== undefined) {
            (0, _SupervisorTools.checkInteger)(quality);
            voRepresentation = representationController.getRepresentationForQuality(quality);
        } else {
            voRepresentation = representationController.getCurrentRepresentation();
        }

        return voRepresentation ? convertRepresentationToRepresentationInfo(voRepresentation) : null;
    }

    function getEvent(eventBox, eventStreams, startTime) {
        if (!eventBox || !eventStreams) {
            return null;
        }
        var event = new _Event2.default();
        var schemeIdUri = eventBox.scheme_id_uri;
        var value = eventBox.value;
        var timescale = eventBox.timescale;
        var presentationTimeDelta = eventBox.presentation_time_delta;
        var duration = eventBox.event_duration;
        var id = eventBox.id;
        var messageData = eventBox.message_data;
        var presentationTime = startTime * timescale + presentationTimeDelta;

        if (!eventStreams[schemeIdUri + '/' + value]) return null;

        event.eventStream = eventStreams[schemeIdUri + '/' + value];
        event.eventStream.value = value;
        event.eventStream.timescale = timescale;
        event.duration = duration;
        event.id = id;
        event.presentationTime = presentationTime;
        event.messageData = messageData;
        event.presentationTimeDelta = presentationTimeDelta;

        return event;
    }

    function getEventsFor(info, streamProcessor) {
        var events = [];

        if (voPeriods.length === 0) {
            return events;
        }

        var manifest = voPeriods[0].mpd.manifest;

        if (info instanceof _StreamInfo2.default) {
            events = dashManifestModel.getEventsForPeriod(getPeriodForStreamInfo(info, voPeriods));
        } else if (info instanceof _MediaInfo2.default) {
            events = dashManifestModel.getEventStreamForAdaptationSet(manifest, getAdaptationForMediaInfo(info));
        } else if (info instanceof _RepresentationInfo2.default) {
            events = dashManifestModel.getEventStreamForRepresentation(manifest, getRepresentationForRepresentationInfo(info, streamProcessor.getRepresentationController()));
        }

        return events;
    }

    function setCurrentMediaInfo(streamId, type, mediaInfo) {
        currentMediaInfo[streamId] = currentMediaInfo[streamId] || {};
        currentMediaInfo[streamId][type] = currentMediaInfo[streamId][type] || {};
        currentMediaInfo[streamId][type] = mediaInfo;
    }

    function reset() {
        voPeriods = [];
        voAdaptations = {};
        currentMediaInfo = {};
    }

    instance = {
        convertDataToRepresentationInfo: convertRepresentationToRepresentationInfo,
        getDataForMedia: getAdaptationForMediaInfo,
        getStreamsInfo: getStreamsInfo,
        getMediaInfoForType: getMediaInfoForType,
        getAllMediaInfoForType: getAllMediaInfoForType,
        getRepresentationInfo: getRepresentationInfo,
        getAdaptationForType: getAdaptationForType,
        updateData: updateData,
        getInitRequest: getInitRequest,
        getFragmentRequest: getFragmentRequest,
        getIndexHandlerTime: getIndexHandlerTime,
        setIndexHandlerTime: setIndexHandlerTime,
        getEventsFor: getEventsFor,
        getEvent: getEvent,
        setConfig: setConfig,
        updatePeriods: updatePeriods,
        reset: reset,
        resetIndexHandler: resetIndexHandler,
        setCurrentMediaInfo: setCurrentMediaInfo
    };

    setup();
    return instance;
}

DashAdapter.__dashjs_factory_name = 'DashAdapter';
exports.default = _FactoryMaker2.default.getSingletonFactory(DashAdapter);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/DashHandler.js":
/*!*****************************************************!*\
  !*** ./node_modules/dashjs/src/dash/DashHandler.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../streaming/constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _DashConstants = __webpack_require__(/*! ./constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

var _FragmentRequest = __webpack_require__(/*! ../streaming/vo/FragmentRequest */ "./node_modules/dashjs/src/streaming/vo/FragmentRequest.js");

var _FragmentRequest2 = _interopRequireDefault(_FragmentRequest);

var _DashJSError = __webpack_require__(/*! ../streaming/vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _HTTPRequest = __webpack_require__(/*! ../streaming/vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _Events = __webpack_require__(/*! ../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _EventBus = __webpack_require__(/*! ../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Errors = __webpack_require__(/*! ../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _URLUtils = __webpack_require__(/*! ../streaming/utils/URLUtils */ "./node_modules/dashjs/src/streaming/utils/URLUtils.js");

var _URLUtils2 = _interopRequireDefault(_URLUtils);

var _Representation = __webpack_require__(/*! ./vo/Representation */ "./node_modules/dashjs/src/dash/vo/Representation.js");

var _Representation2 = _interopRequireDefault(_Representation);

var _SegmentsUtils = __webpack_require__(/*! ./utils/SegmentsUtils */ "./node_modules/dashjs/src/dash/utils/SegmentsUtils.js");

var _SegmentsGetter = __webpack_require__(/*! ./utils/SegmentsGetter */ "./node_modules/dashjs/src/dash/utils/SegmentsGetter.js");

var _SegmentsGetter2 = _interopRequireDefault(_SegmentsGetter);

var _SegmentBaseLoader = __webpack_require__(/*! ./SegmentBaseLoader */ "./node_modules/dashjs/src/dash/SegmentBaseLoader.js");

var _SegmentBaseLoader2 = _interopRequireDefault(_SegmentBaseLoader);

var _WebmSegmentBaseLoader = __webpack_require__(/*! ./WebmSegmentBaseLoader */ "./node_modules/dashjs/src/dash/WebmSegmentBaseLoader.js");

var _WebmSegmentBaseLoader2 = _interopRequireDefault(_WebmSegmentBaseLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function DashHandler(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var urlUtils = (0, _URLUtils2.default)(context).getInstance();

    var timelineConverter = config.timelineConverter;
    var dashMetrics = config.dashMetrics;
    var metricsModel = config.metricsModel;
    var mediaPlayerModel = config.mediaPlayerModel;
    var errHandler = config.errHandler;
    var baseURLController = config.baseURLController;
    var segmentBaseLoader = void 0;

    var instance = void 0,
        logger = void 0,
        index = void 0,
        requestedTime = void 0,
        currentTime = void 0,
        streamProcessor = void 0,
        segmentsGetter = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        resetInitialSettings();

        segmentBaseLoader = isWebM(config.mimeType) ? (0, _WebmSegmentBaseLoader2.default)(context).getInstance() : (0, _SegmentBaseLoader2.default)(context).getInstance();
        segmentBaseLoader.setConfig({
            baseURLController: baseURLController,
            metricsModel: metricsModel,
            mediaPlayerModel: mediaPlayerModel,
            errHandler: errHandler
        });

        eventBus.on(_Events2.default.INITIALIZATION_LOADED, onInitializationLoaded, instance);
        eventBus.on(_Events2.default.SEGMENTS_LOADED, onSegmentsLoaded, instance);
    }

    function isWebM(mimeType) {
        var type = mimeType.split('/')[1];
        return 'webm' === type.toLowerCase();
    }

    function initialize(StreamProcessor) {
        streamProcessor = StreamProcessor;

        segmentBaseLoader.initialize();

        segmentsGetter = (0, _SegmentsGetter2.default)(context).create(config, isDynamic());
    }

    function getType() {
        return streamProcessor ? streamProcessor.getType() : null;
    }

    function isDynamic() {
        var streamInfo = streamProcessor ? streamProcessor.getStreamInfo() : null;
        return streamInfo ? streamInfo.manifestInfo.isDynamic : null;
    }

    function getMediaInfo() {
        return streamProcessor ? streamProcessor.getMediaInfo() : null;
    }

    function getStreamProcessor() {
        return streamProcessor;
    }

    function setCurrentTime(value) {
        currentTime = value;
    }

    function getCurrentTime() {
        return currentTime;
    }

    function resetIndex() {
        index = -1;
    }

    function resetInitialSettings() {
        resetIndex();
        currentTime = 0;
        requestedTime = null;
        streamProcessor = null;
        segmentsGetter = null;
    }

    function reset() {
        resetInitialSettings();

        eventBus.off(_Events2.default.INITIALIZATION_LOADED, onInitializationLoaded, instance);
        eventBus.off(_Events2.default.SEGMENTS_LOADED, onSegmentsLoaded, instance);
    }

    function setRequestUrl(request, destination, representation) {
        var baseURL = baseURLController.resolve(representation.path);
        var url = void 0,
            serviceLocation = void 0;

        if (!baseURL || destination === baseURL.url || !urlUtils.isRelative(destination)) {
            url = destination;
        } else {
            url = baseURL.url;
            serviceLocation = baseURL.serviceLocation;

            if (destination) {
                url = urlUtils.resolve(destination, url);
            }
        }

        if (urlUtils.isRelative(url)) {
            return false;
        }

        request.url = url;
        request.serviceLocation = serviceLocation;

        return true;
    }

    function generateInitRequest(representation, mediaType) {
        var request = new _FragmentRequest2.default();
        var period = representation.adaptation.period;
        var presentationStartTime = period.start;
        var isDynamicStream = isDynamic();

        request.mediaType = mediaType;
        request.type = _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE;
        request.range = representation.range;
        request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, period.mpd, isDynamicStream);
        request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamicStream);
        request.quality = representation.index;
        request.mediaInfo = getMediaInfo();
        request.representationId = representation.id;

        if (setRequestUrl(request, representation.initialization, representation)) {
            return request;
        }
    }

    function getInitRequest(representation) {
        if (!representation) return null;
        var request = generateInitRequest(representation, getType());
        return request;
    }

    function isMediaFinished(representation) {
        var isFinished = false;
        var isDynamicStream = isDynamic();

        if (!isDynamicStream && index === representation.availableSegmentsNumber) {
            isFinished = true;
        } else {
            var seg = (0, _SegmentsUtils.getSegmentByIndex)(index, representation);
            if (seg) {
                var time = parseFloat((seg.presentationStartTime - representation.adaptation.period.start).toFixed(5));
                var duration = representation.adaptation.period.duration;
                logger.debug(representation.segmentInfoType + ': ' + time + ' / ' + duration);
                isFinished = representation.segmentInfoType === _DashConstants2.default.SEGMENT_TIMELINE && isDynamicStream ? false : time >= duration;
            } else {
                logger.debug('isMediaFinished - no segment found');
            }
        }

        return isFinished;
    }

    function updateSegments(voRepresentation) {
        segmentsGetter.getSegments(voRepresentation, requestedTime, index, onSegmentListUpdated);
    }

    function onSegmentListUpdated(voRepresentation, segments) {
        voRepresentation.segments = segments;
        if (segments && segments.length > 0) {
            if (isDynamic()) {
                var lastSegment = segments[segments.length - 1];
                var liveEdge = lastSegment.presentationStartTime;
                var metrics = metricsModel.getMetricsFor(_Constants2.default.STREAM);
                // the last segment is the Expected, not calculated, live edge.
                timelineConverter.setExpectedLiveEdge(liveEdge);
                metricsModel.updateManifestUpdateInfo(dashMetrics.getCurrentManifestUpdate(metrics), { presentationStartTime: liveEdge });
            }
        }
    }

    function updateSegmentList(voRepresentation) {
        if (!voRepresentation) {
            throw new Error('no representation');
        }

        voRepresentation.segments = null;

        updateSegments(voRepresentation);
    }

    function updateRepresentation(voRepresentation, keepIdx) {
        var hasInitialization = _Representation2.default.hasInitialization(voRepresentation);
        var hasSegments = _Representation2.default.hasSegments(voRepresentation);
        var error = void 0;

        if (!voRepresentation.segmentDuration && !voRepresentation.segments) {
            updateSegmentList(voRepresentation);
        }

        voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic());

        if (voRepresentation.segmentAvailabilityRange.end < voRepresentation.segmentAvailabilityRange.start && !voRepresentation.useCalculatedLiveEdgeTime) {
            error = new _DashJSError2.default(_Errors2.default.SEGMENTS_UNAVAILABLE_ERROR_CODE, _Errors2.default.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE, { availabilityDelay: voRepresentation.segmentAvailabilityRange.start - voRepresentation.segmentAvailabilityRange.end });
            eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, { sender: this, representation: voRepresentation, error: error });
            return;
        }

        if (!keepIdx) {
            resetIndex();
        }

        if (voRepresentation.segmentDuration) {
            updateSegmentList(voRepresentation);
        }

        if (!hasInitialization) {
            segmentBaseLoader.loadInitialization(voRepresentation);
        }

        if (!hasSegments) {
            segmentBaseLoader.loadSegments(voRepresentation, getType(), voRepresentation.indexRange);
        }

        if (hasInitialization && hasSegments) {
            eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, { sender: this, representation: voRepresentation });
        }
    }

    function getIndexForSegments(time, representation, timeThreshold) {
        var segments = representation.segments;
        var ln = segments ? segments.length : null;

        var idx = -1;
        var epsilon = void 0,
            frag = void 0,
            ft = void 0,
            fd = void 0,
            i = void 0;

        if (segments && ln > 0) {
            // In case timeThreshold is not provided, let's use the default value set in MediaPlayerModel
            timeThreshold = timeThreshold === undefined || timeThreshold === null ? mediaPlayerModel.getSegmentOverlapToleranceTime() : timeThreshold;

            for (i = 0; i < ln; i++) {
                frag = segments[i];
                ft = frag.presentationStartTime;
                fd = frag.duration;
                // In case timeThreshold is null, set epsilon to half the fragment duration
                epsilon = timeThreshold === undefined || timeThreshold === null ? fd / 2 : timeThreshold;
                if (time + epsilon >= ft && time - epsilon < ft + fd) {
                    idx = frag.availabilityIdx;
                    break;
                }
            }
        }

        return idx;
    }

    function getRequestForSegment(segment) {
        if (segment === null || segment === undefined) {
            return null;
        }

        var request = new _FragmentRequest2.default();
        var representation = segment.representation;
        var bandwidth = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].bandwidth;
        var url = segment.media;

        url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Number', segment.replacementNumber);
        url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Time', segment.replacementTime);
        url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Bandwidth', bandwidth);
        url = (0, _SegmentsUtils.replaceIDForTemplate)(url, representation.id);
        url = (0, _SegmentsUtils.unescapeDollarsInTemplate)(url);

        request.mediaType = getType();
        request.type = _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;
        request.range = segment.mediaRange;
        request.startTime = segment.presentationStartTime;
        request.duration = segment.duration;
        request.timescale = representation.timescale;
        request.availabilityStartTime = segment.availabilityStartTime;
        request.availabilityEndTime = segment.availabilityEndTime;
        request.wallStartTime = segment.wallStartTime;
        request.quality = representation.index;
        request.index = segment.availabilityIdx;
        request.mediaInfo = getMediaInfo();
        request.adaptationIndex = representation.adaptation.index;
        request.representationId = representation.id;

        if (setRequestUrl(request, url, representation)) {
            return request;
        }
    }

    function getSegmentRequestForTime(representation, time, options) {
        var request = void 0,
            segment = void 0,
            finished = void 0;

        if (!representation) {
            return null;
        }

        var type = getType();
        var idx = index;
        var keepIdx = options ? options.keepIdx : false;
        var timeThreshold = options ? options.timeThreshold : null;
        var ignoreIsFinished = options && options.ignoreIsFinished ? true : false;

        if (requestedTime !== time) {
            // When playing at live edge with 0 delay we may loop back with same time and index until it is available. Reduces verboseness of logs.
            requestedTime = time;
            logger.debug('Getting the request for ' + type + ' time : ' + time);
        }

        updateSegments(representation);
        index = getIndexForSegments(time, representation, timeThreshold);

        //Index may be -1 if getSegments needs to update again.  So after getSegments is called and updated then try to get index again.

        if (index < 0) {
            updateSegments(representation);
            index = getIndexForSegments(time, representation, timeThreshold);
        }

        if (index >= 0) {
            logger.debug('Index for ' + type + ' time ' + time + ' is ' + index);
        }

        finished = !ignoreIsFinished ? isMediaFinished(representation) : false;
        if (finished) {
            request = new _FragmentRequest2.default();
            request.action = _FragmentRequest2.default.ACTION_COMPLETE;
            request.index = index;
            request.mediaType = type;
            request.mediaInfo = getMediaInfo();
            logger.debug('Signal complete in getSegmentRequestForTime -', type);
        } else {
            segment = (0, _SegmentsUtils.getSegmentByIndex)(index, representation);
            request = getRequestForSegment(segment);
        }

        if (keepIdx && idx >= 0) {
            index = representation.segmentInfoType === _DashConstants2.default.SEGMENT_TIMELINE && isDynamic() ? index : idx;
        }

        return request;
    }

    function getNextSegmentRequest(representation) {
        var request = void 0,
            segment = void 0,
            finished = void 0;

        if (!representation || index === -1) {
            return null;
        }

        var type = getType();
        var isDynamicStream = isDynamic();

        requestedTime = null;
        index++;

        logger.debug('Getting the next request at index: ' + index + ', type: ' + type);

        // check that there is a segment in this index. If none, update segments and wait for next time loop is called
        var seg = (0, _SegmentsUtils.getSegmentByIndex)(index, representation);
        if (!seg && isDynamicStream) {
            logger.debug('No segment found at index: ' + index + '. Wait for next loop');
            updateSegments(representation);
            index--;
            return null;
        }

        finished = isMediaFinished(representation);
        if (finished) {
            request = new _FragmentRequest2.default();
            request.action = _FragmentRequest2.default.ACTION_COMPLETE;
            request.index = index;
            request.mediaType = type;
            request.mediaInfo = getMediaInfo();
            logger.debug('Signal complete -', type);
        } else {
            updateSegments(representation);
            segment = (0, _SegmentsUtils.getSegmentByIndex)(index, representation);
            request = getRequestForSegment(segment);
            if (!segment && isDynamicStream) {
                /*
                 Sometimes when playing dynamic streams with 0 fragment delay at live edge we ask for
                 an index before it is available so we decrement index back and send null request
                 which triggers the validate loop to rerun and the next time the segment should be
                 available.
                 */
                index--;
            }
        }

        return request;
    }

    function onInitializationLoaded(e) {
        var representation = e.representation;
        if (!representation.segments) return;

        eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, { sender: this, representation: representation });
    }

    function onSegmentsLoaded(e) {
        if (e.error || getType() !== e.mediaType) return;

        var fragments = e.segments;
        var representation = e.representation;
        var segments = [];
        var count = 0;

        var i = void 0,
            len = void 0,
            s = void 0,
            seg = void 0;

        for (i = 0, len = fragments.length; i < len; i++) {
            s = fragments[i];

            seg = (0, _SegmentsUtils.getTimeBasedSegment)(timelineConverter, isDynamic(), representation, s.startTime, s.duration, s.timescale, s.media, s.mediaRange, count);

            segments.push(seg);
            seg = null;
            count++;
        }

        representation.segmentAvailabilityRange = { start: segments[0].presentationStartTime, end: segments[len - 1].presentationStartTime };
        representation.availableSegmentsNumber = len;

        onSegmentListUpdated(representation, segments);

        if (!_Representation2.default.hasInitialization(representation)) return;

        eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, { sender: this, representation: representation });
    }

    instance = {
        initialize: initialize,
        getStreamProcessor: getStreamProcessor,
        getInitRequest: getInitRequest,
        getSegmentRequestForTime: getSegmentRequestForTime,
        getNextSegmentRequest: getNextSegmentRequest,
        updateRepresentation: updateRepresentation,
        updateSegmentList: updateSegmentList,
        setCurrentTime: setCurrentTime,
        getCurrentTime: getCurrentTime,
        reset: reset,
        resetIndex: resetIndex
    };

    setup();

    return instance;
}

DashHandler.__dashjs_factory_name = 'DashHandler';
exports.default = _FactoryMaker2.default.getClassFactory(DashHandler);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/DashMetrics.js":
/*!*****************************************************!*\
  !*** ./node_modules/dashjs/src/dash/DashMetrics.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _HTTPRequest = __webpack_require__(/*! ../streaming/vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _MetricsConstants = __webpack_require__(/*! ../streaming/constants/MetricsConstants */ "./node_modules/dashjs/src/streaming/constants/MetricsConstants.js");

var _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);

var _Round = __webpack_require__(/*! ./utils/Round10 */ "./node_modules/dashjs/src/dash/utils/Round10.js");

var _Round2 = _interopRequireDefault(_Round);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module DashMetrics
 * @param {object} config configuration passed to DashMetrics
 */
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function DashMetrics(config) {

    config = config || {};
    var instance = void 0;
    var dashManifestModel = config.dashManifestModel;
    var manifestModel = config.manifestModel;

    function getPeriod(periodId) {
        var manifest = manifestModel.getValue();
        if (!manifest) {
            return -1;
        }
        return manifest.Period_asArray[periodId];
    }

    function getBandwidthForRepresentation(representationId, periodId) {
        var representation = void 0;
        var period = getPeriod(periodId);

        representation = findRepresentation(period, representationId);

        if (representation === null) {
            return null;
        }

        return representation.bandwidth;
    }

    /**
     *
     * @param {string} representationId
     * @param {number} periodIdx
     * @returns {*}
     */
    function getIndexForRepresentation(representationId, periodIdx) {
        var period = getPeriod(periodIdx);

        return findRepresentationIndex(period, representationId);
    }

    /**
     * This method returns the current max index based on what is defined in the MPD.
     *
     * @param {string} bufferType - String 'audio' or 'video',
     * @param {number} periodIdx - Make sure this is the period index not id
     * @return {number}
     * @memberof module:DashMetrics
     * @instance
     */
    function getMaxIndexForBufferType(bufferType, periodIdx) {
        var period = getPeriod(periodIdx);

        return findMaxBufferIndex(period, bufferType);
    }

    /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getCurrentRepresentationSwitch(metrics) {
        return getCurrent(metrics, _MetricsConstants2.default.TRACK_SWITCH);
    }

    /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getLatestBufferLevelVO(metrics) {
        return getCurrent(metrics, _MetricsConstants2.default.BUFFER_LEVEL);
    }

    /**
     * @param {MetricsList} metrics
     * @returns {number}
     * @memberof module:DashMetrics
     * @instance
     */
    function getCurrentBufferLevel(metrics) {
        var vo = getLatestBufferLevelVO(metrics);

        if (vo) {
            return _Round2.default.round10(vo.level / 1000, -3);
        }

        return 0;
    }

    /**
     * @param {MetricsList} metrics
     * @returns {null|*|vo}
     * @memberof module:DashMetrics
     * @instance
     */
    function getRequestsQueue(metrics) {
        return metrics ? metrics.RequestsQueue : null;
    }

    /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getCurrentHttpRequest(metrics) {
        if (!metrics) {
            return null;
        }

        var httpList = metrics.HttpList;
        var currentHttpList = null;

        var httpListLength = void 0,
            httpListLastIndex = void 0;

        if (!httpList || httpList.length <= 0) {
            return null;
        }

        httpListLength = httpList.length;
        httpListLastIndex = httpListLength - 1;

        while (httpListLastIndex >= 0) {
            if (httpList[httpListLastIndex].responsecode) {
                currentHttpList = httpList[httpListLastIndex];
                break;
            }
            httpListLastIndex--;
        }
        return currentHttpList;
    }

    /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getHttpRequests(metrics) {
        if (!metrics) {
            return [];
        }

        return !!metrics.HttpList ? metrics.HttpList : [];
    }

    /**
     * @param {MetricsList} metrics
     * @param {string} metricName
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getCurrent(metrics, metricName) {
        if (!metrics) {
            return null;
        }

        var list = metrics[metricName];

        if (!list || list.length <= 0) {
            return null;
        }

        return list[list.length - 1];
    }

    /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getCurrentDroppedFrames(metrics) {
        return getCurrent(metrics, _MetricsConstants2.default.DROPPED_FRAMES);
    }

    /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getCurrentSchedulingInfo(metrics) {
        return getCurrent(metrics, _MetricsConstants2.default.SCHEDULING_INFO);
    }

    /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getCurrentManifestUpdate(metrics) {
        return getCurrent(metrics, _MetricsConstants2.default.MANIFEST_UPDATE);
    }

    /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getCurrentDVRInfo(metrics) {
        return getCurrent(metrics, _MetricsConstants2.default.DVR_INFO);
    }

    /**
     * @param {MetricsList} metrics
     * @param {string} id
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getLatestMPDRequestHeaderValueByID(metrics, id) {
        var headers = {};
        var httpRequestList = void 0,
            httpRequest = void 0,
            i = void 0;

        httpRequestList = getHttpRequests(metrics);

        for (i = httpRequestList.length - 1; i >= 0; i--) {
            httpRequest = httpRequestList[i];

            if (httpRequest.type === _HTTPRequest.HTTPRequest.MPD_TYPE) {
                headers = parseResponseHeaders(httpRequest._responseHeaders);
                break;
            }
        }

        return headers[id] === undefined ? null : headers[id];
    }

    /**
     * @param {MetricsList} metrics
     * @param {string} id
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
    function getLatestFragmentRequestHeaderValueByID(metrics, id) {
        var headers = {};
        var httpRequest = getCurrentHttpRequest(metrics);
        if (httpRequest) {
            headers = parseResponseHeaders(httpRequest._responseHeaders);
        }
        return headers[id] === undefined ? null : headers[id];
    }

    function parseResponseHeaders(headerStr) {
        var headers = {};
        if (!headerStr) {
            return headers;
        }

        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method
        // which send a string starting with a "\n" character
        var headerPairs = headerStr.trim().split('\r\n');
        for (var i = 0, ilen = headerPairs.length; i < ilen; i++) {
            var headerPair = headerPairs[i];
            var index = headerPair.indexOf(': ');
            if (index > 0) {
                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);
            }
        }
        return headers;
    }

    function findRepresentationIndex(period, representationId) {
        var index = findRepresentation(period, representationId, true);

        if (index !== null) {
            return index;
        }

        return -1;
    }

    function findRepresentation(period, representationId, returnIndex) {
        var adaptationSet = void 0,
            adaptationSetArray = void 0,
            representation = void 0,
            representationArray = void 0,
            adaptationSetArrayIndex = void 0,
            representationArrayIndex = void 0;

        if (period) {
            adaptationSetArray = period.AdaptationSet_asArray;
            for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {
                adaptationSet = adaptationSetArray[adaptationSetArrayIndex];
                representationArray = adaptationSet.Representation_asArray;
                for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {
                    representation = representationArray[representationArrayIndex];
                    if (representationId === representation.id) {
                        if (returnIndex) {
                            return representationArrayIndex;
                        } else {
                            return representation;
                        }
                    }
                }
            }
        }

        return null;
    }

    function adaptationIsType(adaptation, bufferType) {
        return dashManifestModel.getIsTypeOf(adaptation, bufferType);
    }

    function findMaxBufferIndex(period, bufferType) {
        var adaptationSet = void 0,
            adaptationSetArray = void 0,
            representationArray = void 0,
            adaptationSetArrayIndex = void 0;

        if (!period || !bufferType) return -1;

        adaptationSetArray = period.AdaptationSet_asArray;
        for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {
            adaptationSet = adaptationSetArray[adaptationSetArrayIndex];
            representationArray = adaptationSet.Representation_asArray;
            if (adaptationIsType(adaptationSet, bufferType)) {
                return representationArray.length;
            }
        }

        return -1;
    }

    instance = {
        getBandwidthForRepresentation: getBandwidthForRepresentation,
        getIndexForRepresentation: getIndexForRepresentation,
        getMaxIndexForBufferType: getMaxIndexForBufferType,
        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,
        getLatestBufferLevelVO: getLatestBufferLevelVO,
        getCurrentBufferLevel: getCurrentBufferLevel,
        getCurrentHttpRequest: getCurrentHttpRequest,
        getHttpRequests: getHttpRequests,
        getCurrentDroppedFrames: getCurrentDroppedFrames,
        getCurrentSchedulingInfo: getCurrentSchedulingInfo,
        getCurrentDVRInfo: getCurrentDVRInfo,
        getCurrentManifestUpdate: getCurrentManifestUpdate,
        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,
        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,
        getRequestsQueue: getRequestsQueue
    };

    return instance;
}

DashMetrics.__dashjs_factory_name = 'DashMetrics';
exports.default = _FactoryMaker2.default.getSingletonFactory(DashMetrics);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/SegmentBaseLoader.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/dash/SegmentBaseLoader.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _RequestModifier = __webpack_require__(/*! ../streaming/utils/RequestModifier */ "./node_modules/dashjs/src/streaming/utils/RequestModifier.js");

var _RequestModifier2 = _interopRequireDefault(_RequestModifier);

var _Segment = __webpack_require__(/*! ./vo/Segment */ "./node_modules/dashjs/src/dash/vo/Segment.js");

var _Segment2 = _interopRequireDefault(_Segment);

var _DashJSError = __webpack_require__(/*! ../streaming/vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Events = __webpack_require__(/*! ../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _EventBus = __webpack_require__(/*! ../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _BoxParser = __webpack_require__(/*! ../streaming/utils/BoxParser */ "./node_modules/dashjs/src/streaming/utils/BoxParser.js");

var _BoxParser2 = _interopRequireDefault(_BoxParser);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _HTTPRequest = __webpack_require__(/*! ../streaming/vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _FragmentRequest = __webpack_require__(/*! ../streaming/vo/FragmentRequest */ "./node_modules/dashjs/src/streaming/vo/FragmentRequest.js");

var _FragmentRequest2 = _interopRequireDefault(_FragmentRequest);

var _HTTPLoader = __webpack_require__(/*! ../streaming/net/HTTPLoader */ "./node_modules/dashjs/src/streaming/net/HTTPLoader.js");

var _HTTPLoader2 = _interopRequireDefault(_HTTPLoader);

var _Errors = __webpack_require__(/*! ../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function SegmentBaseLoader() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        errHandler = void 0,
        boxParser = void 0,
        requestModifier = void 0,
        metricsModel = void 0,
        mediaPlayerModel = void 0,
        httpLoader = void 0,
        baseURLController = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function initialize() {
        boxParser = (0, _BoxParser2.default)(context).getInstance();
        requestModifier = (0, _RequestModifier2.default)(context).getInstance();
        httpLoader = (0, _HTTPLoader2.default)(context).create({
            errHandler: errHandler,
            metricsModel: metricsModel,
            mediaPlayerModel: mediaPlayerModel,
            requestModifier: requestModifier
        });
    }

    function setConfig(config) {
        if (config.baseURLController) {
            baseURLController = config.baseURLController;
        }

        if (config.metricsModel) {
            metricsModel = config.metricsModel;
        }

        if (config.mediaPlayerModel) {
            mediaPlayerModel = config.mediaPlayerModel;
        }

        if (config.errHandler) {
            errHandler = config.errHandler;
        }
    }

    function checkSetConfigCall() {
        if (!baseURLController || !baseURLController.hasOwnProperty('resolve')) {
            throw new Error('setConfig function has to be called previously');
        }
    }

    function loadInitialization(representation, loadingInfo) {
        checkSetConfigCall();
        var initRange = null;
        var baseUrl = baseURLController.resolve(representation.path);
        var info = loadingInfo || {
            init: true,
            url: baseUrl ? baseUrl.url : undefined,
            range: {
                start: 0,
                end: 1500
            },
            searching: false,
            bytesLoaded: 0,
            bytesToLoad: 1500
        };

        logger.debug('Start searching for initialization.');

        var request = getFragmentRequest(info);

        var onload = function onload(response) {
            info.bytesLoaded = info.range.end;
            initRange = boxParser.findInitRange(response);

            if (initRange) {
                representation.range = initRange;
                // note that we don't explicitly set rep.initialization as this
                // will be computed when all BaseURLs are resolved later
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, { representation: representation });
            } else {
                info.range.end = info.bytesLoaded + info.bytesToLoad;
                loadInitialization(representation, info);
            }
        };

        var onerror = function onerror() {
            eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, { representation: representation });
        };

        httpLoader.load({ request: request, success: onload, error: onerror });

        logger.debug('Perform init search: ' + info.url);
    }

    function loadSegments(representation, type, range, loadingInfo, callback) {
        checkSetConfigCall();
        if (range && (range.start === undefined || range.end === undefined)) {
            var parts = range ? range.toString().split('-') : null;
            range = parts ? { start: parseFloat(parts[0]), end: parseFloat(parts[1]) } : null;
        }

        callback = !callback ? onLoaded : callback;
        var isoFile = null;
        var sidx = null;
        var hasRange = !!range;
        var baseUrl = baseURLController.resolve(representation.path);
        var info = {
            init: false,
            url: baseUrl ? baseUrl.url : undefined,
            range: hasRange ? range : { start: 0, end: 1500 },
            searching: !hasRange,
            bytesLoaded: loadingInfo ? loadingInfo.bytesLoaded : 0,
            bytesToLoad: 1500
        };

        var request = getFragmentRequest(info);

        var onload = function onload(response) {
            var extraBytes = info.bytesToLoad;
            var loadedLength = response.byteLength;

            info.bytesLoaded = info.range.end - info.range.start;
            isoFile = boxParser.parse(response);
            sidx = isoFile.getBox('sidx');

            if (!sidx || !sidx.isComplete) {
                if (sidx) {
                    info.range.start = sidx.offset || info.range.start;
                    info.range.end = info.range.start + (sidx.size || extraBytes);
                } else if (loadedLength < info.bytesLoaded) {
                    // if we have reached a search limit or if we have reached the end of the file we have to stop trying to find sidx
                    callback(null, representation, type);
                    return;
                } else {
                    var lastBox = isoFile.getLastBox();

                    if (lastBox && lastBox.size) {
                        info.range.start = lastBox.offset + lastBox.size;
                        info.range.end = info.range.start + extraBytes;
                    } else {
                        info.range.end += extraBytes;
                    }
                }
                loadSegments(representation, type, info.range, info, callback);
            } else {
                var ref = sidx.references;
                var loadMultiSidx = void 0,
                    segments = void 0;

                if (ref !== null && ref !== undefined && ref.length > 0) {
                    loadMultiSidx = ref[0].reference_type === 1;
                }

                if (loadMultiSidx) {
                    logger.debug('Initiate multiple SIDX load.');
                    info.range.end = info.range.start + sidx.size;

                    var j = void 0,
                        len = void 0,
                        ss = void 0,
                        se = void 0,
                        r = void 0;
                    var segs = [];
                    var count = 0;
                    var offset = (sidx.offset || info.range.start) + sidx.size;
                    var tmpCallback = function tmpCallback(result) {
                        if (result) {
                            segs = segs.concat(result);
                            count++;

                            if (count >= len) {
                                callback(segs, representation, type);
                            }
                        } else {
                            callback(null, representation, type);
                        }
                    };

                    for (j = 0, len = ref.length; j < len; j++) {
                        ss = offset;
                        se = offset + ref[j].referenced_size - 1;
                        offset = offset + ref[j].referenced_size;
                        r = { start: ss, end: se };
                        loadSegments(representation, null, r, info, tmpCallback);
                    }
                } else {
                    logger.debug('Parsing segments from SIDX.');
                    segments = getSegmentsForSidx(sidx, info);
                    callback(segments, representation, type);
                }
            }
        };

        var onerror = function onerror() {
            callback(null, representation, type);
        };

        httpLoader.load({ request: request, success: onload, error: onerror });
        logger.debug('Perform SIDX load: ' + info.url);
    }

    function reset() {
        httpLoader.abort();
        httpLoader = null;
        errHandler = null;
        boxParser = null;
        requestModifier = null;
    }

    function getSegmentsForSidx(sidx, info) {
        var refs = sidx.references;
        var len = refs.length;
        var timescale = sidx.timescale;
        var time = sidx.earliest_presentation_time;
        var start = info.range.start + sidx.offset + sidx.first_offset + sidx.size;
        var segments = [];
        var segment = void 0,
            end = void 0,
            duration = void 0,
            size = void 0;

        for (var i = 0; i < len; i++) {
            duration = refs[i].subsegment_duration;
            size = refs[i].referenced_size;

            segment = new _Segment2.default();
            // note that we don't explicitly set segment.media as this will be
            // computed when all BaseURLs are resolved later
            segment.duration = duration;
            segment.startTime = time;
            segment.timescale = timescale;
            end = start + size - 1;
            segment.mediaRange = start + '-' + end;
            segments.push(segment);
            time += duration;
            start += size;
        }

        return segments;
    }

    function getFragmentRequest(info) {
        if (!info.url) {
            return;
        }

        var request = new _FragmentRequest2.default();
        request.type = info.init ? _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE : _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;
        request.url = info.url;
        request.range = info.range.start + '-' + info.range.end;

        return request;
    }

    function onLoaded(segments, representation, type) {
        if (segments) {
            eventBus.trigger(_Events2.default.SEGMENTS_LOADED, { segments: segments, representation: representation, mediaType: type });
        } else {
            eventBus.trigger(_Events2.default.SEGMENTS_LOADED, { segments: null, representation: representation, mediaType: type, error: new _DashJSError2.default(_Errors2.default.SEGMENT_BASE_LOADER_ERROR_CODE, _Errors2.default.SEGMENT_BASE_LOADER_ERROR_MESSAGE) });
        }
    }

    instance = {
        setConfig: setConfig,
        initialize: initialize,
        loadInitialization: loadInitialization,
        loadSegments: loadSegments,
        reset: reset
    };

    setup();

    return instance;
}

SegmentBaseLoader.__dashjs_factory_name = 'SegmentBaseLoader';
exports.default = _FactoryMaker2.default.getSingletonFactory(SegmentBaseLoader);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/WebmSegmentBaseLoader.js":
/*!***************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/WebmSegmentBaseLoader.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Events = __webpack_require__(/*! ../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _EventBus = __webpack_require__(/*! ../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _EBMLParser = __webpack_require__(/*! ../streaming/utils/EBMLParser */ "./node_modules/dashjs/src/streaming/utils/EBMLParser.js");

var _EBMLParser2 = _interopRequireDefault(_EBMLParser);

var _Constants = __webpack_require__(/*! ../streaming/constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _RequestModifier = __webpack_require__(/*! ../streaming/utils/RequestModifier */ "./node_modules/dashjs/src/streaming/utils/RequestModifier.js");

var _RequestModifier2 = _interopRequireDefault(_RequestModifier);

var _Segment = __webpack_require__(/*! ./vo/Segment */ "./node_modules/dashjs/src/dash/vo/Segment.js");

var _Segment2 = _interopRequireDefault(_Segment);

var _HTTPRequest = __webpack_require__(/*! ../streaming/vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _FragmentRequest = __webpack_require__(/*! ../streaming/vo/FragmentRequest */ "./node_modules/dashjs/src/streaming/vo/FragmentRequest.js");

var _FragmentRequest2 = _interopRequireDefault(_FragmentRequest);

var _HTTPLoader = __webpack_require__(/*! ../streaming/net/HTTPLoader */ "./node_modules/dashjs/src/streaming/net/HTTPLoader.js");

var _HTTPLoader2 = _interopRequireDefault(_HTTPLoader);

var _DashJSError = __webpack_require__(/*! ../streaming/vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Errors = __webpack_require__(/*! ../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function WebmSegmentBaseLoader() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        WebM = void 0,
        errHandler = void 0,
        requestModifier = void 0,
        metricsModel = void 0,
        mediaPlayerModel = void 0,
        httpLoader = void 0,
        baseURLController = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        WebM = {
            EBML: {
                tag: 0x1A45DFA3,
                required: true
            },
            Segment: {
                tag: 0x18538067,
                required: true,
                SeekHead: {
                    tag: 0x114D9B74,
                    required: true
                },
                Info: {
                    tag: 0x1549A966,
                    required: true,
                    TimecodeScale: {
                        tag: 0x2AD7B1,
                        required: true,
                        parse: 'getMatroskaUint'
                    },
                    Duration: {
                        tag: 0x4489,
                        required: true,
                        parse: 'getMatroskaFloat'
                    }
                },
                Tracks: {
                    tag: 0x1654AE6B,
                    required: true
                },
                Cues: {
                    tag: 0x1C53BB6B,
                    required: true,
                    CuePoint: {
                        tag: 0xBB,
                        required: true,
                        CueTime: {
                            tag: 0xB3,
                            required: true,
                            parse: 'getMatroskaUint'
                        },
                        CueTrackPositions: {
                            tag: 0xB7,
                            required: true,
                            CueTrack: {
                                tag: 0xF7,
                                required: true,
                                parse: 'getMatroskaUint'
                            },
                            CueClusterPosition: {
                                tag: 0xF1,
                                required: true,
                                parse: 'getMatroskaUint'
                            }
                        }
                    }
                }
            },
            Void: {
                tag: 0xEC,
                required: true
            }
        };
    }

    function initialize() {
        requestModifier = (0, _RequestModifier2.default)(context).getInstance();
        httpLoader = (0, _HTTPLoader2.default)(context).create({
            errHandler: errHandler,
            metricsModel: metricsModel,
            mediaPlayerModel: mediaPlayerModel,
            requestModifier: requestModifier
        });
    }

    function setConfig(config) {
        if (!config.baseURLController || !config.metricsModel || !config.mediaPlayerModel || !config.errHandler) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
        baseURLController = config.baseURLController;
        metricsModel = config.metricsModel;
        mediaPlayerModel = config.mediaPlayerModel;
        errHandler = config.errHandler;
    }

    function parseCues(ab) {
        var cues = [];
        var cue = void 0;
        var cueTrack = void 0;
        var ebmlParser = (0, _EBMLParser2.default)(context).create({
            data: ab
        });

        ebmlParser.consumeTagAndSize(WebM.Segment.Cues);

        while (ebmlParser.moreData() && ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint, true)) {
            cue = {};

            cue.CueTime = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTime);

            cue.CueTracks = [];
            while (ebmlParser.moreData() && ebmlParser.consumeTag(WebM.Segment.Cues.CuePoint.CueTrackPositions, true)) {
                var cueTrackPositionSize = ebmlParser.getMatroskaCodedNum();
                var startPos = ebmlParser.getPos();
                cueTrack = {};

                cueTrack.Track = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueTrack);
                if (cueTrack.Track === 0) {
                    throw new Error('Cue track cannot be 0');
                }

                cueTrack.ClusterPosition = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueClusterPosition);

                cue.CueTracks.push(cueTrack);

                // we're not interested any other elements - skip remaining bytes
                ebmlParser.setPos(startPos + cueTrackPositionSize);
            }

            if (cue.CueTracks.length === 0) {
                throw new Error('Mandatory cuetrack not found');
            }
            cues.push(cue);
        }

        if (cues.length === 0) {
            throw new Error('mandatory cuepoint not found');
        }
        return cues;
    }

    function parseSegments(data, segmentStart, segmentEnd, segmentDuration) {
        var duration = void 0;
        var parsed = void 0;
        var segments = void 0;
        var segment = void 0;
        var i = void 0;
        var len = void 0;
        var start = void 0;
        var end = void 0;

        parsed = parseCues(data);
        segments = [];

        // we are assuming one cue track per cue point
        // both duration and media range require the i + 1 segment
        // the final segment has to use global segment parameters
        for (i = 0, len = parsed.length; i < len; i += 1) {
            segment = new _Segment2.default();
            duration = 0;

            if (i < parsed.length - 1) {
                duration = parsed[i + 1].CueTime - parsed[i].CueTime;
            } else {
                duration = segmentDuration - parsed[i].CueTime;
            }

            // note that we don't explicitly set segment.media as this will be
            // computed when all BaseURLs are resolved later
            segment.duration = duration;
            segment.startTime = parsed[i].CueTime;
            segment.timescale = 1000; // hardcoded for ms
            start = parsed[i].CueTracks[0].ClusterPosition + segmentStart;

            if (i < parsed.length - 1) {
                end = parsed[i + 1].CueTracks[0].ClusterPosition + segmentStart - 1;
            } else {
                end = segmentEnd - 1;
            }

            segment.mediaRange = start + '-' + end;
            segments.push(segment);
        }

        logger.debug('Parsed cues: ' + segments.length + ' cues.');

        return segments;
    }

    function parseEbmlHeader(data, media, theRange, callback) {
        var ebmlParser = (0, _EBMLParser2.default)(context).create({
            data: data
        });
        var duration = void 0;
        var segments = void 0;
        var parts = theRange.split('-');
        var request = null;
        var info = {
            url: media,
            range: {
                start: parseFloat(parts[0]),
                end: parseFloat(parts[1])
            },
            request: request
        };
        var segmentEnd = void 0;
        var segmentStart = void 0;

        logger.debug('Parse EBML header: ' + info.url);

        // skip over the header itself
        ebmlParser.skipOverElement(WebM.EBML);
        ebmlParser.consumeTag(WebM.Segment);

        // segments start here
        segmentEnd = ebmlParser.getMatroskaCodedNum();
        segmentEnd += ebmlParser.getPos();
        segmentStart = ebmlParser.getPos();

        // skip over any top level elements to get to the segment info
        while (ebmlParser.moreData() && !ebmlParser.consumeTagAndSize(WebM.Segment.Info, true)) {
            if (!(ebmlParser.skipOverElement(WebM.Segment.SeekHead, true) || ebmlParser.skipOverElement(WebM.Segment.Tracks, true) || ebmlParser.skipOverElement(WebM.Segment.Cues, true) || ebmlParser.skipOverElement(WebM.Void, true))) {
                throw new Error('no valid top level element found');
            }
        }

        // we only need one thing in segment info, duration
        while (duration === undefined) {
            var infoTag = ebmlParser.getMatroskaCodedNum(true);
            var infoElementSize = ebmlParser.getMatroskaCodedNum();

            switch (infoTag) {
                case WebM.Segment.Info.Duration.tag:
                    duration = ebmlParser[WebM.Segment.Info.Duration.parse](infoElementSize);
                    break;
                default:
                    ebmlParser.setPos(ebmlParser.getPos() + infoElementSize);
                    break;
            }
        }

        // once we have what we need from segment info, we jump right to the
        // cues

        request = getFragmentRequest(info);

        var onload = function onload(response) {
            segments = parseSegments(response, segmentStart, segmentEnd, duration);
            callback(segments);
        };

        var onloadend = function onloadend() {
            logger.error('Download Error: Cues ' + info.url);
            callback(null);
        };

        httpLoader.load({
            request: request,
            success: onload,
            error: onloadend
        });

        logger.debug('Perform cues load: ' + info.url + ' bytes=' + info.range.start + '-' + info.range.end);
    }

    function checkSetConfigCall() {
        if (!baseURLController || !baseURLController.hasOwnProperty('resolve')) {
            throw new Error('setConfig function has to be called previously');
        }
    }

    function loadInitialization(representation, loadingInfo) {
        checkSetConfigCall();
        var request = null;
        var baseUrl = baseURLController.resolve(representation.path);
        var media = baseUrl ? baseUrl.url : undefined;
        var initRange = representation.range.split('-');
        var info = loadingInfo || {
            range: {
                start: parseFloat(initRange[0]),
                end: parseFloat(initRange[1])
            },
            request: request,
            url: media,
            init: true
        };

        logger.info('Start loading initialization.');

        request = getFragmentRequest(info);

        var onload = function onload() {
            // note that we don't explicitly set rep.initialization as this
            // will be computed when all BaseURLs are resolved later
            eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                representation: representation
            });
        };

        var onloadend = function onloadend() {
            eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                representation: representation
            });
        };

        httpLoader.load({
            request: request,
            success: onload,
            error: onloadend
        });

        logger.debug('Perform init load: ' + info.url);
    }

    function loadSegments(representation, type, theRange, callback) {
        checkSetConfigCall();
        var request = null;
        var baseUrl = baseURLController.resolve(representation.path);
        var media = baseUrl ? baseUrl.url : undefined;
        var bytesToLoad = 8192;
        var info = {
            bytesLoaded: 0,
            bytesToLoad: bytesToLoad,
            range: {
                start: 0,
                end: bytesToLoad
            },
            request: request,
            url: media,
            init: false
        };

        callback = !callback ? onLoaded : callback;
        request = getFragmentRequest(info);

        // first load the header, but preserve the manifest range so we can
        // load the cues after parsing the header
        // NOTE: we expect segment info to appear in the first 8192 bytes
        logger.debug('Parsing ebml header');

        var onload = function onload(response) {
            parseEbmlHeader(response, media, theRange, function (segments) {
                callback(segments, representation, type);
            });
        };

        var onloadend = function onloadend() {
            callback(null, representation, type);
        };

        httpLoader.load({
            request: request,
            success: onload,
            error: onloadend
        });
    }

    function onLoaded(segments, representation, type) {
        if (segments) {
            eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: segments,
                representation: representation,
                mediaType: type
            });
        } else {
            eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: null,
                representation: representation,
                mediaType: type,
                error: new _DashJSError2.default(_Errors2.default.SEGMENT_BASE_LOADER_ERROR_CODE, _Errors2.default.SEGMENT_BASE_LOADER_ERROR_MESSAGE)
            });
        }
    }

    function getFragmentRequest(info) {
        var request = new _FragmentRequest2.default();

        request.type = info.init ? _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE : _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;
        request.url = info.url;
        request.range = info.range.start + '-' + info.range.end;

        return request;
    }

    function reset() {
        errHandler = null;
        requestModifier = null;
    }

    instance = {
        setConfig: setConfig,
        initialize: initialize,
        loadInitialization: loadInitialization,
        loadSegments: loadSegments,
        reset: reset
    };

    setup();

    return instance;
}

WebmSegmentBaseLoader.__dashjs_factory_name = 'WebmSegmentBaseLoader';
exports.default = _FactoryMaker2.default.getSingletonFactory(WebmSegmentBaseLoader);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/constants/DashConstants.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/constants/DashConstants.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Dash constants declaration
 * @class
 * @ignore
 */
var DashConstants = function () {
    _createClass(DashConstants, [{
        key: 'init',
        value: function init() {
            this.BASE_URL = 'BaseURL';
            this.SEGMENT_BASE = 'SegmentBase';
            this.SEGMENT_TEMPLATE = 'SegmentTemplate';
            this.SEGMENT_LIST = 'SegmentList';
            this.SEGMENT_URL = 'SegmentURL';
            this.SEGMENT_TIMELINE = 'SegmentTimeline';
            this.SEGMENT_PROFILES = 'segmentProfiles';
            this.ADAPTATION_SET = 'AdaptationSet';
            this.REPRESENTATION = 'Representation';
            this.REPRESENTATION_INDEX = 'RepresentationIndex';
            this.SUB_REPRESENTATION = 'SubRepresentation';
            this.INITIALIZATION = 'Initialization';
            this.INITIALIZATION_MINUS = 'initialization';
            this.MPD = 'MPD';
            this.PERIOD = 'Period';
            this.ASSET_IDENTIFIER = 'AssetIdentifier';
            this.EVENT_STREAM = 'EventStream';
            this.ID = 'id';
            this.PROFILES = 'profiles';
            this.SERVICE_LOCATION = 'serviceLocation';
            this.RANGE = 'range';
            this.INDEX = 'index';
            this.MEDIA = 'media';
            this.BYTE_RANGE = 'byteRange';
            this.INDEX_RANGE = 'indexRange';
            this.MEDIA_RANGE = 'mediaRange';
            this.VALUE = 'value';
            this.CONTENT_TYPE = 'contentType';
            this.MIME_TYPE = 'mimeType';
            this.BITSTREAM_SWITCHING = 'BitstreamSwitching';
            this.BITSTREAM_SWITCHING_MINUS = 'bitstreamSwitching';
            this.CODECS = 'codecs';
            this.DEPENDENCY_ID = 'dependencyId';
            this.MEDIA_STREAM_STRUCTURE_ID = 'mediaStreamStructureId';
            this.METRICS = 'Metrics';
            this.METRICS_MINUS = 'metrics';
            this.REPORTING = 'Reporting';
            this.WIDTH = 'width';
            this.HEIGHT = 'height';
            this.SAR = 'sar';
            this.FRAMERATE = 'frameRate';
            this.AUDIO_SAMPLING_RATE = 'audioSamplingRate';
            this.MAXIMUM_SAP_PERIOD = 'maximumSAPPeriod';
            this.START_WITH_SAP = 'startWithSAP';
            this.MAX_PLAYOUT_RATE = 'maxPlayoutRate';
            this.CODING_DEPENDENCY = 'codingDependency';
            this.SCAN_TYPE = 'scanType';
            this.FRAME_PACKING = 'FramePacking';
            this.AUDIO_CHANNEL_CONFIGURATION = 'AudioChannelConfiguration';
            this.CONTENT_PROTECTION = 'ContentProtection';
            this.ESSENTIAL_PROPERTY = 'EssentialProperty';
            this.SUPPLEMENTAL_PROPERTY = 'SupplementalProperty';
            this.INBAND_EVENT_STREAM = 'InbandEventStream';
            this.ACCESSIBILITY = 'Accessibility';
            this.ROLE = 'Role';
            this.RATING = 'Rating';
            this.CONTENT_COMPONENT = 'ContentComponent';
            this.SUBSET = 'Subset';
            this.LANG = 'lang';
            this.VIEWPOINT = 'Viewpoint';
            this.ROLE_ASARRAY = 'Role_asArray';
            this.ACCESSIBILITY_ASARRAY = 'Accessibility_asArray';
            this.AUDIOCHANNELCONFIGURATION_ASARRAY = 'AudioChannelConfiguration_asArray';
            this.CONTENTPROTECTION_ASARRAY = 'ContentProtection_asArray';
            this.MAIN = 'main';
            this.DYNAMIC = 'dynamic';
            this.MEDIA_PRESENTATION_DURATION = 'mediaPresentationDuration';
            this.MINIMUM_UPDATE_PERIOD = 'minimumUpdatePeriod';
            this.CODEC_PRIVATE_DATA = 'codecPrivateData';
            this.BANDWITH = 'bandwidth';
            this.SOURCE_URL = 'sourceURL';
            this.TIMESCALE = 'timescale';
            this.DURATION = 'duration';
            this.START_NUMBER = 'startNumber';
            this.PRESENTATION_TIME_OFFSET = 'presentationTimeOffset';
            this.AVAILABILITY_START_TIME = 'availabilityStartTime';
            this.AVAILABILITY_END_TIME = 'availabilityEndTime';
            this.TIMESHIFT_BUFFER_DEPTH = 'timeShiftBufferDepth';
            this.MAX_SEGMENT_DURATION = 'maxSegmentDuration';
            this.PRESENTATION_TIME = 'presentationTime';
            this.MIN_BUFFER_TIME = 'minBufferTime';
            this.MAX_SUBSEGMENT_DURATION = 'maxSubsegmentDuration';
            this.START = 'start';
            this.AVAILABILITY_TIME_OFFSET = 'availabilityTimeOffset';
            this.AVAILABILITY_TIME_COMPLETE = 'availabilityTimeComplete';
            this.CENC_DEFAULT_KID = 'cenc:default_KID';
            this.DVB_PRIORITY = 'dvb:priority';
            this.DVB_WEIGHT = 'dvb:weight';
        }
    }]);

    function DashConstants() {
        _classCallCheck(this, DashConstants);

        this.init();
    }

    return DashConstants;
}();

var constants = new DashConstants();
exports.default = constants;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/controllers/RepresentationController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/controllers/RepresentationController.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../../streaming/constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _Errors = __webpack_require__(/*! ../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _DashConstants = __webpack_require__(/*! ../constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

var _DashJSError = __webpack_require__(/*! ../../streaming/vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Representation = __webpack_require__(/*! ../vo/Representation */ "./node_modules/dashjs/src/dash/vo/Representation.js");

var _Representation2 = _interopRequireDefault(_Representation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function RepresentationController() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        realAdaptation = void 0,
        realAdaptationIndex = void 0,
        updating = void 0,
        voAvailableRepresentations = void 0,
        currentVoRepresentation = void 0,
        abrController = void 0,
        indexHandler = void 0,
        playbackController = void 0,
        metricsModel = void 0,
        domStorage = void 0,
        timelineConverter = void 0,
        dashManifestModel = void 0,
        dashMetrics = void 0,
        streamProcessor = void 0,
        manifestModel = void 0;

    function setup() {
        resetInitialSettings();

        eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);
        eventBus.on(_Events2.default.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);
        eventBus.on(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);
        eventBus.on(_Events2.default.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);
        eventBus.on(_Events2.default.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);
    }

    function setConfig(config) {
        // allow the abrController created in setup to be overidden
        if (config.abrController) {
            abrController = config.abrController;
        }
        if (config.domStorage) {
            domStorage = config.domStorage;
        }
        if (config.metricsModel) {
            metricsModel = config.metricsModel;
        }
        if (config.dashMetrics) {
            dashMetrics = config.dashMetrics;
        }
        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
        if (config.playbackController) {
            playbackController = config.playbackController;
        }
        if (config.timelineConverter) {
            timelineConverter = config.timelineConverter;
        }
        if (config.manifestModel) {
            manifestModel = config.manifestModel;
        }
        if (config.streamProcessor) {
            streamProcessor = config.streamProcessor;
        }
    }

    function initialize() {
        indexHandler = streamProcessor.getIndexHandler();
    }

    function getStreamProcessor() {
        return streamProcessor;
    }

    function getData() {
        return realAdaptation;
    }

    function getDataIndex() {
        return realAdaptationIndex;
    }

    function isUpdating() {
        return updating;
    }

    function getCurrentRepresentation() {
        return currentVoRepresentation;
    }

    function resetInitialSettings() {
        realAdaptation = null;
        realAdaptationIndex = -1;
        updating = true;
        voAvailableRepresentations = [];
        abrController = null;
        playbackController = null;
        metricsModel = null;
        domStorage = null;
        timelineConverter = null;
        dashManifestModel = null;
        dashMetrics = null;
    }

    function reset() {

        eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);
        eventBus.off(_Events2.default.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);
        eventBus.off(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);
        eventBus.off(_Events2.default.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);
        eventBus.off(_Events2.default.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);

        resetInitialSettings();
    }

    function updateData(newRealAdaptation, voAdaptation, type) {
        var streamInfo = streamProcessor.getStreamInfo();
        var maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);
        var minIdx = abrController.getMinAllowedIndexFor(type);

        var quality = void 0,
            averageThroughput = void 0;
        var bitrate = null;

        updating = true;
        eventBus.trigger(_Events2.default.DATA_UPDATE_STARTED, { sender: this });

        voAvailableRepresentations = updateRepresentations(voAdaptation);

        if ((realAdaptation === null || realAdaptation.id != newRealAdaptation.id) && type !== _Constants2.default.FRAGMENTED_TEXT) {
            averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);
            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo);
            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate);
        } else {
            quality = abrController.getQualityFor(type, streamInfo);
        }

        if (minIdx !== undefined && quality < minIdx) {
            quality = minIdx;
        }
        if (quality > maxQuality) {
            quality = maxQuality;
        }

        currentVoRepresentation = getRepresentationForQuality(quality);
        realAdaptation = newRealAdaptation;

        if (type !== _Constants2.default.VIDEO && type !== _Constants2.default.AUDIO && type !== _Constants2.default.FRAGMENTED_TEXT) {
            updating = false;
            eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, { sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation });
            return;
        }

        for (var i = 0; i < voAvailableRepresentations.length; i++) {
            indexHandler.updateRepresentation(voAvailableRepresentations[i], true);
        }
    }

    function addRepresentationSwitch() {
        var now = new Date();
        var currentRepresentation = getCurrentRepresentation();
        var currentVideoTimeMs = playbackController.getTime() * 1000;

        metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);
    }

    function addDVRMetric() {
        var streamInfo = streamProcessor.getStreamInfo();
        var manifestInfo = streamInfo ? streamInfo.manifestInfo : null;
        var isDynamic = manifestInfo ? manifestInfo.isDynamic : null;
        var range = timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation, isDynamic);
        if (range && isDynamic) {
            var dvrWindowSize = range.end - range.start;
            range.end = range.end - playbackController.computeLiveDelay(currentVoRepresentation.fragmentDuration, dvrWindowSize);
        }
        metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), manifestInfo, range);
    }

    function getRepresentationForQuality(quality) {
        return quality === null || quality === undefined || quality >= voAvailableRepresentations.length ? null : voAvailableRepresentations[quality];
    }

    function getQualityForRepresentation(voRepresentation) {
        return voAvailableRepresentations.indexOf(voRepresentation);
    }

    function isAllRepresentationsUpdated() {
        for (var i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {
            var segmentInfoType = voAvailableRepresentations[i].segmentInfoType;
            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !_Representation2.default.hasInitialization(voAvailableRepresentations[i]) || (segmentInfoType === _DashConstants2.default.SEGMENT_BASE || segmentInfoType === _DashConstants2.default.BASE_URL) && !voAvailableRepresentations[i].segments) {
                return false;
            }
        }

        return true;
    }

    function updateRepresentations(voAdaptation) {
        var voReps = void 0;

        realAdaptationIndex = dashManifestModel.getIndexForAdaptation(realAdaptation, voAdaptation.period.mpd.manifest, voAdaptation.period.index);
        voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);

        return voReps;
    }

    function updateAvailabilityWindow(isDynamic) {
        var voRepresentation = void 0;

        for (var i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {
            voRepresentation = voAvailableRepresentations[i];
            voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic);
        }
    }

    function resetAvailabilityWindow() {
        voAvailableRepresentations.forEach(function (rep) {
            rep.segmentAvailabilityRange = null;
        });
    }

    function postponeUpdate(postponeTimePeriod) {
        var delay = postponeTimePeriod;
        var update = function update() {
            if (isUpdating()) return;

            updating = true;
            eventBus.trigger(_Events2.default.DATA_UPDATE_STARTED, { sender: instance });

            // clear the segmentAvailabilityRange for all reps.
            // this ensures all are updated before the live edge search starts
            resetAvailabilityWindow();

            for (var i = 0; i < voAvailableRepresentations.length; i++) {
                indexHandler.updateRepresentation(voAvailableRepresentations[i], true);
            }
        };

        updating = false;
        eventBus.trigger(_Events2.default.AST_IN_FUTURE, { delay: delay });
        setTimeout(update, delay);
    }

    function onRepresentationUpdated(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor || !isUpdating()) return;

        var r = e.representation;
        var streamMetrics = metricsModel.getMetricsFor(_Constants2.default.STREAM);
        var metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type);
        var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics);
        var alreadyAdded = false;
        var postponeTimePeriod = 0;
        var repInfo = void 0,
            err = void 0,
            repSwitch = void 0;

        if (r.adaptation.period.mpd.manifest.type === _DashConstants2.default.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod) {
            var segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;
            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start
            var liveDelay = playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);
            postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1000;
        }

        if (postponeTimePeriod > 0) {
            addDVRMetric();
            postponeUpdate(postponeTimePeriod);
            err = new _DashJSError2.default(_Errors2.default.SEGMENTS_UPDATE_FAILED_ERROR_CODE, _Errors2.default.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);
            eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, { sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation, error: err });

            return;
        }

        if (manifestUpdateInfo) {
            for (var i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {
                repInfo = manifestUpdateInfo.representationInfo[i];
                if (repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {
                    alreadyAdded = true;
                    break;
                }
            }

            if (!alreadyAdded) {
                metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index, streamProcessor.getType(), r.presentationTimeOffset, r.startNumber, r.segmentInfoType);
            }
        }

        if (isAllRepresentationsUpdated()) {
            updating = false;
            abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentVoRepresentation));
            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, { latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime() });

            repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics);

            if (!repSwitch) {
                addRepresentationSwitch();
            }

            eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, { sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation });
        }
    }

    function onWallclockTimeUpdated(e) {
        if (e.isDynamic) {
            updateAvailabilityWindow(e.isDynamic);
            addDVRMetric();
        }
    }

    function onBufferLevelUpdated(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor) return;
        var manifest = manifestModel.getValue();
        if (!manifest.doNotUpdateDVRWindowOnBufferUpdated) {
            addDVRMetric();
        }
    }

    function onQualityChanged(e) {
        if (e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;

        if (e.oldQuality !== e.newQuality) {
            currentVoRepresentation = getRepresentationForQuality(e.newQuality);
            var bitrate = abrController.getThroughputHistory().getAverageThroughput(e.mediaType);
            if (!isNaN(bitrate)) {
                domStorage.setSavedBitrateSettings(e.mediaType, bitrate);
            }
            addRepresentationSwitch();
        }
    }

    function onManifestValidityChanged(e) {
        if (!isNaN(e.newDuration)) {
            var representation = getCurrentRepresentation();
            if (representation && representation.adaptation.period) {
                var period = representation.adaptation.period;
                period.duration = e.newDuration;
            }
        }
    }

    instance = {
        initialize: initialize,
        setConfig: setConfig,
        getData: getData,
        getDataIndex: getDataIndex,
        isUpdating: isUpdating,
        updateData: updateData,
        getStreamProcessor: getStreamProcessor,
        getCurrentRepresentation: getCurrentRepresentation,
        getRepresentationForQuality: getRepresentationForQuality,
        reset: reset
    };

    setup();
    return instance;
}

RepresentationController.__dashjs_factory_name = 'RepresentationController';
exports.default = _FactoryMaker2.default.getClassFactory(RepresentationController);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/models/DashManifestModel.js":
/*!******************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/models/DashManifestModel.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../../streaming/constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _DashConstants = __webpack_require__(/*! ../constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

var _Representation = __webpack_require__(/*! ../vo/Representation */ "./node_modules/dashjs/src/dash/vo/Representation.js");

var _Representation2 = _interopRequireDefault(_Representation);

var _AdaptationSet = __webpack_require__(/*! ../vo/AdaptationSet */ "./node_modules/dashjs/src/dash/vo/AdaptationSet.js");

var _AdaptationSet2 = _interopRequireDefault(_AdaptationSet);

var _Period = __webpack_require__(/*! ../vo/Period */ "./node_modules/dashjs/src/dash/vo/Period.js");

var _Period2 = _interopRequireDefault(_Period);

var _Mpd = __webpack_require__(/*! ../vo/Mpd */ "./node_modules/dashjs/src/dash/vo/Mpd.js");

var _Mpd2 = _interopRequireDefault(_Mpd);

var _UTCTiming = __webpack_require__(/*! ../vo/UTCTiming */ "./node_modules/dashjs/src/dash/vo/UTCTiming.js");

var _UTCTiming2 = _interopRequireDefault(_UTCTiming);

var _Event = __webpack_require__(/*! ../vo/Event */ "./node_modules/dashjs/src/dash/vo/Event.js");

var _Event2 = _interopRequireDefault(_Event);

var _BaseURL = __webpack_require__(/*! ../vo/BaseURL */ "./node_modules/dashjs/src/dash/vo/BaseURL.js");

var _BaseURL2 = _interopRequireDefault(_BaseURL);

var _EventStream = __webpack_require__(/*! ../vo/EventStream */ "./node_modules/dashjs/src/dash/vo/EventStream.js");

var _EventStream2 = _interopRequireDefault(_EventStream);

var _ObjectUtils = __webpack_require__(/*! ../../streaming/utils/ObjectUtils */ "./node_modules/dashjs/src/streaming/utils/ObjectUtils.js");

var _ObjectUtils2 = _interopRequireDefault(_ObjectUtils);

var _URLUtils = __webpack_require__(/*! ../../streaming/utils/URLUtils */ "./node_modules/dashjs/src/streaming/utils/URLUtils.js");

var _URLUtils2 = _interopRequireDefault(_URLUtils);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _DashJSError = __webpack_require__(/*! ../../streaming/vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Errors = __webpack_require__(/*! ../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _ThumbnailTracks = __webpack_require__(/*! ../../streaming/thumbnail/ThumbnailTracks */ "./node_modules/dashjs/src/streaming/thumbnail/ThumbnailTracks.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DashManifestModel(config) {

    config = config || {};

    var instance = void 0,
        logger = void 0;

    var context = this.context;
    var urlUtils = (0, _URLUtils2.default)(context).getInstance();
    var timelineConverter = config.timelineConverter;
    var errHandler = config.errHandler;
    var BASE64 = config.BASE64;

    var PROFILE_DVB = 'urn:dvb:dash:profile:dvb-dash:2014';

    var isInteger = Number.isInteger || function (value) {
        return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
    };

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function getIsTypeOf(adaptation, type) {

        var i = void 0,
            len = void 0,
            representation = void 0,
            col = void 0,
            mimeTypeRegEx = void 0,
            codecs = void 0;
        var result = false;
        var found = false;

        if (!adaptation) {
            throw new Error('adaptation is not defined');
        }

        if (!type) {
            throw new Error('type is not defined');
        }

        if (adaptation.hasOwnProperty('ContentComponent_asArray')) {
            col = adaptation.ContentComponent_asArray;
        }

        mimeTypeRegEx = type !== _Constants2.default.TEXT ? new RegExp(type) : new RegExp('(vtt|ttml)');

        if (adaptation.Representation_asArray && adaptation.Representation_asArray.length && adaptation.Representation_asArray.length > 0) {
            var essentialProperties = getEssentialPropertiesForRepresentation(adaptation.Representation_asArray[0]);
            if (essentialProperties && essentialProperties.length > 0 && _ThumbnailTracks.THUMBNAILS_SCHEME_ID_URIS.indexOf(essentialProperties[0].schemeIdUri) >= 0) {
                return type === _Constants2.default.IMAGE;
            }
            if (adaptation.Representation_asArray[0].hasOwnProperty(_DashConstants2.default.CODECS)) {
                // Just check the start of the codecs string
                codecs = adaptation.Representation_asArray[0].codecs;
                if (codecs.search(_Constants2.default.STPP) === 0 || codecs.search(_Constants2.default.WVTT) === 0) {
                    return type === _Constants2.default.FRAGMENTED_TEXT;
                }
            }
        }

        if (col) {
            if (col.length > 1) {
                return type === _Constants2.default.MUXED;
            } else if (col[0] && col[0].contentType === type) {
                result = true;
                found = true;
            }
        }

        if (adaptation.hasOwnProperty(_DashConstants2.default.MIME_TYPE)) {
            result = mimeTypeRegEx.test(adaptation.mimeType);
            found = true;
        }

        // couldn't find on adaptationset, so check a representation
        if (!found) {
            i = 0;
            len = adaptation.Representation_asArray && adaptation.Representation_asArray.length ? adaptation.Representation_asArray.length : 0;
            while (!found && i < len) {
                representation = adaptation.Representation_asArray[i];

                if (representation.hasOwnProperty(_DashConstants2.default.MIME_TYPE)) {
                    result = mimeTypeRegEx.test(representation.mimeType);
                    found = true;
                }

                i++;
            }
        }

        return result;
    }

    function getIsAudio(adaptation) {
        return getIsTypeOf(adaptation, _Constants2.default.AUDIO);
    }

    function getIsVideo(adaptation) {
        return getIsTypeOf(adaptation, _Constants2.default.VIDEO);
    }

    function getIsFragmentedText(adaptation) {
        return getIsTypeOf(adaptation, _Constants2.default.FRAGMENTED_TEXT);
    }

    function getIsMuxed(adaptation) {
        return getIsTypeOf(adaptation, _Constants2.default.MUXED);
    }

    function getIsImage(adaptation) {
        return getIsTypeOf(adaptation, _Constants2.default.IMAGE);
    }

    function getIsTextTrack(type) {
        return type === 'text/vtt' || type === 'application/ttml+xml';
    }

    function getLanguageForAdaptation(adaptation) {
        var lang = '';

        if (adaptation && adaptation.hasOwnProperty(_DashConstants2.default.LANG)) {
            //Filter out any other characters not allowed according to RFC5646
            lang = adaptation.lang.replace(/[^A-Za-z0-9-]/g, '');
        }

        return lang;
    }

    function getViewpointForAdaptation(adaptation) {
        return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.VIEWPOINT) ? adaptation.Viewpoint : null;
    }

    function getRolesForAdaptation(adaptation) {
        return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.ROLE_ASARRAY) ? adaptation.Role_asArray : [];
    }

    function getAccessibilityForAdaptation(adaptation) {
        return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.ACCESSIBILITY_ASARRAY) ? adaptation.Accessibility_asArray : [];
    }

    function getAudioChannelConfigurationForAdaptation(adaptation) {
        return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.AUDIOCHANNELCONFIGURATION_ASARRAY) ? adaptation.AudioChannelConfiguration_asArray : [];
    }

    function getRepresentationSortFunction() {
        return function (a, b) {
            return a.bandwidth - b.bandwidth;
        };
    }

    function processAdaptation(realAdaptation) {
        if (realAdaptation && realAdaptation.Representation_asArray !== undefined && realAdaptation.Representation_asArray !== null) {
            realAdaptation.Representation_asArray.sort(getRepresentationSortFunction());
        }

        return realAdaptation;
    }

    function getRealAdaptations(manifest, periodIndex) {
        return manifest && manifest.Period_asArray && isInteger(periodIndex) ? manifest.Period_asArray[periodIndex] ? manifest.Period_asArray[periodIndex].AdaptationSet_asArray : [] : [];
    }

    function getAdaptationForId(id, manifest, periodIndex) {
        var realAdaptations = getRealAdaptations(manifest, periodIndex);
        var i = void 0,
            len = void 0;

        for (i = 0, len = realAdaptations.length; i < len; i++) {
            if (realAdaptations[i].hasOwnProperty(_DashConstants2.default.ID) && realAdaptations[i].id === id) {
                return realAdaptations[i];
            }
        }

        return null;
    }

    function getAdaptationForIndex(index, manifest, periodIndex) {
        var realAdaptations = getRealAdaptations(manifest, periodIndex);
        if (realAdaptations.length > 0 && isInteger(index)) {
            return realAdaptations[index];
        } else {
            return null;
        }
    }

    function getIndexForAdaptation(realAdaptation, manifest, periodIndex) {
        var realAdaptations = getRealAdaptations(manifest, periodIndex);
        var len = realAdaptations.length;

        if (realAdaptation) {
            for (var i = 0; i < len; i++) {
                var objectUtils = (0, _ObjectUtils2.default)(context).getInstance();
                if (objectUtils.areEqual(realAdaptations[i], realAdaptation)) {
                    return i;
                }
            }
        }

        return -1;
    }

    function getAdaptationsForType(manifest, periodIndex, type) {
        var realAdaptations = getRealAdaptations(manifest, periodIndex);
        var i = void 0,
            len = void 0;
        var adaptations = [];

        for (i = 0, len = realAdaptations.length; i < len; i++) {
            if (getIsTypeOf(realAdaptations[i], type)) {
                adaptations.push(processAdaptation(realAdaptations[i]));
            }
        }

        return adaptations;
    }

    function getCodec(adaptation, representationId, addResolutionInfo) {
        var codec = null;

        if (adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0) {
            var representation = isInteger(representationId) && representationId >= 0 && representationId < adaptation.Representation_asArray.length ? adaptation.Representation_asArray[representationId] : adaptation.Representation_asArray[0];
            if (representation) {
                codec = representation.mimeType + ';codecs="' + representation.codecs + '"';
                if (addResolutionInfo && representation.width !== undefined) {
                    codec += ';width="' + representation.width + '";height="' + representation.height + '"';
                }
            }
        }

        return codec;
    }

    function getMimeType(adaptation) {
        return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 ? adaptation.Representation_asArray[0].mimeType : null;
    }

    function getKID(adaptation) {
        if (!adaptation || !adaptation.hasOwnProperty(_DashConstants2.default.CENC_DEFAULT_KID)) {
            return null;
        }
        return adaptation[_DashConstants2.default.CENC_DEFAULT_KID];
    }

    function getLabelsForAdaptation(adaptation) {
        if (!adaptation.Label_asArray || !adaptation.Label_asArray.length) {
            return [];
        }

        var labelArray = [];

        for (var i = 0; i < adaptation.Label_asArray.length; i++) {
            labelArray.push({
                lang: adaptation.Label_asArray[i].lang,
                text: adaptation.Label_asArray[i].__text || adaptation.Label_asArray[i]
            });
        }

        return labelArray;
    }

    function getContentProtectionData(adaptation) {
        if (!adaptation || !adaptation.hasOwnProperty(_DashConstants2.default.CONTENTPROTECTION_ASARRAY) || adaptation.ContentProtection_asArray.length === 0) {
            return null;
        }
        return adaptation.ContentProtection_asArray;
    }

    function getIsDynamic(manifest) {
        var isDynamic = false;
        if (manifest && manifest.hasOwnProperty('type')) {
            isDynamic = manifest.type === _DashConstants2.default.DYNAMIC;
        }
        return isDynamic;
    }

    function hasProfile(manifest, profile) {
        var has = false;

        if (manifest && manifest.profiles && manifest.profiles.length > 0) {
            has = manifest.profiles.indexOf(profile) !== -1;
        }

        return has;
    }

    function getIsDVB(manifest) {
        return hasProfile(manifest, PROFILE_DVB);
    }

    function getDuration(manifest) {
        var mpdDuration = void 0;
        //@mediaPresentationDuration specifies the duration of the entire Media Presentation.
        //If the attribute is not present, the duration of the Media Presentation is unknown.
        if (manifest && manifest.hasOwnProperty(_DashConstants2.default.MEDIA_PRESENTATION_DURATION)) {
            mpdDuration = manifest.mediaPresentationDuration;
        } else {
            mpdDuration = Number.MAX_SAFE_INTEGER || Number.MAX_VALUE;
        }

        return mpdDuration;
    }

    function getBandwidth(representation) {
        return representation && representation.bandwidth ? representation.bandwidth : NaN;
    }

    function getManifestUpdatePeriod(manifest) {
        var latencyOfLastUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var delay = NaN;
        if (manifest && manifest.hasOwnProperty(_DashConstants2.default.MINIMUM_UPDATE_PERIOD)) {
            delay = manifest.minimumUpdatePeriod;
        }
        return isNaN(delay) ? delay : Math.max(delay - latencyOfLastUpdate, 1);
    }

    function getRepresentationCount(adaptation) {
        return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length ? adaptation.Representation_asArray.length : 0;
    }

    function getBitrateListForAdaptation(realAdaptation) {
        if (!realAdaptation || !realAdaptation.Representation_asArray || !realAdaptation.Representation_asArray.length) return null;

        var processedRealAdaptation = processAdaptation(realAdaptation);
        var realRepresentations = processedRealAdaptation.Representation_asArray;

        return realRepresentations.map(function (realRepresentation) {
            return {
                bandwidth: realRepresentation.bandwidth,
                width: realRepresentation.width || 0,
                height: realRepresentation.height || 0,
                scanType: realRepresentation.scanType || null
            };
        });
    }

    function getEssentialPropertiesForRepresentation(realRepresentation) {
        if (!realRepresentation || !realRepresentation.EssentialProperty_asArray || !realRepresentation.EssentialProperty_asArray.length) return null;

        return realRepresentation.EssentialProperty_asArray.map(function (prop) {
            return {
                schemeIdUri: prop.schemeIdUri,
                value: prop.value
            };
        });
    }

    function getRepresentationFor(index, adaptation) {
        return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 && isInteger(index) ? adaptation.Representation_asArray[index] : null;
    }

    function getRealAdaptationFor(voAdaptation) {
        if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {
            var periodArray = voAdaptation.period.mpd.manifest.Period_asArray[voAdaptation.period.index];
            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(voAdaptation.index)) {
                return processAdaptation(periodArray.AdaptationSet_asArray[voAdaptation.index]);
            }
        }
    }

    function isLastRepeatAttributeValid(segmentTimeline) {
        var s = segmentTimeline.S_asArray[segmentTimeline.S_asArray.length - 1];
        return !s.hasOwnProperty('r') || s.r >= 0;
    }

    function getUseCalculatedLiveEdgeTimeForAdaptation(voAdaptation) {
        var realRepresentation = getRealAdaptationFor(voAdaptation).Representation_asArray[0];
        var segmentInfo = void 0;
        if (realRepresentation.hasOwnProperty(_DashConstants2.default.SEGMENT_LIST)) {
            segmentInfo = realRepresentation.SegmentList;
            return segmentInfo.hasOwnProperty(_DashConstants2.default.SEGMENT_TIMELINE) ? isLastRepeatAttributeValid(segmentInfo.SegmentTimeline) : true;
        } else if (realRepresentation.hasOwnProperty(_DashConstants2.default.SEGMENT_TEMPLATE)) {
            segmentInfo = realRepresentation.SegmentTemplate;
            if (segmentInfo.hasOwnProperty(_DashConstants2.default.SEGMENT_TIMELINE)) {
                return isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);
            }
        }

        return false;
    }

    function getRepresentationsForAdaptation(voAdaptation) {
        var voRepresentations = [];
        var processedRealAdaptation = getRealAdaptationFor(voAdaptation);
        var segmentInfo = void 0,
            baseUrl = void 0;

        // TODO: TO BE REMOVED. We should get just the baseUrl elements that affects to the representations
        // that we are processing. Making it works properly will require much further changes and given
        // parsing base Urls parameters is needed for our ultra low latency examples, we will
        // keep this "tricky" code until the real (and good) solution comes
        if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {
            var baseUrls = getBaseURLsFromElement(voAdaptation.period.mpd.manifest);
            if (baseUrls) {
                baseUrl = baseUrls[0];
            }
        }

        if (processedRealAdaptation && processedRealAdaptation.Representation_asArray) {
            for (var i = 0, len = processedRealAdaptation.Representation_asArray.length; i < len; ++i) {
                var realRepresentation = processedRealAdaptation.Representation_asArray[i];
                var voRepresentation = new _Representation2.default();
                voRepresentation.index = i;
                voRepresentation.adaptation = voAdaptation;

                if (realRepresentation.hasOwnProperty(_DashConstants2.default.ID)) {
                    voRepresentation.id = realRepresentation.id;
                }
                if (realRepresentation.hasOwnProperty(_DashConstants2.default.CODECS)) {
                    voRepresentation.codecs = realRepresentation.codecs;
                }
                if (realRepresentation.hasOwnProperty(_DashConstants2.default.CODEC_PRIVATE_DATA)) {
                    voRepresentation.codecPrivateData = realRepresentation.codecPrivateData;
                }
                if (realRepresentation.hasOwnProperty(_DashConstants2.default.BANDWITH)) {
                    voRepresentation.bandwidth = realRepresentation.bandwidth;
                }
                if (realRepresentation.hasOwnProperty(_DashConstants2.default.WIDTH)) {
                    voRepresentation.width = realRepresentation.width;
                }
                if (realRepresentation.hasOwnProperty(_DashConstants2.default.HEIGHT)) {
                    voRepresentation.height = realRepresentation.height;
                }
                if (realRepresentation.hasOwnProperty(_DashConstants2.default.SCAN_TYPE)) {
                    voRepresentation.scanType = realRepresentation.scanType;
                }
                if (realRepresentation.hasOwnProperty(_DashConstants2.default.MAX_PLAYOUT_RATE)) {
                    voRepresentation.maxPlayoutRate = realRepresentation.maxPlayoutRate;
                }

                if (realRepresentation.hasOwnProperty(_DashConstants2.default.SEGMENT_BASE)) {
                    segmentInfo = realRepresentation.SegmentBase;
                    voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_BASE;
                } else if (realRepresentation.hasOwnProperty(_DashConstants2.default.SEGMENT_LIST)) {
                    segmentInfo = realRepresentation.SegmentList;

                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.SEGMENT_TIMELINE)) {
                        voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_TIMELINE;
                        voRepresentation.useCalculatedLiveEdgeTime = isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);
                    } else {
                        voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_LIST;
                        voRepresentation.useCalculatedLiveEdgeTime = true;
                    }
                } else if (realRepresentation.hasOwnProperty(_DashConstants2.default.SEGMENT_TEMPLATE)) {
                    segmentInfo = realRepresentation.SegmentTemplate;

                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.SEGMENT_TIMELINE)) {
                        voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_TIMELINE;
                        voRepresentation.useCalculatedLiveEdgeTime = isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);
                    } else {
                        voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_TEMPLATE;
                    }

                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.INITIALIZATION_MINUS)) {
                        voRepresentation.initialization = segmentInfo.initialization.split('$Bandwidth$').join(realRepresentation.bandwidth).split('$RepresentationID$').join(realRepresentation.id);
                    }
                } else {
                    voRepresentation.segmentInfoType = _DashConstants2.default.BASE_URL;
                }

                voRepresentation.essentialProperties = getEssentialPropertiesForRepresentation(realRepresentation);

                if (segmentInfo) {
                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.INITIALIZATION)) {
                        var initialization = segmentInfo.Initialization;

                        if (initialization.hasOwnProperty(_DashConstants2.default.SOURCE_URL)) {
                            voRepresentation.initialization = initialization.sourceURL;
                        } else if (initialization.hasOwnProperty(_DashConstants2.default.RANGE)) {
                            voRepresentation.range = initialization.range;
                            // initialization source url will be determined from
                            // BaseURL when resolved at load time.
                        }
                    } else if (realRepresentation.hasOwnProperty(_DashConstants2.default.MIME_TYPE) && getIsTextTrack(realRepresentation.mimeType)) {
                        voRepresentation.range = 0;
                    }

                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.TIMESCALE)) {
                        voRepresentation.timescale = segmentInfo.timescale;
                    }
                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.DURATION)) {
                        // TODO according to the spec @maxSegmentDuration specifies the maximum duration of any Segment in any Representation in the Media Presentation
                        // It is also said that for a SegmentTimeline any @d value shall not exceed the value of MPD@maxSegmentDuration, but nothing is said about
                        // SegmentTemplate @duration attribute. We need to find out if @maxSegmentDuration should be used instead of calculated duration if the the duration
                        // exceeds @maxSegmentDuration
                        //representation.segmentDuration = Math.min(segmentInfo.duration / representation.timescale, adaptation.period.mpd.maxSegmentDuration);
                        voRepresentation.segmentDuration = segmentInfo.duration / voRepresentation.timescale;
                    }
                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.MEDIA)) {
                        voRepresentation.media = segmentInfo.media;
                    }
                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.START_NUMBER)) {
                        voRepresentation.startNumber = segmentInfo.startNumber;
                    }
                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.INDEX_RANGE)) {
                        voRepresentation.indexRange = segmentInfo.indexRange;
                    }
                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.PRESENTATION_TIME_OFFSET)) {
                        voRepresentation.presentationTimeOffset = segmentInfo.presentationTimeOffset / voRepresentation.timescale;
                    }
                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.AVAILABILITY_TIME_OFFSET)) {
                        voRepresentation.availabilityTimeOffset = segmentInfo.availabilityTimeOffset;
                    } else if (baseUrl && baseUrl.availabilityTimeOffset !== undefined) {
                        voRepresentation.availabilityTimeOffset = baseUrl.availabilityTimeOffset;
                    }
                    if (segmentInfo.hasOwnProperty(_DashConstants2.default.AVAILABILITY_TIME_COMPLETE)) {
                        voRepresentation.availabilityTimeComplete = segmentInfo.availabilityTimeComplete !== 'false';
                    } else if (baseUrl && baseUrl.availabilityTimeComplete !== undefined) {
                        voRepresentation.availabilityTimeComplete = baseUrl.availabilityTimeComplete;
                    }
                }

                voRepresentation.MSETimeOffset = timelineConverter.calcMSETimeOffset(voRepresentation);
                voRepresentation.path = [voAdaptation.period.index, voAdaptation.index, i];
                voRepresentations.push(voRepresentation);
            }
        }

        return voRepresentations;
    }

    function getAdaptationsForPeriod(voPeriod) {
        var realPeriod = voPeriod && isInteger(voPeriod.index) ? voPeriod.mpd.manifest.Period_asArray[voPeriod.index] : null;
        var voAdaptations = [];
        var voAdaptationSet = void 0,
            realAdaptationSet = void 0,
            i = void 0;

        if (realPeriod && realPeriod.AdaptationSet_asArray) {
            for (i = 0; i < realPeriod.AdaptationSet_asArray.length; i++) {
                realAdaptationSet = realPeriod.AdaptationSet_asArray[i];
                voAdaptationSet = new _AdaptationSet2.default();
                if (realAdaptationSet.hasOwnProperty(_DashConstants2.default.ID)) {
                    voAdaptationSet.id = realAdaptationSet.id;
                }
                voAdaptationSet.index = i;
                voAdaptationSet.period = voPeriod;

                if (getIsMuxed(realAdaptationSet)) {
                    voAdaptationSet.type = _Constants2.default.MUXED;
                } else if (getIsAudio(realAdaptationSet)) {
                    voAdaptationSet.type = _Constants2.default.AUDIO;
                } else if (getIsVideo(realAdaptationSet)) {
                    voAdaptationSet.type = _Constants2.default.VIDEO;
                } else if (getIsFragmentedText(realAdaptationSet)) {
                    voAdaptationSet.type = _Constants2.default.FRAGMENTED_TEXT;
                } else if (getIsImage(realAdaptationSet)) {
                    voAdaptationSet.type = _Constants2.default.IMAGE;
                } else {
                    voAdaptationSet.type = _Constants2.default.TEXT;
                }
                voAdaptations.push(voAdaptationSet);
            }
        }

        return voAdaptations;
    }

    function getRegularPeriods(mpd) {
        var isDynamic = mpd ? getIsDynamic(mpd.manifest) : false;
        var voPeriods = [];
        var realPreviousPeriod = null;
        var realPeriod = null;
        var voPreviousPeriod = null;
        var voPeriod = null;
        var len = void 0,
            i = void 0;

        for (i = 0, len = mpd && mpd.manifest && mpd.manifest.Period_asArray ? mpd.manifest.Period_asArray.length : 0; i < len; i++) {
            realPeriod = mpd.manifest.Period_asArray[i];

            // If the attribute @start is present in the Period, then the
            // Period is a regular Period and the PeriodStart is equal
            // to the value of this attribute.
            if (realPeriod.hasOwnProperty(_DashConstants2.default.START)) {
                voPeriod = new _Period2.default();
                voPeriod.start = realPeriod.start;
            }
            // If the @start attribute is absent, but the previous Period
            // element contains a @duration attribute then then this new
            // Period is also a regular Period. The start time of the new
            // Period PeriodStart is the sum of the start time of the previous
            // Period PeriodStart and the value of the attribute @duration
            // of the previous Period.
            else if (realPreviousPeriod !== null && realPreviousPeriod.hasOwnProperty(_DashConstants2.default.DURATION) && voPreviousPeriod !== null) {
                    voPeriod = new _Period2.default();
                    voPeriod.start = parseFloat((voPreviousPeriod.start + voPreviousPeriod.duration).toFixed(5));
                }
                // If (i) @start attribute is absent, and (ii) the Period element
                // is the first in the MPD, and (iii) the MPD@type is 'static',
                // then the PeriodStart time shall be set to zero.
                else if (i === 0 && !isDynamic) {
                        voPeriod = new _Period2.default();
                        voPeriod.start = 0;
                    }

            // The Period extends until the PeriodStart of the next Period.
            // The difference between the PeriodStart time of a Period and
            // the PeriodStart time of the following Period.
            if (voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)) {
                if (voPeriod !== null) {
                    voPreviousPeriod.duration = parseFloat((voPeriod.start - voPreviousPeriod.start).toFixed(5));
                } else {
                    logger.warn('First period duration could not be calculated because lack of start and duration period properties. This will cause timing issues during playback');
                }
            }

            if (voPeriod !== null) {
                voPeriod.id = getPeriodId(realPeriod, i);
                voPeriod.index = i;
                voPeriod.mpd = mpd;

                if (realPeriod.hasOwnProperty(_DashConstants2.default.DURATION)) {
                    voPeriod.duration = realPeriod.duration;
                }

                voPeriods.push(voPeriod);
                realPreviousPeriod = realPeriod;
                voPreviousPeriod = voPeriod;
            }

            realPeriod = null;
            voPeriod = null;
        }

        if (voPeriods.length === 0) {
            return voPeriods;
        }

        // The last Period extends until the end of the Media Presentation.
        // The difference between the PeriodStart time of the last Period
        // and the mpd duration
        if (voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)) {
            voPreviousPeriod.duration = parseFloat((getEndTimeForLastPeriod(voPreviousPeriod) - voPreviousPeriod.start).toFixed(5));
        }

        return voPeriods;
    }

    function getPeriodId(realPeriod, i) {
        if (!realPeriod) {
            throw new Error('Period cannot be null or undefined');
        }

        var id = _Period2.default.DEFAULT_ID + '_' + i;

        if (realPeriod.hasOwnProperty(_DashConstants2.default.ID) && realPeriod.id.length > 0 && realPeriod.id !== '__proto__') {
            id = realPeriod.id;
        }

        return id;
    }

    function getMpd(manifest) {
        var mpd = new _Mpd2.default();

        if (manifest) {
            mpd.manifest = manifest;

            if (manifest.hasOwnProperty(_DashConstants2.default.AVAILABILITY_START_TIME)) {
                mpd.availabilityStartTime = new Date(manifest.availabilityStartTime.getTime());
            } else {
                mpd.availabilityStartTime = new Date(manifest.loadedTime.getTime());
            }

            if (manifest.hasOwnProperty(_DashConstants2.default.AVAILABILITY_END_TIME)) {
                mpd.availabilityEndTime = new Date(manifest.availabilityEndTime.getTime());
            }

            if (manifest.hasOwnProperty(_DashConstants2.default.MINIMUM_UPDATE_PERIOD)) {
                mpd.minimumUpdatePeriod = manifest.minimumUpdatePeriod;
            }

            if (manifest.hasOwnProperty(_DashConstants2.default.MEDIA_PRESENTATION_DURATION)) {
                mpd.mediaPresentationDuration = manifest.mediaPresentationDuration;
            }

            if (manifest.hasOwnProperty(_Constants2.default.SUGGESTED_PRESENTATION_DELAY)) {
                mpd.suggestedPresentationDelay = manifest.suggestedPresentationDelay;
            }

            if (manifest.hasOwnProperty(_DashConstants2.default.TIMESHIFT_BUFFER_DEPTH)) {
                mpd.timeShiftBufferDepth = manifest.timeShiftBufferDepth;
            }

            if (manifest.hasOwnProperty(_DashConstants2.default.MAX_SEGMENT_DURATION)) {
                mpd.maxSegmentDuration = manifest.maxSegmentDuration;
            }
        }

        return mpd;
    }

    function getEndTimeForLastPeriod(voPeriod) {
        var isDynamic = getIsDynamic(voPeriod.mpd.manifest);

        var periodEnd = void 0;
        if (voPeriod.mpd.manifest.mediaPresentationDuration) {
            periodEnd = voPeriod.mpd.manifest.mediaPresentationDuration;
        } else if (voPeriod.duration) {
            periodEnd = voPeriod.duration;
        } else if (isDynamic) {
            periodEnd = Number.POSITIVE_INFINITY;
        } else {
            errHandler.error(new _DashJSError2.default(_Errors2.default.MANIFEST_ERROR_ID_PARSE_CODE, 'Must have @mediaPresentationDuration on MPD or an explicit @duration on the last period.', voPeriod));
        }

        return periodEnd;
    }

    function getEventsForPeriod(period) {
        var manifest = period && period.mpd && period.mpd.manifest ? period.mpd.manifest : null;
        var periodArray = manifest ? manifest.Period_asArray : null;
        var eventStreams = periodArray && period && isInteger(period.index) ? periodArray[period.index].EventStream_asArray : null;
        var events = [];
        var i = void 0,
            j = void 0;

        if (eventStreams) {
            for (i = 0; i < eventStreams.length; i++) {
                var eventStream = new _EventStream2.default();
                eventStream.period = period;
                eventStream.timescale = 1;

                if (eventStreams[i].hasOwnProperty(_Constants2.default.SCHEME_ID_URI)) {
                    eventStream.schemeIdUri = eventStreams[i].schemeIdUri;
                } else {
                    throw new Error('Invalid EventStream. SchemeIdUri has to be set');
                }
                if (eventStreams[i].hasOwnProperty(_DashConstants2.default.TIMESCALE)) {
                    eventStream.timescale = eventStreams[i].timescale;
                }
                if (eventStreams[i].hasOwnProperty(_DashConstants2.default.VALUE)) {
                    eventStream.value = eventStreams[i].value;
                }
                for (j = 0; eventStreams[i].Event_asArray && j < eventStreams[i].Event_asArray.length; j++) {
                    var event = new _Event2.default();
                    event.presentationTime = 0;
                    event.eventStream = eventStream;

                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(_DashConstants2.default.PRESENTATION_TIME)) {
                        event.presentationTime = eventStreams[i].Event_asArray[j].presentationTime;
                    }
                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(_DashConstants2.default.DURATION)) {
                        event.duration = eventStreams[i].Event_asArray[j].duration;
                    }
                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(_DashConstants2.default.ID)) {
                        event.id = eventStreams[i].Event_asArray[j].id;
                    }

                    if (eventStreams[i].Event_asArray[j].Signal && eventStreams[i].Event_asArray[j].Signal.Binary) {
                        event.messageData = BASE64.decodeArray(eventStreams[i].Event_asArray[j].Signal.Binary);
                    } else {
                        // From Cor.1: 'NOTE: this attribute is an alternative
                        // to specifying a complete XML element(s) in the Event.
                        // It is useful when an event leans itself to a compact
                        // string representation'.
                        event.messageData = eventStreams[i].Event_asArray[j].messageData || eventStreams[i].Event_asArray[j].__text;
                    }

                    events.push(event);
                }
            }
        }

        return events;
    }

    function getEventStreams(inbandStreams, representation) {
        var eventStreams = [];
        var i = void 0;

        if (!inbandStreams) return eventStreams;

        for (i = 0; i < inbandStreams.length; i++) {
            var eventStream = new _EventStream2.default();
            eventStream.timescale = 1;
            eventStream.representation = representation;

            if (inbandStreams[i].hasOwnProperty(_Constants2.default.SCHEME_ID_URI)) {
                eventStream.schemeIdUri = inbandStreams[i].schemeIdUri;
            } else {
                throw new Error('Invalid EventStream. SchemeIdUri has to be set');
            }
            if (inbandStreams[i].hasOwnProperty(_DashConstants2.default.TIMESCALE)) {
                eventStream.timescale = inbandStreams[i].timescale;
            }
            if (inbandStreams[i].hasOwnProperty(_DashConstants2.default.VALUE)) {
                eventStream.value = inbandStreams[i].value;
            }
            eventStreams.push(eventStream);
        }

        return eventStreams;
    }

    function getEventStreamForAdaptationSet(manifest, adaptation) {
        var inbandStreams = void 0,
            periodArray = void 0,
            adaptationArray = void 0;

        if (manifest && manifest.Period_asArray && adaptation && adaptation.period && isInteger(adaptation.period.index)) {
            periodArray = manifest.Period_asArray[adaptation.period.index];
            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(adaptation.index)) {
                adaptationArray = periodArray.AdaptationSet_asArray[adaptation.index];
                if (adaptationArray) {
                    inbandStreams = adaptationArray.InbandEventStream_asArray;
                }
            }
        }

        return getEventStreams(inbandStreams, null);
    }

    function getEventStreamForRepresentation(manifest, representation) {
        var inbandStreams = void 0,
            periodArray = void 0,
            adaptationArray = void 0,
            representationArray = void 0;

        if (manifest && manifest.Period_asArray && representation && representation.adaptation && representation.adaptation.period && isInteger(representation.adaptation.period.index)) {
            periodArray = manifest.Period_asArray[representation.adaptation.period.index];
            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(representation.adaptation.index)) {
                adaptationArray = periodArray.AdaptationSet_asArray[representation.adaptation.index];
                if (adaptationArray && adaptationArray.Representation_asArray && isInteger(representation.index)) {
                    representationArray = adaptationArray.Representation_asArray[representation.index];
                    if (representationArray) {
                        inbandStreams = representationArray.InbandEventStream_asArray;
                    }
                }
            }
        }

        return getEventStreams(inbandStreams, representation);
    }

    function getUTCTimingSources(manifest) {
        var isDynamic = getIsDynamic(manifest);
        var hasAST = manifest ? manifest.hasOwnProperty(_DashConstants2.default.AVAILABILITY_START_TIME) : false;
        var utcTimingsArray = manifest ? manifest.UTCTiming_asArray : null;
        var utcTimingEntries = [];

        // do not bother synchronizing the clock unless MPD is live,
        // or it is static and has availabilityStartTime attribute
        if (isDynamic || hasAST) {
            if (utcTimingsArray) {
                // the order is important here - 23009-1 states that the order
                // in the manifest "indicates relative preference, first having
                // the highest, and the last the lowest priority".
                utcTimingsArray.forEach(function (utcTiming) {
                    var entry = new _UTCTiming2.default();

                    if (utcTiming.hasOwnProperty(_Constants2.default.SCHEME_ID_URI)) {
                        entry.schemeIdUri = utcTiming.schemeIdUri;
                    } else {
                        // entries of type DescriptorType with no schemeIdUri
                        // are meaningless. let's just ignore this entry and
                        // move on.
                        return;
                    }

                    // this is (incorrectly) interpreted as a number - schema
                    // defines it as a string
                    if (utcTiming.hasOwnProperty(_DashConstants2.default.VALUE)) {
                        entry.value = utcTiming.value.toString();
                    } else {
                        // without a value, there's not a lot we can do with
                        // this entry. let's just ignore this one and move on
                        return;
                    }

                    // we're not interested in the optional id or any other
                    // attributes which might be attached to the entry

                    utcTimingEntries.push(entry);
                });
            }
        }

        return utcTimingEntries;
    }

    function getBaseURLsFromElement(node) {
        var baseUrls = [];
        // if node.BaseURL_asArray and node.baseUri are undefined entries
        // will be [undefined] which entries.some will just skip
        var entries = node.BaseURL_asArray || [node.baseUri];
        var earlyReturn = false;

        entries.some(function (entry) {
            if (entry) {
                var baseUrl = new _BaseURL2.default();
                var text = entry.__text || entry;

                if (urlUtils.isRelative(text)) {
                    // it doesn't really make sense to have relative and
                    // absolute URLs at the same level, or multiple
                    // relative URLs at the same level, so assume we are
                    // done from this level of the MPD
                    earlyReturn = true;

                    // deal with the specific case where the MPD@BaseURL
                    // is specified and is relative. when no MPD@BaseURL
                    // entries exist, that case is handled by the
                    // [node.baseUri] in the entries definition.
                    if (node.baseUri) {
                        text = urlUtils.resolve(text, node.baseUri);
                    }
                }

                baseUrl.url = text;

                // serviceLocation is optional, but we need it in order
                // to blacklist correctly. if it's not available, use
                // anything unique since there's no relationship to any
                // other BaseURL and, in theory, the url should be
                // unique so use this instead.
                if (entry.hasOwnProperty(_DashConstants2.default.SERVICE_LOCATION) && entry.serviceLocation.length) {
                    baseUrl.serviceLocation = entry.serviceLocation;
                } else {
                    baseUrl.serviceLocation = text;
                }

                if (entry.hasOwnProperty(_DashConstants2.default.DVB_PRIORITY)) {
                    baseUrl.dvb_priority = entry[_DashConstants2.default.DVB_PRIORITY];
                }

                if (entry.hasOwnProperty(_DashConstants2.default.DVB_WEIGHT)) {
                    baseUrl.dvb_weight = entry[_DashConstants2.default.DVB_WEIGHT];
                }

                if (entry.hasOwnProperty(_DashConstants2.default.AVAILABILITY_TIME_OFFSET)) {
                    baseUrl.availabilityTimeOffset = entry[_DashConstants2.default.AVAILABILITY_TIME_OFFSET];
                }

                if (entry.hasOwnProperty(_DashConstants2.default.AVAILABILITY_TIME_COMPLETE)) {
                    baseUrl.availabilityTimeComplete = entry[_DashConstants2.default.AVAILABILITY_TIME_COMPLETE] !== 'false';
                }
                /* NOTE: byteRange currently unused
                 */

                baseUrls.push(baseUrl);

                return earlyReturn;
            }
        });

        return baseUrls;
    }

    function getLocation(manifest) {
        if (manifest && manifest.hasOwnProperty(_Constants2.default.LOCATION)) {
            // for now, do not support multiple Locations -
            // just set Location to the first Location.
            manifest.Location = manifest.Location_asArray[0];

            return manifest.Location;
        }

        // may well be undefined
        return undefined;
    }

    instance = {
        getIsTypeOf: getIsTypeOf,
        getIsTextTrack: getIsTextTrack,
        getLanguageForAdaptation: getLanguageForAdaptation,
        getViewpointForAdaptation: getViewpointForAdaptation,
        getRolesForAdaptation: getRolesForAdaptation,
        getAccessibilityForAdaptation: getAccessibilityForAdaptation,
        getAudioChannelConfigurationForAdaptation: getAudioChannelConfigurationForAdaptation,
        getAdaptationForIndex: getAdaptationForIndex,
        getIndexForAdaptation: getIndexForAdaptation,
        getAdaptationForId: getAdaptationForId,
        getAdaptationsForType: getAdaptationsForType,
        getCodec: getCodec,
        getMimeType: getMimeType,
        getKID: getKID,
        getLabelsForAdaptation: getLabelsForAdaptation,
        getContentProtectionData: getContentProtectionData,
        getIsDynamic: getIsDynamic,
        getIsDVB: getIsDVB,
        getDuration: getDuration,
        getBandwidth: getBandwidth,
        getManifestUpdatePeriod: getManifestUpdatePeriod,
        getRepresentationCount: getRepresentationCount,
        getBitrateListForAdaptation: getBitrateListForAdaptation,
        getRepresentationFor: getRepresentationFor,
        getRepresentationsForAdaptation: getRepresentationsForAdaptation,
        getAdaptationsForPeriod: getAdaptationsForPeriod,
        getRegularPeriods: getRegularPeriods,
        getMpd: getMpd,
        getEventsForPeriod: getEventsForPeriod,
        getEventStreamForAdaptationSet: getEventStreamForAdaptationSet,
        getEventStreamForRepresentation: getEventStreamForRepresentation,
        getUTCTimingSources: getUTCTimingSources,
        getBaseURLsFromElement: getBaseURLsFromElement,
        getRepresentationSortFunction: getRepresentationSortFunction,
        getLocation: getLocation,
        getUseCalculatedLiveEdgeTimeForAdaptation: getUseCalculatedLiveEdgeTimeForAdaptation
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


DashManifestModel.__dashjs_factory_name = 'DashManifestModel';
exports.default = _FactoryMaker2.default.getSingletonFactory(DashManifestModel);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/DashParser.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/DashParser.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _objectiron = __webpack_require__(/*! ./objectiron */ "./node_modules/dashjs/src/dash/parser/objectiron.js");

var _objectiron2 = _interopRequireDefault(_objectiron);

var _xml2json = __webpack_require__(/*! ../../../externals/xml2json */ "./node_modules/dashjs/externals/xml2json.js");

var _xml2json2 = _interopRequireDefault(_xml2json);

var _StringMatcher = __webpack_require__(/*! ./matchers/StringMatcher */ "./node_modules/dashjs/src/dash/parser/matchers/StringMatcher.js");

var _StringMatcher2 = _interopRequireDefault(_StringMatcher);

var _DurationMatcher = __webpack_require__(/*! ./matchers/DurationMatcher */ "./node_modules/dashjs/src/dash/parser/matchers/DurationMatcher.js");

var _DurationMatcher2 = _interopRequireDefault(_DurationMatcher);

var _DateTimeMatcher = __webpack_require__(/*! ./matchers/DateTimeMatcher */ "./node_modules/dashjs/src/dash/parser/matchers/DateTimeMatcher.js");

var _DateTimeMatcher2 = _interopRequireDefault(_DateTimeMatcher);

var _NumericMatcher = __webpack_require__(/*! ./matchers/NumericMatcher */ "./node_modules/dashjs/src/dash/parser/matchers/NumericMatcher.js");

var _NumericMatcher2 = _interopRequireDefault(_NumericMatcher);

var _RepresentationBaseValuesMap = __webpack_require__(/*! ./maps/RepresentationBaseValuesMap */ "./node_modules/dashjs/src/dash/parser/maps/RepresentationBaseValuesMap.js");

var _RepresentationBaseValuesMap2 = _interopRequireDefault(_RepresentationBaseValuesMap);

var _SegmentValuesMap = __webpack_require__(/*! ./maps/SegmentValuesMap */ "./node_modules/dashjs/src/dash/parser/maps/SegmentValuesMap.js");

var _SegmentValuesMap2 = _interopRequireDefault(_SegmentValuesMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function DashParser() {

    var context = this.context;

    var instance = void 0,
        logger = void 0,
        matchers = void 0,
        converter = void 0,
        objectIron = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        matchers = [new _DurationMatcher2.default(), new _DateTimeMatcher2.default(), new _NumericMatcher2.default(), new _StringMatcher2.default() // last in list to take precedence over NumericMatcher
        ];

        converter = new _xml2json2.default({
            escapeMode: false,
            attributePrefix: '',
            arrayAccessForm: 'property',
            emptyNodeForm: 'object',
            stripWhitespaces: false,
            enableToStringFunc: false,
            ignoreRoot: true,
            matchers: matchers
        });

        objectIron = (0, _objectiron2.default)(context).create({
            adaptationset: new _RepresentationBaseValuesMap2.default(),
            period: new _SegmentValuesMap2.default()
        });
    }

    function getMatchers() {
        return matchers;
    }

    function getIron() {
        return objectIron;
    }

    function parse(data) {
        var manifest = void 0;
        var startTime = window.performance.now();

        manifest = converter.xml_str2json(data);

        if (!manifest) {
            throw new Error('parsing the manifest failed');
        }

        var jsonTime = window.performance.now();
        objectIron.run(manifest);

        var ironedTime = window.performance.now();
        logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');

        return manifest;
    }

    instance = {
        parse: parse,
        getMatchers: getMatchers,
        getIron: getIron
    };

    setup();

    return instance;
}

DashParser.__dashjs_factory_name = 'DashParser';
exports.default = _FactoryMaker2.default.getClassFactory(DashParser);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/maps/CommonProperty.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/maps/CommonProperty.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc a property belonging to a MapNode
 */

var CommonProperty = function () {
    function CommonProperty(name) {
        _classCallCheck(this, CommonProperty);

        var getDefaultMergeForName = function getDefaultMergeForName(n) {
            return n && n.length && n.charAt(0) === n.charAt(0).toUpperCase();
        };

        this._name = name;
        this._merge = getDefaultMergeForName(name);
    }

    _createClass(CommonProperty, [{
        key: "name",
        get: function get() {
            return this._name;
        }
    }, {
        key: "merge",
        get: function get() {
            return this._merge;
        }
    }]);

    return CommonProperty;
}();

exports.default = CommonProperty;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/maps/MapNode.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/maps/MapNode.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
he copyright in this software is being made available under the BSD License,
included below. This software may be subject to other third party and contributor
rights, including patent rights, and no such rights are granted under this license.

opyright (c) 2013, Dash Industry Forum.
ll rights reserved.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
contributors may be used to endorse or promote products derived from this software
without specific prior written permission.


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED









/**
 * @classdesc a node at some level in a ValueMap
 */


var _CommonProperty = __webpack_require__(/*! ./CommonProperty */ "./node_modules/dashjs/src/dash/parser/maps/CommonProperty.js");

var _CommonProperty2 = _interopRequireDefault(_CommonProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MapNode = function () {
    function MapNode(name, properties, children) {
        var _this = this;

        _classCallCheck(this, MapNode);

        this._name = name || '';
        this._properties = [];
        this._children = children || [];

        if (Array.isArray(properties)) {
            properties.forEach(function (p) {
                _this._properties.push(new _CommonProperty2.default(p));
            });
        }
    }

    _createClass(MapNode, [{
        key: 'name',
        get: function get() {
            return this._name;
        }
    }, {
        key: 'children',
        get: function get() {
            return this._children;
        }
    }, {
        key: 'properties',
        get: function get() {
            return this._properties;
        }
    }]);

    return MapNode;
}();

exports.default = MapNode;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/maps/RepresentationBaseValuesMap.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/maps/RepresentationBaseValuesMap.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MapNode2 = __webpack_require__(/*! ./MapNode */ "./node_modules/dashjs/src/dash/parser/maps/MapNode.js");

var _MapNode3 = _interopRequireDefault(_MapNode2);

var _DashConstants = __webpack_require__(/*! ../../constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY






                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @classdesc a RepresentationBaseValuesMap type for input to objectiron
 */


var RepresentationBaseValuesMap = function (_MapNode) {
    _inherits(RepresentationBaseValuesMap, _MapNode);

    function RepresentationBaseValuesMap() {
        _classCallCheck(this, RepresentationBaseValuesMap);

        var commonProperties = [_DashConstants2.default.PROFILES, _DashConstants2.default.WIDTH, _DashConstants2.default.HEIGHT, _DashConstants2.default.SAR, _DashConstants2.default.FRAMERATE, _DashConstants2.default.AUDIO_SAMPLING_RATE, _DashConstants2.default.MIME_TYPE, _DashConstants2.default.SEGMENT_PROFILES, _DashConstants2.default.CODECS, _DashConstants2.default.MAXIMUM_SAP_PERIOD, _DashConstants2.default.START_WITH_SAP, _DashConstants2.default.MAX_PLAYOUT_RATE, _DashConstants2.default.CODING_DEPENDENCY, _DashConstants2.default.SCAN_TYPE, _DashConstants2.default.FRAME_PACKING, _DashConstants2.default.AUDIO_CHANNEL_CONFIGURATION, _DashConstants2.default.CONTENT_PROTECTION, _DashConstants2.default.ESSENTIAL_PROPERTY, _DashConstants2.default.SUPPLEMENTAL_PROPERTY, _DashConstants2.default.INBAND_EVENT_STREAM];

        return _possibleConstructorReturn(this, (RepresentationBaseValuesMap.__proto__ || Object.getPrototypeOf(RepresentationBaseValuesMap)).call(this, _DashConstants2.default.ADAPTATION_SET, commonProperties, [new _MapNode3.default(_DashConstants2.default.REPRESENTATION, commonProperties, [new _MapNode3.default(_DashConstants2.default.SUB_REPRESENTATION, commonProperties)])]));
    }

    return RepresentationBaseValuesMap;
}(_MapNode3.default);

exports.default = RepresentationBaseValuesMap;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/maps/SegmentValuesMap.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/maps/SegmentValuesMap.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MapNode2 = __webpack_require__(/*! ./MapNode */ "./node_modules/dashjs/src/dash/parser/maps/MapNode.js");

var _MapNode3 = _interopRequireDefault(_MapNode2);

var _DashConstants = __webpack_require__(/*! ../../constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @classdesc a SegmentValuesMap type for input to objectiron
 */


var SegmentValuesMap = function (_MapNode) {
    _inherits(SegmentValuesMap, _MapNode);

    function SegmentValuesMap() {
        _classCallCheck(this, SegmentValuesMap);

        var commonProperties = [_DashConstants2.default.SEGMENT_BASE, _DashConstants2.default.SEGMENT_TEMPLATE, _DashConstants2.default.SEGMENT_LIST];

        return _possibleConstructorReturn(this, (SegmentValuesMap.__proto__ || Object.getPrototypeOf(SegmentValuesMap)).call(this, _DashConstants2.default.PERIOD, commonProperties, [new _MapNode3.default(_DashConstants2.default.ADAPTATION_SET, commonProperties, [new _MapNode3.default(_DashConstants2.default.REPRESENTATION, commonProperties)])]));
    }

    return SegmentValuesMap;
}(_MapNode3.default);

exports.default = SegmentValuesMap;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/matchers/BaseMatcher.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/matchers/BaseMatcher.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc a base type for matching and converting types in manifest to
 * something more useful
 */

var BaseMatcher = function () {
    function BaseMatcher(test, converter) {
        _classCallCheck(this, BaseMatcher);

        this._test = test;
        this._converter = converter;
    }

    _createClass(BaseMatcher, [{
        key: "test",
        get: function get() {
            return this._test;
        }
    }, {
        key: "converter",
        get: function get() {
            return this._converter;
        }
    }]);

    return BaseMatcher;
}();

exports.default = BaseMatcher;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/matchers/DateTimeMatcher.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/matchers/DateTimeMatcher.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _BaseMatcher2 = __webpack_require__(/*! ./BaseMatcher */ "./node_modules/dashjs/src/dash/parser/matchers/BaseMatcher.js");

var _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.







                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @classdesc matches and converts xs:datetime to Date
 */


var SECONDS_IN_MIN = 60;
var MINUTES_IN_HOUR = 60;
var MILLISECONDS_IN_SECONDS = 1000;

var datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;

var DateTimeMatcher = function (_BaseMatcher) {
    _inherits(DateTimeMatcher, _BaseMatcher);

    function DateTimeMatcher() {
        _classCallCheck(this, DateTimeMatcher);

        return _possibleConstructorReturn(this, (DateTimeMatcher.__proto__ || Object.getPrototypeOf(DateTimeMatcher)).call(this, function (attr) {
            return datetimeRegex.test(attr.value);
        }, function (str) {
            var match = datetimeRegex.exec(str);
            var utcDate = void 0;

            // If the string does not contain a timezone offset different browsers can interpret it either
            // as UTC or as a local time so we have to parse the string manually to normalize the given date value for
            // all browsers
            utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, // months start from zero
            parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && parseInt(match[6], 10) || 0, match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0);

            // If the date has timezone offset take it into account as well
            if (match[9] && match[10]) {
                var timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);
                utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;
            }

            return new Date(utcDate);
        }));
    }

    return DateTimeMatcher;
}(_BaseMatcher3.default);

exports.default = DateTimeMatcher;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/matchers/DurationMatcher.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/matchers/DurationMatcher.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _BaseMatcher2 = __webpack_require__(/*! ./BaseMatcher */ "./node_modules/dashjs/src/dash/parser/matchers/BaseMatcher.js");

var _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);

var _Constants = __webpack_require__(/*! ../../../streaming/constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _DashConstants = __webpack_require__(/*! ../../constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *






                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @classdesc matches and converts xs:duration to seconds
 */


var durationRegex = /^([-])?P(([\d.]*)Y)?(([\d.]*)M)?(([\d.]*)D)?T?(([\d.]*)H)?(([\d.]*)M)?(([\d.]*)S)?/;

var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;
var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;
var SECONDS_IN_DAY = 24 * 60 * 60;
var SECONDS_IN_HOUR = 60 * 60;
var SECONDS_IN_MIN = 60;

var DurationMatcher = function (_BaseMatcher) {
    _inherits(DurationMatcher, _BaseMatcher);

    function DurationMatcher() {
        _classCallCheck(this, DurationMatcher);

        return _possibleConstructorReturn(this, (DurationMatcher.__proto__ || Object.getPrototypeOf(DurationMatcher)).call(this, function (attr) {
            var attributeList = [_DashConstants2.default.MIN_BUFFER_TIME, _DashConstants2.default.MEDIA_PRESENTATION_DURATION, _DashConstants2.default.MINIMUM_UPDATE_PERIOD, _DashConstants2.default.TIMESHIFT_BUFFER_DEPTH, _DashConstants2.default.MAX_SEGMENT_DURATION, _DashConstants2.default.MAX_SUBSEGMENT_DURATION, _Constants2.default.SUGGESTED_PRESENTATION_DELAY, _DashConstants2.default.START, _Constants2.default.START_TIME, _DashConstants2.default.DURATION];
            var len = attributeList.length;

            for (var i = 0; i < len; i++) {
                if (attr.nodeName === attributeList[i]) {
                    return durationRegex.test(attr.value);
                }
            }

            return false;
        }, function (str) {
            //str = "P10Y10M10DT10H10M10.1S";
            var match = durationRegex.exec(str);
            var result = parseFloat(match[2] || 0) * SECONDS_IN_YEAR + parseFloat(match[4] || 0) * SECONDS_IN_MONTH + parseFloat(match[6] || 0) * SECONDS_IN_DAY + parseFloat(match[8] || 0) * SECONDS_IN_HOUR + parseFloat(match[10] || 0) * SECONDS_IN_MIN + parseFloat(match[12] || 0);

            if (match[1] !== undefined) {
                result = -result;
            }

            return result;
        }));
    }

    return DurationMatcher;
}(_BaseMatcher3.default);

exports.default = DurationMatcher;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/matchers/NumericMatcher.js":
/*!************************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/matchers/NumericMatcher.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _BaseMatcher2 = __webpack_require__(/*! ./BaseMatcher */ "./node_modules/dashjs/src/dash/parser/matchers/BaseMatcher.js");

var _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @classdesc Matches and converts xs:numeric to float
 */


var numericRegex = /^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$/;

var NumericMatcher = function (_BaseMatcher) {
    _inherits(NumericMatcher, _BaseMatcher);

    function NumericMatcher() {
        _classCallCheck(this, NumericMatcher);

        return _possibleConstructorReturn(this, (NumericMatcher.__proto__ || Object.getPrototypeOf(NumericMatcher)).call(this, function (attr) {
            return numericRegex.test(attr.value);
        }, function (str) {
            return parseFloat(str);
        }));
    }

    return NumericMatcher;
}(_BaseMatcher3.default);

exports.default = NumericMatcher;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/matchers/StringMatcher.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/matchers/StringMatcher.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _BaseMatcher2 = __webpack_require__(/*! ./BaseMatcher */ "./node_modules/dashjs/src/dash/parser/matchers/BaseMatcher.js");

var _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);

var _DashConstants = __webpack_require__(/*! ../../constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @classdesc Matches and converts xs:string to string, but only for specific attributes on specific nodes
 */


var StringMatcher = function (_BaseMatcher) {
    _inherits(StringMatcher, _BaseMatcher);

    function StringMatcher() {
        _classCallCheck(this, StringMatcher);

        return _possibleConstructorReturn(this, (StringMatcher.__proto__ || Object.getPrototypeOf(StringMatcher)).call(this, function (attr, nodeName) {
            var _stringAttrsInElement;

            var stringAttrsInElements = (_stringAttrsInElement = {}, _defineProperty(_stringAttrsInElement, _DashConstants2.default.MPD, [_DashConstants2.default.ID, _DashConstants2.default.PROFILES]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.PERIOD, [_DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.BASE_URL, [_DashConstants2.default.SERVICE_LOCATION, _DashConstants2.default.BYTE_RANGE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.SEGMENT_BASE, [_DashConstants2.default.INDEX_RANGE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.INITIALIZATION, [_DashConstants2.default.RANGE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.REPRESENTATION_INDEX, [_DashConstants2.default.RANGE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.SEGMENT_LIST, [_DashConstants2.default.INDEX_RANGE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.BITSTREAM_SWITCHING, [_DashConstants2.default.RANGE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.SEGMENT_URL, [_DashConstants2.default.MEDIA_RANGE, _DashConstants2.default.INDEX_RANGE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.SEGMENT_TEMPLATE, [_DashConstants2.default.INDEX_RANGE, _DashConstants2.default.MEDIA, _DashConstants2.default.INDEX, _DashConstants2.default.INITIALIZATION_MINUS, _DashConstants2.default.BITSTREAM_SWITCHING_MINUS]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.ASSET_IDENTIFIER, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.EVENT_STREAM, [_DashConstants2.default.VALUE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.ADAPTATION_SET, [_DashConstants2.default.PROFILES, _DashConstants2.default.MIME_TYPE, _DashConstants2.default.SEGMENT_PROFILES, _DashConstants2.default.CODECS, _DashConstants2.default.CONTENT_TYPE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.FRAME_PACKING, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.AUDIO_CHANNEL_CONFIGURATION, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.CONTENT_PROTECTION, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.ESSENTIAL_PROPERTY, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.SUPPLEMENTAL_PROPERTY, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.INBAND_EVENT_STREAM, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.ACCESSIBILITY, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.ROLE, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.RATING, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.VIEWPOINT, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.CONTENT_COMPONENT, [_DashConstants2.default.CONTENT_TYPE]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.REPRESENTATION, [_DashConstants2.default.ID, _DashConstants2.default.DEPENDENCY_ID, _DashConstants2.default.MEDIA_STREAM_STRUCTURE_ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.SUBSET, [_DashConstants2.default.ID]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.METRICS, [_DashConstants2.default.METRICS_MINUS]), _defineProperty(_stringAttrsInElement, _DashConstants2.default.REPORTING, [_DashConstants2.default.VALUE, _DashConstants2.default.ID]), _stringAttrsInElement);
            if (stringAttrsInElements.hasOwnProperty(nodeName)) {
                var attrNames = stringAttrsInElements[nodeName];
                if (attrNames !== undefined) {
                    return attrNames.indexOf(attr.name) >= 0;
                } else {
                    return false;
                }
            }
            return false;
        }, function (str) {
            return String(str);
        }));
    }

    return StringMatcher;
}(_BaseMatcher3.default);

exports.default = StringMatcher;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/parser/objectiron.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/dash/parser/objectiron.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                               * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                               * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                               * All rights reserved.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                               * are permitted provided that the following conditions are met:
                                                                                                                                                                                                                                                                               *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                               *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                                                                               *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                               *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                               *  other materials provided with the distribution.
                                                                                                                                                                                                                                                                               *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                               *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                               *  without specific prior written permission.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                                                                                                                                               *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                                                                                                                                               *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                                                                                                                                               *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                                                                               *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                                                                                                                                               *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                                                                                                                                               *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                                                                                                                                               *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                                                                               *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                                                                                                                                               *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                                                                               */


var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ObjectIron(mappers) {

    function mergeValues(parentItem, childItem) {
        for (var name in parentItem) {
            if (!childItem.hasOwnProperty(name)) {
                childItem[name] = parentItem[name];
            }
        }
    }

    function mapProperties(properties, parent, child) {
        for (var i = 0, len = properties.length; i < len; ++i) {
            var property = properties[i];

            if (parent[property.name]) {
                if (child[property.name]) {
                    // check to see if we should merge
                    if (property.merge) {
                        var parentValue = parent[property.name];
                        var childValue = child[property.name];

                        // complex objects; merge properties
                        if ((typeof parentValue === 'undefined' ? 'undefined' : _typeof(parentValue)) === 'object' && (typeof childValue === 'undefined' ? 'undefined' : _typeof(childValue)) === 'object') {
                            mergeValues(parentValue, childValue);
                        }
                        // simple objects; merge them together
                        else {
                                child[property.name] = parentValue + childValue;
                            }
                    }
                } else {
                    // just add the property
                    child[property.name] = parent[property.name];
                }
            }
        }
    }

    function mapItem(item, node) {
        for (var i = 0, len = item.children.length; i < len; ++i) {
            var childItem = item.children[i];

            var array = node[childItem.name + '_asArray'];
            if (array) {
                for (var v = 0, len2 = array.length; v < len2; ++v) {
                    var childNode = array[v];
                    mapProperties(item.properties, node, childNode);
                    mapItem(childItem, childNode);
                }
            }
        }
    }

    function run(source) {

        if (source === null || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
            return source;
        }

        if ('period' in mappers) {
            var periodMapper = mappers.period;
            var periods = source.Period_asArray;
            for (var i = 0, len = periods.length; i < len; ++i) {
                var period = periods[i];
                mapItem(periodMapper, period);

                if ('adaptationset' in mappers) {
                    var adaptationSets = period.AdaptationSet_asArray;
                    if (adaptationSets) {
                        var adaptationSetMapper = mappers.adaptationset;
                        for (var _i = 0, _len = adaptationSets.length; _i < _len; ++_i) {
                            mapItem(adaptationSetMapper, adaptationSets[_i]);
                        }
                    }
                }
            }
        }

        return source;
    }

    return {
        run: run
    };
}

ObjectIron.__dashjs_factory_name = 'ObjectIron';
var factory = _FactoryMaker2.default.getClassFactory(ObjectIron);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/utils/ListSegmentsGetter.js":
/*!******************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/utils/ListSegmentsGetter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _SegmentsUtils = __webpack_require__(/*! ./SegmentsUtils */ "./node_modules/dashjs/src/dash/utils/SegmentsUtils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function ListSegmentsGetter(config, isDynamic) {

    config = config || {};
    var timelineConverter = config.timelineConverter;

    var instance = void 0;

    function getSegmentsFromList(representation, requestedTime, index, availabilityUpperLimit) {
        var list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;
        var len = list.SegmentURL_asArray.length;

        var segments = [];

        var periodSegIdx = void 0,
            seg = void 0,
            s = void 0,
            range = void 0,
            startIdx = void 0,
            endIdx = void 0,
            start = void 0;

        start = representation.startNumber;

        range = (0, _SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit);
        startIdx = Math.max(range.start, 0);
        endIdx = Math.min(range.end, list.SegmentURL_asArray.length - 1);

        for (periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) {
            s = list.SegmentURL_asArray[periodSegIdx];

            seg = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, periodSegIdx);
            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;
            seg.media = s.media ? s.media : '';
            seg.mediaRange = s.mediaRange;
            seg.index = s.index;
            seg.indexRange = s.indexRange;

            segments.push(seg);
            seg = null;
        }

        representation.availableSegmentsNumber = len;

        return segments;
    }

    instance = {
        getSegments: getSegmentsFromList
    };

    return instance;
}

ListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';
var factory = _FactoryMaker2.default.getClassFactory(ListSegmentsGetter);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/utils/Round10.js":
/*!*******************************************************!*\
  !*** ./node_modules/dashjs/src/dash/utils/Round10.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Static methods for rounding decimals
 *
 * Modified version of the CC0-licenced example at:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
 *
 * @export
 * @class Round10
 */
var Round10 = function () {
    function Round10() {
        _classCallCheck(this, Round10);
    }

    _createClass(Round10, null, [{
        key: 'round10',

        /**
        * Decimal round.
        *
        * @param {Number}  value The number.
        * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
        * @returns {Number} The adjusted value.
        */
        value: function round10(value, exp) {
            return _decimalAdjust('round', value, exp);
        }
    }]);

    return Round10;
}();

/**
 * Decimal adjustment of a number.
 *
 * @param {String}  type  The type of adjustment.
 * @param {Number}  value The number.
 * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
 * @returns {Number} The adjusted value.
 */


exports.default = Round10;
function _decimalAdjust(type, value, exp) {
    // If the exp is undefined or zero...
    if (typeof exp === 'undefined' || +exp === 0) {
        return Math[type](value);
    }

    value = +value;
    exp = +exp;

    // If the value is not a number or the exp is not an integer...
    if (value === null || isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
        return NaN;
    }

    // Shift
    value = value.toString().split('e');
    value = Math[type](+(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp)));

    // Shift back
    value = value.toString().split('e');
    return +(value[0] + 'e' + (value[1] ? +value[1] + exp : exp));
}

/***/ }),

/***/ "./node_modules/dashjs/src/dash/utils/SegmentsGetter.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/utils/SegmentsGetter.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _DashConstants = __webpack_require__(/*! ../constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _TimelineSegmentsGetter = __webpack_require__(/*! ./TimelineSegmentsGetter */ "./node_modules/dashjs/src/dash/utils/TimelineSegmentsGetter.js");

var _TimelineSegmentsGetter2 = _interopRequireDefault(_TimelineSegmentsGetter);

var _TemplateSegmentsGetter = __webpack_require__(/*! ./TemplateSegmentsGetter */ "./node_modules/dashjs/src/dash/utils/TemplateSegmentsGetter.js");

var _TemplateSegmentsGetter2 = _interopRequireDefault(_TemplateSegmentsGetter);

var _ListSegmentsGetter = __webpack_require__(/*! ./ListSegmentsGetter */ "./node_modules/dashjs/src/dash/utils/ListSegmentsGetter.js");

var _ListSegmentsGetter2 = _interopRequireDefault(_ListSegmentsGetter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SegmentsGetter(config, isDynamic) {

    var context = this.context;

    var instance = void 0,
        timelineSegmentsGetter = void 0,
        templateSegmentsGetter = void 0,
        listSegmentsGetter = void 0;

    function setup() {
        timelineSegmentsGetter = (0, _TimelineSegmentsGetter2.default)(context).create(config, isDynamic);
        templateSegmentsGetter = (0, _TemplateSegmentsGetter2.default)(context).create(config, isDynamic);
        listSegmentsGetter = (0, _ListSegmentsGetter2.default)(context).create(config, isDynamic);
    }

    // availabilityUpperLimit parameter is not used directly by any dash.js function, but it is needed as a helper
    // for other developments that extend dash.js, and provide their own transport layers (ex: P2P transport)
    function getSegments(representation, requestedTime, index, onSegmentListUpdatedCallback, availabilityUpperLimit) {
        var segments = void 0;
        var type = representation.segmentInfoType;

        // Already figure out the segments.
        if (type === _DashConstants2.default.SEGMENT_BASE || type === _DashConstants2.default.BASE_URL || !isSegmentListUpdateRequired(representation, index)) {
            segments = representation.segments;
        } else {
            if (type === _DashConstants2.default.SEGMENT_TIMELINE) {
                segments = timelineSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);
            } else if (type === _DashConstants2.default.SEGMENT_TEMPLATE) {
                segments = templateSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);
            } else if (type === _DashConstants2.default.SEGMENT_LIST) {
                segments = listSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);
            }

            if (onSegmentListUpdatedCallback) {
                onSegmentListUpdatedCallback(representation, segments);
            }
        }
    }

    function isSegmentListUpdateRequired(representation, index) {
        if (isDynamic) {
            return true;
        }
        var segments = representation.segments;
        var updateRequired = false;
        var upperIdx = void 0,
            lowerIdx = void 0;

        if (!segments || segments.length === 0) {
            updateRequired = true;
        } else {
            lowerIdx = segments[0].availabilityIdx;
            upperIdx = segments[segments.length - 1].availabilityIdx;
            updateRequired = index < lowerIdx || index > upperIdx;
        }

        return updateRequired;
    }

    instance = {
        getSegments: getSegments
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


SegmentsGetter.__dashjs_factory_name = 'SegmentsGetter';
var factory = _FactoryMaker2.default.getClassFactory(SegmentsGetter);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/utils/SegmentsUtils.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/utils/SegmentsUtils.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.unescapeDollarsInTemplate = unescapeDollarsInTemplate;
exports.replaceIDForTemplate = replaceIDForTemplate;
exports.replaceTokenForTemplate = replaceTokenForTemplate;
exports.getIndexBasedSegment = getIndexBasedSegment;
exports.getTimeBasedSegment = getTimeBasedSegment;
exports.getSegmentByIndex = getSegmentByIndex;
exports.decideSegmentListRangeForTemplate = decideSegmentListRangeForTemplate;

var _Segment = __webpack_require__(/*! ./../vo/Segment */ "./node_modules/dashjs/src/dash/vo/Segment.js");

var _Segment2 = _interopRequireDefault(_Segment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function zeroPadToLength(numStr, minStrLength) {
    while (numStr.length < minStrLength) {
        numStr = '0' + numStr;
    }
    return numStr;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

function getNumberForSegment(segment, segmentIndex) {
    return segment.representation.startNumber + segmentIndex;
}

function unescapeDollarsInTemplate(url) {
    return url ? url.split('$$').join('$') : url;
}

function replaceIDForTemplate(url, value) {
    if (!value || !url || url.indexOf('$RepresentationID$') === -1) {
        return url;
    }
    var v = value.toString();
    return url.split('$RepresentationID$').join(v);
}

function replaceTokenForTemplate(url, token, value) {
    var formatTag = '%0';

    var startPos = void 0,
        endPos = void 0,
        formatTagPos = void 0,
        specifier = void 0,
        width = void 0,
        paddedValue = void 0;

    var tokenLen = token.length;
    var formatTagLen = formatTag.length;

    if (!url) {
        return url;
    }

    // keep looping round until all instances of <token> have been
    // replaced. once that has happened, startPos below will be -1
    // and the completed url will be returned.
    while (true) {

        // check if there is a valid $<token>...$ identifier
        // if not, return the url as is.
        startPos = url.indexOf('$' + token);
        if (startPos < 0) {
            return url;
        }

        // the next '$' must be the end of the identifier
        // if there isn't one, return the url as is.
        endPos = url.indexOf('$', startPos + tokenLen);
        if (endPos < 0) {
            return url;
        }

        // now see if there is an additional format tag suffixed to
        // the identifier within the enclosing '$' characters
        formatTagPos = url.indexOf(formatTag, startPos + tokenLen);
        if (formatTagPos > startPos && formatTagPos < endPos) {

            specifier = url.charAt(endPos - 1);
            width = parseInt(url.substring(formatTagPos + formatTagLen, endPos - 1), 10);

            // support the minimum specifiers required by IEEE 1003.1
            // (d, i , o, u, x, and X) for completeness
            switch (specifier) {
                // treat all int types as uint,
                // hence deliberate fallthrough
                case 'd':
                case 'i':
                case 'u':
                    paddedValue = zeroPadToLength(value.toString(), width);
                    break;
                case 'x':
                    paddedValue = zeroPadToLength(value.toString(16), width);
                    break;
                case 'X':
                    paddedValue = zeroPadToLength(value.toString(16), width).toUpperCase();
                    break;
                case 'o':
                    paddedValue = zeroPadToLength(value.toString(8), width);
                    break;
                default:
                    return url;
            }
        } else {
            paddedValue = value;
        }

        url = url.substring(0, startPos) + paddedValue + url.substring(endPos + 1);
    }
}

function getIndexBasedSegment(timelineConverter, isDynamic, representation, index) {
    var seg = void 0,
        duration = void 0,
        presentationStartTime = void 0,
        presentationEndTime = void 0;

    duration = representation.segmentDuration;

    /*
     * From spec - If neither @duration attribute nor SegmentTimeline element is present, then the Representation
     * shall contain exactly one Media Segment. The MPD start time is 0 and the MPD duration is obtained
     * in the same way as for the last Media Segment in the Representation.
     */
    if (isNaN(duration)) {
        duration = representation.adaptation.period.duration;
    }

    presentationStartTime = parseFloat((representation.adaptation.period.start + index * duration).toFixed(5));
    presentationEndTime = parseFloat((presentationStartTime + duration).toFixed(5));

    seg = new _Segment2.default();

    seg.representation = representation;
    seg.duration = duration;
    seg.presentationStartTime = presentationStartTime;

    seg.mediaStartTime = timelineConverter.calcMediaTimeFromPresentationTime(seg.presentationStartTime, representation);

    seg.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(seg.presentationStartTime, representation.adaptation.period.mpd, isDynamic);
    seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic);

    // at this wall clock time, the video element currentTime should be seg.presentationStartTime
    seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic);

    seg.replacementNumber = getNumberForSegment(seg, index);
    seg.availabilityIdx = index;

    return seg;
}

function getTimeBasedSegment(timelineConverter, isDynamic, representation, time, duration, fTimescale, url, range, index, tManifest) {
    var scaledTime = time / fTimescale;
    var scaledDuration = Math.min(duration / fTimescale, representation.adaptation.period.mpd.maxSegmentDuration);

    var presentationStartTime = void 0,
        presentationEndTime = void 0,
        seg = void 0;

    presentationStartTime = timelineConverter.calcPresentationTimeFromMediaTime(scaledTime, representation);
    presentationEndTime = presentationStartTime + scaledDuration;

    seg = new _Segment2.default();

    seg.representation = representation;
    seg.duration = scaledDuration;
    seg.mediaStartTime = scaledTime;

    seg.presentationStartTime = presentationStartTime;

    // For SegmentTimeline every segment is available at loadedTime
    seg.availabilityStartTime = representation.adaptation.period.mpd.manifest.loadedTime;
    seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic);

    // at this wall clock time, the video element currentTime should be seg.presentationStartTime
    seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic);

    seg.replacementTime = tManifest ? tManifest : time;

    seg.replacementNumber = getNumberForSegment(seg, index);

    url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);
    url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);
    seg.media = url;
    seg.mediaRange = range;
    seg.availabilityIdx = index;

    return seg;
}

function getSegmentByIndex(index, representation) {
    if (!representation || !representation.segments) return null;

    var ln = representation.segments.length;
    var seg = void 0,
        i = void 0;

    if (index < ln) {
        seg = representation.segments[index];
        if (seg && seg.availabilityIdx === index) {
            return seg;
        }
    }

    for (i = 0; i < ln; i++) {
        seg = representation.segments[i];

        if (seg && seg.availabilityIdx === index) {
            return seg;
        }
    }

    return null;
}

function decideSegmentListRangeForTemplate(timelineConverter, isDynamic, representation, requestedTime, index, givenAvailabilityUpperLimit) {
    var duration = representation.segmentDuration;
    var minBufferTime = representation.adaptation.period.mpd.manifest.minBufferTime;
    var availabilityWindow = representation.segmentAvailabilityRange;
    var periodRelativeRange = {
        start: timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, availabilityWindow ? availabilityWindow.start : NaN),
        end: timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, availabilityWindow ? availabilityWindow.end : NaN)
    };
    var currentSegmentList = representation.segments;
    var availabilityLowerLimit = 2 * duration;
    var availabilityUpperLimit = givenAvailabilityUpperLimit || Math.max(2 * minBufferTime, 100 * duration);
    var originAvailabilityTime = NaN;
    var originSegment = null;

    var start = void 0,
        end = void 0,
        range = void 0;

    periodRelativeRange.start = Math.max(periodRelativeRange.start, 0);

    if (isDynamic && !timelineConverter.isTimeSyncCompleted()) {
        start = Math.floor(periodRelativeRange.start / duration);
        end = Math.floor(periodRelativeRange.end / duration);
        range = { start: start, end: end };
        return range;
    }

    // if segments exist we should try to find the latest buffered time, which is the presentation time of the
    // segment for the current index
    if (currentSegmentList && currentSegmentList.length > 0) {
        originSegment = getSegmentByIndex(index, representation);
        if (originSegment) {
            originAvailabilityTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, originSegment.presentationStartTime);
        } else {
            originAvailabilityTime = index > 0 ? index * duration : timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);
        }
    } else {
        // If no segments exist, but index > 0, it means that we switch to the other representation, so
        // we should proceed from this time.
        // Otherwise we should start from the beginning for static mpds or from the end (live edge) for dynamic mpds
        originAvailabilityTime = index > 0 ? index * duration : isDynamic ? periodRelativeRange.end : periodRelativeRange.start;
    }

    // segment list should not be out of the availability window range
    start = Math.floor(Math.max(originAvailabilityTime - availabilityLowerLimit, periodRelativeRange.start) / duration);
    end = Math.floor(Math.min(start + availabilityUpperLimit / duration, periodRelativeRange.end / duration));

    range = { start: start, end: end };

    return range;
}

/***/ }),

/***/ "./node_modules/dashjs/src/dash/utils/TemplateSegmentsGetter.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/utils/TemplateSegmentsGetter.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _SegmentsUtils = __webpack_require__(/*! ./SegmentsUtils */ "./node_modules/dashjs/src/dash/utils/SegmentsUtils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function TemplateSegmentsGetter(config, isDynamic) {

    var timelineConverter = config.timelineConverter;

    var instance = void 0;

    function getSegmentsFromTemplate(representation, requestedTime, index, availabilityUpperLimit) {
        var template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;
        var duration = representation.segmentDuration;
        var availabilityWindow = representation.segmentAvailabilityRange;

        var segments = [];
        var url = null;
        var seg = null;

        var segmentRange = void 0,
            periodSegIdx = void 0,
            startIdx = void 0,
            endIdx = void 0,
            start = void 0;

        start = representation.startNumber;

        if (isNaN(duration) && !isDynamic) {
            segmentRange = { start: start, end: start };
        } else {
            segmentRange = (0, _SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit);
        }

        startIdx = segmentRange.start;
        endIdx = segmentRange.end;

        for (periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) {
            seg = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, periodSegIdx);
            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;
            url = template.media;
            url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Number', seg.replacementNumber);
            url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Time', seg.replacementTime);
            seg.media = url;

            segments.push(seg);
        }

        if (representation.adaptation.period.mpd.manifest.type !== 'dynamic' && seg) {
            // Should be the last in the segmentList.
            seg.duration = Math.min(seg.presentationStartTime + seg.duration, availabilityWindow.end) - seg.presentationStartTime;
        }

        if (isNaN(duration)) {
            representation.availableSegmentsNumber = 1;
        } else {
            representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);
        }

        return segments;
    }

    instance = {
        getSegments: getSegmentsFromTemplate
    };

    return instance;
}

TemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';
var factory = _FactoryMaker2.default.getClassFactory(TemplateSegmentsGetter);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/utils/TimelineConverter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/utils/TimelineConverter.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TimelineConverter() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        clientServerTimeShift = void 0,
        isClientServerTimeSyncCompleted = void 0,
        expectedLiveEdge = void 0;

    function initialize() {
        resetInitialSettings();
        eventBus.on(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this);
    }

    function isTimeSyncCompleted() {
        return isClientServerTimeSyncCompleted;
    }

    function setTimeSyncCompleted(value) {
        isClientServerTimeSyncCompleted = value;
    }

    function getClientTimeOffset() {
        return clientServerTimeShift;
    }

    function setClientTimeOffset(value) {
        clientServerTimeShift = value;
    }

    function getExpectedLiveEdge() {
        return expectedLiveEdge;
    }

    function setExpectedLiveEdge(value) {
        expectedLiveEdge = value;
    }

    function calcAvailabilityTimeFromPresentationTime(presentationTime, mpd, isDynamic, calculateEnd) {
        var availabilityTime = NaN;

        if (calculateEnd) {
            //@timeShiftBufferDepth specifies the duration of the time shifting buffer that is guaranteed
            // to be available for a Media Presentation with type 'dynamic'.
            // When not present, the value is infinite.
            if (isDynamic && mpd.timeShiftBufferDepth != Number.POSITIVE_INFINITY) {
                availabilityTime = new Date(mpd.availabilityStartTime.getTime() + (presentationTime + mpd.timeShiftBufferDepth) * 1000);
            } else {
                availabilityTime = mpd.availabilityEndTime;
            }
        } else {
            if (isDynamic) {
                availabilityTime = new Date(mpd.availabilityStartTime.getTime() + (presentationTime - clientServerTimeShift) * 1000);
            } else {
                // in static mpd, all segments are available at the same time
                availabilityTime = mpd.availabilityStartTime;
            }
        }

        return availabilityTime;
    }

    function calcAvailabilityStartTimeFromPresentationTime(presentationTime, mpd, isDynamic) {
        return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic);
    }

    function calcAvailabilityEndTimeFromPresentationTime(presentationTime, mpd, isDynamic) {
        return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic, true);
    }

    function calcPresentationTimeFromWallTime(wallTime, period) {
        return (wallTime.getTime() - period.mpd.availabilityStartTime.getTime() + clientServerTimeShift * 1000) / 1000;
    }

    function calcPresentationTimeFromMediaTime(mediaTime, representation) {
        var periodStart = representation.adaptation.period.start;
        var presentationOffset = representation.presentationTimeOffset;

        return mediaTime + (periodStart - presentationOffset);
    }

    function calcMediaTimeFromPresentationTime(presentationTime, representation) {
        var periodStart = representation.adaptation.period.start;
        var presentationOffset = representation.presentationTimeOffset;

        return presentationTime - periodStart + presentationOffset;
    }

    function calcWallTimeForSegment(segment, isDynamic) {
        var suggestedPresentationDelay = void 0,
            displayStartTime = void 0,
            wallTime = void 0;

        if (isDynamic) {
            suggestedPresentationDelay = segment.representation.adaptation.period.mpd.suggestedPresentationDelay;
            displayStartTime = segment.presentationStartTime + suggestedPresentationDelay;
            wallTime = new Date(segment.availabilityStartTime.getTime() + displayStartTime * 1000);
        }

        return wallTime;
    }

    function calcSegmentAvailabilityRange(voRepresentation, isDynamic) {
        // Static Range Finder
        var voPeriod = voRepresentation.adaptation.period;
        var range = { start: voPeriod.start, end: voPeriod.start + voPeriod.duration };
        if (!isDynamic) return range;

        if (!isClientServerTimeSyncCompleted && voRepresentation.segmentAvailabilityRange) {
            return voRepresentation.segmentAvailabilityRange;
        }

        // Dynamic Range Finder
        var d = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length ? voRepresentation.segments[voRepresentation.segments.length - 1].duration : 0);
        var now = calcPresentationTimeFromWallTime(new Date(), voPeriod);
        var periodEnd = voPeriod.start + voPeriod.duration;
        range.start = Math.max(now - voPeriod.mpd.timeShiftBufferDepth, voPeriod.start);

        var endOffset = voRepresentation.availabilityTimeOffset !== undefined && voRepresentation.availabilityTimeOffset < d ? d - voRepresentation.availabilityTimeOffset : d;
        range.end = now >= periodEnd && now - endOffset < periodEnd ? periodEnd : now - endOffset;

        return range;
    }

    function calcPeriodRelativeTimeFromMpdRelativeTime(representation, mpdRelativeTime) {
        var periodStartTime = representation.adaptation.period.start;
        return mpdRelativeTime - periodStartTime;
    }

    /*
    * We need to figure out if we want to timesync for segmentTimeine where useCalculatedLiveEdge = true
    * seems we figure out client offset based on logic in liveEdgeFinder getLiveEdge timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end);
    * FYI StreamController's onManifestUpdated entry point to timeSync
    * */
    function onTimeSyncComplete(e) {

        if (isClientServerTimeSyncCompleted) return;

        if (e.offset !== undefined) {
            setClientTimeOffset(e.offset / 1000);
            isClientServerTimeSyncCompleted = true;
        }
    }

    function calcMSETimeOffset(representation) {
        // The MSEOffset is offset from AST for media. It is Period@start - presentationTimeOffset
        var presentationOffset = representation.presentationTimeOffset;
        var periodStart = representation.adaptation.period.start;
        return periodStart - presentationOffset;
    }

    function resetInitialSettings() {
        clientServerTimeShift = 0;
        isClientServerTimeSyncCompleted = false;
        expectedLiveEdge = NaN;
    }

    function reset() {
        eventBus.off(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this);
        resetInitialSettings();
    }

    instance = {
        initialize: initialize,
        isTimeSyncCompleted: isTimeSyncCompleted,
        setTimeSyncCompleted: setTimeSyncCompleted,
        getClientTimeOffset: getClientTimeOffset,
        setClientTimeOffset: setClientTimeOffset,
        getExpectedLiveEdge: getExpectedLiveEdge,
        setExpectedLiveEdge: setExpectedLiveEdge,
        calcAvailabilityStartTimeFromPresentationTime: calcAvailabilityStartTimeFromPresentationTime,
        calcAvailabilityEndTimeFromPresentationTime: calcAvailabilityEndTimeFromPresentationTime,
        calcPresentationTimeFromWallTime: calcPresentationTimeFromWallTime,
        calcPresentationTimeFromMediaTime: calcPresentationTimeFromMediaTime,
        calcPeriodRelativeTimeFromMpdRelativeTime: calcPeriodRelativeTimeFromMpdRelativeTime,
        calcMediaTimeFromPresentationTime: calcMediaTimeFromPresentationTime,
        calcSegmentAvailabilityRange: calcSegmentAvailabilityRange,
        calcWallTimeForSegment: calcWallTimeForSegment,
        calcMSETimeOffset: calcMSETimeOffset,
        reset: reset
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


TimelineConverter.__dashjs_factory_name = 'TimelineConverter';
exports.default = _FactoryMaker2.default.getSingletonFactory(TimelineConverter);

/***/ }),

/***/ "./node_modules/dashjs/src/dash/utils/TimelineSegmentsGetter.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dashjs/src/dash/utils/TimelineSegmentsGetter.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Constants = __webpack_require__(/*! ../../streaming/constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _SegmentsUtils = __webpack_require__(/*! ./SegmentsUtils */ "./node_modules/dashjs/src/dash/utils/SegmentsUtils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TimelineSegmentsGetter(config, isDynamic) {

    config = config || {};
    var timelineConverter = config.timelineConverter;

    var instance = void 0;

    function checkConfig() {
        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcMediaTimeFromPresentationTime') || !timelineConverter.hasOwnProperty('calcSegmentAvailabilityRange')) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
    }

    function getSegmentsFromTimeline(representation, requestedTime, index, availabilityUpperLimit) {
        checkConfig();

        if (!representation) {
            throw new Error('no representation');
        }

        if (requestedTime === undefined) {
            requestedTime = null;
        }

        var base = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate || representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;
        var timeline = base.SegmentTimeline;
        var list = base.SegmentURL_asArray;
        var isAvailableSegmentNumberCalculated = representation.availableSegmentsNumber > 0;

        var maxSegmentsAhead = void 0;

        if (availabilityUpperLimit) {
            maxSegmentsAhead = availabilityUpperLimit;
        } else {
            maxSegmentsAhead = index > -1 || requestedTime !== null ? 10 : Infinity;
        }

        var time = 0;
        var scaledTime = 0;
        var availabilityIdx = -1;
        var segments = [];
        var requiredMediaTime = null;

        var fragments = void 0,
            frag = void 0,
            i = void 0,
            len = void 0,
            j = void 0,
            repeat = void 0,
            repeatEndTime = void 0,
            nextFrag = void 0,
            hasEnoughSegments = void 0,
            startIdx = void 0,
            fTimescale = void 0;

        var createSegment = function createSegment(s, i) {
            var media = base.media;
            var mediaRange = s.mediaRange;

            if (list) {
                media = list[i].media || '';
                mediaRange = list[i].mediaRange;
            }

            return (0, _SegmentsUtils.getTimeBasedSegment)(timelineConverter, isDynamic, representation, time, s.d, fTimescale, media, mediaRange, availabilityIdx, s.tManifest);
        };

        fTimescale = representation.timescale;

        fragments = timeline.S_asArray;

        startIdx = index;

        if (requestedTime !== null) {
            requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime, representation);
        }

        for (i = 0, len = fragments.length; i < len; i++) {
            frag = fragments[i];
            repeat = 0;
            if (frag.hasOwnProperty('r')) {
                repeat = frag.r;
            }

            // For a repeated S element, t belongs only to the first segment
            if (frag.hasOwnProperty('t')) {
                time = frag.t;
                scaledTime = time / fTimescale;
            }

            // This is a special case: "A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the
            // next MPD update."
            if (repeat < 0) {
                nextFrag = fragments[i + 1];

                if (nextFrag && nextFrag.hasOwnProperty('t')) {
                    repeatEndTime = nextFrag.t / fTimescale;
                } else {
                    var availabilityEnd = representation.segmentAvailabilityRange ? representation.segmentAvailabilityRange.end : timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic).end;
                    repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd, representation);
                    representation.segmentDuration = frag.d / fTimescale;
                }

                repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;
            }

            // if we have enough segments in the list, but we have not calculated the total number of the segments yet we
            // should continue the loop and calc the number. Once it is calculated, we can break the loop.
            if (hasEnoughSegments) {
                if (isAvailableSegmentNumberCalculated) break;
                availabilityIdx += repeat + 1;
                continue;
            }

            for (j = 0; j <= repeat; j++) {
                availabilityIdx++;

                if (segments.length > maxSegmentsAhead) {
                    hasEnoughSegments = true;
                    if (isAvailableSegmentNumberCalculated) break;
                    continue;
                }

                if (requiredMediaTime !== null) {
                    // In some cases when requiredMediaTime = actual end time of the last segment
                    // it is possible that this time a bit exceeds the declared end time of the last segment.
                    // in this case we still need to include the last segment in the segment list. to do this we
                    // use a correction factor = 1.5. This number is used because the largest possible deviation is
                    // is 50% of segment duration.
                    if (scaledTime >= requiredMediaTime - frag.d / fTimescale * 1.5) {
                        segments.push(createSegment(frag, availabilityIdx));
                    }
                } else if (availabilityIdx >= startIdx) {
                    segments.push(createSegment(frag, availabilityIdx));
                }

                time += frag.d;
                scaledTime = time / fTimescale;
            }
        }

        if (!isAvailableSegmentNumberCalculated) {
            representation.availableSegmentsNumber = availabilityIdx + 1;
        }

        return segments;
    }

    instance = {
        getSegments: getSegmentsFromTimeline
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

TimelineSegmentsGetter.__dashjs_factory_name = 'TimelineSegmentsGetter';
var factory = _FactoryMaker2.default.getClassFactory(TimelineSegmentsGetter);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/AdaptationSet.js":
/*!**********************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/AdaptationSet.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var AdaptationSet = function AdaptationSet() {
  _classCallCheck(this, AdaptationSet);

  this.period = null;
  this.index = -1;
  this.type = null;
};

exports.default = AdaptationSet;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/BaseURL.js":
/*!****************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/BaseURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */

var DEFAULT_DVB_PRIORITY = 1;
var DEFAULT_DVB_WEIGHT = 1;

var BaseURL = function BaseURL(url, serviceLocation, priority, weight) {
  _classCallCheck(this, BaseURL);

  this.url = url || '';
  this.serviceLocation = serviceLocation || url || '';

  // DVB extensions
  this.dvb_priority = priority || DEFAULT_DVB_PRIORITY;
  this.dvb_weight = weight || DEFAULT_DVB_WEIGHT;

  this.availabilityTimeOffset = 0;
  this.availabilityTimeComplete = true;

  /* currently unused:
   * byteRange,
   */
};

BaseURL.DEFAULT_DVB_PRIORITY = DEFAULT_DVB_PRIORITY;
BaseURL.DEFAULT_DVB_WEIGHT = DEFAULT_DVB_WEIGHT;

exports.default = BaseURL;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/Event.js":
/*!**************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/Event.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var Event = function Event() {
  _classCallCheck(this, Event);

  this.duration = NaN;
  this.presentationTime = NaN;
  this.id = NaN;
  this.messageData = '';
  this.eventStream = null;
  this.presentationTimeDelta = NaN; // Specific EMSG Box parameter
};

exports.default = Event;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/EventStream.js":
/*!********************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/EventStream.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var EventStream = function EventStream() {
  _classCallCheck(this, EventStream);

  this.adaptionSet = null;
  this.representation = null;
  this.period = null;
  this.timescale = 1;
  this.value = '';
  this.schemeIdUri = '';
};

exports.default = EventStream;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/Mpd.js":
/*!************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/Mpd.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var Mpd = function Mpd() {
  _classCallCheck(this, Mpd);

  this.manifest = null;
  this.suggestedPresentationDelay = 0;
  this.availabilityStartTime = null;
  this.availabilityEndTime = Number.POSITIVE_INFINITY;
  this.timeShiftBufferDepth = Number.POSITIVE_INFINITY;
  this.maxSegmentDuration = Number.POSITIVE_INFINITY;
  this.minimumUpdatePeriod = NaN;
  this.mediaPresentationDuration = NaN;
};

exports.default = Mpd;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/Period.js":
/*!***************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/Period.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var Period = function Period() {
  _classCallCheck(this, Period);

  this.id = null;
  this.index = -1;
  this.duration = NaN;
  this.start = NaN;
  this.mpd = null;
};

Period.DEFAULT_ID = 'defaultId';

exports.default = Period;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/Representation.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/Representation.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
he copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * included below. This software may be subject to other third party and contributor
rights, including patent rights, and no such rights are granted under this license.

opyright (c) 2013, Dash Industry Forum.
ll rights reserved.

edistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
contributors may be used to endorse or promote products derived from this software
without specific prior written permission.









                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE


/**
 * @class
 * @ignore
 */

var _DashConstants = __webpack_require__(/*! ../constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Representation = function () {
    function Representation() {
        _classCallCheck(this, Representation);

        this.id = null;
        this.index = -1;
        this.adaptation = null;
        this.segmentInfoType = null;
        this.initialization = null;
        this.codecs = null;
        this.codecPrivateData = null;
        this.segmentDuration = NaN;
        this.timescale = 1;
        this.startNumber = 1;
        this.indexRange = null;
        this.range = null;
        this.presentationTimeOffset = 0;
        // Set the source buffer timeOffset to this
        this.MSETimeOffset = NaN;
        this.segmentAvailabilityRange = null;
        this.availableSegmentsNumber = 0;
        this.bandwidth = NaN;
        this.width = NaN;
        this.height = NaN;
        this.scanType = null;
        this.maxPlayoutRate = NaN;
        this.availabilityTimeOffset = 0;
        this.availabilityTimeComplete = true;
    }

    _createClass(Representation, null, [{
        key: 'hasInitialization',
        value: function hasInitialization(r) {
            return r.initialization !== null || r.range !== null;
        }
    }, {
        key: 'hasSegments',
        value: function hasSegments(r) {
            return r.segmentInfoType !== _DashConstants2.default.BASE_URL && r.segmentInfoType !== _DashConstants2.default.SEGMENT_BASE && !r.indexRange;
        }
    }]);

    return Representation;
}();

exports.default = Representation;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/Segment.js":
/*!****************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/Segment.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var Segment = function Segment() {
  _classCallCheck(this, Segment);

  this.indexRange = null;
  this.index = null;
  this.mediaRange = null;
  this.media = null;
  this.duration = NaN;
  // this is the time that should be inserted into the media url
  this.replacementTime = null;
  // this is the number that should be inserted into the media url
  this.replacementNumber = NaN;
  // This is supposed to match the time encoded in the media Segment
  this.mediaStartTime = NaN;
  // When the source buffer timeOffset is set to MSETimeOffset this is the
  // time that will match the seekTarget and video.currentTime
  this.presentationStartTime = NaN;
  // Do not schedule this segment until
  this.availabilityStartTime = NaN;
  // Ignore and  discard this segment after
  this.availabilityEndTime = NaN;
  // The index of the segment inside the availability window
  this.availabilityIdx = NaN;
  // For dynamic mpd's, this is the wall clock time that the video
  // element currentTime should be presentationStartTime
  this.wallStartTime = NaN;
  this.representation = null;
};

exports.default = Segment;

/***/ }),

/***/ "./node_modules/dashjs/src/dash/vo/UTCTiming.js":
/*!******************************************************!*\
  !*** ./node_modules/dashjs/src/dash/vo/UTCTiming.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var UTCTiming = function UTCTiming() {
  _classCallCheck(this, UTCTiming);

  // UTCTiming is a DescriptorType and doesn't have any additional fields
  this.schemeIdUri = '';
  this.value = '';
};

exports.default = UTCTiming;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/FragmentLoader.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/FragmentLoader.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _HTTPLoader = __webpack_require__(/*! ./net/HTTPLoader */ "./node_modules/dashjs/src/streaming/net/HTTPLoader.js");

var _HTTPLoader2 = _interopRequireDefault(_HTTPLoader);

var _HeadRequest = __webpack_require__(/*! ./vo/HeadRequest */ "./node_modules/dashjs/src/streaming/vo/HeadRequest.js");

var _HeadRequest2 = _interopRequireDefault(_HeadRequest);

var _DashJSError = __webpack_require__(/*! ./vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _EventBus = __webpack_require__(/*! ./../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _BoxParser = __webpack_require__(/*! ../streaming/utils/BoxParser */ "./node_modules/dashjs/src/streaming/utils/BoxParser.js");

var _BoxParser2 = _interopRequireDefault(_BoxParser);

var _Events = __webpack_require__(/*! ./../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _Errors = __webpack_require__(/*! ./../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function FragmentLoader(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        httpLoader = void 0;

    function setup() {
        var boxParser = (0, _BoxParser2.default)(context).getInstance();
        httpLoader = (0, _HTTPLoader2.default)(context).create({
            errHandler: config.errHandler,
            metricsModel: config.metricsModel,
            mediaPlayerModel: config.mediaPlayerModel,
            requestModifier: config.requestModifier,
            boxParser: boxParser,
            useFetch: config.mediaPlayerModel.getLowLatencyEnabled(),
            requestTimeout: config.mediaPlayerModel.getFragmentRequestTimeout()
        });
    }

    function checkForExistence(request) {
        var report = function report(success) {
            eventBus.trigger(_Events2.default.CHECK_FOR_EXISTENCE_COMPLETED, {
                request: request,
                exists: success
            });
        };

        if (request) {
            var headRequest = new _HeadRequest2.default(request.url);

            httpLoader.load({
                request: headRequest,
                success: function success() {
                    report(true);
                },
                error: function error() {
                    report(false);
                }
            });
        } else {
            report(false);
        }
    }

    function load(request) {
        var report = function report(data, error) {
            eventBus.trigger(_Events2.default.LOADING_COMPLETED, {
                request: request,
                response: data || null,
                error: error || null,
                sender: instance
            });
        };

        if (request) {
            httpLoader.load({
                request: request,
                progress: function progress(event) {
                    eventBus.trigger(_Events2.default.LOADING_PROGRESS, {
                        request: request,
                        stream: event.stream
                    });
                    if (event.data) {
                        eventBus.trigger(_Events2.default.LOADING_DATA_PROGRESS, {
                            request: request,
                            response: event.data || null,
                            error: null,
                            sender: instance
                        });
                    }
                },
                success: function success(data) {
                    report(data);
                },
                error: function error(request, statusText, errorText) {
                    report(undefined, new _DashJSError2.default(_Errors2.default.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE, errorText, statusText));
                },
                abort: function abort(request) {
                    if (request) {
                        eventBus.trigger(_Events2.default.LOADING_ABANDONED, { request: request, mediaType: request.mediaType, sender: instance });
                    }
                }
            });
        } else {
            report(undefined, new _DashJSError2.default(_Errors2.default.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE, _Errors2.default.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE));
        }
    }

    function abort() {
        if (httpLoader) {
            httpLoader.abort();
        }
    }

    function reset() {
        if (httpLoader) {
            httpLoader.abort();
            httpLoader = null;
        }
    }

    instance = {
        checkForExistence: checkForExistence,
        load: load,
        abort: abort,
        reset: reset
    };

    setup();

    return instance;
}

FragmentLoader.__dashjs_factory_name = 'FragmentLoader';
exports.default = _FactoryMaker2.default.getClassFactory(FragmentLoader);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/ManifestLoader.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/ManifestLoader.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ./constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _XlinkController = __webpack_require__(/*! ./controllers/XlinkController */ "./node_modules/dashjs/src/streaming/controllers/XlinkController.js");

var _XlinkController2 = _interopRequireDefault(_XlinkController);

var _HTTPLoader = __webpack_require__(/*! ./net/HTTPLoader */ "./node_modules/dashjs/src/streaming/net/HTTPLoader.js");

var _HTTPLoader2 = _interopRequireDefault(_HTTPLoader);

var _URLUtils = __webpack_require__(/*! ./utils/URLUtils */ "./node_modules/dashjs/src/streaming/utils/URLUtils.js");

var _URLUtils2 = _interopRequireDefault(_URLUtils);

var _TextRequest = __webpack_require__(/*! ./vo/TextRequest */ "./node_modules/dashjs/src/streaming/vo/TextRequest.js");

var _TextRequest2 = _interopRequireDefault(_TextRequest);

var _DashJSError = __webpack_require__(/*! ./vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _HTTPRequest = __webpack_require__(/*! ./vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _EventBus = __webpack_require__(/*! ../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _Errors = __webpack_require__(/*! ../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _DashParser = __webpack_require__(/*! ../dash/parser/DashParser */ "./node_modules/dashjs/src/dash/parser/DashParser.js");

var _DashParser2 = _interopRequireDefault(_DashParser);

var _Debug = __webpack_require__(/*! ../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ManifestLoader(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var urlUtils = (0, _URLUtils2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        httpLoader = void 0,
        xlinkController = void 0,
        parser = void 0;

    var mssHandler = config.mssHandler;
    var errHandler = config.errHandler;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        eventBus.on(_Events2.default.XLINK_READY, onXlinkReady, instance);

        httpLoader = (0, _HTTPLoader2.default)(context).create({
            errHandler: errHandler,
            metricsModel: config.metricsModel,
            mediaPlayerModel: config.mediaPlayerModel,
            requestModifier: config.requestModifier
        });

        xlinkController = (0, _XlinkController2.default)(context).create({
            errHandler: errHandler,
            metricsModel: config.metricsModel,
            mediaPlayerModel: config.mediaPlayerModel,
            requestModifier: config.requestModifier
        });

        parser = null;
    }

    function onXlinkReady(event) {
        eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
            manifest: event.manifest
        });
    }

    function createParser(data) {
        var parser = null;
        // Analyze manifest content to detect protocol and select appropriate parser
        if (data.indexOf('SmoothStreamingMedia') > -1) {
            //do some business to transform it into a Dash Manifest
            if (mssHandler) {
                parser = mssHandler.createMssParser();
                mssHandler.registerEvents();
            }
            return parser;
        } else if (data.indexOf('MPD') > -1) {
            return (0, _DashParser2.default)(context).create();
        } else {
            return parser;
        }
    }

    function load(url) {
        var request = new _TextRequest2.default(url, _HTTPRequest.HTTPRequest.MPD_TYPE);

        httpLoader.load({
            request: request,
            success: function success(data, textStatus, responseURL) {
                // Manage situations in which success is called after calling reset
                if (!xlinkController) return;

                var actualUrl = void 0,
                    baseUri = void 0,
                    manifest = void 0;

                // Handle redirects for the MPD - as per RFC3986 Section 5.1.3
                // also handily resolves relative MPD URLs to absolute
                if (responseURL && responseURL !== url) {
                    baseUri = urlUtils.parseBaseUrl(responseURL);
                    actualUrl = responseURL;
                } else {
                    // usually this case will be caught and resolved by
                    // responseURL above but it is not available for IE11 and Edge/12 and Edge/13
                    // baseUri must be absolute for BaseURL resolution later
                    if (urlUtils.isRelative(url)) {
                        url = urlUtils.resolve(url, window.location.href);
                    }

                    baseUri = urlUtils.parseBaseUrl(url);
                }

                // Create parser according to manifest type
                if (parser === null) {
                    parser = createParser(data);
                }

                if (parser === null) {
                    eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                        manifest: null,
                        error: new _DashJSError2.default(_Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))
                    });
                    return;
                }

                // init xlinkcontroller with matchers and iron object from created parser
                xlinkController.setMatchers(parser.getMatchers());
                xlinkController.setIron(parser.getIron());

                try {
                    manifest = parser.parse(data);
                } catch (e) {
                    eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                        manifest: null,
                        error: new _DashJSError2.default(_Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))
                    });
                    return;
                }

                if (manifest) {
                    manifest.url = actualUrl || url;

                    // URL from which the MPD was originally retrieved (MPD updates will not change this value)
                    if (!manifest.originalUrl) {
                        manifest.originalUrl = manifest.url;
                    }

                    // In the following, we only use the first Location entry even if many are available
                    // Compare with ManifestUpdater/DashManifestModel
                    if (manifest.hasOwnProperty(_Constants2.default.LOCATION)) {
                        baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);
                        logger.debug('BaseURI set by Location to: ' + baseUri);
                    }

                    manifest.baseUri = baseUri;
                    manifest.loadedTime = new Date();
                    xlinkController.resolveManifestOnLoad(manifest);
                } else {
                    eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                        manifest: null,
                        error: new _DashJSError2.default(_Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))
                    });
                }
            },
            error: function error(request, statusText, errorText) {
                eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                    manifest: null,
                    error: new _DashJSError2.default(_Errors2.default.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE, _Errors2.default.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + (url + ', ' + errorText))
                });
            }
        });
    }

    function reset() {
        eventBus.off(_Events2.default.XLINK_READY, onXlinkReady, instance);

        if (xlinkController) {
            xlinkController.reset();
            xlinkController = null;
        }

        if (httpLoader) {
            httpLoader.abort();
            httpLoader = null;
        }

        if (mssHandler) {
            mssHandler.reset();
        }
    }

    instance = {
        load: load,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


ManifestLoader.__dashjs_factory_name = 'ManifestLoader';

var factory = _FactoryMaker2.default.getClassFactory(ManifestLoader);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/ManifestUpdater.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/ManifestUpdater.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _EventBus = __webpack_require__(/*! ../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _Errors = __webpack_require__(/*! ../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ManifestUpdater() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        refreshDelay = void 0,
        refreshTimer = void 0,
        isPaused = void 0,
        isUpdating = void 0,
        manifestLoader = void 0,
        manifestModel = void 0,
        dashManifestModel = void 0,
        errHandler = void 0,
        mediaPlayerModel = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function setConfig(config) {
        if (!config) return;

        if (config.manifestModel) {
            manifestModel = config.manifestModel;
        }
        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
        if (config.mediaPlayerModel) {
            mediaPlayerModel = config.mediaPlayerModel;
        }
        if (config.manifestLoader) {
            manifestLoader = config.manifestLoader;
        }
        if (config.errHandler) {
            errHandler = config.errHandler;
        }
    }

    function initialize() {
        resetInitialSettings();

        eventBus.on(_Events2.default.STREAMS_COMPOSED, onStreamsComposed, this);
        eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this);
        eventBus.on(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this);
        eventBus.on(_Events2.default.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);
    }

    function setManifest(manifest) {
        update(manifest);
    }

    function resetInitialSettings() {
        refreshDelay = NaN;
        isUpdating = false;
        isPaused = true;
        stopManifestRefreshTimer();
    }

    function reset() {

        eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this);
        eventBus.off(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this);
        eventBus.off(_Events2.default.STREAMS_COMPOSED, onStreamsComposed, this);
        eventBus.off(_Events2.default.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);

        resetInitialSettings();
    }

    function stopManifestRefreshTimer() {
        if (refreshTimer !== null) {
            clearInterval(refreshTimer);
            refreshTimer = null;
        }
    }

    function startManifestRefreshTimer(delay) {
        stopManifestRefreshTimer();

        if (isNaN(delay) && !isNaN(refreshDelay)) {
            delay = refreshDelay * 1000;
        }

        if (!isNaN(delay)) {
            logger.debug('Refresh manifest in ' + delay + ' milliseconds.');
            refreshTimer = setTimeout(onRefreshTimer, delay);
        }
    }

    function refreshManifest() {
        isUpdating = true;
        var manifest = manifestModel.getValue();
        var url = manifest.url;
        var location = dashManifestModel.getLocation(manifest);
        if (location) {
            url = location;
        }
        manifestLoader.load(url);
    }

    function update(manifest) {

        manifestModel.setValue(manifest);

        var date = new Date();
        var latencyOfLastUpdate = (date.getTime() - manifest.loadedTime.getTime()) / 1000;
        refreshDelay = dashManifestModel.getManifestUpdatePeriod(manifest, latencyOfLastUpdate);
        // setTimeout uses a 32 bit number to store the delay. Any number greater than it
        // will cause event associated with setTimeout to trigger immediately
        if (refreshDelay * 1000 > 0x7FFFFFFF) {
            refreshDelay = 0x7FFFFFFF / 1000;
        }
        eventBus.trigger(_Events2.default.MANIFEST_UPDATED, { manifest: manifest });
        logger.info('Manifest has been refreshed at ' + date + '[' + date.getTime() / 1000 + '] ');

        if (!isPaused) {
            startManifestRefreshTimer();
        }
    }

    function onRefreshTimer() {
        if (isPaused && !mediaPlayerModel.getScheduleWhilePaused()) {
            return;
        }
        if (isUpdating) {
            startManifestRefreshTimer(mediaPlayerModel.getManifestUpdateRetryInterval());
            return;
        }
        refreshManifest();
    }

    function onManifestLoaded(e) {
        if (!e.error) {
            update(e.manifest);
        } else if (e.error.code === _Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE) {
            errHandler.error(e.error);
        }
    }

    function onPlaybackStarted() /*e*/{
        isPaused = false;
        startManifestRefreshTimer();
    }

    function onPlaybackPaused() /*e*/{
        isPaused = true;
        stopManifestRefreshTimer();
    }

    function onStreamsComposed() /*e*/{
        // When streams are ready we can consider manifest update completed. Resolve the update promise.
        isUpdating = false;
    }

    instance = {
        initialize: initialize,
        setManifest: setManifest,
        refreshManifest: refreshManifest,
        setConfig: setConfig,
        reset: reset
    };

    setup();
    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

ManifestUpdater.__dashjs_factory_name = 'ManifestUpdater';
exports.default = _FactoryMaker2.default.getClassFactory(ManifestUpdater);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/MediaPlayer.js":
/*!**********************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/MediaPlayer.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ./constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _MetricsConstants = __webpack_require__(/*! ./constants/MetricsConstants */ "./node_modules/dashjs/src/streaming/constants/MetricsConstants.js");

var _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);

var _PlaybackController = __webpack_require__(/*! ./controllers/PlaybackController */ "./node_modules/dashjs/src/streaming/controllers/PlaybackController.js");

var _PlaybackController2 = _interopRequireDefault(_PlaybackController);

var _StreamController = __webpack_require__(/*! ./controllers/StreamController */ "./node_modules/dashjs/src/streaming/controllers/StreamController.js");

var _StreamController2 = _interopRequireDefault(_StreamController);

var _MediaController = __webpack_require__(/*! ./controllers/MediaController */ "./node_modules/dashjs/src/streaming/controllers/MediaController.js");

var _MediaController2 = _interopRequireDefault(_MediaController);

var _BaseURLController = __webpack_require__(/*! ./controllers/BaseURLController */ "./node_modules/dashjs/src/streaming/controllers/BaseURLController.js");

var _BaseURLController2 = _interopRequireDefault(_BaseURLController);

var _ManifestLoader = __webpack_require__(/*! ./ManifestLoader */ "./node_modules/dashjs/src/streaming/ManifestLoader.js");

var _ManifestLoader2 = _interopRequireDefault(_ManifestLoader);

var _ErrorHandler = __webpack_require__(/*! ./utils/ErrorHandler */ "./node_modules/dashjs/src/streaming/utils/ErrorHandler.js");

var _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);

var _Capabilities = __webpack_require__(/*! ./utils/Capabilities */ "./node_modules/dashjs/src/streaming/utils/Capabilities.js");

var _Capabilities2 = _interopRequireDefault(_Capabilities);

var _TextTracks = __webpack_require__(/*! ./text/TextTracks */ "./node_modules/dashjs/src/streaming/text/TextTracks.js");

var _TextTracks2 = _interopRequireDefault(_TextTracks);

var _RequestModifier = __webpack_require__(/*! ./utils/RequestModifier */ "./node_modules/dashjs/src/streaming/utils/RequestModifier.js");

var _RequestModifier2 = _interopRequireDefault(_RequestModifier);

var _TextController = __webpack_require__(/*! ./text/TextController */ "./node_modules/dashjs/src/streaming/text/TextController.js");

var _TextController2 = _interopRequireDefault(_TextController);

var _URIFragmentModel = __webpack_require__(/*! ./models/URIFragmentModel */ "./node_modules/dashjs/src/streaming/models/URIFragmentModel.js");

var _URIFragmentModel2 = _interopRequireDefault(_URIFragmentModel);

var _ManifestModel = __webpack_require__(/*! ./models/ManifestModel */ "./node_modules/dashjs/src/streaming/models/ManifestModel.js");

var _ManifestModel2 = _interopRequireDefault(_ManifestModel);

var _MediaPlayerModel = __webpack_require__(/*! ./models/MediaPlayerModel */ "./node_modules/dashjs/src/streaming/models/MediaPlayerModel.js");

var _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel);

var _MetricsModel = __webpack_require__(/*! ./models/MetricsModel */ "./node_modules/dashjs/src/streaming/models/MetricsModel.js");

var _MetricsModel2 = _interopRequireDefault(_MetricsModel);

var _AbrController = __webpack_require__(/*! ./controllers/AbrController */ "./node_modules/dashjs/src/streaming/controllers/AbrController.js");

var _AbrController2 = _interopRequireDefault(_AbrController);

var _VideoModel = __webpack_require__(/*! ./models/VideoModel */ "./node_modules/dashjs/src/streaming/models/VideoModel.js");

var _VideoModel2 = _interopRequireDefault(_VideoModel);

var _DOMStorage = __webpack_require__(/*! ./utils/DOMStorage */ "./node_modules/dashjs/src/streaming/utils/DOMStorage.js");

var _DOMStorage2 = _interopRequireDefault(_DOMStorage);

var _Debug = __webpack_require__(/*! ./../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _Errors = __webpack_require__(/*! ./../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _EventBus = __webpack_require__(/*! ./../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ./../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _MediaPlayerEvents = __webpack_require__(/*! ./MediaPlayerEvents */ "./node_modules/dashjs/src/streaming/MediaPlayerEvents.js");

var _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Version = __webpack_require__(/*! ./../core/Version */ "./node_modules/dashjs/src/core/Version.js");

var _DashAdapter = __webpack_require__(/*! ../dash/DashAdapter */ "./node_modules/dashjs/src/dash/DashAdapter.js");

var _DashAdapter2 = _interopRequireDefault(_DashAdapter);

var _DashManifestModel = __webpack_require__(/*! ../dash/models/DashManifestModel */ "./node_modules/dashjs/src/dash/models/DashManifestModel.js");

var _DashManifestModel2 = _interopRequireDefault(_DashManifestModel);

var _DashMetrics = __webpack_require__(/*! ../dash/DashMetrics */ "./node_modules/dashjs/src/dash/DashMetrics.js");

var _DashMetrics2 = _interopRequireDefault(_DashMetrics);

var _TimelineConverter = __webpack_require__(/*! ../dash/utils/TimelineConverter */ "./node_modules/dashjs/src/dash/utils/TimelineConverter.js");

var _TimelineConverter2 = _interopRequireDefault(_TimelineConverter);

var _HTTPRequest = __webpack_require__(/*! ./vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _base = __webpack_require__(/*! ../../externals/base64 */ "./node_modules/dashjs/externals/base64.js");

var _base2 = _interopRequireDefault(_base);

var _codemIsoboxer = __webpack_require__(/*! codem-isoboxer */ "./node_modules/codem-isoboxer/dist/iso_boxer.js");

var _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);

var _DashJSError = __webpack_require__(/*! ./vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _SupervisorTools = __webpack_require__(/*! ./utils/SupervisorTools */ "./node_modules/dashjs/src/streaming/utils/SupervisorTools.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module MediaPlayer
 * @description The MediaPlayer is the primary dash.js Module and a Facade to build your player around.
 * It will allow you access to all the important dash.js properties/methods via the public API and all the
 * events to build a robust DASH media player.
 */
function MediaPlayer() {
    /**
    * @constant {string} STREAMING_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized
    * @inner
    */
    var STREAMING_NOT_INITIALIZED_ERROR = 'You must first call initialize() and set a source before calling this method';
    /**
    * @constant {string} PLAYBACK_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized
    * @inner
    */
    var PLAYBACK_NOT_INITIALIZED_ERROR = 'You must first call initialize() and set a valid source and view before calling this method';
    /**
    * @constant {string} ELEMENT_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a reference of an HTML5 video element
    * @inner
    */
    var ELEMENT_NOT_ATTACHED_ERROR = 'You must first call attachView() to set the video element before calling this method';
    /**
    * @constant {string} SOURCE_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a valid source stream.
    * @inner
    */
    var SOURCE_NOT_ATTACHED_ERROR = 'You must first call attachSource() with a valid source before calling this method';
    /**
    * @constant {string} MEDIA_PLAYER_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized.
    * @inner
    */
    var MEDIA_PLAYER_NOT_INITIALIZED_ERROR = 'MediaPlayer not initialized!';
    /**
    * @constant {string} PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR error string thrown when setLowLatencyMinDrift function is called with an invalid value.
    * @inner
    */
    var PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR = 'Playback minimum drift has an invalid value! Use a number from 0 to 0.5';
    /**
    * @constant {string} PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR error string thrown when setLowLatencyMaxDriftBeforeSeeking function is called with an invalid value.
    * @inner
    */
    var PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR = 'Playback maximum drift has an invalid value! Use a number greater or equal to 0';

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var debug = (0, _Debug2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        source = void 0,
        protectionData = void 0,
        mediaPlayerInitialized = void 0,
        streamingInitialized = void 0,
        playbackInitialized = void 0,
        autoPlay = void 0,
        abrController = void 0,
        timelineConverter = void 0,
        mediaController = void 0,
        protectionController = void 0,
        metricsReportingController = void 0,
        mssHandler = void 0,
        adapter = void 0,
        metricsModel = void 0,
        mediaPlayerModel = void 0,
        errHandler = void 0,
        capabilities = void 0,
        streamController = void 0,
        playbackController = void 0,
        dashMetrics = void 0,
        dashManifestModel = void 0,
        manifestModel = void 0,
        videoModel = void 0,
        textController = void 0,
        domStorage = void 0,
        uriFragmentModel = void 0,
        savedElementAttributes = void 0;

    /*
    ---------------------------------------------------------------------------
         INIT FUNCTIONS
     ---------------------------------------------------------------------------
    */
    function setup() {
        logger = debug.getLogger(instance);
        mediaPlayerInitialized = false;
        playbackInitialized = false;
        streamingInitialized = false;
        autoPlay = true;
        protectionController = null;
        protectionData = null;
        adapter = null;
        _Events2.default.extend(_MediaPlayerEvents2.default);
        mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance();
        videoModel = (0, _VideoModel2.default)(context).getInstance();
        uriFragmentModel = (0, _URIFragmentModel2.default)(context).getInstance();
    }

    /**
     * Configure media player with customs controllers. Helpful for tests
     *
     * @param {object=} config controllers configuration
     * @memberof module:MediaPlayer
     * @instance
     */
    function setConfig(config) {
        if (!config) {
            return;
        }
        if (config.capabilities) {
            capabilities = config.capabilities;
        }
        if (config.streamController) {
            streamController = config.streamController;
        }
        if (config.playbackController) {
            playbackController = config.playbackController;
        }
        if (config.mediaPlayerModel) {
            mediaPlayerModel = config.mediaPlayerModel;
        }
        if (config.abrController) {
            abrController = config.abrController;
        }
        if (config.mediaController) {
            mediaController = config.mediaController;
        }
    }

    /**
     * Upon creating the MediaPlayer you must call initialize before you call anything else.
     * There is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}
     * with all your extensions prior to calling initialize.
     *
     * ALL arguments are optional and there are individual methods to set each argument later on.
     * The args in this method are just for convenience and should only be used for a simple player setup.
     *
     * @param {HTML5MediaElement=} view - Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}
     * @param {string=} source - Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}
     * @param {boolean=} AutoPlay - Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @see {@link module:MediaPlayer#setAutoPlay setAutoPlay()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function initialize(view, source, AutoPlay) {
        if (!capabilities) {
            capabilities = (0, _Capabilities2.default)(context).getInstance();
        }
        errHandler = (0, _ErrorHandler2.default)(context).getInstance();

        if (!capabilities.supportsMediaSource()) {
            errHandler.capabilityError('mediasource');
            errHandler.error(new _DashJSError2.default(_Errors2.default.CAPABILITY_MEDIASOURCE_ERROR_CODE, _Errors2.default.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE));
            return;
        }

        if (mediaPlayerInitialized) return;
        mediaPlayerInitialized = true;

        // init some controllers and models
        timelineConverter = (0, _TimelineConverter2.default)(context).getInstance();
        if (!abrController) {
            abrController = (0, _AbrController2.default)(context).getInstance();
        }

        if (!playbackController) {
            playbackController = (0, _PlaybackController2.default)(context).getInstance();
        }

        if (!mediaController) {
            mediaController = (0, _MediaController2.default)(context).getInstance();
        }

        adapter = (0, _DashAdapter2.default)(context).getInstance();
        dashManifestModel = (0, _DashManifestModel2.default)(context).getInstance({
            timelineConverter: timelineConverter,
            errHandler: errHandler,
            BASE64: _base2.default
        });
        manifestModel = (0, _ManifestModel2.default)(context).getInstance();
        dashMetrics = (0, _DashMetrics2.default)(context).getInstance({
            manifestModel: manifestModel,
            dashManifestModel: dashManifestModel
        });
        metricsModel = (0, _MetricsModel2.default)(context).getInstance();

        textController = (0, _TextController2.default)(context).getInstance();
        domStorage = (0, _DOMStorage2.default)(context).getInstance({
            mediaPlayerModel: mediaPlayerModel
        });

        adapter.setConfig({
            dashManifestModel: dashManifestModel
        });

        restoreDefaultUTCTimingSources();
        setAutoPlay(AutoPlay !== undefined ? AutoPlay : true);
        savedElementAttributes = {};

        if (view) {
            attachView(view);
        }

        if (source) {
            attachSource(source);
        }

        logger.info('[dash.js ' + getVersion() + '] ' + 'MediaPlayer has been initialized');
    }

    /**
     * Sets the MPD source and the video element to null. You can also reset the MediaPlayer by
     * calling attachSource with a new source file.
     *
     * Calling this method is all that is necessary to destroy a MediaPlayer instance.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
    function reset() {
        attachSource(null);
        attachView(null);
        protectionData = null;
        if (protectionController) {
            protectionController.reset();
            protectionController = null;
        }
        if (metricsReportingController) {
            metricsReportingController.reset();
            metricsReportingController = null;
        }
    }

    /**
     * The ready state of the MediaPlayer based on both the video element and MPD source being defined.
     *
     * @returns {boolean} The current ready state of the MediaPlayer
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function isReady() {
        return !!source && !!videoModel.getElement();
    }

    /**
     * Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}
     *
     * @param {string} type - {@link MediaPlayerEvents}
     * @param {Function} listener - callback method when the event fires.
     * @param {Object} scope - context of the listener so it can be removed properly.
     * @memberof module:MediaPlayer
     * @instance
     */
    function on(type, listener, scope) {
        eventBus.on(type, listener, scope);
    }

    /**
     * Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}
     *
     * @param {string} type - {@link MediaPlayerEvents}
     * @param {Function} listener - callback method when the event fires.
     * @param {Object} scope - context of the listener so it can be removed properly.
     * @memberof module:MediaPlayer
     * @instance
     */
    function off(type, listener, scope) {
        eventBus.off(type, listener, scope);
    }

    /**
     * Current version of Dash.js
     * @returns {string} the current dash.js version string.
     * @memberof module:MediaPlayer
     * @instance
     */
    function getVersion() {
        return (0, _Version.getVersionString)();
    }

    /**
     * Use this method to access the dash.js logging class.
     *
     * @returns {Debug}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getDebug() {
        return debug;
    }

    /*
    ---------------------------------------------------------------------------
         PLAYBACK FUNCTIONS
     ---------------------------------------------------------------------------
    */

    /**
     * Causes the player to begin streaming the media as set by the {@link module:MediaPlayer#attachSource attachSource()}
     * method in preparation for playing. It specifically does not require a view to be attached with {@link module:MediaPlayer#attachSource attachView()} to begin preloading.
     * When a view is attached after preloading, the buffered data is transferred to the attached mediaSource buffers.
     *
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function
     * @instance
     */
    function preload() {
        if (videoModel.getElement() || streamingInitialized) {
            return false;
        }
        if (source) {
            initializePlayback();
        } else {
            throw SOURCE_NOT_ATTACHED_ERROR;
        }
    }

    /**
     * The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.
     * This method will call play on the native Video Element.
     *
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function play() {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        if (!autoPlay || isPaused() && playbackInitialized) {
            playbackController.play();
        }
    }

    /**
     * This method will call pause on the native Video Element.
     *
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function pause() {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        playbackController.pause();
    }

    /**
     * Returns a Boolean that indicates whether the Video Element is paused.
     * @return {boolean}
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function isPaused() {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        return playbackController.isPaused();
    }

    /**
     * Sets the currentTime property of the attached video element.  If it is a live stream with a
     * timeShiftBufferLength, then the DVR window offset will be automatically calculated.
     *
     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected
     * @see {@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type or is NaN.
     * @memberof module:MediaPlayer
     * @instance
     */
    function seek(value) {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }

        (0, _SupervisorTools.checkParameterType)(value, 'number');

        if (isNaN(value)) {
            throw _Constants2.default.BAD_ARGUMENT_ERROR;
        }

        var s = playbackController.getIsDynamic() ? getDVRSeekOffset(value) : value;
        playbackController.seek(s);
    }

    /**
     * Returns a Boolean that indicates whether the media is in the process of seeking to a new position.
     * @return {boolean}
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function isSeeking() {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        return playbackController.isSeeking();
    }

    /**
     * Returns a Boolean that indicates whether the media is in the process of dynamic.
     * @return {boolean}
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function isDynamic() {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        return playbackController.getIsDynamic();
    }

    /**
     * Use this method to set the native Video Element's playback rate.
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
    function setPlaybackRate(value) {
        getVideoElement().playbackRate = value;
    }

    /**
     * Returns the current playback rate.
     * @returns {number}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getPlaybackRate() {
        return getVideoElement().playbackRate;
    }

    /**
     * Use this method to set the maximum catch up rate, as a percentage, for low latency live streams. In low latency mode,
     * when measured latency is higher/lower than the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),
     * dash.js increases/decreases playback rate respectively up to (+/-) the percentage defined with this method until target is reached.
     *
     * Valid values for catch up rate are in range 0-0.5 (0-50%). Set it to 0 to turn off live catch up feature.
     *
     * Note: Catch-up mechanism is only applied when playing low latency live streams.
     *
     * @param {number} value Percentage in which playback rate is increased/decreased when live catch up mechanism is activated.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
     * @default {number} 0.5
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type, or value is not between 0 and 0.5.
     * @instance
     */
    function setCatchUpPlaybackRate(value) {
        mediaPlayerModel.setCatchUpPlaybackRate(value);
    }

    /**
     * Returns the current catchup playback rate.
     * @returns {number}
     * @see {@link module:MediaPlayer#setCatchUpPlaybackRate setCatchUpPlaybackRate()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getCatchUpPlaybackRate() {
        return mediaPlayerModel.getCatchUpPlaybackRate();
    }

    /**
     * Use this method to set the minimum latency deviation allowed before activating catch-up mechanism. In low latency mode,
     * when the difference between the measured latency and the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),
     * as an absolute number, is higher than the one sets with this method, then dash.js increases/decreases
     * playback rate until target latency is reached.
     *
     * LowLatencyMinDrift should be provided in seconds, and it uses values between 0.0 and 0.5.
     *
     * Note: Catch-up mechanism is only applied when playing low latency live streams.
     *
     * @param {number} value Maximum difference between measured latency and the target one before applying playback rate modifications.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
     * @default {number} 0.05
     * @throws {@link module:MediaPlayer~PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR} if called with an invalid argument
     * @instance
     */
    function setLowLatencyMinDrift(value) {
        if (typeof value !== 'number' || isNaN(value) || value < 0.0 || value > 0.50) {
            throw PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR;
        }
        mediaPlayerModel.setLowLatencyMinDrift(value);
    }

    /**
     * Returns the current latency minimum allowed drift.
     * @returns {number}
     * @see {@link module:MediaPlayer#setLowLatencyMinDrift setLowLatencyMinDrift()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getLowLatencyMinDrift() {
        return mediaPlayerModel.getLowLatencyMinDrift();
    }

    /**
     * Use this method to set the maximum latency deviation allowed before dash.js to do a seeking to live position. In low latency mode,
     * when the difference between the measured latency and the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),
     * as an absolute number, is higher than the one sets with this method, then dash.js does a seek to live edge position minus
     * the target live delay.
     *
     * LowLatencyMaxDriftBeforeSeeking should be provided in seconds. If 0, then seeking operations won't be used for
     * fixing latency deviations.
     *
     * Note: Catch-up mechanism is only applied when playing low latency live streams.
     *
     * @param {number} value Maximum difference between measured latency and the target one before using seek to
     * fix drastically live latency deviations.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
     * @default {number} 0
     * @throws {@link module:MediaPlayer~PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR} if called with an invalid argument
     * @instance
     */
    function setLowLatencyMaxDriftBeforeSeeking(value) {
        if (typeof value !== 'number' || isNaN(value) || value < 0) {
            throw PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR;
        }
        mediaPlayerModel.setLowLatencyMaxDriftBeforeSeeking(value);
    }

    /**
     * Returns the maximum latency drift before applying a seek operation to reduce the latency.
     * @returns {number}
     * @see {@link module:MediaPlayer#setLowLatencyMaxDriftBeforeSeeking setLowLatencyMaxDriftBeforeSeeking()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getLowLatencyMaxDriftBeforeSeeking() {
        return mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking();
    }

    /**
     * Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.
     * @instance
     */
    function setMute(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        getVideoElement().muted = value;
    }

    /**
     * A Boolean that determines whether audio is muted.
     * @returns {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
    function isMuted() {
        return getVideoElement().muted;
    }

    /**
     * A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).
     * @param {number} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type, or is NaN or not between 0 and 1.
     * @instance
     */
    function setVolume(value) {
        if (typeof value !== 'number' || isNaN(value) || value < 0.0 || value > 1.0) {
            throw _Constants2.default.BAD_ARGUMENT_ERROR;
        }
        getVideoElement().volume = value;
    }

    /**
     * Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).
     * @returns {number}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getVolume() {
        return getVideoElement().volume;
    }

    /**
     * The length of the buffer for a given media type, in seconds. Valid media
     * types are "video", "audio" and "fragmentedText". If no type is passed
     * in, then the minimum of video, audio and fragmentedText buffer length is
     * returned. NaN is returned if an invalid type is requested, the
     * presentation does not contain that type, or if no arguments are passed
     * and the presentation does not include any adaption sets of valid media
     * type.
     *
     * @param {string} type - the media type of the buffer
     * @returns {number} The length of the buffer for the given media type, in
     *  seconds, or NaN
     * @memberof module:MediaPlayer
     * @instance
     */
    function getBufferLength(type) {
        var types = [_Constants2.default.VIDEO, _Constants2.default.AUDIO, _Constants2.default.FRAGMENTED_TEXT];
        if (!type) {
            var buffer = types.map(function (t) {
                return getTracksFor(t).length > 0 ? getDashMetrics().getCurrentBufferLevel(getMetricsFor(t)) : Number.MAX_VALUE;
            }).reduce(function (p, c) {
                return Math.min(p, c);
            });
            return buffer === Number.MAX_VALUE ? NaN : buffer;
        } else {
            if (types.indexOf(type) !== -1) {
                var _buffer = getDashMetrics().getCurrentBufferLevel(getMetricsFor(type));
                return _buffer ? _buffer : NaN;
            } else {
                logger.warn('getBufferLength requested for invalid type');
                return NaN;
            }
        }
    }

    /**
     * The timeShiftBufferLength (DVR Window), in seconds.
     *
     * @returns {number} The window of allowable play time behind the live point of a live stream.
     * @memberof module:MediaPlayer
     * @instance
     */
    function getDVRWindowSize() {
        var metric = getDVRInfoMetric();
        if (!metric) {
            return 0;
        }
        return metric.manifestInfo.DVRWindowSize;
    }

    /**
     * This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).
     * NOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method
     * which will calculate this value for you and set the video element's currentTime property all in one simple call.
     *
     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.
     * @returns {number} A value that is relative the available range within the timeShiftBufferLength (DVR Window).
     * @see {@link module:MediaPlayer#seek seek()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getDVRSeekOffset(value) {
        var metric = getDVRInfoMetric();
        if (!metric) {
            return 0;
        }

        var liveDelay = playbackController.getLiveDelay();

        var val = metric.range.start + value;

        if (val > metric.range.end - liveDelay) {
            val = metric.range.end - liveDelay;
        }

        return val;
    }

    /**
     * Current time of the playhead, in seconds.
     *
     * If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.
     * However if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.
     *
     * @param {string} streamId - The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.
     * @returns {number} The current playhead time of the media, or null.
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function time(streamId) {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        var t = getVideoElement().currentTime;

        if (streamId !== undefined) {
            t = streamController.getTimeRelativeToStreamId(t, streamId);
        } else if (playbackController.getIsDynamic()) {
            var metric = getDVRInfoMetric();
            t = metric === null ? 0 : duration() - (metric.range.end - metric.time);
        }

        return t;
    }

    /**
     * Duration of the media's playback, in seconds.
     *
     * @returns {number} The current duration of the media.
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function duration() {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        var d = getVideoElement().duration;

        if (playbackController.getIsDynamic()) {

            var metric = getDVRInfoMetric();
            var range = void 0;

            if (!metric) {
                return 0;
            }

            range = metric.range.end - metric.range.start;
            d = range < metric.manifestInfo.DVRWindowSize ? range : metric.manifestInfo.DVRWindowSize;
        }
        return d;
    }

    /**
     * Override duration of the media's playback, in seconds.
     * Example use: force early payback end if last fragment fails
     *
     * @param {string} d - duration in seconds
     * @memberof module:MediaPlayer
     * @instance
     */
    function setDuration(d) {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        streamController.setMediaDuration(d);
    }

    /**
     * Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.
     * Note - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.
     *
     * @returns {number} The current playhead time as UTC timestamp.
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function timeAsUTC() {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        if (time() < 0) {
            return NaN;
        }
        return getAsUTC(time());
    }

    /**
     * Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.
     * Note - this property only has meaning for live streams.
     *
     * @returns {number} The current duration as UTC timestamp.
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function durationAsUTC() {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }
        return getAsUTC(duration());
    }

    /*
    ---------------------------------------------------------------------------
         AUTO BITRATE
     ---------------------------------------------------------------------------
    */
    /**
     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum bitrate allowed.
     * If you set this property to a value lower than that currently playing, the switching engine will switch down to
     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play
     * that lowest bitrate.
     *
     * You can set or remove this bitrate cap at anytime before or during playback.  To clear this setting you must use the API
     * and set the value param to NaN.
     *
     * This feature is typically used to reserve higher bitrates for playback only when the player is in large or full-screen format.
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @param {number} value - Value in kbps representing the maximum bitrate allowed.
     * @memberof module:MediaPlayer
     * @instance
     */
    function setMaxAllowedBitrateFor(type, value) {
        abrController.setMaxAllowedBitrateFor(type, value);
    }

    /**
     * When switching multi-bitrate content (auto or manual mode) this property specifies the minimum bitrate allowed.
     * If you set this property to a value higher than that currently playing, the switching engine will switch up to
     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play
     * that lowest bitrate.
     *
     * You can set or remove this bitrate limit at anytime before or during playback. To clear this setting you must use the API
     * and set the value param to NaN.
     *
     * This feature is used to force higher quality playback.
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @param {number} value - Value in kbps representing the minimum bitrate allowed.
     * @memberof module:MediaPlayer
     * @instance
     */
    function setMinAllowedBitrateFor(type, value) {
        abrController.setMinAllowedBitrateFor(type, value);
    }

    /**
     * @param {string} type - 'video' or 'audio' are the type options.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setMaxAllowedBitrateFor setMaxAllowedBitrateFor()}
     * @instance
     */
    function getMaxAllowedBitrateFor(type) {
        return abrController.getMaxAllowedBitrateFor(type);
    }

    /**
     * Gets the top quality BitrateInfo checking portal limit and max allowed.
     *
     * It calls getTopQualityIndexFor internally
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @memberof module:MediaPlayer
     * @returns {BitrateInfo | null}
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function getTopBitrateInfoFor(type) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        return abrController.getTopBitrateInfoFor(type);
    }

    /**
     * @param {string} type - 'video' or 'audio' are the type options.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setMinAllowedBitrateFor setMinAllowedBitrateFor()}
     * @instance
     */
    function getMinAllowedBitrateFor(type) {
        return abrController.getMinAllowedBitrateFor(type);
    }

    /**
     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum representation allowed,
     * as a proportion of the size of the representation set.
     *
     * You can set or remove this cap at anytime before or during playback. To clear this setting you must use the API
     * and set the value param to NaN.
     *
     * If both this and maxAllowedBitrate are defined, maxAllowedBitrate is evaluated first, then maxAllowedRepresentation,
     * i.e. the lowest value from executing these rules is used.
     *
     * This feature is typically used to reserve higher representations for playback only when connected over a fast connection.
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @param {number} value - number between 0 and 1, where 1 is allow all representations, and 0 is allow only the lowest.
     * @memberof module:MediaPlayer
     * @instance
     */
    function setMaxAllowedRepresentationRatioFor(type, value) {
        abrController.setMaxAllowedRepresentationRatioFor(type, value);
    }

    /**
     * @param {string} type - 'video' or 'audio' are the type options.
     * @returns {number} The current representation ratio cap.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setMaxAllowedRepresentationRatioFor setMaxAllowedRepresentationRatioFor()}
     * @instance
     */
    function getMaxAllowedRepresentationRatioFor(type) {
        return abrController.getMaxAllowedRepresentationRatioFor(type);
    }

    /**
     * Gets the current download quality for media type video, audio or images. For video and audio types the ABR
     * rules update this value before every new download unless setAutoSwitchQualityFor(type, false) is called. For 'image'
     * type, thumbnails, there is no ABR algorithm and quality is set manually.
     *
     * @param {string} type - 'video', 'audio' or 'image' (thumbnails)
     * @returns {number} the quality index, 0 corresponding to the lowest bitrate
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}
     * @see {@link module:MediaPlayer#setQualityFor setQualityFor()}
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function getQualityFor(type) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        if (type === _Constants2.default.IMAGE) {
            var activeStream = getActiveStream();
            if (!activeStream) {
                return -1;
            }
            var thumbnailController = activeStream.getThumbnailController();
            if (!thumbnailController) {
                return -1;
            }
            return thumbnailController.getCurrentTrackIndex();
        }
        return abrController.getQualityFor(type, streamController.getActiveStreamInfo());
    }

    /**
     * Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.
     * This value will be overwritten by the ABR rules unless setAutoSwitchQualityFor(type, false) is called.
     *
     * @param {string} type - 'video', 'audio' or 'image'
     * @param {number} value - the quality index, 0 corresponding to the lowest bitrate
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}
     * @see {@link module:MediaPlayer#getQualityFor getQualityFor()}
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function setQualityFor(type, value) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        if (type === _Constants2.default.IMAGE) {
            var activeStream = getActiveStream();
            if (!activeStream) {
                return;
            }
            var thumbnailController = activeStream.getThumbnailController();
            if (thumbnailController) {
                thumbnailController.setTrackByIndex(value);
            }
        }
        abrController.setPlaybackQuality(type, streamController.getActiveStreamInfo(), value);
    }

    /**
     * Update the video element size variables
     * Should be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.
     *
     * Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
    function updatePortalSize() {
        abrController.setElementSize();
        abrController.setWindowResizeEventCalled(true);
    }

    /**
     * @memberof module:MediaPlayer
     * @instance
     */
    function getLimitBitrateByPortal() {
        return abrController.getLimitBitrateByPortal();
    }

    /**
     * Sets whether to limit the representation used based on the size of the playback area
     *
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
    function setLimitBitrateByPortal(value) {
        abrController.setLimitBitrateByPortal(value);
    }

    /**
     * @memberof module:MediaPlayer
     * @instance
     */
    function getUsePixelRatioInLimitBitrateByPortal() {
        return abrController.getUsePixelRatioInLimitBitrateByPortal();
    }

    /**
     * Sets whether to take into account the device's pixel ratio when defining the portal dimensions.
     * Useful on, for example, retina displays.
     *
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     * @default {boolean} false
     */
    function setUsePixelRatioInLimitBitrateByPortal(value) {
        abrController.setUsePixelRatioInLimitBitrateByPortal(value);
    }

    function setPortalScale(value) {
        abrController.setPortalScale(value);
    }

    function getPortalScale() {
        return abrController.getPortalScale();
    }

    /**
     * Use this method to explicitly set the starting bitrate for audio | video
     *
     * @param {string} type
     * @param {number} value - A value of the initial bitrate, kbps
     * @memberof module:MediaPlayer
     * @instance
     */
    function setInitialBitrateFor(type, value) {
        abrController.setInitialBitrateFor(type, value);
    }

    /**
     * @param {string} type
     * @returns {number} A value of the initial bitrate, kbps
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function getInitialBitrateFor(type) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR; //abrController.getInitialBitrateFor is overloaded with ratioDict logic that needs manifest force it to not be callable pre play.
        }
        return abrController.getInitialBitrateFor(type);
    }

    /**
     * @param {string} type
     * @param {number} value - A value of the initial Representation Ratio
     * @memberof module:MediaPlayer
     * @instance
     */
    function setInitialRepresentationRatioFor(type, value) {
        abrController.setInitialRepresentationRatioFor(type, value);
    }

    /**
     * @param {string} type
     * @returns {number} A value of the initial Representation Ratio
     * @memberof module:MediaPlayer
     * @instance
     */
    function getInitialRepresentationRatioFor(type) {
        return abrController.getInitialRepresentationRatioFor(type);
    }

    /**
     * @param {string} type - 'audio' | 'video'
     * @returns {boolean} Current state of adaptive bitrate switching
     * @memberof module:MediaPlayer
     * @instance
     */
    function getAutoSwitchQualityFor(type) {
        return abrController.getAutoSwitchBitrateFor(type);
    }

    /**
     * Set to false to switch off adaptive bitrate switching.
     *
     * @param {string} type - 'audio' | 'video'
     * @param {boolean} value
     * @default true
     * @memberof module:MediaPlayer
     * @instance
     */
    function setAutoSwitchQualityFor(type, value) {
        abrController.setAutoSwitchBitrateFor(type, value);
    }

    /**
     * Get the value of useDeadTimeLatency in AbrController. @see setUseDeadTimeLatencyForAbr
     *
     * @returns {boolean}
     *
     * @memberof module:MediaPlayer
     * @instance
     */
    function getUseDeadTimeLatencyForAbr() {
        return abrController.getUseDeadTimeLatency();
    }

    /**
     * Set the value of useDeadTimeLatency in AbrController. If true, only the download
     * portion will be considered part of the download bitrate and latency will be
     * regarded as static. If false, the reciprocal of the whole transfer time will be used.
     * Defaults to true.
     *
     * @param {boolean=} useDeadTimeLatency - True or false flag.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
    function setUseDeadTimeLatencyForAbr(useDeadTimeLatency) {
        abrController.setUseDeadTimeLatency(useDeadTimeLatency);
    }

    /*
    ---------------------------------------------------------------------------
         MEDIA PLAYER CONFIGURATION
     ---------------------------------------------------------------------------
    */
    /**
     * <p>Set to false to prevent stream from auto-playing when the view is attached.</p>
     *
     * @param {boolean} value
     * @default true
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.
     * @instance
     *
     */
    function setAutoPlay(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        autoPlay = value;
    }

    /**
     * @returns {boolean} The current autoPlay state.
     * @memberof module:MediaPlayer
     * @instance
     */
    function getAutoPlay() {
        return autoPlay;
    }

    /**
     * <p>Changing this value will lower or increase live stream latency.  The detected segment duration will be multiplied by this value
     * to define a time in seconds to delay a live stream from the live edge.</p>
     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>
     *
     * @param {number} value - Represents how many segment durations to delay the live stream.
     * @default 4
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.
     * @instance
     */
    function setLiveDelayFragmentCount(value) {
        mediaPlayerModel.setLiveDelayFragmentCount(value);
    }

    /**
     * <p>Equivalent in seconds of setLiveDelayFragmentCount</p>
     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>
     * <p>This value should be less than the manifest duration by a couple of segment durations to avoid playback issues</p>
     * <p>If set, this parameter will take precedence over setLiveDelayFragmentCount and manifest info</p>
     *
     * @param {number} value - Represents how many seconds to delay the live stream.
     * @default undefined
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value, if defined, is not number type.
     * @instance
     */
    function setLiveDelay(value) {
        mediaPlayerModel.setLiveDelay(value);
    }

    /**
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
     * @instance
     * @returns {number|undefined} Current live stream delay in seconds when previously set, or `undefined`
     */
    function getLiveDelay() {
        return mediaPlayerModel.getLiveDelay();
    }

    /**
     * @memberof module:MediaPlayer
     * @instance
     * @returns {number|NaN} Current live stream latency in seconds. It is the difference between current time and time position at the playback head.
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     */
    function getCurrentLiveLatency() {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }

        if (!playbackInitialized) {
            return NaN;
        }

        return playbackController.getCurrentLiveLatency();
    }

    /**
     * <p>Set to true if you would like to override the default live delay and honor the SuggestedPresentationDelay attribute in by the manifest.</p>
     * @param {boolean} value
     * @default false
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelayFragmentCount setLiveDelayFragmentCount()}
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.
     * @instance
     */
    function useSuggestedPresentationDelay(value) {
        mediaPlayerModel.setUseSuggestedPresentationDelay(value);
    }

    /**
     * Set to false if you would like to disable the last known bit rate from being stored during playback and used
     * to set the initial bit rate for subsequent playback within the expiration window.
     *
     * The default expiration is one hour, defined in milliseconds. If expired, the default initial bit rate (closest to 1000 kbps) will be used
     * for that session and a new bit rate will be stored during that session.
     *
     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.
     * @param {number=} ttl - (Optional) A value defined in milliseconds representing how long to cache the bit rate for. Time to live.
     * @default enable = True, ttl = 360000 (1 hour)
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, enable is not boolean type and, if defined, ttl is not a number or is NaN.
     * @instance
     *
     */
    function enableLastBitrateCaching(enable, ttl) {
        mediaPlayerModel.setLastBitrateCachingInfo(enable, ttl);
    }

    /**
     * Set to false if you would like to disable the last known lang for audio (or camera angle for video) from being stored during playback and used
     * to set the initial settings for subsequent playback within the expiration window.
     *
     * The default expiration is one hour, defined in milliseconds. If expired, the default settings will be used
     * for that session and a new settings will be stored during that session.
     *
     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.
     * @param {number=} [ttl] - (Optional) A value defined in milliseconds representing how long to cache the settings for. Time to live.
     * @default enable = True, ttl = 360000 (1 hour)
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, enable is not boolean type and, if defined, ttl is not a number or is NaN.
     * @instance
     *
     */
    function enableLastMediaSettingsCaching(enable, ttl) {
        mediaPlayerModel.setLastMediaSettingsCachingInfo(enable, ttl);
    }

    /**
     * Set to true if you would like dash.js to keep downloading fragments in the background
     * when the video element is paused.
     *
     * @default true
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.
     * @instance
     */
    function setScheduleWhilePaused(value) {
        mediaPlayerModel.setScheduleWhilePaused(value);
    }

    /**
     * Returns a boolean of the current state of ScheduleWhilePaused.
     * @returns {boolean}
     * @see {@link module:MediaPlayer#setScheduleWhilePaused setScheduleWhilePaused()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getScheduleWhilePaused() {
        return mediaPlayerModel.getScheduleWhilePaused();
    }

    /**
     * When enabled, after an ABR up-switch in quality, instead of requesting and appending the next fragment
     * at the end of the current buffer range it is requested and appended closer to the current time
     * When enabled, The maximum time to render a higher quality is current time + (1.5 * fragment duration).
     *
     * Note, When ABR down-switch is detected, we appended the lower quality at the end of the buffer range to preserve the
     * higher quality media for as long as possible.
     *
     * If enabled, it should be noted there are a few cases when the client will not replace inside buffer range but rather
     * just append at the end.  1. When the buffer level is less than one fragment duration 2.  The client
     * is in an Abandonment State due to recent fragment abandonment event.
     *
     * Known issues:
     * 1. In IE11 with auto switching off, if a user switches to a quality they can not download in time the
     * fragment may be appended in the same range as the playhead or even in the past, in IE11 it may cause a stutter
     * or stall in playback.
     *
     *
     * @param {boolean} value
     * @default {boolean} false
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.
     * @instance
     */
    function setFastSwitchEnabled(value) {
        //TODO we need to look at track switches for adaptation sets.  If always replace it works much like this but clears buffer. Maybe too many ways to do same thing.
        mediaPlayerModel.setFastSwitchEnabled(value);
    }

    /**
     * Disabled by default. Will return the current state of Fast Switch.
     * @return {boolean} Returns true if FastSwitch ABR is enabled.
     * @see {@link module:MediaPlayer#setFastSwitchEnabled setFastSwitchEnabled()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getFastSwitchEnabled() {
        return mediaPlayerModel.getFastSwitchEnabled();
    }

    /**
     * Sets the ABR strategy. Valid strategies are "abrDynamic", "abrBola" and "abrThroughput".
     * The ABR strategy can also be changed during a streaming session.
     * The call has no effect if an invalid method is passed.
     *
     * The BOLA strategy chooses bitrate based on current buffer level, with higher bitrates for higher buffer levels.
     * The Throughput strategy chooses bitrate based on the recent throughput history.
     * The Dynamic strategy switches smoothly between BOLA and Throughput in real time, playing to the strengths of both.
     *
     * @param {string} value
     * @default "abrDynamic"
     * @memberof module:MediaPlayer
     * @instance
     */
    function setABRStrategy(value) {
        mediaPlayerModel.setABRStrategy(value);
    }

    /**
     * Returns the current ABR strategy being used.
     * @return {string} "abrDynamic", "abrBola" or "abrThroughput"
     * @see {@link module:MediaPlayer#setABRStrategy setABRStrategy()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getABRStrategy() {
        return mediaPlayerModel.getABRStrategy();
    }

    /**
     * Enable/disable builtin dashjs ABR rules
     * @param {boolean} value
     * @default true
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.
     * @instance
     */
    function useDefaultABRRules(value) {
        mediaPlayerModel.setUseDefaultABRRules(value);
    }

    /**
     * Add a custom ABR Rule
     * Rule will be apply on next stream if a stream is being played
     *
     * @param {string} type - rule type (one of ['qualitySwitchRules','abandonFragmentRules'])
     * @param {string} rulename - name of rule (used to identify custom rule). If one rule of same name has been added, then existing rule will be updated
     * @param {object} rule - the rule object instance
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments.
     * @instance
     */
    function addABRCustomRule(type, rulename, rule) {
        mediaPlayerModel.addABRCustomRule(type, rulename, rule);
    }

    /**
     * Remove a custom ABR Rule
     *
     * @param {string} rulename - name of the rule to be removed
     * @memberof module:MediaPlayer
     * @instance
     */
    function removeABRCustomRule(rulename) {
        mediaPlayerModel.removeABRCustomRule(rulename);
    }

    /**
     * Remove all custom rules
     * @memberof module:MediaPlayer
     * @instance
     */
    function removeAllABRCustomRule() {
        mediaPlayerModel.removeABRCustomRule();
    }

    /**
     * Sets the moving average method used for smoothing throughput estimates. Valid methods are
     * "slidingWindow" and "ewma". The call has no effect if an invalid method is passed.
     *
     * The sliding window moving average method computes the average throughput using the last four segments downloaded.
     * If the stream is live (as opposed to VOD), then only the last three segments are used.
     * If wide variations in throughput are detected, the number of segments can be dynamically increased to avoid oscillations.
     *
     * The exponentially weighted moving average (EWMA) method computes the average using exponential smoothing.
     * Two separate estimates are maintained, a fast one with a three-second half life and a slow one with an eight-second half life.
     * The throughput estimate at any time is the minimum of the fast and slow estimates.
     * This allows a fast reaction to a bandwidth drop and prevents oscillations on bandwidth spikes.
     *
     * @param {string} value
     * @default {string} 'slidingWindow'
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not slidingWindow or ewma.
     * @instance
     */
    function setMovingAverageMethod(value) {
        mediaPlayerModel.setMovingAverageMethod(value);
    }

    /**
     * Return the current moving average method used for smoothing throughput estimates.
     * @return {string} Returns "slidingWindow" or "ewma".
     * @see {@link module:MediaPlayer#setMovingAverageMethod setMovingAverageMethod()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getMovingAverageMethod() {
        return mediaPlayerModel.getMovingAverageMethod();
    }

    /**
     * Returns if low latency mode is enabled. Disabled by default.
     * @return {boolean} true - if enabled
     * @see {@link module:MediaPlayer#setLowLatencyEnabled setLowLatencyEnabled()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getLowLatencyEnabled() {
        return mediaPlayerModel.getLowLatencyEnabled();
    }

    /**
     * Enables low latency mode for dynamic streams. If not specified, liveDelay is set to 3s of buffer.
     * Browser compatibility (Check row 'ReadableStream response body'): https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.
     * @instance
     */
    function setLowLatencyEnabled(value) {
        mediaPlayerModel.setLowLatencyEnabled(value);
    }

    /**
     * Sets the request timeout (in miliseconds) for requests sent via the HTTPLoader
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
    function setFragmentRequestTimeout(value) {
        mediaPlayerModel.setFragmentRequestTimeout(value);
    }

    /**
     * Gets the request timeout (in miliseconds) for requests sent via the HTTPLoader
     * @return {number} The active request timeout in miliseconds
     * @memberof module:MediaPlayer
     * @instance
     */
    function getFragmentRequestTimeout() {
        return mediaPlayerModel.getFragmentRequestTimeout();
    }

    /**
     * <p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.
     * If UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>
     * <p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.
     * This will allow the date header on the manifest to be used instead of a time server</p>
     * @param {string} schemeIdUri - <ul>
     * <li>urn:mpeg:dash:utc:http-head:2014</li>
     * <li>urn:mpeg:dash:utc:http-xsdate:2014</li>
     * <li>urn:mpeg:dash:utc:http-iso:2014</li>
     * <li>urn:mpeg:dash:utc:direct:2014</li>
     * </ul>
     * <p>Some specs referencing early ISO23009-1 drafts incorrectly use
     * 2012 in the URI, rather than 2014. support these for now.</p>
     * <ul>
     * <li>urn:mpeg:dash:utc:http-head:2012</li>
     * <li>urn:mpeg:dash:utc:http-xsdate:2012</li>
     * <li>urn:mpeg:dash:utc:http-iso:2012</li>
     * <li>urn:mpeg:dash:utc:direct:2012</li>
     * </ul>
     * @param {string} value - Path to a time source.
     * @default
     * <ul>
     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>
     *     <li>value:http://time.akamai.com/?iso&ms/li>
     * </ul>
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}
     * @instance
     */
    function addUTCTimingSource(schemeIdUri, value) {
        mediaPlayerModel.addUTCTimingSource(schemeIdUri, value);
    }

    /**
     * <p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the
     * entry to be removed from the array</p>
     * @param {string} schemeIdUri - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @param {string} value - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, schemeIdUri and value are not string type.
     * @instance
     */
    function removeUTCTimingSource(schemeIdUri, value) {
        mediaPlayerModel.removeUTCTimingSource(schemeIdUri, value);
    }

    /**
     * <p>Allows you to clear the stored array of time sources.</p>
     * <p>Example use: If you have exposed the Date header, calling this method
     * will allow the date header on the manifest to be used instead of the time server.</p>
     * <p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back
     * to using a binary search to discover the live edge</p>
     *
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}
     * @instance
     */
    function clearDefaultUTCTimingSources() {
        mediaPlayerModel.clearDefaultUTCTimingSources();
    }

    /**
     * <p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>
     *
     * @default
     * <ul>
     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>
     *     <li>value:http://time.akamai.com/?iso&ms</li>
     * </ul>
     *
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @instance
     */
    function restoreDefaultUTCTimingSources() {
        mediaPlayerModel.restoreDefaultUTCTimingSources();
    }

    /**
     * <p>Allows you to enable the use of the Date Header, if exposed with CORS, as a timing source for live edge detection. The
     * use of the date header will happen only after the other timing source that take precedence fail or are omitted as described.
     * {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()} </p>
     *
     * @param {boolean} value - true to enable
     * @default {boolean} True
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.
     * @instance
     */
    function enableManifestDateHeaderTimeSource(value) {
        mediaPlayerModel.setUseManifestDateHeaderTimeSource(value);
    }

    /**
     * This value influences the buffer pruning logic.
     * Allows you to modify the buffer that is kept in source buffer in seconds.
     * <pre>0|-----------bufferToPrune-----------|-----bufferToKeep-----|currentTime|</pre>
     *
     * @default 20 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
     */
    function setBufferToKeep(value) {
        mediaPlayerModel.setBufferToKeep(value);
    }

    /**
     * This value influences the buffer pruning logic.
     * Allows you to modify the buffer ahead of current time position that is kept in source buffer in seconds.
     * <pre>0|--------|currentTime|-----bufferAheadToKeep----|----bufferToPrune-----------|end|</pre>
     *
     * @default 80 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
     */
    function setBufferAheadToKeep(value) {
        mediaPlayerModel.setBufferAheadToKeep(value);
    }

    /**
     * This value influences the buffer pruning logic.
     * Allows you to modify the interval of pruning buffer in seconds.
     *
     * @default 10 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not a number type.
     * @instance
     */
    function setBufferPruningInterval(value) {
        mediaPlayerModel.setBufferPruningInterval(value);
    }

    /**
     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).
     *
     * When the time is set higher than the default you will have to wait longer
     * to see automatic bitrate switches but will have a larger buffer which
     * will increase stability.
     *
     * Note: The value set for Stable Buffer Time is not considered when Low Latency Mode is enabled.
     * When in Low Latency mode dash.js takes ownership of Stable Buffer Time value to minimize latency
     * that comes from buffer filling process.
     *
     * @default 12 seconds.
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
     */
    function setStableBufferTime(value) {
        mediaPlayerModel.setStableBufferTime(value);
    }

    /**
     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).
     *
     * When the time is set higher than the default you will have to wait longer
     * to see automatic bitrate switches but will have a larger buffer which
     * will increase stability.
     *
     * @default 12 seconds.
     * @memberof module:MediaPlayer
     * @instance
     */
    function getStableBufferTime() {
        return mediaPlayerModel.getStableBufferTime();
    }

    /**
     * The time that the internal buffer target will be set to once playing the top quality.
     * If there are multiple bitrates in your adaptation, and the media is playing at the highest
     * bitrate, then we try to build a larger buffer at the top quality to increase stability
     * and to maintain media quality.
     *
     * @default 30 seconds.
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
     */
    function setBufferTimeAtTopQuality(value) {
        mediaPlayerModel.setBufferTimeAtTopQuality(value);
    }

    /**
     * The time that the internal buffer target will be set to once playing the top quality.
     * If there are multiple bitrates in your adaptation, and the media is playing at the highest
     * bitrate, then we try to build a larger buffer at the top quality to increase stability
     * and to maintain media quality.
     *
     * @default 30 seconds.
     * @memberof module:MediaPlayer
     * @instance
     */
    function getBufferTimeAtTopQuality() {
        return mediaPlayerModel.getBufferTimeAtTopQuality();
    }

    /**
     * The time that the internal buffer target will be set to once playing the top quality for long form content.
     *
     * @default 60 seconds.
     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}
     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
     */
    function setBufferTimeAtTopQualityLongForm(value) {
        mediaPlayerModel.setBufferTimeAtTopQualityLongForm(value);
    }

    /**
     * The time that the internal buffer target will be set to once playing the top quality for long form content.
     *
     * @default 60 seconds.
     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}
     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getBufferTimeAtTopQualityLongForm() {
        return mediaPlayerModel.getBufferTimeAtTopQualityLongForm();
    }

    /**
     * The threshold which defines if the media is considered long form content.
     * This will directly affect the buffer targets when playing back at the top quality.
     *
     * @see {@link module:MediaPlayer#setBufferTimeAtTopQualityLongForm setBufferTimeAtTopQualityLongForm()}
     * @default 600 seconds (10 minutes).
     * @param {number} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
     */
    function setLongFormContentDurationThreshold(value) {
        mediaPlayerModel.setLongFormContentDurationThreshold(value);
    }

    /**
     * The overlap tolerance time, at both the head and the tail of segments, considered when doing time to segment conversions.
     *
     * This is used when calculating which of the loaded segments of a representation corresponds with a given time position.
     * Its value is never used for calculating the segment index in seeking operations in which it assumes overlap time threshold is zero.
     *
     * <pre>
     * |-o-|--- segment X ----|-o-|
     *                        |-o-|---- segment X+1 -----|-o-|
     *                                                   |-o-|---- segment X+2 -----|-o-|
     * </pre>
     * @default 0.05 seconds.
     * @param {number} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
    */
    function setSegmentOverlapToleranceTime(value) {
        mediaPlayerModel.setSegmentOverlapToleranceTime(value);
    }

    /**
     * For a given media type, the threshold which defines if the response to a fragment
     * request is coming from browser cache or not.
     * Valid media types are "video", "audio"
     *
     * @default 50 milliseconds for video fragment requests; 5 milliseconds for audio fragment requests.
     * @param {string} type 'video' or 'audio' are the type options.
     * @param {number} value Threshold value in milliseconds.
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, type not a string type and its value is not audio or video, value not number type.
     * @instance
     */
    function setCacheLoadThresholdForType(type, value) {
        mediaPlayerModel.setCacheLoadThresholdForType(type, value);
    }

    /**
     * A percentage between 0.0 and 1 to reduce the measured throughput calculations.
     * The default is 0.9. The lower the value the more conservative and restricted the
     * measured throughput calculations will be. please use carefully. This will directly
     * affect the ABR logic in dash.js
     *
     * @param {number} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
     */
    function setBandwidthSafetyFactor(value) {
        mediaPlayerModel.setBandwidthSafetyFactor(value);
    }

    /**
     * Returns the number of the current BandwidthSafetyFactor
     *
     * @return {number} value
     * @see {@link module:MediaPlayer#setBandwidthSafetyFactor setBandwidthSafetyFactor()}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getBandwidthSafetyFactor() {
        return mediaPlayerModel.getBandwidthSafetyFactor();
    }

    /**
     * Returns the average throughput computed in the ABR logic
     *
     * @param {string} type
     * @return {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
    function getAverageThroughput(type) {
        var throughputHistory = abrController.getThroughputHistory();
        return throughputHistory ? throughputHistory.getAverageThroughput(type) : 0;
    }

    /**
     * A timeout value in seconds, which during the ABRController will block switch-up events.
     * This will only take effect after an abandoned fragment event occurs.
     *
     * @default 10 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.
     * @instance
     */
    function setAbandonLoadTimeout(value) {
        mediaPlayerModel.setAbandonLoadTimeout(value);
    }

    /**
     * Total number of retry attempts that will occur on a fragment load before it fails.
     * Increase this value to a maximum in order to achieve an automatic playback resume
     * in case of completely lost internet connection.
     *
     * Note: This parameter is not taken into account when Low Latency Mode is enabled. For Low Latency
     * Playback dash.js takes control and sets a number of retry attempts that ensures playback stability.
     *
     * @default 3
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.
     * @instance
     */
    function setFragmentLoaderRetryAttempts(value) {
        mediaPlayerModel.setRetryAttemptsForType(_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, value);
    }

    /**
     * Time in milliseconds of which to reload a failed fragment load attempt.
     *
     * @default 1000 milliseconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.
     * @instance
     */
    function setFragmentLoaderRetryInterval(value) {
        mediaPlayerModel.setRetryIntervalForType(_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, value);
    }

    /**
     * Total number of retry attempts that will occur on a manifest load before it fails.
     *
     * @default 4
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
    function setManifestLoaderRetryAttempts(value) {
        mediaPlayerModel.setRetryAttemptsForType(_HTTPRequest.HTTPRequest.MPD_TYPE, value);
    }

    /**
     * Time in milliseconds of which to reload a failed manifest load attempt.
     *
     * @default 1000 milliseconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
    function setManifestLoaderRetryInterval(value) {
        mediaPlayerModel.setRetryIntervalForType(_HTTPRequest.HTTPRequest.MPD_TYPE, value);
    }

    /**
     * Sets whether withCredentials on XHR requests for a particular request
     * type is true or false
     *
     * @default false
     * @param {string} type - one of HTTPRequest.*_TYPE
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
    function setXHRWithCredentialsForType(type, value) {
        mediaPlayerModel.setXHRWithCredentialsForType(type, value);
    }

    /**
     * Gets whether withCredentials on XHR requests for a particular request
     * type is true or false
     *
     * @param {string} type - one of HTTPRequest.*_TYPE
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getXHRWithCredentialsForType(type) {
        return mediaPlayerModel.getXHRWithCredentialsForType(type);
    }

    /**
     * Sets whether player should jump small gaps (discontinuities) in the buffer.
     *
     * @param {boolean} value
     * @default false
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.
     * @instance
     *
     */
    function setJumpGaps(value) {
        mediaPlayerModel.setJumpGaps(value);
    }

    /**
     * Gets current status of jump gaps feature.
     * @returns {boolean} The current jump gaps state.
     * @memberof module:MediaPlayer
     * @instance
     */
    function getJumpGaps() {
        return mediaPlayerModel.getJumpGaps();
    }

    /**
     * Time in seconds for a gap to be considered small.
     *
     * @param {number} value
     * @default 0.8
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.
     * @instance
     *
     */
    function setSmallGapLimit(value) {
        mediaPlayerModel.setSmallGapLimit(value);
    }

    /**
     * Time in seconds for a gap to be considered small.
     * @returns {boolean} Current small gap limit
     * @memberof module:MediaPlayer
     * @instance
     */
    function getSmallGapLimit() {
        return mediaPlayerModel.getSmallGapLimit();
    }

    /**
     * For live streams, set the interval-frequency in milliseconds at which
     * dash.js will check if the current manifest is still processed before
     * downloading the next manifest once the minimumUpdatePeriod time has
     * expired.
     * @param {int} value
     * @default 100
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.
     * @instance
     * @see {@link module:MediaPlayer#getManifestUpdateRetryInterval getManifestUpdateRetryInterval()}
     *
     */
    function setManifestUpdateRetryInterval(value) {
        mediaPlayerModel.setManifestUpdateRetryInterval(value);
    }

    /**
     * For live streams, get the interval-frequency in milliseconds at which
     * dash.js will check if the current manifest is still processed before
     * downloading the next manifest once the minimumUpdatePeriod time has
     * expired.
     * @returns {int} Current retry delay for manifest update
     * @memberof module:MediaPlayer
     * @instance
     * @see {@link module:MediaPlayer#setManifestUpdateRetryInterval setManifestUpdateRetryInterval()}
     */
    function getManifestUpdateRetryInterval() {
        return mediaPlayerModel.getManifestUpdateRetryInterval();
    }

    /*
    ---------------------------------------------------------------------------
         METRICS
     ---------------------------------------------------------------------------
    */
    /**
     * Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics
     * stored in dash.js
     *
     * @see {@link module:DashMetrics}
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getDashMetrics() {
        return dashMetrics;
    }

    /**
     *
     * @param {string} type
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getMetricsFor(type) {
        return metricsModel.getReadOnlyMetricsFor(type);
    }
    /*
    ---------------------------------------------------------------------------
         TEXT MANAGEMENT
     ---------------------------------------------------------------------------
    */
    /**
     * Set default language for text. If default language is not one of text tracks, dash will choose the first one.
     *
     * @param {string} lang - default language
     * @memberof module:MediaPlayer
     * @instance
     */
    function setTextDefaultLanguage(lang) {
        if (textController === undefined) {
            textController = (0, _TextController2.default)(context).getInstance();
        }

        textController.setTextDefaultLanguage(lang);
    }

    /**
     * Get default language for text.
     *
     * @return {string} the default language if it has been set using setTextDefaultLanguage
     * @memberof module:MediaPlayer
     * @instance
     */
    function getTextDefaultLanguage() {
        if (textController === undefined) {
            textController = (0, _TextController2.default)(context).getInstance();
        }

        return textController.getTextDefaultLanguage();
    }

    /**
     * Set enabled default state.
     * This is used to enable/disable text when a file is loaded.
     * During playback, use enableText to enable text for the file
     *
     * @param {boolean} enable - true to enable text, false otherwise
     * @memberof module:MediaPlayer
     * @instance
     */
    function setTextDefaultEnabled(enable) {
        if (textController === undefined) {
            textController = (0, _TextController2.default)(context).getInstance();
        }

        textController.setTextDefaultEnabled(enable);
    }

    /**
     * Get enabled default state.
     *
     * @return {boolean}  default enable state
     * @memberof module:MediaPlayer
     * @instance
     */
    function getTextDefaultEnabled() {
        if (textController === undefined) {
            textController = (0, _TextController2.default)(context).getInstance();
        }

        return textController.getTextDefaultEnabled();
    }

    /**
     * Enable/disable text
     * When enabling text, dash will choose the previous selected text track
     *
     * @param {boolean} enable - true to enable text, false otherwise (same as setTextTrack(-1))
     * @memberof module:MediaPlayer
     * @instance
     */
    function enableText(enable) {
        if (textController === undefined) {
            textController = (0, _TextController2.default)(context).getInstance();
        }

        textController.enableText(enable);
    }

    /**
     * Enable/disable text
     * When enabling dash will keep downloading and process fragmented text tracks even if all tracks are in mode "hidden"
     *
     * @param {boolean} enable - true to enable text streaming even if all text tracks are hidden.
     * @memberof module:MediaPlayer
     * @instance
     */
    function enableForcedTextStreaming(enable) {
        if (textController === undefined) {
            textController = (0, _TextController2.default)(context).getInstance();
        }

        textController.enableForcedTextStreaming(enable);
    }

    /**
     * Return if text is enabled
     *
     * @return {boolean} return true if text is enabled, false otherwise
     * @memberof module:MediaPlayer
     * @instance
     */
    function isTextEnabled() {
        if (textController === undefined) {
            textController = (0, _TextController2.default)(context).getInstance();
        }

        return textController.isTextEnabled();
    }

    /**
     * Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to
     * set the track mode on the video object to switch a track when using this method.
     * @param {number} idx - Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.
     * @see {@link MediaPlayerEvents#event:TEXT_TRACK_ADDED dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}
     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function setTextTrack(idx) {
        if (!playbackInitialized) {
            throw PLAYBACK_NOT_INITIALIZED_ERROR;
        }

        if (textController === undefined) {
            textController = (0, _TextController2.default)(context).getInstance();
        }

        textController.setTextTrack(idx);
    }

    function getCurrentTextTrackIndex() {
        var idx = NaN;
        if (textController) {
            idx = textController.getCurrentTrackIdx();
        }
        return idx;
    }

    /**
     * This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be
     * displayed on top of other html elements. Default value is 'false' (z-index is not set).
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
    function displayCaptionsOnTop(value) {
        var textTracks = (0, _TextTracks2.default)(context).getInstance();
        textTracks.setConfig({
            videoModel: videoModel
        });
        textTracks.initialize();
        textTracks.displayCConTop(value);
    }

    /*
    ---------------------------------------------------------------------------
         VIDEO ELEMENT MANAGEMENT
     ---------------------------------------------------------------------------
    */

    /**
     * Returns instance of Video Element that was attached by calling attachView()
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function
     * @instance
     */
    function getVideoElement() {
        if (!videoModel.getElement()) {
            throw ELEMENT_NOT_ATTACHED_ERROR;
        }
        return videoModel.getElement();
    }

    /**
     * Use this method to attach an HTML5 element that wraps the video element.
     *
     * @param {HTMLElement} container - The HTML5 element containing the video element.
     * @memberof module:MediaPlayer
     * @instance
     * @deprecated
     */
    function attachVideoContainer(container) {
        /* jshint ignore:line */
        logger.warn('attachVideoContainer method has been deprecated and will be removed in dash.js v3.0.0');
    }

    /**
     * Use this method to attach an HTML5 VideoElement for dash.js to operate upon.
     *
     * @param {Object} element - An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     * @instance
     */
    function attachView(element) {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }

        videoModel.setElement(element);

        if (element) {
            detectProtection();
            detectMetricsReporting();
            detectMss();

            if (streamController) {
                streamController.switchToVideoElement(savedElementAttributes.seekTime);
            }
        }

        if (playbackInitialized) {
            //Reset if we have been playing before, so this is a new element.
            resetPlaybackControllers();
        }

        initializePlayback();
    }

    function detachView() {
        var element = videoModel.getElement();
        if (element) {
            savedElementAttributes.seekTime = playbackController.getTime();
            streamController.detachVideoElement();
            playbackController.reset();
            playbackController.setConfig({
                streamController: streamController,
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                manifestModel: manifestModel,
                mediaPlayerModel: mediaPlayerModel,
                dashManifestModel: dashManifestModel,
                adapter: adapter,
                videoModel: videoModel
            });
        }
    }

    function reattachView(element) {
        if (element) {
            videoModel.setElement(element);
            detectProtection();
            detectMetricsReporting();
            detectMss();

            if (streamController) {
                streamController.switchToVideoElement(savedElementAttributes.seekTime);
            }
        }
    }

    /**
     * Returns instance of Div that was attached by calling attachTTMLRenderingDiv()
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
    function getTTMLRenderingDiv() {
        return videoModel ? videoModel.getTTMLRenderingDiv() : null;
    }

    /**
     * Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.
     *
     * @param {HTMLDivElement} div - An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function
     * @instance
     */
    function attachTTMLRenderingDiv(div) {
        if (!videoModel.getElement()) {
            throw ELEMENT_NOT_ATTACHED_ERROR;
        }
        videoModel.setTTMLRenderingDiv(div);
    }

    /*
    ---------------------------------------------------------------------------
         STREAM AND TRACK MANAGEMENT
     ---------------------------------------------------------------------------
    */
    /**
     * @param {string} type
     * @returns {Array}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function getBitrateInfoListFor(type) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        var stream = getActiveStream();
        return stream ? stream.getBitrateListFor(type) : [];
    }

    /**
     * This method returns the list of all available streams from a given manifest
     * @param {Object} manifest
     * @returns {Array} list of {@link StreamInfo}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function getStreamsFromManifest(manifest) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        return adapter.getStreamsInfo(manifest);
    }

    /**
     * This method returns the list of all available tracks for a given media type
     * @param {string} type
     * @returns {Array} list of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function getTracksFor(type) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        var streamInfo = streamController.getActiveStreamInfo();
        return mediaController.getTracksFor(type, streamInfo);
    }

    /**
     * This method returns the list of all available tracks for a given media type and streamInfo from a given manifest
     * @param {string} type
     * @param {Object} manifest
     * @param {Object} streamInfo
     * @returns {Array}  list of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function getTracksForTypeFromManifest(type, manifest, streamInfo) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }

        streamInfo = streamInfo || adapter.getStreamsInfo(manifest, 1)[0];

        return streamInfo ? adapter.getAllMediaInfoForType(streamInfo, type, manifest) : [];
    }

    /**
     * @param {string} type
     * @returns {Object|null} {@link MediaInfo}
     *
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function getCurrentTrackFor(type) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        var streamInfo = streamController.getActiveStreamInfo();
        return mediaController.getCurrentTrackFor(type, streamInfo);
    }

    /**
     * This method allows to set media settings that will be used to pick the initial track. Format of the settings
     * is following:
     * {lang: langValue,
     *  viewpoint: viewpointValue,
     *  audioChannelConfiguration: audioChannelConfigurationValue,
     *  accessibility: accessibilityValue,
     *  role: roleValue}
     *
     *
     * @param {string} type
     * @param {Object} value
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     * @instance
     */
    function setInitialMediaSettingsFor(type, value) {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }
        mediaController.setInitialSettings(type, value);
    }

    /**
     * This method returns media settings that is used to pick the initial track. Format of the settings
     * is following:
     * {lang: langValue,
     *  viewpoint: viewpointValue,
     *  audioChannelConfiguration: audioChannelConfigurationValue,
     *  accessibility: accessibilityValue,
     *  role: roleValue}
     * @param {string} type
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     * @instance
     */
    function getInitialMediaSettingsFor(type) {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }
        return mediaController.getInitialSettings(type);
    }

    /**
     * @param {MediaInfo} track - instance of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @instance
     */
    function setCurrentTrack(track) {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        mediaController.setTrack(track);
    }

    /**
     * This method returns the current track switch mode.
     *
     * @param {string} type
     * @returns {string} mode
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     * @instance
     */
    function getTrackSwitchModeFor(type) {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }
        return mediaController.getSwitchMode(type);
    }

    /**
     * This method sets the current track switch mode. Available options are:
     *
     * MediaController.TRACK_SWITCH_MODE_NEVER_REPLACE
     * (used to forbid clearing the buffered data (prior to current playback position) after track switch.
     * Defers to fastSwitchEnabled for placement of new data. Default for video)
     *
     * MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE
     * (used to clear the buffered data (prior to current playback position) after track switch. Default for audio)
     *
     * @param {string} type
     * @param {string} mode
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     * @instance
     */
    function setTrackSwitchModeFor(type, mode) {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }
        mediaController.setSwitchMode(type, mode);
    }

    /**
     * This method sets the selection mode for the initial track. This mode defines how the initial track will be selected
     * if no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:
     *
     * MediaController.TRACK_SELECTION_MODE_HIGHEST_BITRATE
     * this mode makes the player select the track with a highest bitrate. This mode is a default mode.
     *
     * MediaController.TRACK_SELECTION_MODE_WIDEST_RANGE
     * this mode makes the player select the track with a widest range of bitrates
     *
     * @param {string} mode
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     * @instance
     */
    function setSelectionModeForInitialTrack(mode) {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }
        mediaController.setSelectionModeForInitialTrack(mode);
    }

    /**
     * This method returns the track selection mode.
     *
     * @returns {string} mode
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     * @instance
     */
    function getSelectionModeForInitialTrack() {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }
        return mediaController.getSelectionModeForInitialTrack();
    }

    /**
     * Get the portal limit minimum (in kbps). Below this bitrate, the portal size will not restrict the representation chosen.
     *
     * @returns {number} bitrate
     * @memberof module:MediaPlayer
     * @instance
     */
    function getPortalLimitMinimum() {
        return abrController.getPortalLimitMinimum();
    }

    /**
     * Set the portal limit minimum (in kbps). Below this bitrate, the portal size will not restrict the representation chosen.
     *
     * @param {number} bitrate
     * @memberof module:MediaPlayer
     * @instance
     */
    function setPortalLimitMinimum(bitrate) {
        abrController.setPortalLimitMinimum(bitrate);
    }

    /*
    ---------------------------------------------------------------------------
         PROTECTION MANAGEMENT
     ---------------------------------------------------------------------------
    /**
     * Detects if Protection is included and returns an instance of ProtectionController.js
     * @memberof module:MediaPlayer
     * @instance
     */
    function getProtectionController() {
        return detectProtection();
    }

    /**
     * Will override dash.js protection controller.
     * @param {ProtectionController} value - valid protection controller instance.
     * @memberof module:MediaPlayer
     * @instance
     */
    function attachProtectionController(value) {
        protectionController = value;
    }

    /**
     * Sets Protection Data required to setup the Protection Module (DRM). Protection Data must
     * be set before initializing MediaPlayer or, once initialized, before PROTECTION_CREATED event is fired.
     * @see {@link module:MediaPlayer#initialize initialize()}
     * @see {@link ProtectionEvents#event:PROTECTION_CREATED dashjs.Protection.events.PROTECTION_CREATED}
     * @param {ProtectionData} value - object containing
     * property names corresponding to key system name strings and associated
     * values being instances of.
     * @memberof module:MediaPlayer
     * @instance
     */
    function setProtectionData(value) {
        protectionData = value;

        // Propagate changes in case StreamController is already created
        if (streamController) {
            streamController.setProtectionData(protectionData);
        }
    }

    /*
    ---------------------------------------------------------------------------
         THUMBNAILS MANAGEMENT
     ---------------------------------------------------------------------------
    */

    /**
     * Return the thumbnail at time position.
     * @returns {Thumbnail|null} - Thumbnail for the given time position. It returns null in case there are is not a thumbnails representation or
     * if it doesn't contain a thumbnail for the given time position.
     * @param {number} time - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected
     * @param {function} callback - A Callback function provided when retrieving thumbnail
     * @memberof module:MediaPlayer
     * @instance
     */
    function getThumbnail(time, callback) {
        if (time < 0) {
            return null;
        }
        var s = playbackController.getIsDynamic() ? getDVRSeekOffset(time) : time;
        var stream = streamController.getStreamForTime(s);
        if (stream === null) {
            return null;
        }

        var thumbnailController = stream.getThumbnailController();
        if (!thumbnailController) {
            return null;
        }

        var timeInPeriod = streamController.getTimeRelativeToStreamId(s, stream.getId());
        return thumbnailController.get(timeInPeriod, callback);
    }

    /*
    ---------------------------------------------------------------------------
         PROTECTION CONTROLLER MANAGEMENT
     ---------------------------------------------------------------------------
    */

    /**
     * Set the value for the ProtectionController and MediaKeys life cycle. If true, the
     * ProtectionController and then created MediaKeys and MediaKeySessions will be preserved during
     * the MediaPlayer lifetime.
     *
     * @param {boolean=} value - True or false flag.
     *
     * @memberof module:MediaPlayer
     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.
     * @instance
     */
    function keepProtectionMediaKeys(value) {
        mediaPlayerModel.setKeepProtectionMediaKeys(value);
    }

    /*
    ---------------------------------------------------------------------------
         TOOLS AND OTHERS FUNCTIONS
     ---------------------------------------------------------------------------
    */
    /**
     * Allows application to retrieve a manifest.  Manifest loading is asynchro
     * nous and
     * requires the app-provided callback function
     *
     * @param {string} url - url the manifest url
     * @param {function} callback - A Callback function provided when retrieving manifests
     * @memberof module:MediaPlayer
     * @instance
     */
    function retrieveManifest(url, callback) {
        var manifestLoader = createManifestLoader();
        var self = this;

        var handler = function handler(e) {
            if (!e.error) {
                callback(e.manifest);
            } else {
                callback(null, e.error);
            }
            eventBus.off(_Events2.default.INTERNAL_MANIFEST_LOADED, handler, self);
            manifestLoader.reset();
        };

        eventBus.on(_Events2.default.INTERNAL_MANIFEST_LOADED, handler, self);

        uriFragmentModel.initialize(url);
        manifestLoader.load(url);
    }

    /**
     * Returns the source string or manifest that was attached by calling attachSource()
     * @returns {string | manifest}
     * @memberof module:MediaPlayer
     * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function
     * @instance
     */
    function getSource() {
        if (!source) {
            throw SOURCE_NOT_ATTACHED_ERROR;
        }
        return source;
    }

    /**
     * Use this method to set a source URL to a valid MPD manifest file OR
     * a previously downloaded and parsed manifest object.  Optionally, can
     * also provide protection information
     *
     * @param {string|Object} urlOrManifest - A URL to a valid MPD manifest file, or a
     * parsed manifest object.
     *
     *
     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function
     *
     * @memberof module:MediaPlayer
     * @instance
     */
    function attachSource(urlOrManifest) {
        if (!mediaPlayerInitialized) {
            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
        }

        if (typeof urlOrManifest === 'string') {
            uriFragmentModel.initialize(urlOrManifest);
        }

        source = urlOrManifest;

        if (streamingInitialized || playbackInitialized) {
            resetPlaybackControllers();
        }

        if (isReady()) {
            initializePlayback();
        }
    }

    /**
     *  Reload the manifest that the player is currently using.
     *
     *  @memberof module:MediaPlayer
     *  @instance
     */
    function refreshManifest() {
        streamController.refreshManifest();
    }

    /**
     * A utility methods which converts UTC timestamp value into a valid time and date string.
     *
     * @param {number} time - UTC timestamp to be converted into date and time.
     * @param {string} locales - a region identifier (i.e. en_US).
     * @param {boolean} hour12 - 12 vs 24 hour. Set to true for 12 hour time formatting.
     * @param {boolean} withDate - default is false. Set to true to append current date to UTC time format.
     * @returns {string} A formatted time and date string.
     * @memberof module:MediaPlayer
     * @instance
     */
    function formatUTC(time, locales, hour12) {
        var withDate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        var dt = new Date(time * 1000);
        var d = dt.toLocaleDateString(locales);
        var t = dt.toLocaleTimeString(locales, {
            hour12: hour12
        });
        return withDate ? t + ' ' + d : t;
    }

    /**
     * A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).
     *
     * @param {number} value - A number in seconds to be converted into a formatted time code.
     * @returns {string} A formatted time code string.
     * @memberof module:MediaPlayer
     * @instance
     */
    function convertToTimeCode(value) {
        value = Math.max(value, 0);

        var h = Math.floor(value / 3600);
        var m = Math.floor(value % 3600 / 60);
        var s = Math.floor(value % 3600 % 60);
        return (h === 0 ? '' : h < 10 ? '0' + h.toString() + ':' : h.toString() + ':') + (m < 10 ? '0' + m.toString() : m.toString()) + ':' + (s < 10 ? '0' + s.toString() : s.toString());
    }

    /**
     * This method should be used to extend or replace internal dash.js objects.
     * There are two ways to extend dash.js (determined by the override argument):
     * <ol>
     * <li>If you set override to true any public method or property in your custom object will
     * override the dash.js parent object's property(ies) and will be used instead but the
     * dash.js parent module will still be created.</li>
     *
     * <li>If you set override to false your object will completely replace the dash.js object.
     * (Note: This is how it was in 1.x of Dash.js with Dijon).</li>
     * </ol>
     * <b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>
     * <ul>
     * <li><b>this.context</b> - can be used to pass context for singleton access.</li>
     * <li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>
     * <li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>
     * </ul>
     * <b>You must call extend before you call initialize</b>
     * @see {@link module:MediaPlayer#initialize initialize()}
     * @param {string} parentNameString - name of parent module
     * @param {Object} childInstance - overriding object
     * @param {boolean} override - replace only some methods (true) or the whole object (false)
     * @memberof module:MediaPlayer
     * @instance
     */
    function extend(parentNameString, childInstance, override) {
        _FactoryMaker2.default.extend(parentNameString, childInstance, override, context);
    }

    /**
     * This method returns the active stream
     *
     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function
     * @memberof module:MediaPlayer
     * @instance
     */
    function getActiveStream() {
        if (!streamingInitialized) {
            throw STREAMING_NOT_INITIALIZED_ERROR;
        }
        var streamInfo = streamController.getActiveStreamInfo();
        return streamInfo ? streamController.getStreamById(streamInfo.id) : null;
    }

    //***********************************
    // PRIVATE METHODS
    //***********************************

    function resetPlaybackControllers() {
        playbackInitialized = false;
        streamingInitialized = false;
        adapter.reset();
        streamController.reset();
        playbackController.reset();
        abrController.reset();
        mediaController.reset();
        textController.reset();
        if (protectionController) {
            if (mediaPlayerModel.getKeepProtectionMediaKeys()) {
                protectionController.stop();
            } else {
                protectionController.reset();
                protectionController = null;
                detectProtection();
            }
        }
        videoModel.reset();
    }

    function createPlaybackControllers() {
        // creates or get objects instances
        var manifestLoader = createManifestLoader();

        if (!streamController) {
            streamController = (0, _StreamController2.default)(context).getInstance();
        }

        // configure controllers
        mediaController.setConfig({
            domStorage: domStorage
        });

        streamController.setConfig({
            capabilities: capabilities,
            manifestLoader: manifestLoader,
            manifestModel: manifestModel,
            dashManifestModel: dashManifestModel,
            mediaPlayerModel: mediaPlayerModel,
            protectionController: protectionController,
            adapter: adapter,
            metricsModel: metricsModel,
            dashMetrics: dashMetrics,
            errHandler: errHandler,
            timelineConverter: timelineConverter,
            videoModel: videoModel,
            playbackController: playbackController,
            domStorage: domStorage,
            abrController: abrController,
            mediaController: mediaController,
            textController: textController
        });

        playbackController.setConfig({
            streamController: streamController,
            metricsModel: metricsModel,
            dashMetrics: dashMetrics,
            manifestModel: manifestModel,
            mediaPlayerModel: mediaPlayerModel,
            dashManifestModel: dashManifestModel,
            adapter: adapter,
            videoModel: videoModel,
            timelineConverter: timelineConverter,
            uriFragmentModel: uriFragmentModel
        });

        abrController.setConfig({
            streamController: streamController,
            domStorage: domStorage,
            mediaPlayerModel: mediaPlayerModel,
            metricsModel: metricsModel,
            dashMetrics: dashMetrics,
            manifestModel: manifestModel,
            videoModel: videoModel,
            adapter: adapter
        });
        abrController.createAbrRulesCollection();

        textController.setConfig({
            errHandler: errHandler,
            manifestModel: manifestModel,
            dashManifestModel: dashManifestModel,
            mediaController: mediaController,
            streamController: streamController,
            videoModel: videoModel
        });

        // initialises controller
        streamController.initialize(autoPlay, protectionData);
    }

    function createManifestLoader() {
        return (0, _ManifestLoader2.default)(context).create({
            errHandler: errHandler,
            metricsModel: metricsModel,
            mediaPlayerModel: mediaPlayerModel,
            requestModifier: (0, _RequestModifier2.default)(context).getInstance(),
            mssHandler: mssHandler
        });
    }

    function detectProtection() {
        if (protectionController) {
            return protectionController;
        }
        // do not require Protection as dependencies as this is optional and intended to be loaded separately
        var Protection = dashjs.Protection; /* jshint ignore:line */
        if (typeof Protection === 'function') {
            //TODO need a better way to register/detect plugin components
            var protection = Protection(context).create();
            _Events2.default.extend(Protection.events);
            _MediaPlayerEvents2.default.extend(Protection.events, {
                publicOnly: true
            });
            _Errors2.default.extend(Protection.errors);
            if (!capabilities) {
                capabilities = (0, _Capabilities2.default)(context).getInstance();
            }
            protectionController = protection.createProtectionSystem({
                debug: debug,
                errHandler: errHandler,
                videoModel: videoModel,
                capabilities: capabilities,
                eventBus: eventBus,
                events: _Events2.default,
                BASE64: _base2.default,
                constants: _Constants2.default
            });
            return protectionController;
        }

        return null;
    }

    function detectMetricsReporting() {
        if (metricsReportingController) {
            return;
        }
        // do not require MetricsReporting as dependencies as this is optional and intended to be loaded separately
        var MetricsReporting = dashjs.MetricsReporting; /* jshint ignore:line */
        if (typeof MetricsReporting === 'function') {
            //TODO need a better way to register/detect plugin components
            var metricsReporting = MetricsReporting(context).create();

            metricsReportingController = metricsReporting.createMetricsReporting({
                debug: debug,
                eventBus: eventBus,
                mediaElement: getVideoElement(),
                dashManifestModel: dashManifestModel,
                metricsModel: metricsModel,
                events: _Events2.default,
                constants: _Constants2.default,
                metricsConstants: _MetricsConstants2.default
            });
        }
    }

    function detectMss() {
        if (mssHandler) {
            return;
        }
        // do not require MssHandler as dependencies as this is optional and intended to be loaded separately
        var MssHandler = dashjs.MssHandler; /* jshint ignore:line */
        if (typeof MssHandler === 'function') {
            //TODO need a better way to register/detect plugin components
            _Errors2.default.extend(MssHandler.errors);
            mssHandler = MssHandler(context).create({
                eventBus: eventBus,
                mediaPlayerModel: mediaPlayerModel,
                metricsModel: metricsModel,
                manifestModel: manifestModel,
                playbackController: playbackController,
                protectionController: protectionController,
                baseURLController: (0, _BaseURLController2.default)(context).getInstance(),
                errHandler: errHandler,
                events: _Events2.default,
                constants: _Constants2.default,
                debug: debug,
                initSegmentType: _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE,
                BASE64: _base2.default,
                ISOBoxer: _codemIsoboxer2.default
            });
        }
    }

    function getDVRInfoMetric() {
        var metric = metricsModel.getReadOnlyMetricsFor(_Constants2.default.VIDEO) || metricsModel.getReadOnlyMetricsFor(_Constants2.default.AUDIO);
        return dashMetrics.getCurrentDVRInfo(metric);
    }

    function getAsUTC(valToConvert) {
        var metric = getDVRInfoMetric();
        var availableFrom = void 0,
            utcValue = void 0;

        if (!metric) {
            return 0;
        }
        availableFrom = metric.manifestInfo.availableFrom.getTime() / 1000;
        utcValue = valToConvert + (availableFrom + metric.range.start);
        return utcValue;
    }

    function initializePlayback() {
        if (!streamingInitialized && source) {
            streamingInitialized = true;
            logger.info('Streaming Initialized');
            createPlaybackControllers();

            if (typeof source === 'string') {
                streamController.load(source);
            } else {
                streamController.loadWithManifest(source);
            }
        }

        if (!playbackInitialized && isReady()) {
            playbackInitialized = true;
            logger.info('Playback Initialized');
        }
    }

    instance = {
        initialize: initialize,
        setConfig: setConfig,
        on: on,
        off: off,
        extend: extend,
        attachView: attachView,
        detachView: detachView,
        reattachView: reattachView,
        attachSource: attachSource,
        isReady: isReady,
        preload: preload,
        play: play,
        isPaused: isPaused,
        pause: pause,
        isSeeking: isSeeking,
        isDynamic: isDynamic,
        seek: seek,
        setPlaybackRate: setPlaybackRate,
        getPlaybackRate: getPlaybackRate,
        setMute: setMute,
        isMuted: isMuted,
        setVolume: setVolume,
        getVolume: getVolume,
        time: time,
        duration: duration,
        setDuration: setDuration,
        timeAsUTC: timeAsUTC,
        durationAsUTC: durationAsUTC,
        getActiveStream: getActiveStream,
        getDVRWindowSize: getDVRWindowSize,
        getDVRSeekOffset: getDVRSeekOffset,
        convertToTimeCode: convertToTimeCode,
        formatUTC: formatUTC,
        getVersion: getVersion,
        getDebug: getDebug,
        getBufferLength: getBufferLength,
        getTTMLRenderingDiv: getTTMLRenderingDiv,
        getVideoElement: getVideoElement,
        getSource: getSource,
        setLiveDelayFragmentCount: setLiveDelayFragmentCount,
        setLiveDelay: setLiveDelay,
        getLiveDelay: getLiveDelay,
        getCurrentLiveLatency: getCurrentLiveLatency,
        useSuggestedPresentationDelay: useSuggestedPresentationDelay,
        enableLastBitrateCaching: enableLastBitrateCaching,
        enableLastMediaSettingsCaching: enableLastMediaSettingsCaching,
        setMaxAllowedBitrateFor: setMaxAllowedBitrateFor,
        getMaxAllowedBitrateFor: getMaxAllowedBitrateFor,
        getTopBitrateInfoFor: getTopBitrateInfoFor,
        setMinAllowedBitrateFor: setMinAllowedBitrateFor,
        getMinAllowedBitrateFor: getMinAllowedBitrateFor,
        setMaxAllowedRepresentationRatioFor: setMaxAllowedRepresentationRatioFor,
        getMaxAllowedRepresentationRatioFor: getMaxAllowedRepresentationRatioFor,
        setAutoPlay: setAutoPlay,
        getAutoPlay: getAutoPlay,
        setScheduleWhilePaused: setScheduleWhilePaused,
        getScheduleWhilePaused: getScheduleWhilePaused,
        getDashMetrics: getDashMetrics,
        getMetricsFor: getMetricsFor,
        getQualityFor: getQualityFor,
        setQualityFor: setQualityFor,
        updatePortalSize: updatePortalSize,
        getLimitBitrateByPortal: getLimitBitrateByPortal,
        setLimitBitrateByPortal: setLimitBitrateByPortal,
        getUsePixelRatioInLimitBitrateByPortal: getUsePixelRatioInLimitBitrateByPortal,
        setUsePixelRatioInLimitBitrateByPortal: setUsePixelRatioInLimitBitrateByPortal,
        setTextDefaultLanguage: setTextDefaultLanguage,
        getTextDefaultLanguage: getTextDefaultLanguage,
        setTextDefaultEnabled: setTextDefaultEnabled,
        getTextDefaultEnabled: getTextDefaultEnabled,
        enableText: enableText,
        enableForcedTextStreaming: enableForcedTextStreaming,
        isTextEnabled: isTextEnabled,
        setTextTrack: setTextTrack,
        getBitrateInfoListFor: getBitrateInfoListFor,
        setInitialBitrateFor: setInitialBitrateFor,
        getInitialBitrateFor: getInitialBitrateFor,
        setInitialRepresentationRatioFor: setInitialRepresentationRatioFor,
        getInitialRepresentationRatioFor: getInitialRepresentationRatioFor,
        getStreamsFromManifest: getStreamsFromManifest,
        getTracksFor: getTracksFor,
        getTracksForTypeFromManifest: getTracksForTypeFromManifest,
        getCurrentTrackFor: getCurrentTrackFor,
        setInitialMediaSettingsFor: setInitialMediaSettingsFor,
        getInitialMediaSettingsFor: getInitialMediaSettingsFor,
        setCurrentTrack: setCurrentTrack,
        getTrackSwitchModeFor: getTrackSwitchModeFor,
        setTrackSwitchModeFor: setTrackSwitchModeFor,
        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,
        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,
        setFastSwitchEnabled: setFastSwitchEnabled,
        getFastSwitchEnabled: getFastSwitchEnabled,
        setMovingAverageMethod: setMovingAverageMethod,
        getMovingAverageMethod: getMovingAverageMethod,
        getAutoSwitchQualityFor: getAutoSwitchQualityFor,
        setAutoSwitchQualityFor: setAutoSwitchQualityFor,
        setABRStrategy: setABRStrategy,
        getABRStrategy: getABRStrategy,
        useDefaultABRRules: useDefaultABRRules,
        addABRCustomRule: addABRCustomRule,
        removeABRCustomRule: removeABRCustomRule,
        removeAllABRCustomRule: removeAllABRCustomRule,
        setBandwidthSafetyFactor: setBandwidthSafetyFactor,
        getBandwidthSafetyFactor: getBandwidthSafetyFactor,
        getAverageThroughput: getAverageThroughput,
        setAbandonLoadTimeout: setAbandonLoadTimeout,
        retrieveManifest: retrieveManifest,
        addUTCTimingSource: addUTCTimingSource,
        removeUTCTimingSource: removeUTCTimingSource,
        clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,
        restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,
        setBufferToKeep: setBufferToKeep,
        setBufferAheadToKeep: setBufferAheadToKeep,
        setBufferPruningInterval: setBufferPruningInterval,
        setStableBufferTime: setStableBufferTime,
        getStableBufferTime: getStableBufferTime,
        setBufferTimeAtTopQuality: setBufferTimeAtTopQuality,
        getBufferTimeAtTopQuality: getBufferTimeAtTopQuality,
        setBufferTimeAtTopQualityLongForm: setBufferTimeAtTopQualityLongForm,
        getBufferTimeAtTopQualityLongForm: getBufferTimeAtTopQualityLongForm,
        setFragmentLoaderRetryAttempts: setFragmentLoaderRetryAttempts,
        setFragmentLoaderRetryInterval: setFragmentLoaderRetryInterval,
        setManifestLoaderRetryAttempts: setManifestLoaderRetryAttempts,
        setManifestLoaderRetryInterval: setManifestLoaderRetryInterval,
        setXHRWithCredentialsForType: setXHRWithCredentialsForType,
        getXHRWithCredentialsForType: getXHRWithCredentialsForType,
        setJumpGaps: setJumpGaps,
        getJumpGaps: getJumpGaps,
        setSmallGapLimit: setSmallGapLimit,
        getSmallGapLimit: getSmallGapLimit,
        setLowLatencyEnabled: setLowLatencyEnabled,
        getLowLatencyEnabled: getLowLatencyEnabled,
        setFragmentRequestTimeout: setFragmentRequestTimeout,
        getFragmentRequestTimeout: getFragmentRequestTimeout,
        setCatchUpPlaybackRate: setCatchUpPlaybackRate,
        getCatchUpPlaybackRate: getCatchUpPlaybackRate,
        setLowLatencyMinDrift: setLowLatencyMinDrift,
        getLowLatencyMinDrift: getLowLatencyMinDrift,
        setLowLatencyMaxDriftBeforeSeeking: setLowLatencyMaxDriftBeforeSeeking,
        getLowLatencyMaxDriftBeforeSeeking: getLowLatencyMaxDriftBeforeSeeking,
        setManifestUpdateRetryInterval: setManifestUpdateRetryInterval,
        getManifestUpdateRetryInterval: getManifestUpdateRetryInterval,
        setLongFormContentDurationThreshold: setLongFormContentDurationThreshold,
        setSegmentOverlapToleranceTime: setSegmentOverlapToleranceTime,
        setCacheLoadThresholdForType: setCacheLoadThresholdForType,
        getProtectionController: getProtectionController,
        attachProtectionController: attachProtectionController,
        setProtectionData: setProtectionData,
        enableManifestDateHeaderTimeSource: enableManifestDateHeaderTimeSource,
        displayCaptionsOnTop: displayCaptionsOnTop,
        attachVideoContainer: attachVideoContainer,
        attachTTMLRenderingDiv: attachTTMLRenderingDiv,
        getCurrentTextTrackIndex: getCurrentTextTrackIndex,
        getUseDeadTimeLatencyForAbr: getUseDeadTimeLatencyForAbr,
        setUseDeadTimeLatencyForAbr: setUseDeadTimeLatencyForAbr,
        refreshManifest: refreshManifest,
        setPortalScale: setPortalScale,
        getPortalScale: getPortalScale,
        getPortalLimitMinimum: getPortalLimitMinimum,
        setPortalLimitMinimum: setPortalLimitMinimum,
        getThumbnail: getThumbnail,
        keepProtectionMediaKeys: keepProtectionMediaKeys,
        reset: reset
    };

    setup();

    return instance;
}

//Dash
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */


MediaPlayer.__dashjs_factory_name = 'MediaPlayer';
var factory = _FactoryMaker2.default.getClassFactory(MediaPlayer);
factory.events = _MediaPlayerEvents2.default;
factory.errors = _Errors2.default;
_FactoryMaker2.default.updateClassFactory(MediaPlayer.__dashjs_factory_name, factory);

exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/MediaPlayerEvents.js":
/*!****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/MediaPlayerEvents.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _EventsBase2 = __webpack_require__(/*! ../core/events/EventsBase */ "./node_modules/dashjs/src/core/events/EventsBase.js");

var _EventsBase3 = _interopRequireDefault(_EventsBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *





                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR




                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * @class
 *
 */
var MediaPlayerEvents = function (_EventsBase) {
  _inherits(MediaPlayerEvents, _EventsBase);

  /**
   * @description Public facing external events to be used when developing a player that implements dash.js.
   */
  function MediaPlayerEvents() {
    _classCallCheck(this, MediaPlayerEvents);

    /**
     * Triggered when playback will not start yet
     * as the MPD's availabilityStartTime is in the future.
     * Check delay property in payload to determine time before playback will start.
     */
    var _this = _possibleConstructorReturn(this, (MediaPlayerEvents.__proto__ || Object.getPrototypeOf(MediaPlayerEvents)).call(this));

    _this.AST_IN_FUTURE = 'astInFuture';

    /**
     * Triggered when a new baseUrl has been selected.
     * @event MediaPlayerEvents#BASEURL_SELECTED
     */
    _this.BASEURL_SELECTED = 'baseUrlSelected';
    /**
     * Triggered when the video element's buffer state changes to stalled.
     * Check mediaType in payload to determine type (Video, Audio, FragmentedText).
     * @event MediaPlayerEvents#BUFFER_EMPTY
     */
    _this.BUFFER_EMPTY = 'bufferStalled';

    /**
     * Triggered when the video element's buffer state changes to loaded.
     * Check mediaType in payload to determine type (Video, Audio, FragmentedText).
     * @event MediaPlayerEvents#BUFFER_LOADED
     */
    _this.BUFFER_LOADED = 'bufferLoaded';

    /**
     * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.
     * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED
     */
    _this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged';

    /**
     * Triggered when there is an error from the element or MSE source buffer.
     * @event MediaPlayerEvents#ERROR
     */
    _this.ERROR = 'error';

    /**
     * Triggered when a fragment download has completed.
     * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED
     */
    _this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted';

    /**
     * Triggered when a partial fragment download has completed.
     * @event MediaPlayerEvents#FRAGMENT_LOADING_PROGRESS
     */
    _this.FRAGMENT_LOADING_PROGRESS = 'fragmentLoadingProgress';
    /**
     * Triggered when a fragment download has started.
     * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED
     */
    _this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted';

    /**
     * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..
     * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED
     */
    _this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned';

    /**
     * Triggered when {@link module:Debug} logger methods are called.
     * @event MediaPlayerEvents#LOG
     */
    _this.LOG = 'log';

    //TODO refactor with internal event
    /**
     * Triggered when the manifest load is complete
     * @event MediaPlayerEvents#MANIFEST_LOADED
     */
    _this.MANIFEST_LOADED = 'manifestLoaded';

    /**
     * Triggered anytime there is a change to the overall metrics.
     * @event MediaPlayerEvents#METRICS_CHANGED
     */
    _this.METRICS_CHANGED = 'metricsChanged';

    /**
     * Triggered when an individual metric is added, updated or cleared.
     * @event MediaPlayerEvents#METRIC_CHANGED
     */
    _this.METRIC_CHANGED = 'metricChanged';

    /**
     * Triggered every time a new metric is added.
     * @event MediaPlayerEvents#METRIC_ADDED
     */
    _this.METRIC_ADDED = 'metricAdded';

    /**
     * Triggered every time a metric is updated.
     * @event MediaPlayerEvents#METRIC_UPDATED
     */
    _this.METRIC_UPDATED = 'metricUpdated';

    /**
     * Triggered at the stream end of a period.
     * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED
     */
    _this.PERIOD_SWITCH_COMPLETED = 'periodSwitchCompleted';

    /**
     * Triggered when a new period starts.
     * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED
     */
    _this.PERIOD_SWITCH_STARTED = 'periodSwitchStarted';

    /**
     * Triggered when an ABR up /down switch is initiated; either by user in manual mode or auto mode via ABR rules.
     * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED
     */
    _this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested';

    /**
     * Triggered when the new ABR quality is being rendered on-screen.
     * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED
     */
    _this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered';

    /**
     * Triggered when the new track is being rendered.
     * @event MediaPlayerEvents#TRACK_CHANGE_RENDERED
     */
    _this.TRACK_CHANGE_RENDERED = 'trackChangeRendered';

    /**
     * Triggered when the source is setup and ready.
     * @event MediaPlayerEvents#SOURCE_INITIALIZED
     */
    _this.SOURCE_INITIALIZED = 'sourceInitialized';

    /**
     * Triggered when a stream (period) is loaded
     * @event MediaPlayerEvents#STREAM_INITIALIZED
     */
    _this.STREAM_INITIALIZED = 'streamInitialized';

    /**
     * Triggered when the player has been reset.
     * @event MediaPlayerEvents#STREAM_TEARDOWN_COMPLETE
     */
    _this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete';

    /**
     * Triggered once all text tracks detected in the MPD are added to the video element.
     * @event MediaPlayerEvents#TEXT_TRACKS_ADDED
     */
    _this.TEXT_TRACKS_ADDED = 'allTextTracksAdded';

    /**
     * Triggered when a text track is added to the video element's TextTrackList
     * @event MediaPlayerEvents#TEXT_TRACK_ADDED
     */
    _this.TEXT_TRACK_ADDED = 'textTrackAdded';

    /**
     * Triggered when a ttml chunk is parsed.
     * @event MediaPlayerEvents#TTML_PARSED
     */
    _this.TTML_PARSED = 'ttmlParsed';

    /**
     * Triggered when a ttml chunk has to be parsed.
     * @event MediaPlayerEvents#TTML_TO_PARSE
     */
    _this.TTML_TO_PARSE = 'ttmlToParse';

    /**
     * Triggered when a caption is rendered.
     * @event MediaPlayerEvents#CAPTION_RENDERED
     */
    _this.CAPTION_RENDERED = 'captionRendered';

    /**
     * Triggered when the caption container is resized.
     * @event MediaPlayerEvents#CAPTION_CONTAINER_RESIZE
     */
    _this.CAPTION_CONTAINER_RESIZE = 'captionContainerResize';

    /**
     * Sent when enough data is available that the media can be played,
     * at least for a couple of frames.  This corresponds to the
     * HAVE_ENOUGH_DATA readyState.
     * @event MediaPlayerEvents#CAN_PLAY
     */
    _this.CAN_PLAY = 'canPlay';

    /**
     * Sent when playback completes.
     * @event MediaPlayerEvents#PLAYBACK_ENDED
     */
    _this.PLAYBACK_ENDED = 'playbackEnded';

    /**
     * Sent when an error occurs.  The element's error
     * attribute contains more information.
     * @event MediaPlayerEvents#PLAYBACK_ERROR
     */
    _this.PLAYBACK_ERROR = 'playbackError';

    /**
     * Sent when playback is not allowed (for example if user gesture is needed).
     * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED
     */
    _this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed';

    /**
     * The media's metadata has finished loading; all attributes now
     * contain as much useful information as they're going to.
     * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED
     */
    _this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded';

    /**
     * Sent when playback is paused.
     * @event MediaPlayerEvents#PLAYBACK_PAUSED
     */
    _this.PLAYBACK_PAUSED = 'playbackPaused';

    /**
     * Sent when the media begins to play (either for the first time, after having been paused,
     * or after ending and then restarting).
     *
     * @event MediaPlayerEvents#PLAYBACK_PLAYING
     */
    _this.PLAYBACK_PLAYING = 'playbackPlaying';

    /**
     * Sent periodically to inform interested parties of progress downloading
     * the media. Information about the current amount of the media that has
     * been downloaded is available in the media element's buffered attribute.
     * @event MediaPlayerEvents#PLAYBACK_PROGRESS
     */
    _this.PLAYBACK_PROGRESS = 'playbackProgress';

    /**
     * Sent when the playback speed changes.
     * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED
     */
    _this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged';

    /**
     * Sent when a seek operation completes.
     * @event MediaPlayerEvents#PLAYBACK_SEEKED
     */
    _this.PLAYBACK_SEEKED = 'playbackSeeked';

    /**
     * Sent when a seek operation begins.
     * @event MediaPlayerEvents#PLAYBACK_SEEKING
     */
    _this.PLAYBACK_SEEKING = 'playbackSeeking';

    /**
     * Sent when a seek operation has been asked.
     * @event MediaPlayerEvents#PLAYBACK_SEEK_ASKED
     */
    _this.PLAYBACK_SEEK_ASKED = 'playbackSeekAsked';

    /**
     * Sent when the video element reports stalled
     * @event MediaPlayerEvents#PLAYBACK_STALLED
     */
    _this.PLAYBACK_STALLED = 'playbackStalled';

    /**
     * Sent when playback of the media starts after having been paused;
     * that is, when playback is resumed after a prior pause event.
     *
     * @event MediaPlayerEvents#PLAYBACK_STARTED
     */
    _this.PLAYBACK_STARTED = 'playbackStarted';

    /**
     * The time indicated by the element's currentTime attribute has changed.
     * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED
     */
    _this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated';

    /**
     * Sent when the media playback has stopped because of a temporary lack of data.
     *
     * @event MediaPlayerEvents#PLAYBACK_WAITING
     */
    _this.PLAYBACK_WAITING = 'playbackWaiting';

    /**
     * A new media fragment has been loaded.
     * @event MediaPlayerEvents#MEDIA_FRAGMENT_LOADED
     */
    _this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';
    /**
     * A service location has been blacklisted.
     * @event MediaPlayerEvents#SERVICE_LOCATION_BLACKLIST_CHANGED
     */
    _this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';
    /**
     * URL resolution failed
     * @event MediaPlayerEvents#URL_RESOLUTION_FAILED
     */
    _this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';
    /**
     * Manifest validity changed - As a result of an MPD validity expiration event.
     * @event MediaPlayerEvents#MANIFEST_VALIDITY_CHANGED
     */
    _this.MANIFEST_VALIDITY_CHANGED = 'manifestValidityChanged';
    return _this;
  }

  return MediaPlayerEvents;
}(_EventsBase3.default);

var mediaPlayerEvents = new MediaPlayerEvents();
exports.default = mediaPlayerEvents;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/MediaPlayerFactory.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/MediaPlayerFactory.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MediaPlayer = __webpack_require__(/*! ./MediaPlayer */ "./node_modules/dashjs/src/streaming/MediaPlayer.js");

var _MediaPlayer2 = _interopRequireDefault(_MediaPlayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function MediaPlayerFactory() {
    /**
     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.
     * @type {string}
     */
    var SUPPORTED_MIME_TYPE = 'application/dash+xml';

    var logger = void 0;

    /**
     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,
     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose
     *  type is application/dash+xml.
     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.
     * @param {HTMLMediaElement} video
     * @param {HTMLSourceElement} source
     * @param {Object} context
     * @returns {MediaPlayer|null}
     */
    function create(video, source, context) {
        if (!video || !/^VIDEO$/i.test(video.nodeName)) return null;

        if (video._dashjs_player) return video._dashjs_player;

        var player = void 0;
        var videoID = video.id || video.name || 'video element';

        source = source || [].slice.call(video.querySelectorAll('source')).filter(function (s) {
            return s.type == SUPPORTED_MIME_TYPE;
        })[0];
        if (!source && video.src) {
            source = document.createElement('source');
            source.src = video.src;
        } else if (!source && !video.src) {
            return null;
        }

        context = context || {};
        player = (0, _MediaPlayer2.default)(context).create();
        player.initialize(video, source.src, video.autoplay);

        if (!logger) {
            logger = player.getDebug().getLogger();
        }
        logger.debug('Converted ' + videoID + ' to dash.js player and added content: ' + source.src);

        // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its
        // already been setup.
        video._dashjs_player = player;

        return player;
    }

    /**
     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is
     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.
     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.
     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.
     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.
     * Returns an array holding all the MediaPlayer instances that were added by this method.
     * @param {string} selector - CSS selector
     * @param {Object} scope
     * @returns {Array} an array of MediaPlayer objects
     */
    function createAll(selector, scope) {
        var aPlayers = [];
        selector = selector || '[data-dashjs-player]';
        scope = scope || document;
        var videos = scope.querySelectorAll(selector);
        for (var i = 0; i < videos.length; i++) {
            var player = create(videos[i], null);
            aPlayers.push(player);
        }

        var sources = scope.querySelectorAll('source[type="' + SUPPORTED_MIME_TYPE + '"]');
        for (var _i = 0; _i < sources.length; _i++) {
            var video = findVideo(sources[_i]);
            var _player = create(video, null);
            aPlayers.push(_player);
        }

        return aPlayers;
    }

    function findVideo(el) {
        if (/^VIDEO$/i.test(el.nodeName)) {
            return el;
        } else {
            return findVideo(el.parentNode);
        }
    }

    return {
        create: create,
        createAll: createAll
    };
}

var instance = MediaPlayerFactory();
var loadInterval = void 0;

function loadHandler() {
    window.removeEventListener('load', loadHandler);
    instance.createAll();
}

function loadIntervalHandler() {
    if (window.dashjs) {
        window.clearInterval(loadInterval);
        instance.createAll();
    }
}

var avoidAutoCreate = typeof window !== 'undefined' && window && window.dashjs && window.dashjs.skipAutoCreate;

if (!avoidAutoCreate && typeof window !== 'undefined' && window && window.addEventListener) {
    if (window.document.readyState === 'complete') {
        if (window.dashjs) {
            instance.createAll();
        } else {
            // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet
            loadInterval = window.setInterval(loadIntervalHandler, 500);
        }
    } else {
        window.addEventListener('load', loadHandler);
    }
}

exports.default = instance;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/PreBufferSink.js":
/*!************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/PreBufferSink.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Debug = __webpack_require__(/*! ../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This is a sink that is used to temporarily hold onto media chunks before a video element is added.
 * The discharge() function is used to get the chunks out of the PreBuffer for adding to a real SourceBuffer.
 *
 * @class PreBufferSink
 * @implements FragmentSink
 */
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function PreBufferSink(onAppendedCallback) {
    var context = this.context;

    var instance = void 0,
        logger = void 0,
        outstandingInit = void 0;
    var chunks = [];
    var onAppended = onAppendedCallback;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function reset() {
        chunks = [];
        outstandingInit = null;
        onAppended = null;
    }

    function append(chunk) {
        if (chunk.segmentType !== 'InitializationSegment') {
            //Init segments are stored in the initCache.
            chunks.push(chunk);
            chunks.sort(function (a, b) {
                return a.start - b.start;
            });
            outstandingInit = null;
        } else {
            //We need to hold an init chunk for when a corresponding media segment is being downloaded when the discharge happens.
            outstandingInit = chunk;
        }

        logger.debug('PreBufferSink appended chunk s: ' + chunk.start + '; e: ' + chunk.end);
        if (onAppended) {
            onAppended({
                chunk: chunk
            });
        }
    }

    function remove(start, end) {
        chunks = chunks.filter(function (a) {
            return !((isNaN(end) || a.start < end) && (isNaN(start) || a.end > start));
        }); //The opposite of the getChunks predicate.
    }

    //Nothing async, nothing to abort.
    function abort() {}

    function getAllBufferRanges() {
        var ranges = [];

        for (var i = 0; i < chunks.length; i++) {
            var chunk = chunks[i];
            if (ranges.length === 0 || chunk.start > ranges[ranges.length - 1].end) {
                ranges.push({ start: chunk.start, end: chunk.end });
            } else {
                ranges[ranges.length - 1].end = chunk.end;
            }
        }

        //Implements TimeRanges interface. So acts just like sourceBuffer.buffered.
        var timeranges = {
            start: function start(n) {
                return ranges[n].start;
            },
            end: function end(n) {
                return ranges[n].end;
            }
        };

        Object.defineProperty(timeranges, 'length', {
            get: function get() {
                return ranges.length;
            }
        });

        return timeranges;
    }

    function hasDiscontinuitiesAfter() {
        return false;
    }

    function updateTimestampOffset() {}
    // Nothing to do


    /**
     * Return the all chunks in the buffer the lie between times start and end.
     * Because a chunk cannot be split, this returns the full chunk if any part of its time lies in the requested range.
     * Chunks are removed from the buffer when they are discharged.
     * @function PreBufferSink#discharge
     * @param {?Number} start The start time from which to discharge from the buffer. If NaN, it is regarded as unbounded.
     * @param {?Number} end The end time from which to discharge from the buffer. If NaN, it is regarded as unbounded.
     * @returns {Array} The set of chunks from the buffer within the time ranges.
     */
    function discharge(start, end) {
        var result = getChunksAt(start, end);
        if (outstandingInit) {
            result.push(outstandingInit);
            outstandingInit = null;
        }

        remove(start, end);

        return result;
    }

    function getChunksAt(start, end) {
        return chunks.filter(function (a) {
            return (isNaN(end) || a.start < end) && (isNaN(start) || a.end > start);
        });
    }

    instance = {
        getAllBufferRanges: getAllBufferRanges,
        append: append,
        remove: remove,
        abort: abort,
        discharge: discharge,
        reset: reset,
        updateTimestampOffset: updateTimestampOffset,
        hasDiscontinuitiesAfter: hasDiscontinuitiesAfter
    };

    setup();

    return instance;
}

PreBufferSink.__dashjs_factory_name = 'PreBufferSink';
var factory = _FactoryMaker2.default.getClassFactory(PreBufferSink);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/SourceBufferSink.js":
/*!***************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/SourceBufferSink.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Debug = __webpack_require__(/*! ../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _DashJSError = __webpack_require__(/*! ./vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _EventBus = __webpack_require__(/*! ../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _TextController = __webpack_require__(/*! ./text/TextController */ "./node_modules/dashjs/src/streaming/text/TextController.js");

var _TextController2 = _interopRequireDefault(_TextController);

var _Errors = __webpack_require__(/*! ../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_ALLOWED_DISCONTINUITY = 0.1; // 100 milliseconds

/**
 * @class SourceBufferSink
 * @implements FragmentSink
 */
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function SourceBufferSink(mediaSource, mediaInfo, onAppendedCallback, oldBuffer) {
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        buffer = void 0,
        isAppendingInProgress = void 0,
        intervalId = void 0;

    var callbacks = [];
    var appendQueue = [];
    var onAppended = onAppendedCallback;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        isAppendingInProgress = false;

        var codec = mediaInfo.codec;
        try {
            // Safari claims to support anything starting 'application/mp4'.
            // it definitely doesn't understand 'application/mp4;codecs="stpp"'
            // - currently no browser does, so check for it and use our own
            // implementation. The same is true for codecs="wvtt".
            if (codec.match(/application\/mp4;\s*codecs="(stpp|wvtt).*"/i)) {
                throw new Error('not really supported');
            }
            buffer = oldBuffer ? oldBuffer : mediaSource.addSourceBuffer(codec);
            if (buffer.changeType && oldBuffer) {
                logger.debug('Doing period transition with changeType');
                buffer.changeType(codec);
            }

            var CHECK_INTERVAL = 50;
            // use updateend event if possible
            if (typeof buffer.addEventListener === 'function') {
                try {
                    buffer.addEventListener('updateend', updateEndHandler, false);
                    buffer.addEventListener('error', errHandler, false);
                    buffer.addEventListener('abort', errHandler, false);
                } catch (err) {
                    // use setInterval to periodically check if updating has been completed
                    intervalId = setInterval(checkIsUpdateEnded, CHECK_INTERVAL);
                }
            } else {
                // use setInterval to periodically check if updating has been completed
                intervalId = setInterval(checkIsUpdateEnded, CHECK_INTERVAL);
            }
        } catch (ex) {
            // Note that in the following, the quotes are open to allow for extra text after stpp and wvtt
            if (mediaInfo.isText || codec.indexOf('codecs="stpp') !== -1 || codec.indexOf('codecs="wvtt') !== -1) {
                var textController = (0, _TextController2.default)(context).getInstance();
                buffer = textController.getTextSourceBuffer();
            } else {
                throw ex;
            }
        }
    }

    function reset(keepBuffer) {
        if (buffer) {
            if (typeof buffer.removeEventListener === 'function') {
                buffer.removeEventListener('updateend', updateEndHandler, false);
                buffer.removeEventListener('error', errHandler, false);
                buffer.removeEventListener('abort', errHandler, false);
            }
            clearInterval(intervalId);
            if (!keepBuffer) {
                try {
                    if (!buffer.getClassName || buffer.getClassName() !== 'TextSourceBuffer') {
                        mediaSource.removeSourceBuffer(buffer);
                    }
                } catch (e) {
                    logger.error('Failed to remove source buffer from media source.');
                }
                buffer = null;
            }
            isAppendingInProgress = false;
        }
        appendQueue = [];
        onAppended = null;
    }

    function getBuffer() {
        return buffer;
    }

    function getAllBufferRanges() {
        try {
            return buffer.buffered;
        } catch (e) {
            logger.error('getAllBufferRanges exception: ' + e.message);
            return null;
        }
    }

    function hasDiscontinuitiesAfter(time) {
        try {
            var ranges = getAllBufferRanges();
            if (ranges && ranges.length > 1) {
                for (var i = 0, len = ranges.length; i < len; i++) {
                    if (i > 0) {
                        if (time < ranges.start(i) && ranges.start(i) > ranges.end(i - 1) + MAX_ALLOWED_DISCONTINUITY) {
                            return true;
                        }
                    }
                }
            }
        } catch (e) {
            logger.error('hasDiscontinuities exception: ' + e.message);
        }
        return false;
    }

    function append(chunk) {
        if (!chunk) {
            onAppended({
                chunk: chunk,
                error: new _DashJSError2.default(_Errors2.default.APPEND_ERROR_CODE, _Errors2.default.APPEND_ERROR_MESSAGE)
            });
            return;
        }
        appendQueue.push(chunk);
        if (!isAppendingInProgress) {
            waitForUpdateEnd(buffer, appendNextInQueue.bind(this));
        }
    }

    function updateTimestampOffset(MSETimeOffset) {
        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {
            waitForUpdateEnd(buffer, function () {
                buffer.timestampOffset = MSETimeOffset;
            });
        }
    }

    function remove(start, end, forceRemoval) {
        var sourceBufferSink = this;
        // make sure that the given time range is correct. Otherwise we will get InvalidAccessError
        waitForUpdateEnd(buffer, function () {
            try {
                if (start >= 0 && end > start && (forceRemoval || mediaSource.readyState !== 'ended')) {
                    buffer.remove(start, end);
                }
                // updating is in progress, we should wait for it to complete before signaling that this operation is done
                waitForUpdateEnd(buffer, function () {
                    eventBus.trigger(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, {
                        buffer: sourceBufferSink,
                        from: start,
                        to: end,
                        unintended: false
                    });
                });
            } catch (err) {
                eventBus.trigger(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, {
                    buffer: sourceBufferSink,
                    from: start,
                    to: end,
                    unintended: false,
                    error: new _DashJSError2.default(err.code, err.message)
                });
            }
        });
    }

    function appendNextInQueue() {
        var sourceBufferSink = this;

        if (appendQueue.length > 0) {
            isAppendingInProgress = true;
            var nextChunk = appendQueue[0];
            appendQueue.splice(0, 1);
            var oldRanges = [];
            var afterSuccess = function afterSuccess() {
                // Safari sometimes drops a portion of a buffer after appending. Handle these situations here
                var newRanges = getAllBufferRanges();
                checkBufferGapsAfterAppend(sourceBufferSink, oldRanges, newRanges, nextChunk);
                if (appendQueue.length > 0) {
                    appendNextInQueue.call(this);
                } else {
                    isAppendingInProgress = false;
                    if (onAppended) {
                        onAppended({
                            chunk: nextChunk
                        });
                    }
                }
            };

            try {
                if (nextChunk.bytes.length === 0) {
                    afterSuccess.call(this);
                } else {
                    oldRanges = getAllBufferRanges();
                    if (buffer.appendBuffer) {
                        buffer.appendBuffer(nextChunk.bytes);
                    } else {
                        buffer.append(nextChunk.bytes, nextChunk);
                    }
                    // updating is in progress, we should wait for it to complete before signaling that this operation is done
                    waitForUpdateEnd(buffer, afterSuccess.bind(this));
                }
            } catch (err) {
                logger.fatal('SourceBuffer append failed "' + err + '"');
                if (appendQueue.length > 0) {
                    appendNextInQueue();
                } else {
                    isAppendingInProgress = false;
                }

                if (onAppended) {
                    onAppended({
                        chunk: nextChunk,
                        error: new _DashJSError2.default(err.code, err.message)
                    });
                }
            }
        }
    }

    function checkBufferGapsAfterAppend(buffer, oldRanges, newRanges, chunk) {
        if (oldRanges && oldRanges.length > 0 && oldRanges.length < newRanges.length && isChunkAlignedWithRange(oldRanges, chunk)) {
            // A split in the range was created while appending
            eventBus.trigger(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, {
                buffer: buffer,
                from: newRanges.end(newRanges.length - 2),
                to: newRanges.start(newRanges.length - 1),
                unintended: true
            });
        }
    }

    function isChunkAlignedWithRange(oldRanges, chunk) {
        for (var i = 0; i < oldRanges.length; i++) {
            var start = Math.round(oldRanges.start(i));
            var end = Math.round(oldRanges.end(i));
            if (end === chunk.start || start === chunk.end || chunk.start >= start && chunk.end <= end) {
                return true;
            }
        }
        return false;
    }

    function abort() {
        try {
            if (mediaSource.readyState === 'open') {
                buffer.abort();
            } else if (buffer.setTextTrack && mediaSource.readyState === 'ended') {
                buffer.abort(); //The cues need to be removed from the TextSourceBuffer via a call to abort()
            }
        } catch (ex) {
            logger.error('SourceBuffer append abort failed: "' + ex + '"');
        }
        appendQueue = [];
    }

    function executeCallback() {
        if (callbacks.length > 0) {
            var cb = callbacks.shift();
            if (buffer.updating) {
                waitForUpdateEnd(buffer, cb);
            } else {
                cb();
                // Try to execute next callback if still not updating
                executeCallback();
            }
        }
    }

    function checkIsUpdateEnded() {
        // if updating is still in progress do nothing and wait for the next check again.
        if (buffer.updating) return;
        // updating is completed, now we can stop checking and resolve the promise
        executeCallback();
    }

    function updateEndHandler() {
        if (buffer.updating) return;

        executeCallback();
    }

    function errHandler() {
        logger.error('SourceBufferSink error', mediaInfo.type);
    }

    function waitForUpdateEnd(buffer, callback) {
        callbacks.push(callback);

        if (!buffer.updating) {
            executeCallback();
        }
    }

    instance = {
        getAllBufferRanges: getAllBufferRanges,
        getBuffer: getBuffer,
        append: append,
        remove: remove,
        abort: abort,
        reset: reset,
        updateTimestampOffset: updateTimestampOffset,
        hasDiscontinuitiesAfter: hasDiscontinuitiesAfter
    };

    setup();

    return instance;
}

SourceBufferSink.__dashjs_factory_name = 'SourceBufferSink';
var factory = _FactoryMaker2.default.getClassFactory(SourceBufferSink);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/Stream.js":
/*!*****************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/Stream.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ./constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _StreamProcessor = __webpack_require__(/*! ./StreamProcessor */ "./node_modules/dashjs/src/streaming/StreamProcessor.js");

var _StreamProcessor2 = _interopRequireDefault(_StreamProcessor);

var _EventController = __webpack_require__(/*! ./controllers/EventController */ "./node_modules/dashjs/src/streaming/controllers/EventController.js");

var _EventController2 = _interopRequireDefault(_EventController);

var _FragmentController = __webpack_require__(/*! ./controllers/FragmentController */ "./node_modules/dashjs/src/streaming/controllers/FragmentController.js");

var _FragmentController2 = _interopRequireDefault(_FragmentController);

var _ThumbnailController = __webpack_require__(/*! ./thumbnail/ThumbnailController */ "./node_modules/dashjs/src/streaming/thumbnail/ThumbnailController.js");

var _ThumbnailController2 = _interopRequireDefault(_ThumbnailController);

var _EventBus = __webpack_require__(/*! ../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _Debug = __webpack_require__(/*! ../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _Errors = __webpack_require__(/*! ../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _DashJSError = __webpack_require__(/*! ./vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Stream(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var manifestModel = config.manifestModel;
    var dashManifestModel = config.dashManifestModel;
    var mediaPlayerModel = config.mediaPlayerModel;
    var manifestUpdater = config.manifestUpdater;
    var adapter = config.adapter;
    var capabilities = config.capabilities;
    var errHandler = config.errHandler;
    var timelineConverter = config.timelineConverter;
    var metricsModel = config.metricsModel;
    var abrController = config.abrController;
    var playbackController = config.playbackController;
    var mediaController = config.mediaController;
    var textController = config.textController;
    var videoModel = config.videoModel;

    var instance = void 0,
        logger = void 0,
        streamProcessors = void 0,
        isStreamActivated = void 0,
        isMediaInitialized = void 0,
        streamInfo = void 0,
        updateError = void 0,
        isUpdating = void 0,
        protectionController = void 0,
        fragmentController = void 0,
        thumbnailController = void 0,
        eventController = void 0,
        preloaded = void 0,
        trackChangedEvent = void 0;

    var codecCompatibilityTable = [{
        'codec': 'avc1',
        'compatibleCodecs': ['avc3']
    }, {
        'codec': 'avc3',
        'compatibleCodecs': ['avc1']
    }];

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        resetInitialSettings();

        fragmentController = (0, _FragmentController2.default)(context).create({
            mediaPlayerModel: mediaPlayerModel,
            metricsModel: metricsModel,
            errHandler: errHandler
        });

        registerEvents();
    }

    function registerEvents() {
        eventBus.on(_Events2.default.BUFFERING_COMPLETED, onBufferingCompleted, instance);
        eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
    }

    function unRegisterEvents() {
        eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
        eventBus.off(_Events2.default.BUFFERING_COMPLETED, onBufferingCompleted, instance);
    }

    function registerProtectionEvents() {
        if (protectionController) {
            eventBus.on(_Events2.default.KEY_ERROR, onProtectionError, instance);
            eventBus.on(_Events2.default.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);
            eventBus.on(_Events2.default.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);
            eventBus.on(_Events2.default.KEY_SYSTEM_SELECTED, onProtectionError, instance);
            eventBus.on(_Events2.default.KEY_SESSION_CREATED, onProtectionError, instance);
            eventBus.on(_Events2.default.KEY_STATUSES_CHANGED, onProtectionError, instance);
        }
    }

    function unRegisterProtectionEvents() {
        if (protectionController) {
            eventBus.off(_Events2.default.KEY_ERROR, onProtectionError, instance);
            eventBus.off(_Events2.default.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);
            eventBus.off(_Events2.default.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);
            eventBus.off(_Events2.default.KEY_SYSTEM_SELECTED, onProtectionError, instance);
            eventBus.off(_Events2.default.KEY_SESSION_CREATED, onProtectionError, instance);
            eventBus.off(_Events2.default.KEY_STATUSES_CHANGED, onProtectionError, instance);
        }
    }

    function initialize(StreamInfo, ProtectionController) {
        streamInfo = StreamInfo;
        protectionController = ProtectionController;
        registerProtectionEvents();
    }

    /**
     * Activates Stream by re-initializing some of its components
     * @param {MediaSource} mediaSource
     * @memberof Stream#
     * @param {SourceBuffer} previousBuffers
     */
    function activate(mediaSource, previousBuffers) {
        if (!isStreamActivated) {
            var result = void 0;
            eventBus.on(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);
            if (!getPreloaded()) {
                result = initializeMedia(mediaSource, previousBuffers);
            } else {
                initializeAfterPreload();
                result = previousBuffers;
            }
            isStreamActivated = true;
            return result;
        }
        return previousBuffers;
    }

    /**
     * Partially resets some of the Stream elements
     * @memberof Stream#
     * @param {boolean} keepBuffers
     */
    function deactivate(keepBuffers) {
        var ln = streamProcessors ? streamProcessors.length : 0;
        var errored = false;
        for (var i = 0; i < ln; i++) {
            var fragmentModel = streamProcessors[i].getFragmentModel();
            fragmentModel.removeExecutedRequestsBeforeTime(getStartTime() + getDuration());
            streamProcessors[i].reset(errored, keepBuffers);
        }
        streamProcessors = [];
        isStreamActivated = false;
        isMediaInitialized = false;
        setPreloaded(false);
        eventBus.off(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);
    }

    function isActive() {
        return isStreamActivated;
    }

    function setMediaSource(mediaSource) {
        for (var i = 0; i < streamProcessors.length;) {
            if (isMediaSupported(streamProcessors[i].getMediaInfo())) {
                streamProcessors[i].setMediaSource(mediaSource);
                i++;
            } else {
                streamProcessors[i].reset();
                streamProcessors.splice(i, 1);
            }
        }

        for (var _i = 0; _i < streamProcessors.length; _i++) {
            //Adding of new tracks to a stream processor isn't guaranteed by the spec after the METADATA_LOADED state
            //so do this after the buffers are created above.
            streamProcessors[_i].dischargePreBuffer();
        }

        if (streamProcessors.length === 0) {
            var msg = 'No streams to play.';
            errHandler.manifestError(msg, 'nostreams', manifestModel.getValue());
            errHandler.error(new _DashJSError2.default(_Errors2.default.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg + 'nostreams', manifestModel.getValue()));
            logger.fatal(msg);
        }
    }

    function resetInitialSettings() {
        deactivate();
        streamInfo = null;
        updateError = {};
        isUpdating = false;
    }

    function reset() {

        if (playbackController) {
            playbackController.pause();
        }

        if (fragmentController) {
            fragmentController.reset();
            fragmentController = null;
        }

        resetInitialSettings();

        unRegisterEvents();

        unRegisterProtectionEvents();

        setPreloaded(false);
    }

    function getDuration() {
        return streamInfo ? streamInfo.duration : NaN;
    }

    function getStartTime() {
        return streamInfo ? streamInfo.start : NaN;
    }

    function getId() {
        return streamInfo ? streamInfo.id : null;
    }

    function getStreamInfo() {
        return streamInfo;
    }

    function getFragmentController() {
        return fragmentController;
    }

    function getThumbnailController() {
        return thumbnailController;
    }

    function checkConfig() {
        if (!abrController || !abrController.hasOwnProperty('getBitrateList') || !adapter || !adapter.hasOwnProperty('getAllMediaInfoForType') || !adapter.hasOwnProperty('getEventsFor')) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
    }

    /**
     * @param {string} type
     * @returns {Array}
     * @memberof Stream#
     */
    function getBitrateListFor(type) {
        checkConfig();
        if (type === _Constants2.default.IMAGE) {
            if (!thumbnailController) {
                return [];
            }
            return thumbnailController.getBitrateList();
        }
        var mediaInfo = getMediaInfo(type);
        return abrController.getBitrateList(mediaInfo);
    }

    function startEventController() {
        if (eventController) {
            eventController.start();
        }
    }

    function stopEventController() {
        if (eventController) {
            eventController.stop();
        }
    }

    function onProtectionError(event) {
        if (event.error) {
            errHandler.mediaKeySessionError(event.error.message);
            errHandler.error(event.error);
            logger.fatal(event.error.message);
            reset();
        }
    }

    function isMediaSupported(mediaInfo) {
        var type = mediaInfo.type;
        var codec = void 0,
            msg = void 0;

        if (type === _Constants2.default.MUXED && mediaInfo) {
            msg = 'Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines';
            logger.fatal(msg);
            errHandler.manifestError(msg, 'multiplexedrep', manifestModel.getValue());
            errHandler.error(new _DashJSError2.default(_Errors2.default.MANIFEST_ERROR_ID_MULTIPLEXED_CODE, msg, manifestModel.getValue()));
            return false;
        }

        if (type === _Constants2.default.TEXT || type === _Constants2.default.FRAGMENTED_TEXT || type === _Constants2.default.EMBEDDED_TEXT || type === _Constants2.default.IMAGE) {
            return true;
        }
        codec = mediaInfo.codec;
        logger.debug(type + ' codec: ' + codec);

        if (!!mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()) {
            errHandler.capabilityError('encryptedmedia');
            errHandler.error(new _DashJSError2.default(_Errors2.default.CAPABILITY_MEDIAKEYS_ERROR_CODE, _Errors2.default.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE));
        } else if (!capabilities.supportsCodec(codec)) {
            msg = type + 'Codec (' + codec + ') is not supported.';
            logger.error(msg);
            errHandler.error(new _DashJSError2.default(_Errors2.default.MANIFEST_ERROR_ID_CODEC_CODE, msg));
            return false;
        }

        return true;
    }

    function onCurrentTrackChanged(e) {
        if (e.newMediaInfo.streamInfo.id !== streamInfo.id) return;

        var processor = getProcessorForMediaInfo(e.newMediaInfo);
        if (!processor) return;

        var currentTime = playbackController.getTime();
        logger.info('Stream -  Process track changed at current time ' + currentTime);
        var mediaInfo = e.newMediaInfo;
        var manifest = manifestModel.getValue();

        adapter.setCurrentMediaInfo(streamInfo.id, mediaInfo.type, mediaInfo);

        logger.debug('Stream -  Update stream controller');
        if (manifest.refreshManifestOnSwitchTrack) {
            logger.debug('Stream -  Refreshing manifest for switch track');
            trackChangedEvent = e;
            manifestUpdater.refreshManifest();
        } else {
            processor.selectMediaInfo(mediaInfo);
            if (mediaInfo.type !== _Constants2.default.FRAGMENTED_TEXT) {
                abrController.updateTopQualityIndex(mediaInfo);
                processor.switchTrackAsked();
                processor.getFragmentModel().abortRequests();
            } else {
                processor.getScheduleController().setSeekTarget(NaN);
                adapter.setIndexHandlerTime(processor, currentTime);
                adapter.resetIndexHandler(processor);
            }
        }
    }

    function createStreamProcessor(mediaInfo, allMediaForType, mediaSource, optionalSettings) {
        var streamProcessor = (0, _StreamProcessor2.default)(context).create({
            type: mediaInfo.type,
            mimeType: mediaInfo.mimeType,
            timelineConverter: timelineConverter,
            adapter: adapter,
            manifestModel: manifestModel,
            dashManifestModel: dashManifestModel,
            mediaPlayerModel: mediaPlayerModel,
            metricsModel: metricsModel,
            dashMetrics: config.dashMetrics,
            baseURLController: config.baseURLController,
            stream: instance,
            abrController: abrController,
            domStorage: config.domStorage,
            playbackController: playbackController,
            mediaController: mediaController,
            streamController: config.streamController,
            textController: textController,
            errHandler: errHandler
        });

        streamProcessor.initialize(mediaSource);
        abrController.updateTopQualityIndex(mediaInfo);

        if (optionalSettings) {
            streamProcessor.setBuffer(optionalSettings.buffer);
            streamProcessor.getIndexHandler().setCurrentTime(optionalSettings.currentTime);
            streamProcessors[optionalSettings.replaceIdx] = streamProcessor;
        } else {
            streamProcessors.push(streamProcessor);
        }

        if (optionalSettings && optionalSettings.ignoreMediaInfo) {
            return;
        }

        if (mediaInfo.type === _Constants2.default.TEXT || mediaInfo.type === _Constants2.default.FRAGMENTED_TEXT) {
            var idx = void 0;
            for (var i = 0; i < allMediaForType.length; i++) {
                if (allMediaForType[i].index === mediaInfo.index) {
                    idx = i;
                }
                streamProcessor.addMediaInfo(allMediaForType[i]); //creates text tracks for all adaptations in one stream processor
            }
            streamProcessor.selectMediaInfo(allMediaForType[idx]); //sets the initial media info
        } else {
            streamProcessor.addMediaInfo(mediaInfo, true);
        }
    }

    function initializeMediaForType(type, mediaSource) {
        var allMediaForType = adapter.getAllMediaInfoForType(streamInfo, type);

        var mediaInfo = null;
        var initialMediaInfo = void 0;

        if (!allMediaForType || allMediaForType.length === 0) {
            logger.info('No ' + type + ' data.');
            return;
        }

        for (var i = 0, ln = allMediaForType.length; i < ln; i++) {
            mediaInfo = allMediaForType[i];

            if (type === _Constants2.default.EMBEDDED_TEXT) {
                textController.addEmbeddedTrack(mediaInfo);
            } else {
                if (!isMediaSupported(mediaInfo)) continue;
                mediaController.addTrack(mediaInfo);
            }
        }

        if (type === _Constants2.default.EMBEDDED_TEXT || mediaController.getTracksFor(type, streamInfo).length === 0) {
            return;
        }

        if (type === _Constants2.default.IMAGE) {
            thumbnailController = (0, _ThumbnailController2.default)(context).create({
                dashManifestModel: dashManifestModel,
                adapter: adapter,
                baseURLController: config.baseURLController,
                stream: instance,
                timelineConverter: config.timelineConverter
            });
            return;
        }

        if (type !== _Constants2.default.FRAGMENTED_TEXT || type === _Constants2.default.FRAGMENTED_TEXT && textController.getTextDefaultEnabled()) {
            mediaController.checkInitialMediaSettingsForType(type, streamInfo);
            initialMediaInfo = mediaController.getCurrentTrackFor(type, streamInfo);
        }

        if (type === _Constants2.default.FRAGMENTED_TEXT && !textController.getTextDefaultEnabled()) {
            initialMediaInfo = mediaController.getTracksFor(type, streamInfo)[0];
        }

        // TODO : How to tell index handler live/duration?
        // TODO : Pass to controller and then pass to each method on handler?

        createStreamProcessor(initialMediaInfo, allMediaForType, mediaSource);
    }

    function initializeEventController() {
        //if initializeMedia is called from a switch period, eventController could have been already created.
        if (!eventController) {
            eventController = (0, _EventController2.default)(context).create();

            eventController.setConfig({
                manifestUpdater: manifestUpdater,
                playbackController: playbackController
            });
            addInlineEvents();
        }
    }

    function addInlineEvents() {
        var events = adapter.getEventsFor(streamInfo);
        eventController.addInlineEvents(events);
    }

    function addInbandEvents(events) {
        if (eventController) {
            eventController.addInbandEvents(events);
        }
    }

    function initializeMedia(mediaSource, previousBuffers) {
        checkConfig();
        var element = videoModel.getElement();

        initializeEventController();

        isUpdating = true;

        filterCodecs(_Constants2.default.VIDEO);
        filterCodecs(_Constants2.default.AUDIO);

        if (!element || element && /^VIDEO$/i.test(element.nodeName)) {
            initializeMediaForType(_Constants2.default.VIDEO, mediaSource);
        }
        initializeMediaForType(_Constants2.default.AUDIO, mediaSource);
        initializeMediaForType(_Constants2.default.TEXT, mediaSource);
        initializeMediaForType(_Constants2.default.FRAGMENTED_TEXT, mediaSource);
        initializeMediaForType(_Constants2.default.EMBEDDED_TEXT, mediaSource);
        initializeMediaForType(_Constants2.default.MUXED, mediaSource);
        initializeMediaForType(_Constants2.default.IMAGE, mediaSource);

        //TODO. Consider initialization of TextSourceBuffer here if embeddedText, but no sideloadedText.
        var buffers = createBuffers(previousBuffers);

        isMediaInitialized = true;
        isUpdating = false;

        if (streamProcessors.length === 0) {
            var msg = 'No streams to play.';
            errHandler.manifestError(msg, 'nostreams', manifestModel.getValue());
            errHandler.error(new _DashJSError2.default(_Errors2.default.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));
            logger.fatal(msg);
        } else {
            checkIfInitializationCompleted();
        }

        return buffers;
    }

    function initializeAfterPreload() {
        isUpdating = true;
        checkConfig();
        filterCodecs(_Constants2.default.VIDEO);
        filterCodecs(_Constants2.default.AUDIO);

        isMediaInitialized = true;
        isUpdating = false;
        if (streamProcessors.length === 0) {
            var msg = 'No streams to play.';
            errHandler.manifestError(msg, 'nostreams', manifestModel.getValue());
            logger.debug(msg);
        } else {
            checkIfInitializationCompleted();
        }
    }

    function filterCodecs(type) {
        var realAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), streamInfo.index, type, streamInfo);

        if (!realAdaptation || !Array.isArray(realAdaptation.Representation_asArray)) return;

        // Filter codecs that are not supported
        realAdaptation.Representation_asArray = realAdaptation.Representation_asArray.filter(function (_, i) {
            // keep at least codec from lowest representation
            if (i === 0) return true;

            var codec = dashManifestModel.getCodec(realAdaptation, i, true);
            if (!capabilities.supportsCodec(codec)) {
                logger.error('[Stream] codec not supported: ' + codec);
                return false;
            }
            return true;
        });
    }

    function checkIfInitializationCompleted() {
        var ln = streamProcessors.length;
        var hasError = !!updateError.audio || !!updateError.video;
        var error = hasError ? new _DashJSError2.default(_Errors2.default.DATA_UPDATE_FAILED_ERROR_CODE, _Errors2.default.DATA_UPDATE_FAILED_ERROR_MESSAGE) : null;

        for (var i = 0; i < ln; i++) {
            if (streamProcessors[i].isUpdating() || isUpdating) {
                return;
            }
        }

        if (!isMediaInitialized) {
            return;
        }

        if (protectionController) {
            // Need to check if streamProcessors exists because streamProcessors
            // could be cleared in case an error is detected while initializing DRM keysystem
            for (var _i2 = 0; _i2 < ln && streamProcessors[_i2]; _i2++) {
                if (streamProcessors[_i2].getType() === _Constants2.default.AUDIO || streamProcessors[_i2].getType() === _Constants2.default.VIDEO || streamProcessors[_i2].getType() === _Constants2.default.FRAGMENTED_TEXT) {
                    protectionController.initializeForMedia(streamProcessors[_i2].getMediaInfo());
                }
            }
        }

        eventBus.trigger(_Events2.default.STREAM_INITIALIZED, {
            streamInfo: streamInfo,
            error: error
        });
    }

    function getMediaInfo(type) {
        var ln = streamProcessors.length;
        var streamProcessor = null;

        for (var i = 0; i < ln; i++) {
            streamProcessor = streamProcessors[i];

            if (streamProcessor.getType() === type) {
                return streamProcessor.getMediaInfo();
            }
        }

        return null;
    }

    function createBuffers(previousBuffers) {
        var buffers = {};
        for (var i = 0, ln = streamProcessors.length; i < ln; i++) {
            var sink = streamProcessors[i].createBuffer(previousBuffers);
            if (sink.getBuffer) {
                buffers[streamProcessors[i].getType()] = sink.getBuffer();
            }
        }
        return buffers;
    }

    function onBufferingCompleted(e) {
        if (e.streamInfo !== streamInfo) {
            return;
        }

        var processors = getProcessors();
        var ln = processors.length;

        if (ln === 0) {
            logger.warn('onBufferingCompleted - can\'t trigger STREAM_BUFFERING_COMPLETED because no streamProcessor is defined');
            return;
        }

        // if there is at least one buffer controller that has not completed buffering yet do nothing
        for (var i = 0; i < ln; i++) {
            //if audio or video buffer is not buffering completed state, do not send STREAM_BUFFERING_COMPLETED
            if (!processors[i].isBufferingCompleted() && (processors[i].getType() === _Constants2.default.AUDIO || processors[i].getType() === _Constants2.default.VIDEO)) {
                logger.warn('onBufferingCompleted - One streamProcessor has finished but', processors[i].getType(), 'one is not buffering completed');
                return;
            }
        }

        logger.debug('onBufferingCompleted - trigger STREAM_BUFFERING_COMPLETED');
        eventBus.trigger(_Events2.default.STREAM_BUFFERING_COMPLETED, {
            streamInfo: streamInfo
        });
    }

    function onDataUpdateCompleted(e) {
        var sp = e.sender.getStreamProcessor();

        if (sp.getStreamInfo() !== streamInfo) {
            return;
        }

        updateError[sp.getType()] = e.error;
        checkIfInitializationCompleted();
    }

    function getProcessorForMediaInfo(mediaInfo) {
        if (!mediaInfo) {
            return null;
        }

        var processors = getProcessors();

        return processors.filter(function (processor) {
            return processor.getType() === mediaInfo.type;
        })[0];
    }

    function getProcessors() {
        var ln = streamProcessors.length;
        var arr = [];

        var type = void 0,
            streamProcessor = void 0;

        for (var i = 0; i < ln; i++) {
            streamProcessor = streamProcessors[i];
            type = streamProcessor.getType();

            if (type === _Constants2.default.AUDIO || type === _Constants2.default.VIDEO || type === _Constants2.default.FRAGMENTED_TEXT || type === _Constants2.default.TEXT) {
                arr.push(streamProcessor);
            }
        }

        return arr;
    }

    function updateData(updatedStreamInfo) {
        logger.info('Manifest updated... updating data system wide.');

        isStreamActivated = false;
        isUpdating = true;
        streamInfo = updatedStreamInfo;

        if (eventController) {
            addInlineEvents();
        }

        filterCodecs(_Constants2.default.VIDEO);
        filterCodecs(_Constants2.default.AUDIO);

        for (var i = 0, ln = streamProcessors.length; i < ln; i++) {
            var streamProcessor = streamProcessors[i];
            var mediaInfo = adapter.getMediaInfoForType(streamInfo, streamProcessor.getType());
            abrController.updateTopQualityIndex(mediaInfo);
            streamProcessor.addMediaInfo(mediaInfo, true);
        }

        if (trackChangedEvent) {
            var _mediaInfo = trackChangedEvent.newMediaInfo;
            if (_mediaInfo.type !== 'fragmentedText') {
                var processor = getProcessorForMediaInfo(trackChangedEvent.oldMediaInfo);
                if (!processor) return;
                processor.switchTrackAsked();
                trackChangedEvent = undefined;
            }
        }

        isUpdating = false;
        checkIfInitializationCompleted();
    }

    function isMediaCodecCompatible(stream) {
        return compareCodecs(stream, _Constants2.default.VIDEO) && compareCodecs(stream, _Constants2.default.AUDIO);
    }

    function isProtectionCompatible(stream) {
        return compareProtectionConfig(stream, _Constants2.default.VIDEO) && compareProtectionConfig(stream, _Constants2.default.AUDIO);
    }

    function compareProtectionConfig(stream, type) {
        if (!stream) {
            return false;
        }
        var newStreamInfo = stream.getStreamInfo();
        var currentStreamInfo = getStreamInfo();

        if (!newStreamInfo || !currentStreamInfo) {
            return false;
        }

        var newAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), newStreamInfo.index, type, newStreamInfo);
        var currentAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), currentStreamInfo.index, type, currentStreamInfo);

        if (!newAdaptation || !currentAdaptation) {
            // If there is no adaptation for neither the old or the new stream they're compatible
            return !newAdaptation && !currentAdaptation;
        }

        // If any of the periods requires EME, we can't do smooth transition
        if (newAdaptation.ContentProtection || currentAdaptation.ContentProtection) {
            return false;
        }

        return true;
    }

    function compareCodecs(stream, type) {
        if (!stream) {
            return false;
        }
        var newStreamInfo = stream.getStreamInfo();
        var currentStreamInfo = getStreamInfo();

        if (!newStreamInfo || !currentStreamInfo) {
            return false;
        }

        var newAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), newStreamInfo.index, type, newStreamInfo);
        var currentAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), currentStreamInfo.index, type, currentStreamInfo);

        if (!newAdaptation || !currentAdaptation) {
            // If there is no adaptation for neither the old or the new stream they're compatible
            return !newAdaptation && !currentAdaptation;
        }

        var sameMimeType = newAdaptation && currentAdaptation && newAdaptation.mimeType === currentAdaptation.mimeType;
        var oldCodecs = currentAdaptation.Representation_asArray.map(function (representation) {
            return representation.codecs;
        });

        var newCodecs = newAdaptation.Representation_asArray.map(function (representation) {
            return representation.codecs;
        });

        var codecMatch = newCodecs.some(function (newCodec) {
            return oldCodecs.indexOf(newCodec) > -1;
        });

        var partialCodecMatch = newCodecs.some(function (newCodec) {
            return oldCodecs.some(function (oldCodec) {
                return codecRootCompatibleWithCodec(oldCodec, newCodec);
            });
        });
        return codecMatch || partialCodecMatch && sameMimeType;
    }

    // Check if the root of the old codec is the same as the new one, or if it's declared as compatible in the compat table
    function codecRootCompatibleWithCodec(codec1, codec2) {
        var codecRoot = codec1.split('.')[0];
        var rootCompatible = codec2.indexOf(codecRoot) === 0;
        var compatTableCodec = void 0;
        for (var i = 0; i < codecCompatibilityTable.length; i++) {
            if (codecCompatibilityTable[i].codec === codecRoot) {
                compatTableCodec = codecCompatibilityTable[i];
                break;
            }
        }
        if (compatTableCodec) {
            return rootCompatible || compatTableCodec.compatibleCodecs.some(function (compatibleCodec) {
                return codec2.indexOf(compatibleCodec) === 0;
            });
        }
        return rootCompatible;
    }

    function setPreloaded(value) {
        preloaded = value;
    }

    function getPreloaded() {
        return preloaded;
    }

    function preload(mediaSource, previousBuffers) {
        initializeEventController();

        initializeMediaForType(_Constants2.default.VIDEO, mediaSource);
        initializeMediaForType(_Constants2.default.AUDIO, mediaSource);
        initializeMediaForType(_Constants2.default.TEXT, mediaSource);
        initializeMediaForType(_Constants2.default.FRAGMENTED_TEXT, mediaSource);
        initializeMediaForType(_Constants2.default.EMBEDDED_TEXT, mediaSource);
        initializeMediaForType(_Constants2.default.MUXED, mediaSource);
        initializeMediaForType(_Constants2.default.IMAGE, mediaSource);

        createBuffers(previousBuffers);

        eventBus.on(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);
        for (var i = 0; i < streamProcessors.length && streamProcessors[i]; i++) {
            streamProcessors[i].getScheduleController().start();
        }

        setPreloaded(true);
    }

    instance = {
        initialize: initialize,
        activate: activate,
        deactivate: deactivate,
        isActive: isActive,
        getDuration: getDuration,
        getStartTime: getStartTime,
        getId: getId,
        getStreamInfo: getStreamInfo,
        preload: preload,
        getFragmentController: getFragmentController,
        getThumbnailController: getThumbnailController,
        getBitrateListFor: getBitrateListFor,
        startEventController: startEventController,
        stopEventController: stopEventController,
        updateData: updateData,
        reset: reset,
        getProcessors: getProcessors,
        setMediaSource: setMediaSource,
        isMediaCodecCompatible: isMediaCodecCompatible,
        isProtectionCompatible: isProtectionCompatible,
        getPreloaded: getPreloaded,
        addInbandEvents: addInbandEvents
    };

    setup();
    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


Stream.__dashjs_factory_name = 'Stream';
exports.default = _FactoryMaker2.default.getClassFactory(Stream);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/StreamProcessor.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/StreamProcessor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ./constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _LiveEdgeFinder = __webpack_require__(/*! ./utils/LiveEdgeFinder */ "./node_modules/dashjs/src/streaming/utils/LiveEdgeFinder.js");

var _LiveEdgeFinder2 = _interopRequireDefault(_LiveEdgeFinder);

var _BufferController = __webpack_require__(/*! ./controllers/BufferController */ "./node_modules/dashjs/src/streaming/controllers/BufferController.js");

var _BufferController2 = _interopRequireDefault(_BufferController);

var _TextBufferController = __webpack_require__(/*! ./text/TextBufferController */ "./node_modules/dashjs/src/streaming/text/TextBufferController.js");

var _TextBufferController2 = _interopRequireDefault(_TextBufferController);

var _ScheduleController = __webpack_require__(/*! ./controllers/ScheduleController */ "./node_modules/dashjs/src/streaming/controllers/ScheduleController.js");

var _ScheduleController2 = _interopRequireDefault(_ScheduleController);

var _RepresentationController = __webpack_require__(/*! ../dash/controllers/RepresentationController */ "./node_modules/dashjs/src/dash/controllers/RepresentationController.js");

var _RepresentationController2 = _interopRequireDefault(_RepresentationController);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _DashHandler = __webpack_require__(/*! ../dash/DashHandler */ "./node_modules/dashjs/src/dash/DashHandler.js");

var _DashHandler2 = _interopRequireDefault(_DashHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function StreamProcessor(config) {

    config = config || {};
    var context = this.context;

    var type = config.type;
    var errHandler = config.errHandler;
    var mimeType = config.mimeType;
    var timelineConverter = config.timelineConverter;
    var adapter = config.adapter;
    var manifestModel = config.manifestModel;
    var mediaPlayerModel = config.mediaPlayerModel;
    var stream = config.stream;
    var abrController = config.abrController;
    var playbackController = config.playbackController;
    var streamController = config.streamController;
    var mediaController = config.mediaController;
    var textController = config.textController;
    var domStorage = config.domStorage;
    var metricsModel = config.metricsModel;
    var dashMetrics = config.dashMetrics;
    var dashManifestModel = config.dashManifestModel;

    var instance = void 0,
        mediaInfo = void 0,
        mediaInfoArr = void 0,
        bufferController = void 0,
        scheduleController = void 0,
        liveEdgeFinder = void 0,
        representationController = void 0,
        fragmentModel = void 0,
        spExternalControllers = void 0,
        indexHandler = void 0;

    function setup() {
        if (playbackController && playbackController.getIsDynamic()) {
            liveEdgeFinder = (0, _LiveEdgeFinder2.default)(context).create({
                timelineConverter: timelineConverter,
                streamProcessor: instance
            });
        }
        resetInitialSettings();
    }

    function initialize(mediaSource) {
        indexHandler = (0, _DashHandler2.default)(context).create({
            mimeType: mimeType,
            timelineConverter: timelineConverter,
            dashMetrics: dashMetrics,
            metricsModel: metricsModel,
            mediaPlayerModel: mediaPlayerModel,
            baseURLController: config.baseURLController,
            errHandler: errHandler
        });

        // initialize controllers
        indexHandler.initialize(instance);
        abrController.registerStreamType(type, instance);

        fragmentModel = stream.getFragmentController().getModel(type);
        fragmentModel.setStreamProcessor(instance);

        bufferController = createBufferControllerForType(type);
        scheduleController = (0, _ScheduleController2.default)(context).create({
            type: type,
            mimeType: mimeType,
            metricsModel: metricsModel,
            adapter: adapter,
            dashMetrics: dashMetrics,
            dashManifestModel: dashManifestModel,
            timelineConverter: timelineConverter,
            mediaPlayerModel: mediaPlayerModel,
            abrController: abrController,
            playbackController: playbackController,
            streamController: streamController,
            textController: textController,
            streamProcessor: instance,
            mediaController: mediaController
        });
        representationController = (0, _RepresentationController2.default)(context).create();
        representationController.setConfig({
            abrController: abrController,
            domStorage: domStorage,
            metricsModel: metricsModel,
            dashMetrics: dashMetrics,
            dashManifestModel: dashManifestModel,
            manifestModel: manifestModel,
            playbackController: playbackController,
            timelineConverter: timelineConverter,
            streamProcessor: instance
        });
        bufferController.initialize(mediaSource);
        scheduleController.initialize();
        representationController.initialize();
    }

    function registerExternalController(controller) {
        spExternalControllers.push(controller);
    }

    function unregisterExternalController(controller) {
        var index = spExternalControllers.indexOf(controller);

        if (index !== -1) {
            spExternalControllers.splice(index, 1);
        }
    }

    function getExternalControllers() {
        return spExternalControllers;
    }

    function unregisterAllExternalController() {
        spExternalControllers = [];
    }

    function resetInitialSettings() {
        mediaInfoArr = [];
        mediaInfo = null;
        unregisterAllExternalController();
    }

    function reset(errored, keepBuffers) {
        indexHandler.reset();

        if (bufferController) {
            bufferController.reset(errored, keepBuffers);
            bufferController = null;
        }

        if (scheduleController) {
            scheduleController.reset();
            scheduleController = null;
        }

        if (representationController) {
            representationController.reset();
            representationController = null;
        }

        if (abrController) {
            abrController.unRegisterStreamType(type);
        }
        spExternalControllers.forEach(function (controller) {
            controller.reset();
        });

        resetInitialSettings();
        type = null;
        stream = null;
        if (liveEdgeFinder) {
            liveEdgeFinder.reset();
            liveEdgeFinder = null;
        }
    }

    function isUpdating() {
        return representationController ? representationController.isUpdating() : false;
    }

    function getType() {
        return type;
    }

    function getRepresentationController() {
        return representationController;
    }

    function getIndexHandler() {
        return indexHandler;
    }

    function getFragmentController() {
        return stream ? stream.getFragmentController() : null;
    }

    function getBuffer() {
        return bufferController.getBuffer();
    }

    function setBuffer(buffer) {
        bufferController.setBuffer(buffer);
    }

    function getBufferController() {
        return bufferController;
    }

    function getFragmentModel() {
        return fragmentModel;
    }

    function getLiveEdgeFinder() {
        return liveEdgeFinder;
    }

    function getStreamInfo() {
        return stream ? stream.getStreamInfo() : null;
    }

    function addInbandEvents(events) {
        if (stream) {
            stream.addInbandEvents(events);
        }
    }

    function selectMediaInfo(newMediaInfo) {
        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || newMediaInfo.type === mediaInfo.type)) {
            mediaInfo = newMediaInfo;
        }
        adapter.updateData(this);
    }

    function addMediaInfo(newMediaInfo, selectNewMediaInfo) {
        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {
            mediaInfoArr.push(newMediaInfo);
        }

        if (selectNewMediaInfo) {
            this.selectMediaInfo(newMediaInfo);
        }
    }

    function getMediaInfoArr() {
        return mediaInfoArr;
    }

    function getMediaInfo() {
        return mediaInfo;
    }

    function getMediaSource() {
        return bufferController.getMediaSource();
    }

    function setMediaSource(mediaSource) {
        bufferController.setMediaSource(mediaSource, getMediaInfo());
    }

    function dischargePreBuffer() {
        bufferController.dischargePreBuffer();
    }

    function getScheduleController() {
        return scheduleController;
    }

    function getRepresentationInfo(quality) {
        return adapter.getRepresentationInfo(representationController, quality);
    }

    function isBufferingCompleted() {
        if (bufferController) {
            return bufferController.getIsBufferingCompleted();
        }

        return false;
    }

    function timeIsBuffered(time) {
        if (bufferController) {
            return bufferController.getRangeAt(time, 0) !== null;
        }

        return false;
    }

    function getBufferLevel() {
        return bufferController.getBufferLevel();
    }

    function switchInitData(representationId, bufferResetEnabled) {
        if (bufferController) {
            bufferController.switchInitData(getStreamInfo().id, representationId, bufferResetEnabled);
        }
    }

    function createBuffer(previousBuffers) {
        return bufferController.getBuffer() || bufferController.createBuffer(mediaInfo, previousBuffers);
    }

    function switchTrackAsked() {
        scheduleController.switchTrackAsked();
    }

    function createBufferControllerForType(type) {
        var controller = null;

        if (type === _Constants2.default.VIDEO || type === _Constants2.default.AUDIO) {
            controller = (0, _BufferController2.default)(context).create({
                type: type,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                manifestModel: manifestModel,
                errHandler: errHandler,
                streamController: streamController,
                mediaController: mediaController,
                adapter: adapter,
                textController: textController,
                abrController: abrController,
                playbackController: playbackController,
                streamProcessor: instance
            });
        } else {
            controller = (0, _TextBufferController2.default)(context).create({
                type: type,
                mimeType: mimeType,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                manifestModel: manifestModel,
                errHandler: errHandler,
                streamController: streamController,
                mediaController: mediaController,
                adapter: adapter,
                textController: textController,
                abrController: abrController,
                playbackController: playbackController,
                streamProcessor: instance
            });
        }

        return controller;
    }

    instance = {
        initialize: initialize,
        isUpdating: isUpdating,
        getType: getType,
        getBufferController: getBufferController,
        getFragmentModel: getFragmentModel,
        getScheduleController: getScheduleController,
        getLiveEdgeFinder: getLiveEdgeFinder,
        getFragmentController: getFragmentController,
        getRepresentationController: getRepresentationController,
        getIndexHandler: getIndexHandler,
        getRepresentationInfo: getRepresentationInfo,
        getBufferLevel: getBufferLevel,
        switchInitData: switchInitData,
        isBufferingCompleted: isBufferingCompleted,
        timeIsBuffered: timeIsBuffered,
        createBuffer: createBuffer,
        getStreamInfo: getStreamInfo,
        selectMediaInfo: selectMediaInfo,
        addMediaInfo: addMediaInfo,
        switchTrackAsked: switchTrackAsked,
        getMediaInfoArr: getMediaInfoArr,
        getMediaInfo: getMediaInfo,
        getMediaSource: getMediaSource,
        setMediaSource: setMediaSource,
        dischargePreBuffer: dischargePreBuffer,
        getBuffer: getBuffer,
        setBuffer: setBuffer,
        registerExternalController: registerExternalController,
        unregisterExternalController: unregisterExternalController,
        getExternalControllers: getExternalControllers,
        unregisterAllExternalController: unregisterAllExternalController,
        addInbandEvents: addInbandEvents,
        reset: reset
    };

    setup();

    return instance;
}
StreamProcessor.__dashjs_factory_name = 'StreamProcessor';
exports.default = _FactoryMaker2.default.getClassFactory(StreamProcessor);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/XlinkLoader.js":
/*!**********************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/XlinkLoader.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _DashJSError = __webpack_require__(/*! ./vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _HTTPLoader = __webpack_require__(/*! ./net/HTTPLoader */ "./node_modules/dashjs/src/streaming/net/HTTPLoader.js");

var _HTTPLoader2 = _interopRequireDefault(_HTTPLoader);

var _HTTPRequest = __webpack_require__(/*! ./vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _TextRequest = __webpack_require__(/*! ./vo/TextRequest */ "./node_modules/dashjs/src/streaming/vo/TextRequest.js");

var _TextRequest2 = _interopRequireDefault(_TextRequest);

var _EventBus = __webpack_require__(/*! ../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Errors = __webpack_require__(/*! ../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function XlinkLoader(config) {

    config = config || {};
    var RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var httpLoader = (0, _HTTPLoader2.default)(context).create({
        errHandler: config.errHandler,
        metricsModel: config.metricsModel,
        mediaPlayerModel: config.mediaPlayerModel,
        requestModifier: config.requestModifier
    });

    var instance = void 0;

    function load(url, element, resolveObject) {
        var report = function report(content, resolveToZero) {
            element.resolved = true;
            element.resolvedContent = content ? content : null;

            eventBus.trigger(_Events2.default.XLINK_ELEMENT_LOADED, {
                element: element,
                resolveObject: resolveObject,
                error: content || resolveToZero ? null : new _DashJSError2.default(_Errors2.default.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE, _Errors2.default.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE + url)
            });
        };

        if (url === RESOLVE_TO_ZERO) {
            report(null, true);
        } else {
            var request = new _TextRequest2.default(url, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE);

            httpLoader.load({
                request: request,
                success: function success(data) {
                    report(data);
                },
                error: function error() {
                    report(null);
                }
            });
        }
    }

    function reset() {
        if (httpLoader) {
            httpLoader.abort();
            httpLoader = null;
        }
    }

    instance = {
        load: load,
        reset: reset
    };

    return instance;
}

XlinkLoader.__dashjs_factory_name = 'XlinkLoader';
exports.default = _FactoryMaker2.default.getClassFactory(XlinkLoader);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/constants/Constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/constants/Constants.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Constants declaration
 * @class
 */
var Constants = function () {
  _createClass(Constants, [{
    key: 'init',
    value: function init() {
      this.STREAM = 'stream';
      this.VIDEO = 'video';
      this.AUDIO = 'audio';
      this.TEXT = 'text';
      this.FRAGMENTED_TEXT = 'fragmentedText';
      this.EMBEDDED_TEXT = 'embeddedText';
      this.MUXED = 'muxed';
      this.IMAGE = 'image';
      this.LOCATION = 'Location';
      this.INITIALIZE = 'initialize';
      this.TEXT_SHOWING = 'showing';
      this.TEXT_HIDDEN = 'hidden';
      this.CC1 = 'CC1';
      this.CC3 = 'CC3';
      this.STPP = 'stpp';
      this.TTML = 'ttml';
      this.VTT = 'vtt';
      this.WVTT = 'wvtt';
      this.UTF8 = 'utf-8';
      this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';
      this.SCHEME_ID_URI = 'schemeIdUri';
      this.START_TIME = 'starttime';
      this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';
      this.ABR_STRATEGY_BOLA = 'abrBola';
      this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';
      this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';
      this.MOVING_AVERAGE_EWMA = 'ewma';
      /**
       *  @constant {string} BAD_ARGUMENT_ERROR 'Invalid Arguments' error
       *  @memberof Constants#
       *  @static
       */
      this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';
      this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';
    }

    /**
     * @constructs
     */

  }]);

  function Constants() {
    _classCallCheck(this, Constants);

    this.init();
  }

  return Constants;
}();

var constants = new Constants();
exports.default = constants;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/constants/MetricsConstants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/constants/MetricsConstants.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Metrics Constants declaration
 * @class
 * @ignore
 */
var MetricsConstants = function () {
    _createClass(MetricsConstants, [{
        key: 'init',
        value: function init() {
            this.TCP_CONNECTION = 'TcpList';
            this.HTTP_REQUEST = 'HttpList';
            this.TRACK_SWITCH = 'RepSwitchList';
            this.BUFFER_LEVEL = 'BufferLevel';
            this.BUFFER_STATE = 'BufferState';
            this.DVR_INFO = 'DVRInfo';
            this.DROPPED_FRAMES = 'DroppedFrames';
            this.SCHEDULING_INFO = 'SchedulingInfo';
            this.REQUESTS_QUEUE = 'RequestsQueue';
            this.MANIFEST_UPDATE = 'ManifestUpdate';
            this.MANIFEST_UPDATE_STREAM_INFO = 'ManifestUpdatePeriodInfo';
            this.MANIFEST_UPDATE_TRACK_INFO = 'ManifestUpdateRepresentationInfo';
            this.PLAY_LIST = 'PlayList';
            this.DVB_ERRORS = 'DVBErrors';
        }
    }]);

    function MetricsConstants() {
        _classCallCheck(this, MetricsConstants);

        this.init();
    }

    return MetricsConstants;
}();

var constants = new MetricsConstants();
exports.default = constants;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Protection Constants declaration
 * @class
 * @ignore
 */
var ProtectionConstants = function () {
    _createClass(ProtectionConstants, [{
        key: 'init',
        value: function init() {
            this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';
            this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';
            this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';
        }
    }]);

    function ProtectionConstants() {
        _classCallCheck(this, ProtectionConstants);

        this.init();
    }

    return ProtectionConstants;
}();

var constants = new ProtectionConstants();
exports.default = constants;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/AbrController.js":
/*!************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/AbrController.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ABRRulesCollection = __webpack_require__(/*! ../rules/abr/ABRRulesCollection */ "./node_modules/dashjs/src/streaming/rules/abr/ABRRulesCollection.js");

var _ABRRulesCollection2 = _interopRequireDefault(_ABRRulesCollection);

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _MetricsConstants = __webpack_require__(/*! ../constants/MetricsConstants */ "./node_modules/dashjs/src/streaming/constants/MetricsConstants.js");

var _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);

var _BitrateInfo = __webpack_require__(/*! ../vo/BitrateInfo */ "./node_modules/dashjs/src/streaming/vo/BitrateInfo.js");

var _BitrateInfo2 = _interopRequireDefault(_BitrateInfo);

var _FragmentModel = __webpack_require__(/*! ../models/FragmentModel */ "./node_modules/dashjs/src/streaming/models/FragmentModel.js");

var _FragmentModel2 = _interopRequireDefault(_FragmentModel);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _RulesContext = __webpack_require__(/*! ../rules/RulesContext */ "./node_modules/dashjs/src/streaming/rules/RulesContext.js");

var _RulesContext2 = _interopRequireDefault(_RulesContext);

var _SwitchRequest = __webpack_require__(/*! ../rules/SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

var _SwitchRequestHistory = __webpack_require__(/*! ../rules/SwitchRequestHistory */ "./node_modules/dashjs/src/streaming/rules/SwitchRequestHistory.js");

var _SwitchRequestHistory2 = _interopRequireDefault(_SwitchRequestHistory);

var _DroppedFramesHistory = __webpack_require__(/*! ../rules/DroppedFramesHistory */ "./node_modules/dashjs/src/streaming/rules/DroppedFramesHistory.js");

var _DroppedFramesHistory2 = _interopRequireDefault(_DroppedFramesHistory);

var _ThroughputHistory = __webpack_require__(/*! ../rules/ThroughputHistory */ "./node_modules/dashjs/src/streaming/rules/ThroughputHistory.js");

var _ThroughputHistory2 = _interopRequireDefault(_ThroughputHistory);

var _HTTPRequest = __webpack_require__(/*! ../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _SupervisorTools = __webpack_require__(/*! ../utils/SupervisorTools */ "./node_modules/dashjs/src/streaming/utils/SupervisorTools.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

var ABANDON_LOAD = 'abandonload';
var ALLOW_LOAD = 'allowload';
var DEFAULT_VIDEO_BITRATE = 1000;
var DEFAULT_AUDIO_BITRATE = 100;
var QUALITY_DEFAULT = 0;

function AbrController() {

    var context = this.context;
    var debug = (0, _Debug2.default)(context).getInstance();
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        abrRulesCollection = void 0,
        streamController = void 0,
        autoSwitchBitrate = void 0,
        topQualities = void 0,
        qualityDict = void 0,
        bitrateDict = void 0,
        ratioDict = void 0,
        streamProcessorDict = void 0,
        abandonmentStateDict = void 0,
        abandonmentTimeout = void 0,
        limitBitrateByPortal = void 0,
        portalLimitMinimum = void 0,
        usePixelRatioInLimitBitrateByPortal = void 0,
        windowResizeEventCalled = void 0,
        elementWidth = void 0,
        elementHeight = void 0,
        manifestModel = void 0,
        adapter = void 0,
        videoModel = void 0,
        mediaPlayerModel = void 0,
        domStorage = void 0,
        playbackIndex = void 0,
        switchHistoryDict = void 0,
        droppedFramesHistory = void 0,
        throughputHistory = void 0,
        isUsingBufferOccupancyABRDict = void 0,
        metricsModel = void 0,
        dashMetrics = void 0,
        useDeadTimeLatency = void 0,
        portalScale = void 0;

    function setup() {
        logger = debug.getLogger(instance);
        resetInitialSettings();
    }

    function registerStreamType(type, streamProcessor) {
        switchHistoryDict[type] = (0, _SwitchRequestHistory2.default)(context).create();
        streamProcessorDict[type] = streamProcessor;
        abandonmentStateDict[type] = abandonmentStateDict[type] || {};
        abandonmentStateDict[type].state = ALLOW_LOAD;
        isUsingBufferOccupancyABRDict[type] = false;
        eventBus.on(_Events2.default.LOADING_PROGRESS, onFragmentLoadProgress, this);
        if (type == _Constants2.default.VIDEO) {
            eventBus.on(_Events2.default.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this);
            droppedFramesHistory = (0, _DroppedFramesHistory2.default)(context).create();
            setElementSize();
        }
        eventBus.on(_Events2.default.METRIC_ADDED, onMetricAdded, this);
        eventBus.on(_Events2.default.PERIOD_SWITCH_COMPLETED, createAbrRulesCollection, this);

        throughputHistory = (0, _ThroughputHistory2.default)(context).create({
            mediaPlayerModel: mediaPlayerModel
        });
    }

    function unRegisterStreamType(type) {
        delete streamProcessorDict[type];
    }

    function createAbrRulesCollection() {
        abrRulesCollection = (0, _ABRRulesCollection2.default)(context).create({
            metricsModel: metricsModel,
            dashMetrics: dashMetrics,
            mediaPlayerModel: mediaPlayerModel,
            adapter: adapter
        });

        abrRulesCollection.initialize();
    }

    function resetInitialSettings() {
        autoSwitchBitrate = { video: true, audio: true };
        topQualities = {};
        qualityDict = {};
        bitrateDict = {};
        ratioDict = {};
        abandonmentStateDict = {};
        streamProcessorDict = {};
        switchHistoryDict = {};
        isUsingBufferOccupancyABRDict = {};
        limitBitrateByPortal = false;
        useDeadTimeLatency = true;
        usePixelRatioInLimitBitrateByPortal = false;
        portalScale = 1;
        portalLimitMinimum = 0;
        if (windowResizeEventCalled === undefined) {
            windowResizeEventCalled = false;
        }
        playbackIndex = undefined;
        droppedFramesHistory = undefined;
        throughputHistory = undefined;
        clearTimeout(abandonmentTimeout);
        abandonmentTimeout = null;
    }

    function reset() {

        resetInitialSettings();

        eventBus.off(_Events2.default.LOADING_PROGRESS, onFragmentLoadProgress, this);
        eventBus.off(_Events2.default.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this);
        eventBus.off(_Events2.default.METRIC_ADDED, onMetricAdded, this);
        eventBus.off(_Events2.default.PERIOD_SWITCH_COMPLETED, createAbrRulesCollection, this);

        if (abrRulesCollection) {
            abrRulesCollection.reset();
        }
    }

    function setConfig(config) {
        if (!config) return;

        if (config.streamController) {
            streamController = config.streamController;
        }
        if (config.domStorage) {
            domStorage = config.domStorage;
        }
        if (config.mediaPlayerModel) {
            mediaPlayerModel = config.mediaPlayerModel;
        }
        if (config.metricsModel) {
            metricsModel = config.metricsModel;
        }
        if (config.dashMetrics) {
            dashMetrics = config.dashMetrics;
        }
        if (config.adapter) {
            adapter = config.adapter;
        }
        if (config.manifestModel) {
            manifestModel = config.manifestModel;
        }
        if (config.videoModel) {
            videoModel = config.videoModel;
        }
    }

    function checkConfig() {
        if (!domStorage || !domStorage.hasOwnProperty('getSavedBitrateSettings')) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
    }

    function onQualityChangeRendered(e) {
        if (e.mediaType === _Constants2.default.VIDEO) {
            playbackIndex = e.oldQuality;
            droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality());
        }
    }

    function onMetricAdded(e) {
        if (e.metric === _MetricsConstants2.default.HTTP_REQUEST && e.value && e.value.type === _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE && (e.mediaType === _Constants2.default.AUDIO || e.mediaType === _Constants2.default.VIDEO)) {
            throughputHistory.push(e.mediaType, e.value, useDeadTimeLatency);
        }

        if (e.metric === _MetricsConstants2.default.BUFFER_LEVEL && (e.mediaType === _Constants2.default.AUDIO || e.mediaType === _Constants2.default.VIDEO)) {
            updateIsUsingBufferOccupancyABR(e.mediaType, 0.001 * e.value.level);
        }
    }

    function getTopQualityIndexFor(type, id) {
        var idx = void 0;
        topQualities[id] = topQualities[id] || {};

        if (!topQualities[id].hasOwnProperty(type)) {
            topQualities[id][type] = 0;
        }

        idx = checkMaxBitrate(topQualities[id][type], type);
        idx = checkMaxRepresentationRatio(idx, type, topQualities[id][type]);
        idx = checkPortalSize(idx, type);
        return idx;
    }

    /**
     * Gets top BitrateInfo for the player
     * @param {string} type - 'video' or 'audio' are the type options.
     * @returns {BitrateInfo | null}
     */
    function getTopBitrateInfoFor(type) {
        if (type && streamProcessorDict && streamProcessorDict[type]) {
            var streamInfo = streamProcessorDict[type].getStreamInfo();
            if (streamInfo && streamInfo.id) {
                var idx = getTopQualityIndexFor(type, streamInfo.id);
                var bitrates = getBitrateList(streamProcessorDict[type].getMediaInfo());
                return bitrates[idx] ? bitrates[idx] : null;
            }
        }
        return null;
    }

    /**
     * @param {string} type
     * @returns {number} A value of the initial bitrate, kbps
     * @memberof AbrController#
     */
    function getInitialBitrateFor(type) {
        checkConfig();
        var savedBitrate = domStorage.getSavedBitrateSettings(type);

        if (!bitrateDict.hasOwnProperty(type)) {
            if (ratioDict.hasOwnProperty(type)) {
                var manifest = manifestModel.getValue();
                var representation = adapter.getAdaptationForType(manifest, 0, type).Representation;

                if (Array.isArray(representation)) {
                    var repIdx = Math.max(Math.round(representation.length * ratioDict[type]) - 1, 0);
                    bitrateDict[type] = representation[repIdx].bandwidth;
                } else {
                    bitrateDict[type] = 0;
                }
            } else if (!isNaN(savedBitrate)) {
                bitrateDict[type] = savedBitrate;
            } else {
                bitrateDict[type] = type === _Constants2.default.VIDEO ? DEFAULT_VIDEO_BITRATE : DEFAULT_AUDIO_BITRATE;
            }
        }

        return bitrateDict[type];
    }

    /**
     * @param {string} type
     * @param {number} value A value of the initial bitrate, kbps
     * @memberof AbrController#
     */
    function setInitialBitrateFor(type, value) {
        (0, _SupervisorTools.checkIsVideoOrAudioType)(type);
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        bitrateDict[type] = value;
    }

    function getInitialRepresentationRatioFor(type) {
        if (!ratioDict.hasOwnProperty(type)) {
            return null;
        }

        return ratioDict[type];
    }

    function setInitialRepresentationRatioFor(type, value) {
        ratioDict[type] = value;
    }

    function getMaxAllowedBitrateFor(type) {
        if (bitrateDict.hasOwnProperty('max') && bitrateDict.max.hasOwnProperty(type)) {
            return bitrateDict.max[type];
        }
        return NaN;
    }

    function getMinAllowedBitrateFor(type) {
        if (bitrateDict.hasOwnProperty('min') && bitrateDict.min.hasOwnProperty(type)) {
            return bitrateDict.min[type];
        }
        return NaN;
    }

    //TODO  change bitrateDict structure to hold one object for video and audio with initial and max values internal.
    // This means you need to update all the logic around initial bitrate DOMStorage, RebController etc...
    function setMaxAllowedBitrateFor(type, value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        (0, _SupervisorTools.checkIsVideoOrAudioType)(type);
        bitrateDict.max = bitrateDict.max || {};
        bitrateDict.max[type] = value;
    }

    function setMinAllowedBitrateFor(type, value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        (0, _SupervisorTools.checkIsVideoOrAudioType)(type);
        bitrateDict.min = bitrateDict.min || {};
        bitrateDict.min[type] = value;
    }

    function getMaxAllowedIndexFor(type) {
        var maxBitrate = getMaxAllowedBitrateFor(type);
        if (maxBitrate) {
            return getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), maxBitrate);
        } else {
            return undefined;
        }
    }

    function getMinAllowedIndexFor(type) {
        var minBitrate = getMinAllowedBitrateFor(type);

        if (minBitrate) {
            var mediaInfo = streamProcessorDict[type].getMediaInfo();
            var bitrateList = getBitrateList(mediaInfo);
            // This returns the quality index <= for the given bitrate
            var minIdx = getQualityForBitrate(mediaInfo, minBitrate);
            if (bitrateList[minIdx] && minIdx < bitrateList.length - 1 && bitrateList[minIdx].bitrate < minBitrate * 1000) {
                minIdx++; // Go to the next bitrate
            }
            return minIdx;
        } else {
            return undefined;
        }
    }

    function getMaxAllowedRepresentationRatioFor(type) {
        if (ratioDict.hasOwnProperty('max') && ratioDict.max.hasOwnProperty(type)) {
            return ratioDict.max[type];
        }
        return 1;
    }

    function setMaxAllowedRepresentationRatioFor(type, value) {
        ratioDict.max = ratioDict.max || {};
        ratioDict.max[type] = value;
    }

    function getAutoSwitchBitrateFor(type) {
        return autoSwitchBitrate[type];
    }

    function setAutoSwitchBitrateFor(type, value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        (0, _SupervisorTools.checkIsVideoOrAudioType)(type);
        autoSwitchBitrate[type] = value;
    }

    function getLimitBitrateByPortal() {
        return limitBitrateByPortal;
    }

    function setLimitBitrateByPortal(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        limitBitrateByPortal = value;
    }

    function setPortalScale(value) {
        portalScale = value;
    }

    function getPortalScale() {
        return portalScale;
    }

    function getUsePixelRatioInLimitBitrateByPortal() {
        return usePixelRatioInLimitBitrateByPortal;
    }

    function setUsePixelRatioInLimitBitrateByPortal(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        usePixelRatioInLimitBitrateByPortal = value;
    }

    function getPortalLimitMinimum() {
        return portalLimitMinimum;
    }

    function setPortalLimitMinimum(bitrate) {
        portalLimitMinimum = bitrate;
    }

    function getUseDeadTimeLatency() {
        return useDeadTimeLatency;
    }

    function setUseDeadTimeLatency(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        useDeadTimeLatency = value;
    }

    function checkPlaybackQuality(type) {
        if (type && streamProcessorDict && streamProcessorDict[type]) {
            var streamInfo = streamProcessorDict[type].getStreamInfo();
            var streamId = streamInfo ? streamInfo.id : null;
            var oldQuality = getQualityFor(type);
            var rulesContext = (0, _RulesContext2.default)(context).create({
                abrController: instance,
                streamProcessor: streamProcessorDict[type],
                currentValue: oldQuality,
                switchHistory: switchHistoryDict[type],
                droppedFramesHistory: droppedFramesHistory,
                useBufferOccupancyABR: useBufferOccupancyABR(type)
            });

            if (droppedFramesHistory) {
                var playbackQuality = videoModel.getPlaybackQuality();
                if (playbackQuality) {
                    droppedFramesHistory.push(playbackIndex, playbackQuality);
                }
            }
            if (getAutoSwitchBitrateFor(type)) {
                var minIdx = getMinAllowedIndexFor(type);
                var topQualityIdx = getTopQualityIndexFor(type, streamId);
                var switchRequest = abrRulesCollection.getMaxQuality(rulesContext);
                var newQuality = switchRequest.quality;
                if (minIdx !== undefined && newQuality < minIdx) {
                    newQuality = minIdx;
                }
                if (newQuality > topQualityIdx) {
                    newQuality = topQualityIdx;
                }

                switchHistoryDict[type].push({ oldValue: oldQuality, newValue: newQuality });

                if (newQuality > _SwitchRequest2.default.NO_CHANGE && newQuality != oldQuality) {
                    if (abandonmentStateDict[type].state === ALLOW_LOAD || newQuality > oldQuality) {
                        changeQuality(type, oldQuality, newQuality, topQualityIdx, switchRequest.reason);
                    }
                } else if (debug.getLogToBrowserConsole()) {
                    var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));
                    logger.debug('AbrController (' + type + ') stay on ' + oldQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ')');
                }
            }
        }
    }

    function setPlaybackQuality(type, streamInfo, newQuality, reason) {
        var id = streamInfo.id;
        var oldQuality = getQualityFor(type);

        (0, _SupervisorTools.checkInteger)(newQuality);

        var topQualityIdx = getTopQualityIndexFor(type, id);
        if (newQuality !== oldQuality && newQuality >= 0 && newQuality <= topQualityIdx) {
            changeQuality(type, oldQuality, newQuality, topQualityIdx, reason);
        }
    }

    function changeQuality(type, oldQuality, newQuality, topQualityIdx, reason) {
        if (type && streamProcessorDict[type]) {
            var streamInfo = streamProcessorDict[type].getStreamInfo();
            var id = streamInfo ? streamInfo.id : null;
            if (debug.getLogToBrowserConsole()) {
                var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));
                logger.info('AbrController (' + type + ') switch from ' + oldQuality + ' to ' + newQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ') ' + (reason ? JSON.stringify(reason) : '.'));
            }
            setQualityFor(type, id, newQuality);
            eventBus.trigger(_Events2.default.QUALITY_CHANGE_REQUESTED, { mediaType: type, streamInfo: streamInfo, oldQuality: oldQuality, newQuality: newQuality, reason: reason });
        }
    }

    function setAbandonmentStateFor(type, state) {
        abandonmentStateDict[type].state = state;
    }

    function getAbandonmentStateFor(type) {
        return abandonmentStateDict[type] ? abandonmentStateDict[type].state : null;
    }

    /**
     * @param {MediaInfo} mediaInfo
     * @param {number} bitrate A bitrate value, kbps
     * @param {number} latency Expected latency of connection, ms
     * @returns {number} A quality index <= for the given bitrate
     * @memberof AbrController#
     */
    function getQualityForBitrate(mediaInfo, bitrate, latency) {
        var voRepresentation = mediaInfo && mediaInfo.type ? streamProcessorDict[mediaInfo.type].getRepresentationInfo() : null;

        if (useDeadTimeLatency && latency && voRepresentation && voRepresentation.fragmentDuration) {
            latency = latency / 1000;
            var fragmentDuration = voRepresentation.fragmentDuration;
            if (latency > fragmentDuration) {
                return 0;
            } else {
                var deadTimeRatio = latency / fragmentDuration;
                bitrate = bitrate * (1 - deadTimeRatio);
            }
        }

        var bitrateList = getBitrateList(mediaInfo);

        for (var i = bitrateList.length - 1; i >= 0; i--) {
            var bitrateInfo = bitrateList[i];
            if (bitrate * 1000 >= bitrateInfo.bitrate) {
                return i;
            }
        }
        return QUALITY_DEFAULT;
    }

    /**
     * @param {MediaInfo} mediaInfo
     * @returns {Array|null} A list of {@link BitrateInfo} objects
     * @memberof AbrController#
     */
    function getBitrateList(mediaInfo) {
        var infoList = [];
        if (!mediaInfo || !mediaInfo.bitrateList) return infoList;

        var bitrateList = mediaInfo.bitrateList;
        var type = mediaInfo.type;

        var bitrateInfo = void 0;

        for (var i = 0, ln = bitrateList.length; i < ln; i++) {
            bitrateInfo = new _BitrateInfo2.default();
            bitrateInfo.mediaType = type;
            bitrateInfo.qualityIndex = i;
            bitrateInfo.bitrate = bitrateList[i].bandwidth;
            bitrateInfo.width = bitrateList[i].width;
            bitrateInfo.height = bitrateList[i].height;
            bitrateInfo.scanType = bitrateList[i].scanType;
            infoList.push(bitrateInfo);
        }

        return infoList;
    }

    function updateIsUsingBufferOccupancyABR(mediaType, bufferLevel) {
        var strategy = mediaPlayerModel.getABRStrategy();

        if (strategy === _Constants2.default.ABR_STRATEGY_BOLA) {
            isUsingBufferOccupancyABRDict[mediaType] = true;
            return;
        } else if (strategy === _Constants2.default.ABR_STRATEGY_THROUGHPUT) {
            isUsingBufferOccupancyABRDict[mediaType] = false;
            return;
        }
        // else ABR_STRATEGY_DYNAMIC

        var stableBufferTime = mediaPlayerModel.getStableBufferTime();
        var switchOnThreshold = stableBufferTime;
        var switchOffThreshold = 0.5 * stableBufferTime;

        var useBufferABR = isUsingBufferOccupancyABRDict[mediaType];
        var newUseBufferABR = bufferLevel > (useBufferABR ? switchOffThreshold : switchOnThreshold); // use hysteresis to avoid oscillating rules
        isUsingBufferOccupancyABRDict[mediaType] = newUseBufferABR;

        if (newUseBufferABR !== useBufferABR) {
            if (newUseBufferABR) {
                logger.info('AbrController (' + mediaType + ') switching from throughput to buffer occupancy ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');
            } else {
                logger.info('AbrController (' + mediaType + ') switching from buffer occupancy to throughput ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');
            }
        }
    }

    function useBufferOccupancyABR(mediaType) {
        return isUsingBufferOccupancyABRDict[mediaType];
    }

    function getThroughputHistory() {
        return throughputHistory;
    }

    function updateTopQualityIndex(mediaInfo) {
        var type = mediaInfo.type;
        var streamId = mediaInfo.streamInfo.id;
        var max = mediaInfo.representationCount - 1;

        setTopQualityIndex(type, streamId, max);

        return max;
    }

    function isPlayingAtTopQuality(streamInfo) {
        var streamId = streamInfo ? streamInfo.id : null;
        var audioQuality = getQualityFor(_Constants2.default.AUDIO);
        var videoQuality = getQualityFor(_Constants2.default.VIDEO);

        var isAtTop = audioQuality === getTopQualityIndexFor(_Constants2.default.AUDIO, streamId) && videoQuality === getTopQualityIndexFor(_Constants2.default.VIDEO, streamId);

        return isAtTop;
    }

    function getQualityFor(type) {
        if (type && streamProcessorDict[type]) {
            var streamInfo = streamProcessorDict[type].getStreamInfo();
            var id = streamInfo ? streamInfo.id : null;
            var quality = void 0;

            if (id) {
                qualityDict[id] = qualityDict[id] || {};

                if (!qualityDict[id].hasOwnProperty(type)) {
                    qualityDict[id][type] = QUALITY_DEFAULT;
                }

                quality = qualityDict[id][type];
                return quality;
            }
        }
        return QUALITY_DEFAULT;
    }

    function setQualityFor(type, id, value) {
        qualityDict[id] = qualityDict[id] || {};
        qualityDict[id][type] = value;
    }

    function setTopQualityIndex(type, id, value) {
        topQualities[id] = topQualities[id] || {};
        topQualities[id][type] = value;
    }

    function checkMaxBitrate(idx, type) {
        var newIdx = idx;

        if (!streamProcessorDict[type]) {
            return newIdx;
        }

        var minIdx = getMinAllowedIndexFor(type);
        if (minIdx !== undefined) {
            newIdx = Math.max(idx, minIdx);
        }

        var maxIdx = getMaxAllowedIndexFor(type);
        if (maxIdx !== undefined) {
            newIdx = Math.min(newIdx, maxIdx);
        }

        return newIdx;
    }

    function checkMaxRepresentationRatio(idx, type, maxIdx) {
        var maxRepresentationRatio = getMaxAllowedRepresentationRatioFor(type);
        if (isNaN(maxRepresentationRatio) || maxRepresentationRatio >= 1 || maxRepresentationRatio < 0) {
            return idx;
        }
        return Math.min(idx, Math.round(maxIdx * maxRepresentationRatio));
    }

    function setWindowResizeEventCalled(value) {
        windowResizeEventCalled = value;
    }

    function setElementSize() {
        if (videoModel) {
            var hasPixelRatio = usePixelRatioInLimitBitrateByPortal && window.hasOwnProperty('devicePixelRatio');
            var pixelRatio = hasPixelRatio ? window.devicePixelRatio : 1;
            elementWidth = videoModel.getClientWidth() * pixelRatio;
            elementHeight = videoModel.getClientHeight() * pixelRatio;
        }
    }

    function checkPortalSize(idx, type) {
        if (type !== _Constants2.default.VIDEO || !limitBitrateByPortal || !streamProcessorDict[type]) {
            return idx;
        }

        if (!windowResizeEventCalled) {
            setElementSize();
        }

        var manifest = manifestModel.getValue();
        var representation = adapter.getAdaptationForType(manifest, 0, type).Representation;
        var newIdx = idx;
        var scaledWidth = elementWidth * Math.sqrt(portalScale);
        var scaledHeight = elementHeight * Math.sqrt(portalScale);
        if (scaledWidth > 0 && scaledHeight > 0) {
            while (newIdx > 0 && representation[newIdx] && scaledWidth < representation[newIdx].width && scaledWidth - representation[newIdx - 1].width < representation[newIdx].width - scaledWidth && representation[newIdx - 1].bandwidth >= portalLimitMinimum * 1000) {
                newIdx = newIdx - 1;
            }

            if (representation.length - 2 >= newIdx && representation[newIdx].width === representation[newIdx + 1].width) {
                newIdx = Math.min(idx, newIdx + 1);
            }
        }

        return newIdx;
    }

    function onFragmentLoadProgress(e) {
        var type = e.request.mediaType;
        if (getAutoSwitchBitrateFor(type)) {
            var streamProcessor = streamProcessorDict[type];
            if (!streamProcessor) return; // There may be a fragment load in progress when we switch periods and recreated some controllers.

            var rulesContext = (0, _RulesContext2.default)(context).create({
                abrController: instance,
                streamProcessor: streamProcessor,
                currentRequest: e.request,
                useBufferOccupancyABR: useBufferOccupancyABR(type)
            });
            var switchRequest = abrRulesCollection.shouldAbandonFragment(rulesContext);

            if (switchRequest.quality > _SwitchRequest2.default.NO_CHANGE) {
                var fragmentModel = streamProcessor.getFragmentModel();
                var request = fragmentModel.getRequests({ state: _FragmentModel2.default.FRAGMENT_MODEL_LOADING, index: e.request.index })[0];
                if (request) {
                    //TODO Check if we should abort or if better to finish download. check bytesLoaded/Total
                    fragmentModel.abortRequests();
                    setAbandonmentStateFor(type, ABANDON_LOAD);
                    switchHistoryDict[type].reset();
                    switchHistoryDict[type].push({ oldValue: getQualityFor(type, streamController.getActiveStreamInfo()), newValue: switchRequest.quality, confidence: 1, reason: switchRequest.reason });
                    setPlaybackQuality(type, streamController.getActiveStreamInfo(), switchRequest.quality, switchRequest.reason);

                    clearTimeout(abandonmentTimeout);
                    abandonmentTimeout = setTimeout(function () {
                        setAbandonmentStateFor(type, ALLOW_LOAD);abandonmentTimeout = null;
                    }, mediaPlayerModel.getAbandonLoadTimeout());
                }
            }
        }
    }

    function getSwitchHistory(type) {
        return switchHistoryDict[type];
    }

    instance = {
        isPlayingAtTopQuality: isPlayingAtTopQuality,
        updateTopQualityIndex: updateTopQualityIndex,
        getThroughputHistory: getThroughputHistory,
        getBitrateList: getBitrateList,
        getQualityForBitrate: getQualityForBitrate,
        getMaxAllowedBitrateFor: getMaxAllowedBitrateFor,
        getTopBitrateInfoFor: getTopBitrateInfoFor,
        getMinAllowedBitrateFor: getMinAllowedBitrateFor,
        setMaxAllowedBitrateFor: setMaxAllowedBitrateFor,
        setMinAllowedBitrateFor: setMinAllowedBitrateFor,
        getMaxAllowedIndexFor: getMaxAllowedIndexFor,
        getMinAllowedIndexFor: getMinAllowedIndexFor,
        getMaxAllowedRepresentationRatioFor: getMaxAllowedRepresentationRatioFor,
        setMaxAllowedRepresentationRatioFor: setMaxAllowedRepresentationRatioFor,
        getInitialBitrateFor: getInitialBitrateFor,
        setInitialBitrateFor: setInitialBitrateFor,
        getInitialRepresentationRatioFor: getInitialRepresentationRatioFor,
        setInitialRepresentationRatioFor: setInitialRepresentationRatioFor,
        setAutoSwitchBitrateFor: setAutoSwitchBitrateFor,
        getAutoSwitchBitrateFor: getAutoSwitchBitrateFor,
        getUseDeadTimeLatency: getUseDeadTimeLatency,
        setUseDeadTimeLatency: setUseDeadTimeLatency,
        setLimitBitrateByPortal: setLimitBitrateByPortal,
        getLimitBitrateByPortal: getLimitBitrateByPortal,
        setPortalScale: setPortalScale,
        getPortalScale: getPortalScale,
        getUsePixelRatioInLimitBitrateByPortal: getUsePixelRatioInLimitBitrateByPortal,
        setUsePixelRatioInLimitBitrateByPortal: setUsePixelRatioInLimitBitrateByPortal,
        getPortalLimitMinimum: getPortalLimitMinimum,
        setPortalLimitMinimum: setPortalLimitMinimum,
        getQualityFor: getQualityFor,
        getAbandonmentStateFor: getAbandonmentStateFor,
        setPlaybackQuality: setPlaybackQuality,
        checkPlaybackQuality: checkPlaybackQuality,
        getTopQualityIndexFor: getTopQualityIndexFor,
        setElementSize: setElementSize,
        setWindowResizeEventCalled: setWindowResizeEventCalled,
        createAbrRulesCollection: createAbrRulesCollection,
        registerStreamType: registerStreamType,
        unRegisterStreamType: unRegisterStreamType,
        setConfig: setConfig,
        getSwitchHistory: getSwitchHistory,
        reset: reset
    };

    setup();

    return instance;
}

AbrController.__dashjs_factory_name = 'AbrController';
var factory = _FactoryMaker2.default.getSingletonFactory(AbrController);
factory.ABANDON_LOAD = ABANDON_LOAD;
factory.QUALITY_DEFAULT = QUALITY_DEFAULT;
_FactoryMaker2.default.updateSingletonFactory(AbrController.__dashjs_factory_name, factory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/BaseURLController.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/BaseURLController.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _BaseURLTreeModel = __webpack_require__(/*! ../models/BaseURLTreeModel */ "./node_modules/dashjs/src/streaming/models/BaseURLTreeModel.js");

var _BaseURLTreeModel2 = _interopRequireDefault(_BaseURLTreeModel);

var _BaseURLSelector = __webpack_require__(/*! ../utils/BaseURLSelector */ "./node_modules/dashjs/src/streaming/utils/BaseURLSelector.js");

var _BaseURLSelector2 = _interopRequireDefault(_BaseURLSelector);

var _URLUtils = __webpack_require__(/*! ../utils/URLUtils */ "./node_modules/dashjs/src/streaming/utils/URLUtils.js");

var _URLUtils2 = _interopRequireDefault(_URLUtils);

var _BaseURL = __webpack_require__(/*! ../../dash/vo/BaseURL */ "./node_modules/dashjs/src/dash/vo/BaseURL.js");

var _BaseURL2 = _interopRequireDefault(_BaseURL);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BaseURLController() {

    var instance = void 0;
    var dashManifestModel = void 0;

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var urlUtils = (0, _URLUtils2.default)(context).getInstance();

    var baseURLTreeModel = void 0,
        baseURLSelector = void 0;

    function onBlackListChanged(e) {
        baseURLTreeModel.invalidateSelectedIndexes(e.entry);
    }

    function setup() {
        baseURLTreeModel = (0, _BaseURLTreeModel2.default)(context).create();
        baseURLSelector = (0, _BaseURLSelector2.default)(context).create();

        eventBus.on(_Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED, onBlackListChanged, instance);
    }

    function setConfig(config) {
        if (config.baseURLTreeModel) {
            baseURLTreeModel = config.baseURLTreeModel;
        }

        if (config.baseURLSelector) {
            baseURLSelector = config.baseURLSelector;
        }

        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
    }

    function update(manifest) {
        baseURLTreeModel.update(manifest);
        baseURLSelector.chooseSelectorFromManifest(manifest);
    }

    function resolve(path) {
        var baseUrls = baseURLTreeModel.getForPath(path);

        var baseUrl = baseUrls.reduce(function (p, c) {
            var b = baseURLSelector.select(c);

            if (b) {
                if (!urlUtils.isRelative(b.url)) {
                    p.url = b.url;
                    p.serviceLocation = b.serviceLocation;
                } else {
                    p.url = urlUtils.resolve(b.url, p.url);
                }
                p.availabilityTimeOffset = b.availabilityTimeOffset;
                p.availabilityTimeComplete = b.availabilityTimeComplete;
            } else {
                return new _BaseURL2.default();
            }

            return p;
        }, new _BaseURL2.default());

        if (!urlUtils.isRelative(baseUrl.url)) {
            return baseUrl;
        }
    }

    function reset() {
        baseURLTreeModel.reset();
        baseURLSelector.reset();
    }

    function initialize(data) {

        // report config to baseURLTreeModel and baseURLSelector
        baseURLTreeModel.setConfig({
            dashManifestModel: dashManifestModel
        });
        baseURLSelector.setConfig({
            dashManifestModel: dashManifestModel
        });

        update(data);
    }

    instance = {
        reset: reset,
        initialize: initialize,
        resolve: resolve,
        setConfig: setConfig
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

BaseURLController.__dashjs_factory_name = 'BaseURLController';
exports.default = _FactoryMaker2.default.getSingletonFactory(BaseURLController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/BlacklistController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/BlacklistController.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function BlackListController(config) {

    config = config || {};
    var blacklist = [];

    var eventBus = (0, _EventBus2.default)(this.context).getInstance();
    var updateEventName = config.updateEventName;
    var addBlacklistEventName = config.addBlacklistEventName;

    function contains(query) {
        if (!blacklist.length || !query || !query.length) {
            return false;
        }

        return blacklist.indexOf(query) !== -1;
    }

    function add(entry) {
        if (blacklist.indexOf(entry) !== -1) {
            return;
        }

        blacklist.push(entry);

        eventBus.trigger(updateEventName, {
            entry: entry
        });
    }

    function onAddBlackList(e) {
        add(e.entry);
    }

    function setup() {
        if (addBlacklistEventName) {
            eventBus.on(addBlacklistEventName, onAddBlackList, this);
        }
    }

    function reset() {
        blacklist = [];
    }

    setup();

    return {
        add: add,
        contains: contains,
        reset: reset
    };
}

BlackListController.__dashjs_factory_name = 'BlackListController';
exports.default = _FactoryMaker2.default.getClassFactory(BlackListController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/BufferController.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/BufferController.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _FragmentModel = __webpack_require__(/*! ../models/FragmentModel */ "./node_modules/dashjs/src/streaming/models/FragmentModel.js");

var _FragmentModel2 = _interopRequireDefault(_FragmentModel);

var _SourceBufferSink = __webpack_require__(/*! ../SourceBufferSink */ "./node_modules/dashjs/src/streaming/SourceBufferSink.js");

var _SourceBufferSink2 = _interopRequireDefault(_SourceBufferSink);

var _PreBufferSink = __webpack_require__(/*! ../PreBufferSink */ "./node_modules/dashjs/src/streaming/PreBufferSink.js");

var _PreBufferSink2 = _interopRequireDefault(_PreBufferSink);

var _AbrController = __webpack_require__(/*! ./AbrController */ "./node_modules/dashjs/src/streaming/controllers/AbrController.js");

var _AbrController2 = _interopRequireDefault(_AbrController);

var _MediaController = __webpack_require__(/*! ./MediaController */ "./node_modules/dashjs/src/streaming/controllers/MediaController.js");

var _MediaController2 = _interopRequireDefault(_MediaController);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _BoxParser = __webpack_require__(/*! ../utils/BoxParser */ "./node_modules/dashjs/src/streaming/utils/BoxParser.js");

var _BoxParser2 = _interopRequireDefault(_BoxParser);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _InitCache = __webpack_require__(/*! ../utils/InitCache */ "./node_modules/dashjs/src/streaming/utils/InitCache.js");

var _InitCache2 = _interopRequireDefault(_InitCache);

var _VideoModel = __webpack_require__(/*! ../models/VideoModel */ "./node_modules/dashjs/src/streaming/models/VideoModel.js");

var _VideoModel2 = _interopRequireDefault(_VideoModel);

var _DashJSError = __webpack_require__(/*! ../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Errors = __webpack_require__(/*! ../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _HTTPRequest = __webpack_require__(/*! ../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
var BUFFER_LOADED = 'bufferLoaded';
var BUFFER_EMPTY = 'bufferStalled';
var STALL_THRESHOLD = 0.5;
var BUFFER_END_THRESHOLD = 0.5;
var BUFFER_RANGE_CALCULATION_THRESHOLD = 0.01;
var QUOTA_EXCEEDED_ERROR_CODE = 22;

var BUFFER_CONTROLLER_TYPE = 'BufferController';

function BufferController(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var metricsModel = config.metricsModel;
    var mediaPlayerModel = config.mediaPlayerModel;
    var errHandler = config.errHandler;
    var streamController = config.streamController;
    var mediaController = config.mediaController;
    var adapter = config.adapter;
    var textController = config.textController;
    var abrController = config.abrController;
    var playbackController = config.playbackController;
    var type = config.type;
    var streamProcessor = config.streamProcessor;

    var instance = void 0,
        logger = void 0,
        requiredQuality = void 0,
        isBufferingCompleted = void 0,
        bufferLevel = void 0,
        criticalBufferLevel = void 0,
        mediaSource = void 0,
        maxAppendedIndex = void 0,
        lastIndex = void 0,
        buffer = void 0,
        dischargeBuffer = void 0,
        bufferState = void 0,
        appendedBytesInfo = void 0,
        wallclockTicked = void 0,
        isPruningInProgress = void 0,
        videoModel = void 0,
        initCache = void 0,
        seekStartTime = void 0,
        seekClearedBufferingCompleted = void 0,
        firstFragmentAppended = void 0,
        pendingPruningRanges = void 0,
        bufferResetInProgress = void 0,
        mediaChunk = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        initCache = (0, _InitCache2.default)(context).getInstance();

        resetInitialSettings();
    }

    function getBufferControllerType() {
        return BUFFER_CONTROLLER_TYPE;
    }

    function initialize(Source) {
        setMediaSource(Source);
        videoModel = (0, _VideoModel2.default)(context).getInstance();

        requiredQuality = abrController.getQualityFor(type, streamProcessor.getStreamInfo());

        eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
        eventBus.on(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this);
        eventBus.on(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this);
        eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);
        eventBus.on(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this);
        eventBus.on(_Events2.default.PLAYBACK_PLAYING, onPlaybackPlaying, this);
        eventBus.on(_Events2.default.PLAYBACK_PROGRESS, onPlaybackProgression, this);
        eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);
        eventBus.on(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);
        eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this);
        eventBus.on(_Events2.default.PLAYBACK_SEEKED, onPlaybackSeeked, this);
        eventBus.on(_Events2.default.PLAYBACK_STALLED, onPlaybackStalled, this);
        eventBus.on(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);
        eventBus.on(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this, _EventBus2.default.EVENT_PRIORITY_HIGH);
        eventBus.on(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this);
    }

    function createBuffer(mediaInfo, oldBuffers) {
        if (!initCache || !mediaInfo || !streamProcessor) return null;
        if (mediaSource) {
            try {
                if (oldBuffers && oldBuffers[type]) {
                    buffer = (0, _SourceBufferSink2.default)(context).create(mediaSource, mediaInfo, onAppended.bind(this), oldBuffers[type]);
                } else {
                    buffer = (0, _SourceBufferSink2.default)(context).create(mediaSource, mediaInfo, onAppended.bind(this));
                }
                if (typeof buffer.getBuffer().initialize === 'function') {
                    buffer.getBuffer().initialize(type, streamProcessor);
                }
            } catch (e) {
                logger.fatal('Caught error on create SourceBuffer: ' + e);
                errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');
                errHandler.error(new _DashJSError2.default(_Errors2.default.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, _Errors2.default.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));
            }
        } else {
            buffer = (0, _PreBufferSink2.default)(context).create(onAppended.bind(this));
        }
        updateBufferTimestampOffset(streamProcessor.getRepresentationInfo(requiredQuality).MSETimeOffset);
        return buffer;
    }

    function dischargePreBuffer() {
        if (buffer && dischargeBuffer && typeof dischargeBuffer.discharge === 'function') {
            var ranges = dischargeBuffer.getAllBufferRanges();

            if (ranges.length > 0) {
                var rangeStr = 'Beginning ' + type + 'PreBuffer discharge, adding buffer for:';
                for (var i = 0; i < ranges.length; i++) {
                    rangeStr += ' start: ' + ranges.start(i) + ', end: ' + ranges.end(i) + ';';
                }
                logger.debug(rangeStr);
            } else {
                logger.debug('PreBuffer discharge requested, but there were no media segments in the PreBuffer.');
            }

            var chunks = dischargeBuffer.discharge();
            var lastInit = null;
            for (var j = 0; j < chunks.length; j++) {
                var chunk = chunks[j];
                var initChunk = initCache.extract(chunk.streamId, chunk.representationId);
                if (initChunk) {
                    if (lastInit !== initChunk) {
                        buffer.append(initChunk);
                        lastInit = initChunk;
                    }
                    buffer.append(chunk); //TODO Think about supressing buffer events the second time round after a discharge?
                }
            }

            dischargeBuffer.reset();
            dischargeBuffer = null;
        }
    }

    function isActive() {
        return streamProcessor && streamController && streamProcessor.getStreamInfo();
    }

    function onInitFragmentLoaded(e) {
        if (e.fragmentModel !== streamProcessor.getFragmentModel()) return;
        logger.info('Init fragment finished loading saving to', type + '\'s init cache');
        initCache.save(e.chunk);
        logger.debug('Append Init fragment', type, ' with representationId:', e.chunk.representationId, ' and quality:', e.chunk.quality, ', data size:', e.chunk.bytes.byteLength);
        appendToBuffer(e.chunk);
    }

    function switchInitData(streamId, representationId, bufferResetEnabled) {
        var chunk = initCache.extract(streamId, representationId);
        bufferResetInProgress = bufferResetEnabled === true ? bufferResetEnabled : false;
        if (chunk) {
            logger.info('Append Init fragment', type, ' with representationId:', chunk.representationId, ' and quality:', chunk.quality, ', data size:', chunk.bytes.byteLength);
            appendToBuffer(chunk);
        } else {
            eventBus.trigger(_Events2.default.INIT_REQUESTED, { sender: instance });
        }
    }

    function onMediaFragmentLoaded(e) {
        if (e.fragmentModel !== streamProcessor.getFragmentModel()) return;

        var chunk = e.chunk;
        var bytes = chunk.bytes;
        var quality = chunk.quality;
        var currentRepresentation = streamProcessor.getRepresentationInfo(quality);
        var eventStreamMedia = adapter.getEventsFor(currentRepresentation.mediaInfo, streamProcessor);
        var eventStreamTrack = adapter.getEventsFor(currentRepresentation, streamProcessor);

        if (eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0) {
            var request = streamProcessor.getFragmentModel().getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                quality: quality,
                index: chunk.index
            })[0];

            var events = handleInbandEvents(bytes, request, eventStreamMedia, eventStreamTrack);
            streamProcessor.addInbandEvents(events);
        }

        if (bufferResetInProgress) {
            mediaChunk = chunk;
            var ranges = buffer && buffer.getAllBufferRanges();
            if (ranges && ranges.length > 0 && playbackController.getTimeToStreamEnd() > STALL_THRESHOLD) {
                logger.debug('Clearing buffer because track changed - ' + (ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD));
                clearBuffers([{
                    start: 0,
                    end: ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD,
                    force: true // Force buffer removal even when buffering is completed and MediaSource is ended
                }]);
            }
        } else {
            appendToBuffer(chunk);
        }
    }

    function appendToBuffer(chunk) {
        buffer.append(chunk);

        if (chunk.mediaInfo.type === _Constants2.default.VIDEO) {
            eventBus.trigger(_Events2.default.VIDEO_CHUNK_RECEIVED, { chunk: chunk });
        }
    }

    function showBufferRanges(ranges) {
        if (ranges && ranges.length > 0) {
            for (var i = 0, len = ranges.length; i < len; i++) {
                logger.debug('Buffered Range for type:', type, ':', ranges.start(i), ' - ', ranges.end(i), ' currentTime = ', playbackController.getTime());
            }
        }
    }

    function onAppended(e) {
        if (e.error) {
            if (e.error.code === QUOTA_EXCEEDED_ERROR_CODE) {
                criticalBufferLevel = getTotalBufferedTime() * 0.8;
                logger.warn('Quota exceeded for type: ' + type + ', Critical Buffer: ' + criticalBufferLevel);

                if (criticalBufferLevel > 0) {
                    // recalculate buffer lengths to keep (bufferToKeep, bufferAheadToKeep, bufferTimeAtTopQuality) according to criticalBufferLevel
                    var bufferToKeep = Math.max(0.2 * criticalBufferLevel, 1);
                    var bufferAhead = criticalBufferLevel - bufferToKeep;
                    mediaPlayerModel.setBufferToKeep(parseFloat(bufferToKeep.toFixed(5)));
                    mediaPlayerModel.setBufferAheadToKeep(parseFloat(bufferAhead.toFixed(5)));
                }
            }
            if (e.error.code === QUOTA_EXCEEDED_ERROR_CODE || !hasEnoughSpaceToAppend()) {
                logger.warn('Clearing playback buffer to overcome quota exceed situation for type: ' + type);
                eventBus.trigger(_Events2.default.QUOTA_EXCEEDED, { sender: instance, criticalBufferLevel: criticalBufferLevel }); //Tells ScheduleController to stop scheduling.
                pruneAllSafely(); // Then we clear the buffer and onCleared event will tell ScheduleController to start scheduling again.
            }
            return;
        }

        appendedBytesInfo = e.chunk;
        if (appendedBytesInfo && !isNaN(appendedBytesInfo.index)) {
            maxAppendedIndex = Math.max(appendedBytesInfo.index, maxAppendedIndex);
            checkIfBufferingCompleted();
        }
        var ranges = buffer.getAllBufferRanges();
        if (!firstFragmentAppended && !isNaN(e.chunk.end)) {
            //For the first non-init segment
            var closestEndDifference = NaN;
            var closestRange = NaN;
            for (var i = 0; i < ranges.length; i++) {
                var endDifference = ranges.end(i) - e.chunk.end;
                if (endDifference < 0) {
                    endDifference = -endDifference;
                }
                if (closestEndDifference > endDifference || isNaN(closestEndDifference)) {
                    closestEndDifference = endDifference;
                    closestRange = i;
                }
            }

            if (!isNaN(closestRange)) {
                var timeOffset = ranges.end(closestRange) - e.chunk.end;

                if (timeOffset > 0.5 || timeOffset < -0.5) {
                    streamProcessor.getFragmentModel().setMediaManifestOffset(timeOffset);
                }
            }

            firstFragmentAppended = true;
        }

        if (appendedBytesInfo.segmentType === _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE) {
            showBufferRanges(ranges);
            onPlaybackProgression();
        } else {
            if (bufferResetInProgress) {
                var currentTime = playbackController.getTime();
                logger.debug('AppendToBuffer seek target should be ' + currentTime);
                streamProcessor.getScheduleController().setSeekTarget(currentTime);
                adapter.setIndexHandlerTime(streamProcessor, currentTime);
            }
        }

        var dataEvent = {
            sender: instance,
            quality: appendedBytesInfo.quality,
            startTime: appendedBytesInfo.start,
            index: appendedBytesInfo.index,
            bufferedRanges: ranges,
            mediaType: type
        };
        if (appendedBytesInfo && !appendedBytesInfo.endFragment) {
            eventBus.trigger(_Events2.default.BYTES_APPENDED, dataEvent);
        } else if (appendedBytesInfo) {
            eventBus.trigger(_Events2.default.BYTES_APPENDED_END_FRAGMENT, dataEvent);
        }
    }

    function onQualityChanged(e) {
        if (requiredQuality === e.newQuality || type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;

        updateBufferTimestampOffset(streamProcessor.getRepresentationInfo(e.newQuality).MSETimeOffset);
        requiredQuality = e.newQuality;
    }

    //**********************************************************************
    // START Buffer Level, State & Sufficiency Handling.
    //**********************************************************************
    function onPlaybackSeeking() {
        if (isBufferingCompleted) {
            seekClearedBufferingCompleted = true;
            isBufferingCompleted = false;
            //a seek command has occured, reset lastIndex value, it will be set next time that onStreamCompleted will be called.
            lastIndex = Number.POSITIVE_INFINITY;
        }
        if (type !== _Constants2.default.FRAGMENTED_TEXT) {
            // remove buffer after seeking operations
            pruneAllSafely();
        } else {
            onPlaybackProgression();
        }
    }

    function onPlaybackSeeked() {
        seekStartTime = undefined;
    }

    // Prune full buffer but what is around current time position
    function pruneAllSafely() {
        var ranges = getAllRangesWithSafetyFactor();
        if (!ranges || ranges.length === 0) {
            onPlaybackProgression();
        }
        clearBuffers(ranges);
    }

    // Get all buffer ranges but a range around current time position
    function getAllRangesWithSafetyFactor() {
        var clearRanges = [];
        var ranges = buffer.getAllBufferRanges();
        if (!ranges || ranges.length === 0) {
            return clearRanges;
        }

        var currentTime = playbackController.getTime();
        var endOfBuffer = ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD;

        var currentTimeRequest = streamProcessor.getFragmentModel().getRequests({
            state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
            time: currentTime,
            threshold: BUFFER_RANGE_CALCULATION_THRESHOLD
        })[0];

        // There is no request in current time position yet. Let's remove everything
        if (!currentTimeRequest) {
            logger.debug('getAllRangesWithSafetyFactor for', type, '- No request found in current time position, removing full buffer 0 -', endOfBuffer);
            clearRanges.push({
                start: 0,
                end: endOfBuffer
            });
        } else {
            // Build buffer behind range. To avoid pruning time around current time position,
            // we include fragment right behind the one in current time position
            var behindRange = {
                start: 0,
                end: currentTimeRequest.startTime - STALL_THRESHOLD
            };
            var prevReq = streamProcessor.getFragmentModel().getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                time: currentTimeRequest.startTime - currentTimeRequest.duration / 2,
                threshold: BUFFER_RANGE_CALCULATION_THRESHOLD
            })[0];
            if (prevReq && prevReq.startTime != currentTimeRequest.startTime) {
                behindRange.end = prevReq.startTime;
            }
            if (behindRange.start < behindRange.end && behindRange.end > ranges.start(0)) {
                clearRanges.push(behindRange);
            }

            // Build buffer ahead range. To avoid pruning time around current time position,
            // we include fragment right after the one in current time position
            var aheadRange = {
                start: currentTimeRequest.startTime + currentTimeRequest.duration + STALL_THRESHOLD,
                end: endOfBuffer
            };
            var nextReq = streamProcessor.getFragmentModel().getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                time: currentTimeRequest.startTime + currentTimeRequest.duration + STALL_THRESHOLD,
                threshold: BUFFER_RANGE_CALCULATION_THRESHOLD
            })[0];
            if (nextReq && nextReq.startTime !== currentTimeRequest.startTime) {
                aheadRange.start = nextReq.startTime + nextReq.duration + STALL_THRESHOLD;
            }
            if (aheadRange.start < aheadRange.end && aheadRange.start < endOfBuffer) {
                clearRanges.push(aheadRange);
            }
        }

        return clearRanges;
    }

    function getWorkingTime() {
        // This function returns current working time for buffer (either start time or current time if playback has started)
        var ret = playbackController.getTime();

        if (seekStartTime) {
            // if there is a seek start time, the first buffer data will be available on maximum value between first buffer range value and seek start time.
            var ranges = buffer.getAllBufferRanges();
            if (ranges && ranges.length) {
                ret = Math.max(ranges.start(0), seekStartTime);
            }
        }
        return ret;
    }

    function onPlaybackProgression() {
        if (!bufferResetInProgress || type === _Constants2.default.FRAGMENTED_TEXT && textController.isTextEnabled()) {
            updateBufferLevel();
            addBufferMetrics();
        }
    }

    function onPlaybackStalled() {
        checkIfSufficientBuffer();
    }

    function onPlaybackPlaying() {
        checkIfSufficientBuffer();
    }

    function getRangeAt(time, tolerance) {
        var ranges = buffer.getAllBufferRanges();
        var start = 0;
        var end = 0;
        var firstStart = null;
        var lastEnd = null;
        var gap = 0;
        var len = void 0,
            i = void 0;

        var toler = tolerance || 0.15;

        if (ranges !== null && ranges !== undefined) {
            for (i = 0, len = ranges.length; i < len; i++) {
                start = ranges.start(i);
                end = ranges.end(i);
                if (firstStart === null) {
                    gap = Math.abs(start - time);
                    if (time >= start && time < end) {
                        // start the range
                        firstStart = start;
                        lastEnd = end;
                    } else if (gap <= toler) {
                        // start the range even though the buffer does not contain time 0
                        firstStart = start;
                        lastEnd = end;
                    }
                } else {
                    gap = start - lastEnd;
                    if (gap <= toler) {
                        // the discontinuity is smaller than the tolerance, combine the ranges
                        lastEnd = end;
                    } else {
                        break;
                    }
                }
            }

            if (firstStart !== null) {
                return {
                    start: firstStart,
                    end: lastEnd
                };
            }
        }

        return null;
    }

    function getBufferLength(time, tolerance) {
        var range = void 0,
            length = void 0;

        range = getRangeAt(time, tolerance);

        if (range === null) {
            length = 0;
        } else {
            length = range.end - time;
        }

        return length;
    }

    function updateBufferLevel() {
        if (playbackController) {
            bufferLevel = getBufferLength(getWorkingTime() || 0);
            eventBus.trigger(_Events2.default.BUFFER_LEVEL_UPDATED, { sender: instance, bufferLevel: bufferLevel });
            checkIfSufficientBuffer();
        }
    }

    function addBufferMetrics() {
        if (!isActive()) return;
        metricsModel.addBufferState(type, bufferState, streamProcessor.getScheduleController().getBufferTarget());
        metricsModel.addBufferLevel(type, new Date(), bufferLevel * 1000);
    }

    function checkIfBufferingCompleted() {
        var isLastIdxAppended = maxAppendedIndex >= lastIndex - 1; // Handles 0 and non 0 based request index
        if (isLastIdxAppended && !isBufferingCompleted && buffer.discharge === undefined) {
            isBufferingCompleted = true;
            logger.debug('checkIfBufferingCompleted trigger BUFFERING_COMPLETED');
            eventBus.trigger(_Events2.default.BUFFERING_COMPLETED, { sender: instance, streamInfo: streamProcessor.getStreamInfo() });
        }
    }

    function checkIfSufficientBuffer() {
        // No need to check buffer if type is not audio or video (for example if several errors occur during text parsing, so that the buffer cannot be filled, no error must occur on video playback)
        if (type !== 'audio' && type !== 'video') return;

        if (seekClearedBufferingCompleted && !isBufferingCompleted && playbackController && playbackController.getTimeToStreamEnd() - bufferLevel < STALL_THRESHOLD) {
            seekClearedBufferingCompleted = false;
            isBufferingCompleted = true;
            logger.debug('checkIfSufficientBuffer trigger BUFFERING_COMPLETED');
            eventBus.trigger(_Events2.default.BUFFERING_COMPLETED, { sender: instance, streamInfo: streamProcessor.getStreamInfo() });
        }

        if ((!mediaPlayerModel.getLowLatencyEnabled() && bufferLevel < STALL_THRESHOLD || bufferLevel === 0) && !isBufferingCompleted) {
            var videoElement = videoModel.getElement();
            if (videoElement) {
                // Don't fire stalled events when we're so close to the end - for missing fragment error where we won't end
                // with milliseconds of a track left to play out.
                var t = videoElement.currentTime;
                var d = videoElement.duration;
                if (d - t > STALL_THRESHOLD || isNaN(d)) {
                    notifyBufferStateChanged(BUFFER_EMPTY);
                    return;
                }
            } else {
                return;
            }
        }

        notifyBufferStateChanged(BUFFER_LOADED);
    }

    function notifyBufferStateChanged(state) {
        if (bufferState === state || state === BUFFER_EMPTY && playbackController.getTime() === 0 || // Don't trigger BUFFER_EMPTY if it's initial loading
        type === _Constants2.default.FRAGMENTED_TEXT && !textController.isTextEnabled()) {
            return;
        }

        bufferState = state;
        addBufferMetrics();

        eventBus.trigger(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, { sender: instance, state: state, mediaType: type, streamInfo: streamProcessor.getStreamInfo() });
        eventBus.trigger(state === BUFFER_LOADED ? _Events2.default.BUFFER_LOADED : _Events2.default.BUFFER_EMPTY, { mediaType: type });
        logger.debug(state === BUFFER_LOADED ? 'Got enough buffer to start for ' + type : 'Waiting for more buffer before starting playback for ' + type);
    }

    function handleInbandEvents(data, request, mediaInbandEvents, trackInbandEvents) {
        var fragmentStartTime = Math.max(!request || isNaN(request.startTime) ? 0 : request.startTime, 0);
        var eventStreams = [];
        var events = [];

        /* Extract the possible schemeIdUri : If a DASH client detects an event message box with a scheme that is not defined in MPD, the client is expected to ignore it */
        var inbandEvents = mediaInbandEvents.concat(trackInbandEvents);
        for (var i = 0, ln = inbandEvents.length; i < ln; i++) {
            eventStreams[inbandEvents[i].schemeIdUri + '/' + inbandEvents[i].value] = inbandEvents[i];
        }

        var isoFile = (0, _BoxParser2.default)(context).getInstance().parse(data);
        var eventBoxes = isoFile.getBoxes('emsg');

        for (var _i = 0, _ln = eventBoxes.length; _i < _ln; _i++) {
            var event = adapter.getEvent(eventBoxes[_i], eventStreams, fragmentStartTime);

            if (event) {
                events.push(event);
            }
        }

        return events;
    }

    /* prune buffer on our own in background to avoid browsers pruning buffer silently */
    function pruneBuffer() {
        if (!buffer || type === _Constants2.default.FRAGMENTED_TEXT) {
            return;
        }

        if (!isBufferingCompleted) {
            clearBuffers(getClearRanges());
        }
    }

    function getClearRanges() {
        var clearRanges = [];
        var ranges = buffer.getAllBufferRanges();
        if (!ranges || ranges.length === 0) {
            return clearRanges;
        }

        var currentTime = playbackController.getTime();
        var rangeToKeep = {
            start: Math.max(0, currentTime - mediaPlayerModel.getBufferToKeep()),
            end: currentTime + mediaPlayerModel.getBufferAheadToKeep()
        };

        var currentTimeRequest = streamProcessor.getFragmentModel().getRequests({
            state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
            time: currentTime,
            threshold: BUFFER_RANGE_CALCULATION_THRESHOLD
        })[0];

        // Ensure we keep full range of current fragment
        if (currentTimeRequest) {
            rangeToKeep.start = Math.min(currentTimeRequest.startTime, rangeToKeep.start);
            rangeToKeep.end = Math.max(currentTimeRequest.startTime + currentTimeRequest.duration, rangeToKeep.end);
        } else if (currentTime === 0 && playbackController.getIsDynamic()) {
            // Don't prune before the live stream starts, it messes with low latency
            return [];
        }

        if (ranges.start(0) <= rangeToKeep.start) {
            var behindRange = {
                start: 0,
                end: rangeToKeep.start
            };
            for (var i = 0; i < ranges.length && ranges.end(i) <= rangeToKeep.start; i++) {
                behindRange.end = ranges.end(i);
            }
            if (behindRange.start < behindRange.end) {
                clearRanges.push(behindRange);
            }
        }

        if (ranges.end(ranges.length - 1) >= rangeToKeep.end) {
            var aheadRange = {
                start: rangeToKeep.end,
                end: ranges.end(ranges.length - 1) + BUFFER_RANGE_CALCULATION_THRESHOLD
            };

            if (aheadRange.start < aheadRange.end) {
                clearRanges.push(aheadRange);
            }
        }

        return clearRanges;
    }

    function clearBuffers(ranges) {
        if (!ranges || !buffer || ranges.length === 0) return;

        pendingPruningRanges.push.apply(pendingPruningRanges, ranges);
        if (isPruningInProgress) {
            return;
        }

        clearNextRange();
    }

    function clearNextRange() {
        // If there's nothing to prune reset state
        if (pendingPruningRanges.length === 0 || !buffer) {
            logger.debug('Nothing to prune, halt pruning');
            pendingPruningRanges = [];
            isPruningInProgress = false;
            return;
        }

        var sourceBuffer = buffer.getBuffer();
        // If there's nothing buffered any pruning is invalid, so reset our state
        if (!sourceBuffer || !sourceBuffer.buffered || sourceBuffer.buffered.length === 0) {
            logger.debug('SourceBuffer is empty (or does not exist), halt pruning');
            pendingPruningRanges = [];
            isPruningInProgress = false;
            return;
        }

        var range = pendingPruningRanges.shift();
        logger.debug('Removing', type, 'buffer from:', range.start, 'to', range.end);
        isPruningInProgress = true;

        // If removing buffer ahead current playback position, update maxAppendedIndex
        var currentTime = playbackController.getTime();
        if (currentTime < range.end) {
            isBufferingCompleted = false;
            maxAppendedIndex = 0;
            if (!bufferResetInProgress) {
                streamProcessor.getScheduleController().setSeekTarget(currentTime);
                adapter.setIndexHandlerTime(streamProcessor, currentTime);
            }
        }

        buffer.remove(range.start, range.end, range.force);
    }

    function onRemoved(e) {
        if (buffer !== e.buffer) return;

        logger.debug('onRemoved buffer from:', e.from, 'to', e.to);

        var ranges = buffer.getAllBufferRanges();
        showBufferRanges(ranges);

        if (pendingPruningRanges.length === 0) {
            isPruningInProgress = false;
        }

        if (e.unintended) {
            logger.warn('Detected unintended removal from:', e.from, 'to', e.to, 'setting index handler time to', e.from);
            adapter.setIndexHandlerTime(streamProcessor, e.from);
        }

        if (isPruningInProgress) {
            clearNextRange();
        } else {
            if (!bufferResetInProgress) {
                logger.debug('onRemoved : call updateBufferLevel');
                onPlaybackProgression();
            } else {
                bufferResetInProgress = false;
                if (mediaChunk) {
                    appendToBuffer(mediaChunk);
                }
            }
            eventBus.trigger(_Events2.default.BUFFER_CLEARED, { sender: instance, from: e.from, to: e.to, unintended: e.unintended, hasEnoughSpaceToAppend: hasEnoughSpaceToAppend() });
        }
        //TODO - REMEMBER removed a timerout hack calling clearBuffer after manifestInfo.minBufferTime * 1000 if !hasEnoughSpaceToAppend() Aug 04 2016
    }

    function updateBufferTimestampOffset(MSETimeOffset) {
        // Each track can have its own @presentationTimeOffset, so we should set the offset
        // if it has changed after switching the quality or updating an mpd
        if (buffer && buffer.updateTimestampOffset) {
            buffer.updateTimestampOffset(MSETimeOffset);
        }
    }

    function onDataUpdateCompleted(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor || e.error) return;
        updateBufferTimestampOffset(e.currentRepresentation.MSETimeOffset);
    }

    function onStreamCompleted(e) {
        if (e.fragmentModel !== streamProcessor.getFragmentModel()) return;
        lastIndex = e.request.index;
        checkIfBufferingCompleted();
    }

    function onCurrentTrackChanged(e) {
        var ranges = buffer && buffer.getAllBufferRanges();
        if (!ranges || e.newMediaInfo.type !== type || e.newMediaInfo.streamInfo.id !== streamProcessor.getStreamInfo().id) return;

        logger.info('Track change asked');
        if (mediaController.getSwitchMode(type) === _MediaController2.default.TRACK_SWITCH_MODE_ALWAYS_REPLACE) {
            if (ranges && ranges.length > 0 && playbackController.getTimeToStreamEnd() > STALL_THRESHOLD) {
                isBufferingCompleted = false;
                lastIndex = Number.POSITIVE_INFINITY;
            }
        }
    }

    function onWallclockTimeUpdated() {
        wallclockTicked++;
        var secondsElapsed = wallclockTicked * (mediaPlayerModel.getWallclockTimeUpdateInterval() / 1000);
        if (secondsElapsed >= mediaPlayerModel.getBufferPruningInterval()) {
            wallclockTicked = 0;
            pruneBuffer();
        }
    }

    function onPlaybackRateChanged() {
        checkIfSufficientBuffer();
    }

    function getType() {
        return type;
    }

    function getStreamProcessor() {
        return streamProcessor;
    }

    function setSeekStartTime(value) {
        seekStartTime = value;
    }

    function getBuffer() {
        return buffer;
    }

    function setBuffer(newBuffer) {
        buffer = newBuffer;
    }

    function getBufferLevel() {
        return bufferLevel;
    }

    function setMediaSource(value, mediaInfo) {
        mediaSource = value;
        if (buffer && mediaInfo) {
            //if we have a prebuffer, we should prepare to discharge it, and make a new sourceBuffer ready
            if (typeof buffer.discharge === 'function') {
                dischargeBuffer = buffer;
                createBuffer(mediaInfo);
            }
        }
    }

    function getMediaSource() {
        return mediaSource;
    }

    function getIsBufferingCompleted() {
        return isBufferingCompleted;
    }

    function getIsPruningInProgress() {
        return isPruningInProgress;
    }

    function getTotalBufferedTime() {
        var ranges = buffer.getAllBufferRanges();
        var totalBufferedTime = 0;
        var ln = void 0,
            i = void 0;

        if (!ranges) return totalBufferedTime;

        for (i = 0, ln = ranges.length; i < ln; i++) {
            totalBufferedTime += ranges.end(i) - ranges.start(i);
        }

        return totalBufferedTime;
    }

    function hasEnoughSpaceToAppend() {
        var totalBufferedTime = getTotalBufferedTime();
        return totalBufferedTime < criticalBufferLevel;
    }

    function resetInitialSettings(errored, keepBuffers) {
        criticalBufferLevel = Number.POSITIVE_INFINITY;
        bufferState = undefined;
        requiredQuality = _AbrController2.default.QUALITY_DEFAULT;
        lastIndex = Number.POSITIVE_INFINITY;
        maxAppendedIndex = 0;
        appendedBytesInfo = null;
        isBufferingCompleted = false;
        isPruningInProgress = false;
        seekClearedBufferingCompleted = false;
        firstFragmentAppended = false;
        bufferLevel = 0;
        wallclockTicked = 0;
        pendingPruningRanges = [];

        if (buffer) {
            if (!errored) {
                buffer.abort();
            }
            buffer.reset(keepBuffers);
            buffer = null;
        }

        bufferResetInProgress = false;
    }

    function reset(errored, keepBuffers) {
        eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
        eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);
        eventBus.off(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this);
        eventBus.off(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this);
        eventBus.off(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this);
        eventBus.off(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this);
        eventBus.off(_Events2.default.PLAYBACK_PLAYING, onPlaybackPlaying, this);
        eventBus.off(_Events2.default.PLAYBACK_PROGRESS, onPlaybackProgression, this);
        eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);
        eventBus.off(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);
        eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this);
        eventBus.off(_Events2.default.PLAYBACK_SEEKED, onPlaybackSeeked, this);
        eventBus.off(_Events2.default.PLAYBACK_STALLED, onPlaybackStalled, this);
        eventBus.off(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);
        eventBus.off(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this);

        resetInitialSettings(errored, keepBuffers);
    }

    instance = {
        getBufferControllerType: getBufferControllerType,
        initialize: initialize,
        createBuffer: createBuffer,
        dischargePreBuffer: dischargePreBuffer,
        getType: getType,
        getStreamProcessor: getStreamProcessor,
        setSeekStartTime: setSeekStartTime,
        getBuffer: getBuffer,
        setBuffer: setBuffer,
        getBufferLevel: getBufferLevel,
        getRangeAt: getRangeAt,
        setMediaSource: setMediaSource,
        getMediaSource: getMediaSource,
        getIsBufferingCompleted: getIsBufferingCompleted,
        switchInitData: switchInitData,
        getIsPruningInProgress: getIsPruningInProgress,
        reset: reset
    };

    setup();
    return instance;
}

BufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;
var factory = _FactoryMaker2.default.getClassFactory(BufferController);
factory.BUFFER_LOADED = BUFFER_LOADED;
factory.BUFFER_EMPTY = BUFFER_EMPTY;
_FactoryMaker2.default.updateClassFactory(BufferController.__dashjs_factory_name, factory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/EventController.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/EventController.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _XHRLoader = __webpack_require__(/*! ../net/XHRLoader */ "./node_modules/dashjs/src/streaming/net/XHRLoader.js");

var _XHRLoader2 = _interopRequireDefault(_XHRLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function EventController() {

    var MPD_RELOAD_SCHEME = 'urn:mpeg:dash:event:2012';
    var MPD_RELOAD_VALUE = 1;

    var MPD_CALLBACK_SCHEME = 'urn:mpeg:dash:event:callback:2015';
    var MPD_CALLBACK_VALUE = 1;

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        inlineEvents = void 0,
        // Holds all Inline Events not triggered yet
    inbandEvents = void 0,
        // Holds all Inband Events not triggered yet
    activeEvents = void 0,
        // Holds all Events currently running
    eventInterval = void 0,
        // variable holding the setInterval
    refreshDelay = void 0,
        // refreshTime for the setInterval
    lastEventTimerCall = void 0,
        manifestUpdater = void 0,
        playbackController = void 0,
        isStarted = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        resetInitialSettings();
    }

    function resetInitialSettings() {
        isStarted = false;
        inlineEvents = {};
        inbandEvents = {};
        activeEvents = {};
        eventInterval = null;
        refreshDelay = 100;
        lastEventTimerCall = Date.now() / 1000;
    }

    function checkSetConfigCall() {
        if (!manifestUpdater || !playbackController) {
            throw new Error('setConfig function has to be called previously');
        }
    }

    function stop() {
        if (eventInterval !== null && isStarted) {
            clearInterval(eventInterval);
            eventInterval = null;
            isStarted = false;
        }
    }

    function start() {
        checkSetConfigCall();
        logger.debug('Start Event Controller');
        if (!isStarted && !isNaN(refreshDelay)) {
            isStarted = true;
            eventInterval = setInterval(onEventTimer, refreshDelay);
        }
    }

    /**
     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted
     * @param {Array.<Object>} values
     */
    function addInlineEvents(values) {
        checkSetConfigCall();

        inlineEvents = {};

        if (values) {
            for (var i = 0; i < values.length; i++) {
                var event = values[i];
                inlineEvents[event.id] = event;
                logger.debug('Add inline event with id ' + event.id);
            }
        }
        logger.debug('Added ' + values.length + ' inline events');
    }

    /**
     * i.e. processing of any one event message box with the same id is sufficient
     * @param {Array.<Object>} values
     */
    function addInbandEvents(values) {
        checkSetConfigCall();

        for (var i = 0; i < values.length; i++) {
            var event = values[i];
            if (!(event.id in inbandEvents)) {
                if (event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && inbandEvents[event.id] === undefined) {
                    handleManifestReloadEvent(event);
                }
                inbandEvents[event.id] = event;
                logger.debug('Add inband event with id ' + event.id);
            } else {
                logger.debug('Repeated event with id ' + event.id);
            }
        }
    }

    function handleManifestReloadEvent(event) {
        if (event.eventStream.value == MPD_RELOAD_VALUE) {
            var timescale = event.eventStream.timescale || 1;
            var validUntil = event.presentationTime / timescale;
            var newDuration = void 0;
            if (event.presentationTime == 0xFFFFFFFF) {
                //0xFF... means remaining duration unknown
                newDuration = NaN;
            } else {
                newDuration = (event.presentationTime + event.duration) / timescale;
            }
            logger.info('Manifest validity changed: Valid until: ' + validUntil + '; remaining duration: ' + newDuration);
            eventBus.trigger(_Events2.default.MANIFEST_VALIDITY_CHANGED, {
                id: event.id,
                validUntil: validUntil,
                newDuration: newDuration,
                newManifestValidAfter: NaN //event.message_data - this is an arraybuffer with a timestring in it, but not used yet
            });
        }
    }

    /**
     * Remove events which are over from the list
     */
    function removeEvents() {
        if (activeEvents) {
            var currentVideoTime = playbackController.getTime();
            var eventIds = Object.keys(activeEvents);

            for (var i = 0; i < eventIds.length; i++) {
                var eventId = eventIds[i];
                var curr = activeEvents[eventId];
                if (curr !== null && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime) {
                    logger.debug('Remove Event ' + eventId + ' at time ' + currentVideoTime);
                    curr = null;
                    delete activeEvents[eventId];
                }
            }
        }
    }

    /**
     * Iterate through the eventList and trigger/remove the events
     */
    function onEventTimer() {
        var currentVideoTime = playbackController.getTime();
        var presentationTimeThreshold = currentVideoTime - lastEventTimerCall;
        lastEventTimerCall = currentVideoTime;

        triggerEvents(inbandEvents, presentationTimeThreshold, currentVideoTime);
        triggerEvents(inlineEvents, presentationTimeThreshold, currentVideoTime);
        removeEvents();
    }

    function refreshManifest() {
        checkSetConfigCall();
        manifestUpdater.refreshManifest();
    }

    function sendCallbackRequest(url) {
        var loader = (0, _XHRLoader2.default)(context).create({});
        loader.load({
            method: 'get',
            url: url,
            request: {
                responseType: 'arraybuffer'
            } });
    }

    function triggerEvents(events, presentationTimeThreshold, currentVideoTime) {
        var presentationTime;

        /* == Trigger events that are ready == */
        if (events) {
            var eventIds = Object.keys(events);
            for (var i = 0; i < eventIds.length; i++) {
                var eventId = eventIds[i];
                var curr = events[eventId];

                if (curr !== undefined) {
                    presentationTime = curr.presentationTime / curr.eventStream.timescale;
                    if (presentationTime === 0 || presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime) {
                        logger.debug('Start Event ' + eventId + ' at ' + currentVideoTime);
                        if (curr.duration > 0) {
                            activeEvents[eventId] = curr;
                        }
                        if (curr.eventStream.schemeIdUri == MPD_RELOAD_SCHEME && curr.eventStream.value == MPD_RELOAD_VALUE) {
                            if (curr.duration !== 0 || curr.presentationTimeDelta !== 0) {
                                //If both are set to zero, it indicates the media is over at this point. Don't reload the manifest.
                                refreshManifest();
                            }
                        } else if (curr.eventStream.schemeIdUri == MPD_CALLBACK_SCHEME && curr.eventStream.value == MPD_CALLBACK_VALUE) {
                            sendCallbackRequest(curr.messageData);
                        } else {
                            eventBus.trigger(curr.eventStream.schemeIdUri, { event: curr });
                        }
                        delete events[eventId];
                    }
                }
            }
        }
    }

    function setConfig(config) {
        if (!config) return;

        if (config.manifestUpdater) {
            manifestUpdater = config.manifestUpdater;
        }

        if (config.playbackController) {
            playbackController = config.playbackController;
        }
    }

    function reset() {
        stop();
        resetInitialSettings();
    }

    instance = {
        addInlineEvents: addInlineEvents,
        addInbandEvents: addInbandEvents,
        stop: stop,
        start: start,
        setConfig: setConfig,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

EventController.__dashjs_factory_name = 'EventController';
exports.default = _FactoryMaker2.default.getClassFactory(EventController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/FragmentController.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/FragmentController.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _HTTPRequest = __webpack_require__(/*! ../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _DataChunk = __webpack_require__(/*! ../vo/DataChunk */ "./node_modules/dashjs/src/streaming/vo/DataChunk.js");

var _DataChunk2 = _interopRequireDefault(_DataChunk);

var _FragmentModel = __webpack_require__(/*! ../models/FragmentModel */ "./node_modules/dashjs/src/streaming/models/FragmentModel.js");

var _FragmentModel2 = _interopRequireDefault(_FragmentModel);

var _FragmentLoader = __webpack_require__(/*! ../FragmentLoader */ "./node_modules/dashjs/src/streaming/FragmentLoader.js");

var _FragmentLoader2 = _interopRequireDefault(_FragmentLoader);

var _RequestModifier = __webpack_require__(/*! ../utils/RequestModifier */ "./node_modules/dashjs/src/streaming/utils/RequestModifier.js");

var _RequestModifier2 = _interopRequireDefault(_RequestModifier);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function FragmentController(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var errHandler = config.errHandler;
    var mediaPlayerModel = config.mediaPlayerModel;
    var metricsModel = config.metricsModel;

    var instance = void 0,
        logger = void 0,
        fragmentModels = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        resetInitialSettings();
        eventBus.on(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);
        eventBus.on(_Events2.default.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);
    }

    function getModel(type) {
        var model = fragmentModels[type];
        if (!model) {
            model = (0, _FragmentModel2.default)(context).create({
                metricsModel: metricsModel,
                fragmentLoader: (0, _FragmentLoader2.default)(context).create({
                    metricsModel: metricsModel,
                    mediaPlayerModel: mediaPlayerModel,
                    errHandler: errHandler,
                    requestModifier: (0, _RequestModifier2.default)(context).getInstance()
                })
            });

            fragmentModels[type] = model;
        }

        return model;
    }

    function isInitializationRequest(request) {
        return request && request.type && request.type === _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE;
    }

    function resetInitialSettings() {
        for (var model in fragmentModels) {
            fragmentModels[model].reset();
        }
        fragmentModels = {};
    }

    function reset() {
        eventBus.off(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);
        eventBus.off(_Events2.default.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);
        resetInitialSettings();
    }

    function createDataChunk(bytes, request, streamId, endFragment) {
        var chunk = new _DataChunk2.default();

        chunk.streamId = streamId;
        chunk.mediaInfo = request.mediaInfo;
        chunk.segmentType = request.type;
        chunk.start = request.startTime;
        chunk.duration = request.duration;
        chunk.end = chunk.start + chunk.duration;
        chunk.bytes = bytes;
        chunk.index = request.index;
        chunk.quality = request.quality;
        chunk.representationId = request.representationId;
        chunk.endFragment = endFragment;

        return chunk;
    }

    function onFragmentLoadingCompleted(e) {
        if (fragmentModels[e.request.mediaType] !== e.sender) {
            return;
        }

        var request = e.request;
        var bytes = e.response;
        var isInit = isInitializationRequest(request);
        var streamInfo = request.mediaInfo.streamInfo;

        if (e.error) {
            if (e.request.mediaType === _Constants2.default.AUDIO || e.request.mediaType === _Constants2.default.VIDEO || e.request.mediaType === _Constants2.default.FRAGMENTED_TEXT) {
                // add service location to blacklist controller - only for audio or video. text should not set errors
                eventBus.trigger(_Events2.default.SERVICE_LOCATION_BLACKLIST_ADD, { entry: e.request.serviceLocation });
            }
        }

        if (!bytes || !streamInfo) {
            logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');
            return;
        }
        var chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== _Events2.default.FRAGMENT_LOADING_PROGRESS);
        eventBus.trigger(isInit ? _Events2.default.INIT_FRAGMENT_LOADED : _Events2.default.MEDIA_FRAGMENT_LOADED, {
            chunk: chunk,
            fragmentModel: e.sender,
            request: request
        });
    }

    instance = {
        getModel: getModel,
        isInitializationRequest: isInitializationRequest,
        reset: reset
    };

    setup();

    return instance;
}

FragmentController.__dashjs_factory_name = 'FragmentController';
exports.default = _FactoryMaker2.default.getClassFactory(FragmentController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/MediaController.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/MediaController.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace'; /**
                                                       * The copyright in this software is being made available under the BSD License,
                                                       * included below. This software may be subject to other third party and contributor
                                                       * rights, including patent rights, and no such rights are granted under this license.
                                                       *
                                                       * Copyright (c) 2013, Dash Industry Forum.
                                                       * All rights reserved.
                                                       *
                                                       * Redistribution and use in source and binary forms, with or without modification,
                                                       * are permitted provided that the following conditions are met:
                                                       *  * Redistributions of source code must retain the above copyright notice, this
                                                       *  list of conditions and the following disclaimer.
                                                       *  * Redistributions in binary form must reproduce the above copyright notice,
                                                       *  this list of conditions and the following disclaimer in the documentation and/or
                                                       *  other materials provided with the distribution.
                                                       *  * Neither the name of Dash Industry Forum nor the names of its
                                                       *  contributors may be used to endorse or promote products derived from this software
                                                       *  without specific prior written permission.
                                                       *
                                                       *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                       *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                       *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                       *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                       *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                       *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                       *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                       *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                       *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                       *  POSSIBILITY OF SUCH DAMAGE.
                                                       */

var TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';
var TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';
var TRACK_SELECTION_MODE_LOWEST_BITRATE = 'lowestBitrate';
var TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';
var DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;

function MediaController() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        tracks = void 0,
        initialSettings = void 0,
        selectionMode = void 0,
        switchMode = void 0,
        domStorage = void 0;

    var validTrackSwitchModes = [TRACK_SWITCH_MODE_ALWAYS_REPLACE, TRACK_SWITCH_MODE_NEVER_REPLACE];

    var validTrackSelectionModes = [TRACK_SELECTION_MODE_HIGHEST_BITRATE, TRACK_SELECTION_MODE_LOWEST_BITRATE, TRACK_SELECTION_MODE_WIDEST_RANGE];

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        reset();
    }

    /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @memberof MediaController#
     */
    function checkInitialMediaSettingsForType(type, streamInfo) {
        var settings = getInitialSettings(type);
        var tracksForType = getTracksFor(type, streamInfo);
        var tracks = [];

        if (type === _Constants2.default.FRAGMENTED_TEXT) {
            // Choose the first track
            setTrack(tracksForType[0]);
            return;
        }

        if (!settings) {
            settings = domStorage.getSavedMediaSettings(type);
            setInitialSettings(type, settings);
        }

        if (!tracksForType || tracksForType.length === 0) return;

        if (settings) {
            tracksForType.forEach(function (track) {
                if (matchSettings(settings, track)) {
                    tracks.push(track);
                }
            });
        }

        if (tracks.length === 0) {
            setTrack(selectInitialTrack(tracksForType));
        } else {
            if (tracks.length > 1) {
                setTrack(selectInitialTrack(tracks));
            } else {
                setTrack(tracks[0]);
            }
        }
    }

    /**
     * @param {MediaInfo} track
     * @memberof MediaController#
     */
    function addTrack(track) {
        if (!track) return;

        var mediaType = track.type;
        if (!isMultiTrackSupportedByType(mediaType)) return;

        var streamId = track.streamInfo.id;
        if (!tracks[streamId]) {
            tracks[streamId] = createTrackInfo();
        }

        var mediaTracks = tracks[streamId][mediaType].list;
        for (var i = 0, len = mediaTracks.length; i < len; ++i) {
            //track is already set.
            if (isTracksEqual(mediaTracks[i], track)) {
                return;
            }
        }

        mediaTracks.push(track);

        var initSettings = getInitialSettings(mediaType);
        if (initSettings && matchSettings(initSettings, track) && !getCurrentTrackFor(mediaType, track.streamInfo)) {
            setTrack(track);
        }
    }

    /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @returns {Array}
     * @memberof MediaController#
     */
    function getTracksFor(type, streamInfo) {
        if (!type || !streamInfo) return [];

        var id = streamInfo.id;

        if (!tracks[id] || !tracks[id][type]) return [];

        return tracks[id][type].list;
    }

    /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @returns {Object|null}
     * @memberof MediaController#
     */
    function getCurrentTrackFor(type, streamInfo) {
        if (!type || !streamInfo || streamInfo && !tracks[streamInfo.id]) return null;
        return tracks[streamInfo.id][type].current;
    }

    /**
     * @param {MediaInfo} track
     * @returns {boolean}
     * @memberof MediaController#
     */
    function isCurrentTrack(track) {
        if (!track) {
            return false;
        }
        var type = track.type;
        var id = track.streamInfo.id;

        return tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track);
    }

    /**
     * @param {MediaInfo} track
     * @memberof MediaController#
     */
    function setTrack(track) {
        if (!track || !track.streamInfo) return;

        var type = track.type;
        var streamInfo = track.streamInfo;
        var id = streamInfo.id;
        var current = getCurrentTrackFor(type, streamInfo);

        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;

        tracks[id][type].current = track;

        if (tracks[id][type].current) {
            eventBus.trigger(_Events2.default.CURRENT_TRACK_CHANGED, { oldMediaInfo: current, newMediaInfo: track, switchMode: switchMode[type] });
        }

        var settings = extractSettings(track);

        if (!settings || !tracks[id][type].storeLastSettings) return;

        if (settings.roles) {
            settings.role = settings.roles[0];
            delete settings.roles;
        }

        if (settings.accessibility) {
            settings.accessibility = settings.accessibility[0];
        }

        if (settings.audioChannelConfiguration) {
            settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];
        }

        domStorage.setSavedMediaSettings(type, settings);
    }

    /**
     * @param {string} type
     * @param {Object} value
     * @memberof MediaController#
     */
    function setInitialSettings(type, value) {
        if (!type || !value) return;

        initialSettings[type] = value;
    }

    /**
     * @param {string} type
     * @returns {Object|null}
     * @memberof MediaController#
     */
    function getInitialSettings(type) {
        if (!type) return null;

        return initialSettings[type];
    }

    /**
     * @param {string} type
     * @param {string} mode
     * @memberof MediaController#
     */
    function setSwitchMode(type, mode) {
        var isModeSupported = validTrackSwitchModes.indexOf(mode) !== -1;

        if (!isModeSupported) {
            logger.warn('Track switch mode is not supported: ' + mode);
            return;
        }

        switchMode[type] = mode;
    }

    /**
     * @param {string} type
     * @returns {string} mode
     * @memberof MediaController#
     */
    function getSwitchMode(type) {
        return switchMode[type];
    }

    /**
     * @param {string} mode
     * @memberof MediaController#
     */
    function setSelectionModeForInitialTrack(mode) {
        var isModeSupported = validTrackSelectionModes.indexOf(mode) !== -1;

        if (!isModeSupported) {
            logger.warn('Track selection mode is not supported: ' + mode);
            return;
        }
        selectionMode = mode;
    }

    /**
     * @returns {string} mode
     * @memberof MediaController#
     */
    function getSelectionModeForInitialTrack() {
        return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;
    }

    /**
     * @param {string} type
     * @returns {boolean}
     * @memberof MediaController#
     */
    function isMultiTrackSupportedByType(type) {
        return type === _Constants2.default.AUDIO || type === _Constants2.default.VIDEO || type === _Constants2.default.TEXT || type === _Constants2.default.FRAGMENTED_TEXT || type === _Constants2.default.IMAGE;
    }

    /**
     * @param {MediaInfo} t1 - first track to compare
     * @param {MediaInfo} t2 - second track to compare
     * @returns {boolean}
     * @memberof MediaController#
     */
    function isTracksEqual(t1, t2) {
        if (!t1 && !t2) {
            return true;
        }

        if (!t1 || !t2) {
            return false;
        }

        var sameId = t1.id === t2.id;
        var sameViewpoint = t1.viewpoint === t2.viewpoint;
        var sameLang = t1.lang === t2.lang;
        var sameRoles = t1.roles.toString() === t2.roles.toString();
        var sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();
        var sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();
        var sameCodec = t1.codec === t2.codec;
        var sameBandwidth = t1.minBandwidth === t2.minBandwidth && t1.maxBandwidth === t2.maxBandwidth;

        return sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration && sameCodec && sameBandwidth;
    }

    function setConfig(config) {
        if (!config) return;

        if (config.domStorage) {
            domStorage = config.domStorage;
        }
    }

    /**
     * @memberof MediaController#
     */
    function reset() {
        tracks = {};
        resetInitialSettings();
        resetSwitchMode();
    }

    function extractSettings(mediaInfo) {
        var settings = {
            lang: mediaInfo.lang,
            viewpoint: mediaInfo.viewpoint,
            roles: mediaInfo.roles,
            accessibility: mediaInfo.accessibility,
            audioChannelConfiguration: mediaInfo.audioChannelConfiguration
        };
        var notEmpty = settings.lang || settings.viewpoint || settings.role && settings.role.length > 0 || settings.accessibility && settings.accessibility.length > 0 || settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0;

        return notEmpty ? settings : null;
    }

    function matchSettings(settings, track) {
        var matchLang = !settings.lang || settings.lang === track.lang;
        var matchViewPoint = !settings.viewpoint || settings.viewpoint === track.viewpoint;
        var matchRole = !settings.role || !!track.roles.filter(function (item) {
            return item === settings.role;
        })[0];
        var matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {
            return item === settings.accessibility;
        })[0];
        var matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {
            return item === settings.audioChannelConfiguration;
        })[0];

        return matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration;
    }

    function resetSwitchMode() {
        switchMode = {
            audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,
            video: TRACK_SWITCH_MODE_NEVER_REPLACE
        };
    }

    function resetInitialSettings() {
        initialSettings = {
            audio: null,
            video: null
        };
    }

    function getTracksWithBitrate(trackArr, highest) {
        var result = [];
        var last = void 0;

        trackArr.forEach(function (track) {
            var bitrates = track.bitrateList.map(function (obj) {
                return obj.bandwidth;
            });
            var compare = highest ? Math.max.apply(Math, bitrates) : Math.min.apply(Math, bitrates);

            if (last === undefined || (highest ? compare > last : compare < last)) {
                last = compare;
                result = [track];
            } else if (compare === last) {
                result.push(track);
            }
        });

        return result;
    }

    function getTracksWithWidestRange(trackArr) {
        var max = 0;
        var result = [];
        var tmp;

        trackArr.forEach(function (track) {
            tmp = track.representationCount;

            if (tmp > max) {
                max = tmp;
                result = [track];
            } else if (tmp === max) {
                result.push(track);
            }
        });

        return result;
    }

    function selectInitialTrack(tracks) {
        var mode = getSelectionModeForInitialTrack();
        var tmpArr = [];

        switch (mode) {
            case TRACK_SELECTION_MODE_HIGHEST_BITRATE:
                tmpArr = getTracksWithBitrate(tracks, true);

                if (tmpArr.length > 1) {
                    tmpArr = getTracksWithWidestRange(tmpArr);
                }
                break;
            case TRACK_SELECTION_MODE_LOWEST_BITRATE:
                tmpArr = getTracksWithBitrate(tracks, false);

                if (tmpArr.length > 1) {
                    tmpArr = getTracksWithWidestRange(tmpArr);
                }
                break;
            case TRACK_SELECTION_MODE_WIDEST_RANGE:
                tmpArr = getTracksWithWidestRange(tracks);

                if (tmpArr.length > 1) {
                    tmpArr = getTracksWithBitrate(tracks, true);
                }
                break;
            default:
                logger.warn('Track selection mode is not supported: ' + mode);
                break;
        }

        return tmpArr[0];
    }

    function createTrackInfo() {
        return {
            audio: {
                list: [],
                storeLastSettings: true,
                current: null
            },
            video: {
                list: [],
                storeLastSettings: true,
                current: null
            },
            text: {
                list: [],
                storeLastSettings: true,
                current: null
            },
            fragmentedText: {
                list: [],
                storeLastSettings: true,
                current: null
            },
            image: {
                list: [],
                storeLastSettings: true,
                current: null
            }
        };
    }

    instance = {
        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,
        addTrack: addTrack,
        getTracksFor: getTracksFor,
        getCurrentTrackFor: getCurrentTrackFor,
        isCurrentTrack: isCurrentTrack,
        setTrack: setTrack,
        setInitialSettings: setInitialSettings,
        getInitialSettings: getInitialSettings,
        setSwitchMode: setSwitchMode,
        getSwitchMode: getSwitchMode,
        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,
        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,
        isMultiTrackSupportedByType: isMultiTrackSupportedByType,
        isTracksEqual: isTracksEqual,
        setConfig: setConfig,
        reset: reset
    };

    setup();

    return instance;
}

MediaController.__dashjs_factory_name = 'MediaController';
var factory = _FactoryMaker2.default.getSingletonFactory(MediaController);
factory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;
factory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;
factory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;
factory.TRACK_SELECTION_MODE_LOWEST_BITRATE = TRACK_SELECTION_MODE_LOWEST_BITRATE;
factory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;
factory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;
_FactoryMaker2.default.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/MediaSourceController.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/MediaSourceController.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function MediaSourceController() {

    var instance = void 0,
        logger = void 0;

    var context = this.context;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function createMediaSource() {

        var hasWebKit = 'WebKitMediaSource' in window;
        var hasMediaSource = 'MediaSource' in window;

        if (hasMediaSource) {
            return new MediaSource();
        } else if (hasWebKit) {
            return new WebKitMediaSource();
        }

        return null;
    }

    function attachMediaSource(source, videoModel) {

        var objectURL = window.URL.createObjectURL(source);

        videoModel.setSource(objectURL);

        return objectURL;
    }

    function detachMediaSource(videoModel) {
        videoModel.setSource(null);
    }

    function setDuration(source, value) {

        if (source.duration != value) source.duration = value;

        return source.duration;
    }

    function setSeekable(source, start, end) {
        if (source && typeof source.setLiveSeekableRange === 'function' && typeof source.clearLiveSeekableRange === 'function' && source.readyState === 'open' && start >= 0 && start < end) {
            source.clearLiveSeekableRange();
            source.setLiveSeekableRange(start, end);
        }
    }

    function signalEndOfStream(source) {

        var buffers = source.sourceBuffers;
        var ln = buffers.length;

        if (source.readyState !== 'open') {
            return;
        }

        for (var i = 0; i < ln; i++) {
            if (buffers[i].updating) {
                return;
            }
            if (buffers[i].buffered.length === 0) {
                return;
            }
        }
        logger.info('call to mediaSource endOfStream');
        source.endOfStream();
    }

    instance = {
        createMediaSource: createMediaSource,
        attachMediaSource: attachMediaSource,
        detachMediaSource: detachMediaSource,
        setDuration: setDuration,
        setSeekable: setSeekable,
        signalEndOfStream: signalEndOfStream
    };

    setup();

    return instance;
}

MediaSourceController.__dashjs_factory_name = 'MediaSourceController';
exports.default = _FactoryMaker2.default.getSingletonFactory(MediaSourceController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/PlaybackController.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/PlaybackController.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _BufferController = __webpack_require__(/*! ./BufferController */ "./node_modules/dashjs/src/streaming/controllers/BufferController.js");

var _BufferController2 = _interopRequireDefault(_BufferController);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
var LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS = 500;

function PlaybackController() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        streamController = void 0,
        metricsModel = void 0,
        dashMetrics = void 0,
        manifestModel = void 0,
        dashManifestModel = void 0,
        adapter = void 0,
        videoModel = void 0,
        timelineConverter = void 0,
        liveStartTime = void 0,
        wallclockTimeIntervalId = void 0,
        commonEarliestTime = void 0,
        liveDelay = void 0,
        bufferedRange = void 0,
        streamInfo = void 0,
        isDynamic = void 0,
        mediaPlayerModel = void 0,
        playOnceInitialized = void 0,
        lastLivePlaybackTime = void 0,
        availabilityStartTime = void 0,
        compatibleWithPreviousStream = void 0,
        isLowLatencySeekingInProgress = void 0,
        playbackStalled = void 0,
        minPlaybackRateChange = void 0,
        uriFragmentModel = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);

        reset();
    }

    function initialize(StreamInfo, compatible) {
        streamInfo = StreamInfo;
        addAllListeners();
        isDynamic = streamInfo.manifestInfo.isDynamic;
        isLowLatencySeekingInProgress = false;
        playbackStalled = false;
        liveStartTime = streamInfo.start;
        compatibleWithPreviousStream = compatible;

        var ua = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase() : '';

        // Detect safari browser (special behavior for low latency streams)
        var isSafari = /safari/.test(ua) && !/chrome/.test(ua);
        minPlaybackRateChange = isSafari ? 0.25 : 0.02;

        eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
        eventBus.on(_Events2.default.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);
        eventBus.on(_Events2.default.LOADING_PROGRESS, onFragmentLoadProgress, this);
        eventBus.on(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);
        eventBus.on(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this);
        eventBus.on(_Events2.default.PLAYBACK_PROGRESS, onPlaybackProgression, this);
        eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);
        eventBus.on(_Events2.default.PLAYBACK_ENDED, onPlaybackEnded, this);

        if (playOnceInitialized) {
            playOnceInitialized = false;
            play();
        }
    }

    function onPeriodSwitchStarted(e) {
        if (!isDynamic && e.fromStreamInfo && commonEarliestTime[e.fromStreamInfo.id] !== undefined) {
            delete bufferedRange[e.fromStreamInfo.id];
            delete commonEarliestTime[e.fromStreamInfo.id];
        }
    }

    function getTimeToStreamEnd() {
        return parseFloat((getStreamEndTime() - getTime()).toFixed(5));
    }

    function getStreamEndTime() {
        var startTime = getStreamStartTime(true);
        var offset = isDynamic && streamInfo ? startTime - streamInfo.start : 0;
        return startTime + (streamInfo ? streamInfo.duration - offset : offset);
    }

    function play() {
        if (streamInfo && videoModel && videoModel.getElement()) {
            videoModel.play();
        } else {
            playOnceInitialized = true;
        }
    }

    function isPaused() {
        return streamInfo && videoModel ? videoModel.isPaused() : null;
    }

    function pause() {
        if (streamInfo && videoModel) {
            videoModel.pause();
        }
    }

    function isSeeking() {
        return streamInfo && videoModel ? videoModel.isSeeking() : null;
    }

    function seek(time, stickToBuffered, internalSeek) {
        if (streamInfo && videoModel) {
            if (internalSeek === true) {
                if (time !== videoModel.getTime()) {
                    // Internal seek = seek video model only (disable 'seeking' listener),
                    // buffer(s) are already appended at given time (see onBytesAppended())
                    videoModel.removeEventListener('seeking', onPlaybackSeeking);
                    logger.info('Requesting seek to time: ' + time);
                    videoModel.setCurrentTime(time, stickToBuffered);
                }
            } else {
                eventBus.trigger(_Events2.default.PLAYBACK_SEEK_ASKED);
                logger.info('Requesting seek to time: ' + time);
                videoModel.setCurrentTime(time, stickToBuffered);
            }
        }
    }

    function seekToLive() {
        var metrics = metricsModel.getReadOnlyMetricsFor(_Constants2.default.VIDEO) || metricsModel.getReadOnlyMetricsFor(_Constants2.default.AUDIO);
        var DVRMetrics = dashMetrics.getCurrentDVRInfo(metrics);
        var DVRWindow = DVRMetrics ? DVRMetrics.range : null;

        seek(DVRWindow.end - mediaPlayerModel.getLiveDelay(), true, false);
    }

    function getTime() {
        return streamInfo && videoModel ? videoModel.getTime() : null;
    }

    function getNormalizedTime() {
        var t = getTime();

        if (isDynamic && !isNaN(availabilityStartTime)) {
            var timeOffset = availabilityStartTime / 1000;
            // Fix current time for firefox and safari (returned as an absolute time)
            if (t > timeOffset) {
                t -= timeOffset;
            }
        }

        return t;
    }

    function getPlaybackRate() {
        return streamInfo && videoModel ? videoModel.getPlaybackRate() : null;
    }

    function getPlayedRanges() {
        return streamInfo && videoModel ? videoModel.getPlayedRanges() : null;
    }

    function getEnded() {
        return streamInfo && videoModel ? videoModel.getEnded() : null;
    }

    function getIsDynamic() {
        return isDynamic;
    }

    function getStreamController() {
        return streamController;
    }

    function setLiveStartTime(value) {
        liveStartTime = value;
    }

    function getLiveStartTime() {
        return liveStartTime;
    }

    /**
     * Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge
     * @param {number} fragmentDuration - seconds?
     * @param {number} dvrWindowSize - seconds?
     * @returns {number} object
     * @memberof PlaybackController#
     */
    function computeLiveDelay(fragmentDuration, dvrWindowSize) {
        var mpd = dashManifestModel.getMpd(manifestModel.getValue());

        var delay = void 0;
        var ret = void 0;
        var END_OF_PLAYLIST_PADDING = 10;

        if (mediaPlayerModel.getUseSuggestedPresentationDelay() && mpd.hasOwnProperty(_Constants2.default.SUGGESTED_PRESENTATION_DELAY)) {
            delay = mpd.suggestedPresentationDelay;
        } else if (mediaPlayerModel.getLowLatencyEnabled()) {
            delay = 0;
        } else if (mediaPlayerModel.getLiveDelay()) {
            delay = mediaPlayerModel.getLiveDelay(); // If set by user, this value takes precedence
        } else if (!isNaN(fragmentDuration)) {
            delay = fragmentDuration * mediaPlayerModel.getLiveDelayFragmentCount();
        } else {
            delay = streamInfo.manifestInfo.minBufferTime * 2;
        }

        if (mpd.availabilityStartTime) {
            availabilityStartTime = mpd.availabilityStartTime.getTime();
        }

        if (dvrWindowSize > 0) {
            // cap target latency to:
            // - dvrWindowSize / 2 for short playlists
            // - dvrWindowSize - END_OF_PLAYLIST_PADDING for longer playlists
            var targetDelayCapping = Math.max(dvrWindowSize - END_OF_PLAYLIST_PADDING, dvrWindowSize / 2);
            ret = Math.min(delay, targetDelayCapping);
        } else {
            ret = delay;
        }
        liveDelay = ret;
        return ret;
    }

    function getLiveDelay() {
        return liveDelay;
    }

    function getCurrentLiveLatency() {
        if (!isDynamic || isNaN(availabilityStartTime)) {
            return NaN;
        }
        var currentTime = getNormalizedTime();
        if (isNaN(currentTime) || currentTime === 0) {
            return 0;
        }

        var now = new Date().getTime() + timelineConverter.getClientTimeOffset() * 1000;
        return Math.max(((now - availabilityStartTime - currentTime * 1000) / 1000).toFixed(3), 0);
    }

    function reset() {
        liveStartTime = NaN;
        playOnceInitialized = false;
        commonEarliestTime = {};
        liveDelay = 0;
        availabilityStartTime = 0;
        bufferedRange = {};
        if (videoModel) {
            eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
            eventBus.off(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);
            eventBus.off(_Events2.default.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);
            eventBus.off(_Events2.default.LOADING_PROGRESS, onFragmentLoadProgress, this);
            eventBus.off(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this);
            eventBus.off(_Events2.default.PLAYBACK_PROGRESS, onPlaybackProgression, this);
            eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);
            eventBus.off(_Events2.default.PLAYBACK_ENDED, onPlaybackEnded, this);
            stopUpdatingWallclockTime();
            removeAllListeners();
        }
        wallclockTimeIntervalId = null;
        videoModel = null;
        streamInfo = null;
        isDynamic = null;
    }

    function setConfig(config) {
        if (!config) return;

        if (config.streamController) {
            streamController = config.streamController;
        }
        if (config.metricsModel) {
            metricsModel = config.metricsModel;
        }
        if (config.dashMetrics) {
            dashMetrics = config.dashMetrics;
        }
        if (config.manifestModel) {
            manifestModel = config.manifestModel;
        }
        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
        if (config.mediaPlayerModel) {
            mediaPlayerModel = config.mediaPlayerModel;
        }
        if (config.adapter) {
            adapter = config.adapter;
        }
        if (config.videoModel) {
            videoModel = config.videoModel;
        }
        if (config.timelineConverter) {
            timelineConverter = config.timelineConverter;
        }
        if (config.uriFragmentModel) {
            uriFragmentModel = config.uriFragmentModel;
        }
    }

    function getStartTimeFromUriParameters() {
        var fragData = uriFragmentModel.getURIFragmentData();
        var uriParameters = void 0;
        if (fragData) {
            uriParameters = {};
            var r = parseInt(fragData.r, 10);
            if (r >= 0 && streamInfo && r < streamInfo.manifestInfo.DVRWindowSize && fragData.t === null) {
                fragData.t = Math.max(Math.floor(Date.now() / 1000) - streamInfo.manifestInfo.DVRWindowSize, streamInfo.manifestInfo.availableFrom.getTime() / 1000 + streamInfo.start) + r;
            }
            uriParameters.fragS = parseFloat(fragData.s);
            uriParameters.fragT = parseFloat(fragData.t);
        }
        return uriParameters;
    }

    /**
     * @param {boolean} ignoreStartOffset - ignore URL fragment start offset if true
     * @param {number} liveEdge - liveEdge value
     * @returns {number} object
     * @memberof PlaybackController#
     */
    function getStreamStartTime(ignoreStartOffset, liveEdge) {
        var presentationStartTime = void 0;
        var startTimeOffset = NaN;

        if (!ignoreStartOffset) {
            var uriParameters = getStartTimeFromUriParameters();
            if (uriParameters) {
                startTimeOffset = !isNaN(uriParameters.fragS) ? uriParameters.fragS : uriParameters.fragT;
            } else {
                startTimeOffset = 0;
            }
        } else {
            startTimeOffset = streamInfo ? streamInfo.start : startTimeOffset;
        }

        if (isDynamic) {
            if (!isNaN(startTimeOffset) && streamInfo) {
                presentationStartTime = startTimeOffset - streamInfo.manifestInfo.availableFrom.getTime() / 1000;

                if (!isNaN(liveStartTime) && !isNaN(liveEdge)) {
                    presentationStartTime = Math.min(Math.max(presentationStartTime, liveEdge - streamInfo.manifestInfo.DVRWindowSize + 60), liveStartTime);
                }
            }
            presentationStartTime = presentationStartTime || liveStartTime;
        } else {
            if (streamInfo) {
                if (!isNaN(startTimeOffset) && startTimeOffset < Math.max(streamInfo.manifestInfo.duration, streamInfo.duration) && startTimeOffset >= 0) {
                    presentationStartTime = startTimeOffset;
                } else {
                    var earliestTime = commonEarliestTime[streamInfo.id]; //set by ready bufferStart after first onBytesAppended
                    presentationStartTime = earliestTime !== undefined ? Math.max(earliestTime.audio !== undefined ? earliestTime.audio : 0, earliestTime.video !== undefined ? earliestTime.video : 0, streamInfo.start) : streamInfo.start;
                }
            }
        }

        return presentationStartTime;
    }

    function getActualPresentationTime(currentTime) {
        var metrics = metricsModel.getReadOnlyMetricsFor(_Constants2.default.VIDEO) || metricsModel.getReadOnlyMetricsFor(_Constants2.default.AUDIO);
        var DVRMetrics = dashMetrics.getCurrentDVRInfo(metrics);
        var DVRWindow = DVRMetrics ? DVRMetrics.range : null;
        var actualTime = void 0;

        if (!DVRWindow) return NaN;

        if (currentTime > DVRWindow.end) {
            actualTime = Math.max(DVRWindow.end - streamInfo.manifestInfo.minBufferTime * 2, DVRWindow.start);
        } else if (currentTime + 0.250 < DVRWindow.start) {
            // Checking currentTime plus 250ms as the 'timeupdate' is fired with a frequency between 4Hz and 66Hz
            // https://developer.mozilla.org/en-US/docs/Web/Events/timeupdate
            // http://w3c.github.io/html/single-page.html#offsets-into-the-media-resource
            actualTime = DVRWindow.start;
        } else {
            return currentTime;
        }

        return actualTime;
    }

    function startUpdatingWallclockTime() {
        if (wallclockTimeIntervalId !== null) return;

        var tick = function tick() {
            onWallclockTime();
        };

        // Run one instance immediately
        tick();
        wallclockTimeIntervalId = setInterval(tick, mediaPlayerModel.getWallclockTimeUpdateInterval());
    }

    function stopUpdatingWallclockTime() {
        clearInterval(wallclockTimeIntervalId);
        wallclockTimeIntervalId = null;
    }

    function updateCurrentTime() {
        if (isPaused() || !isDynamic || videoModel.getReadyState() === 0) return;
        var currentTime = getNormalizedTime();
        var actualTime = getActualPresentationTime(currentTime);

        var timeChanged = !isNaN(actualTime) && actualTime !== currentTime;
        if (timeChanged) {
            seek(actualTime);
        }
    }

    function onDataUpdateCompleted(e) {
        if (e.error) return;

        var representationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);
        var info = representationInfo.mediaInfo.streamInfo;

        if (streamInfo.id !== info.id) return;
        streamInfo = info;

        updateCurrentTime();
    }

    function onCanPlay() {
        eventBus.trigger(_Events2.default.CAN_PLAY);
    }

    function onPlaybackStart() {
        logger.info('Native video element event: play');
        updateCurrentTime();
        startUpdatingWallclockTime();
        eventBus.trigger(_Events2.default.PLAYBACK_STARTED, {
            startTime: getTime()
        });
    }

    function onPlaybackWaiting() {
        logger.info('Native video element event: waiting');
        eventBus.trigger(_Events2.default.PLAYBACK_WAITING, {
            playingTime: getTime()
        });
    }

    function onPlaybackPlaying() {
        logger.info('Native video element event: playing');
        eventBus.trigger(_Events2.default.PLAYBACK_PLAYING, {
            playingTime: getTime()
        });
    }

    function onPlaybackPaused() {
        logger.info('Native video element event: pause');
        eventBus.trigger(_Events2.default.PLAYBACK_PAUSED, {
            ended: getEnded()
        });
    }

    function onPlaybackSeeking() {
        var seekTime = getTime();
        logger.info('Seeking to: ' + seekTime);
        startUpdatingWallclockTime();
        eventBus.trigger(_Events2.default.PLAYBACK_SEEKING, {
            seekTime: seekTime
        });
    }

    function onPlaybackSeeked() {
        logger.info('Native video element event: seeked');
        eventBus.trigger(_Events2.default.PLAYBACK_SEEKED);
        // Reactivate 'seeking' event listener (see seek())
        videoModel.addEventListener('seeking', onPlaybackSeeking);
    }

    function onPlaybackTimeUpdated() {
        if (streamInfo) {
            eventBus.trigger(_Events2.default.PLAYBACK_TIME_UPDATED, {
                timeToEnd: getTimeToStreamEnd(),
                time: getTime()
            });
        }
    }

    function updateLivePlaybackTime() {
        var now = Date.now();
        if (!lastLivePlaybackTime || now > lastLivePlaybackTime + LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS) {
            lastLivePlaybackTime = now;
            onPlaybackTimeUpdated();
        }
    }

    function onPlaybackProgress() {
        eventBus.trigger(_Events2.default.PLAYBACK_PROGRESS);
    }

    function onPlaybackRateChanged() {
        var rate = getPlaybackRate();
        logger.info('Native video element event: ratechange: ', rate);
        eventBus.trigger(_Events2.default.PLAYBACK_RATE_CHANGED, {
            playbackRate: rate
        });
    }

    function onPlaybackMetaDataLoaded() {
        logger.info('Native video element event: loadedmetadata');
        eventBus.trigger(_Events2.default.PLAYBACK_METADATA_LOADED);
        startUpdatingWallclockTime();
    }

    // Event to handle the native video element ended event
    function onNativePlaybackEnded() {
        logger.info('Native video element event: ended');
        pause();
        stopUpdatingWallclockTime();
        var activeStream = streamController.getActiveStreamInfo();
        eventBus.trigger(_Events2.default.PLAYBACK_ENDED, { 'isLast': activeStream ? activeStream.isLast : true });
    }

    // Handle DASH PLAYBACK_ENDED event
    function onPlaybackEnded(e) {
        if (wallclockTimeIntervalId && e.isLast) {
            // PLAYBACK_ENDED was triggered elsewhere, react.
            logger.info('onPlaybackEnded -- PLAYBACK_ENDED but native video element didn\'t fire ended');
            videoModel.setCurrentTime(getStreamEndTime());
            pause();
            stopUpdatingWallclockTime();
        }
    }

    function onPlaybackError(event) {
        var target = event.target || event.srcElement;
        eventBus.trigger(_Events2.default.PLAYBACK_ERROR, {
            error: target.error
        });
    }

    function onWallclockTime() {
        eventBus.trigger(_Events2.default.WALLCLOCK_TIME_UPDATED, {
            isDynamic: isDynamic,
            time: new Date()
        });

        // Updates playback time for paused dynamic streams
        // (video element doesn't call timeupdate when the playback is paused)
        if (getIsDynamic() && isPaused()) {
            updateLivePlaybackTime();
        }
    }

    function checkTimeInRanges(time, ranges) {
        if (ranges && ranges.length > 0) {
            for (var i = 0, len = ranges.length; i < len; i++) {
                if (time >= ranges.start(i) && time < ranges.end(i)) {
                    return true;
                }
            }
        }
        return false;
    }

    function onPlaybackProgression() {
        if (isDynamic && mediaPlayerModel.getLowLatencyEnabled() && mediaPlayerModel.getCatchUpPlaybackRate() > 0 && !isPaused() && !isSeeking()) {
            if (needToCatchUp()) {
                startPlaybackCatchUp();
            } else {
                stopPlaybackCatchUp();
            }
        }
    }

    function getBufferLevel() {
        var bufferLevel = null;
        streamController.getActiveStreamProcessors().forEach(function (p) {
            var bl = p.getBufferLevel();
            if (bufferLevel === null) {
                bufferLevel = bl;
            } else {
                bufferLevel = Math.min(bufferLevel, bl);
            }
        });

        return bufferLevel;
    }

    function needToCatchUp() {
        return mediaPlayerModel.getCatchUpPlaybackRate() > 0 && getTime() > 0 && Math.abs(getCurrentLiveLatency() - mediaPlayerModel.getLiveDelay()) > mediaPlayerModel.getLowLatencyMinDrift();
    }

    function startPlaybackCatchUp() {
        if (videoModel) {
            var cpr = mediaPlayerModel.getCatchUpPlaybackRate();
            var _liveDelay = mediaPlayerModel.getLiveDelay();
            var deltaLatency = getCurrentLiveLatency() - _liveDelay;
            var d = deltaLatency * 5;
            // Playback rate must be between (1 - cpr) - (1 + cpr)
            // ex: if cpr is 0.5, it can have values between 0.5 - 1.5
            var s = cpr * 2 / (1 + Math.pow(Math.E, -d));
            var newRate = 1 - cpr + s;
            // take into account situations in which there are buffer stalls,
            // in which increasing playbackRate to reach target latency will
            // just cause more and more stall situations
            if (playbackStalled) {
                var bufferLevel = getBufferLevel();
                if (bufferLevel > _liveDelay / 2) {
                    playbackStalled = false;
                } else if (deltaLatency > 0) {
                    newRate = 1.0;
                }
            }

            // don't change playbackrate for small variations (don't overload element with playbackrate changes)
            if (Math.abs(videoModel.getPlaybackRate() - newRate) > minPlaybackRateChange) {
                videoModel.setPlaybackRate(newRate);
            }

            if (mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking() > 0 && !isLowLatencySeekingInProgress && deltaLatency > mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking()) {
                logger.info('Low Latency catchup mechanism. Latency too high, doing a seek to live point');
                isLowLatencySeekingInProgress = true;
                seekToLive();
            } else {
                isLowLatencySeekingInProgress = false;
            }
        }
    }

    function stopPlaybackCatchUp() {
        if (videoModel) {
            videoModel.setPlaybackRate(1.0);
        }
    }

    function onBytesAppended(e) {
        var earliestTime = void 0,
            initialStartTime = void 0;
        var ranges = e.bufferedRanges;
        if (!ranges || !ranges.length) return;
        if (commonEarliestTime[streamInfo.id] && commonEarliestTime[streamInfo.id].started === true) {
            //stream has already been started.
            return;
        }

        var type = e.sender.getType();

        if (bufferedRange[streamInfo.id] === undefined) {
            bufferedRange[streamInfo.id] = [];
        }

        bufferedRange[streamInfo.id][type] = ranges;

        if (commonEarliestTime[streamInfo.id] === undefined) {
            commonEarliestTime[streamInfo.id] = [];
            commonEarliestTime[streamInfo.id].started = false;
        }

        if (commonEarliestTime[streamInfo.id][type] === undefined) {
            commonEarliestTime[streamInfo.id][type] = Math.max(ranges.start(0), streamInfo.start);
        }

        var hasVideoTrack = streamController.isTrackTypePresent(_Constants2.default.VIDEO);
        var hasAudioTrack = streamController.isTrackTypePresent(_Constants2.default.AUDIO);

        initialStartTime = getStreamStartTime(false);
        if (hasAudioTrack && hasVideoTrack) {
            //current stream has audio and video contents
            if (!isNaN(commonEarliestTime[streamInfo.id].audio) && !isNaN(commonEarliestTime[streamInfo.id].video)) {

                if (commonEarliestTime[streamInfo.id].audio < commonEarliestTime[streamInfo.id].video) {
                    // common earliest is video time
                    // check buffered audio range has video time, if ok, we seek, otherwise, we wait some other data
                    earliestTime = commonEarliestTime[streamInfo.id].video > initialStartTime ? commonEarliestTime[streamInfo.id].video : initialStartTime;
                    ranges = bufferedRange[streamInfo.id].audio;
                } else {
                    // common earliest is audio time
                    // check buffered video range has audio time, if ok, we seek, otherwise, we wait some other data
                    earliestTime = commonEarliestTime[streamInfo.id].audio > initialStartTime ? commonEarliestTime[streamInfo.id].audio : initialStartTime;
                    ranges = bufferedRange[streamInfo.id].video;
                }
                if (checkTimeInRanges(earliestTime, ranges)) {
                    if (!isSeeking() && !compatibleWithPreviousStream && earliestTime !== 0) {
                        seek(earliestTime, true, true);
                    }
                    commonEarliestTime[streamInfo.id].started = true;
                }
            }
        } else {
            //current stream has only audio or only video content
            if (commonEarliestTime[streamInfo.id][type]) {
                earliestTime = commonEarliestTime[streamInfo.id][type] > initialStartTime ? commonEarliestTime[streamInfo.id][type] : initialStartTime;
                if (!isSeeking() && !compatibleWithPreviousStream) {
                    seek(earliestTime, false, true);
                }
                commonEarliestTime[streamInfo.id].started = true;
            }
        }
    }

    function onFragmentLoadProgress(e) {
        // If using fetch and stream mode is not available, readjust live latency so it is 20% higher than segment duration
        if (e.stream === false && mediaPlayerModel.getLowLatencyEnabled() && !isNaN(e.request.duration)) {
            var minDelay = 1.2 * e.request.duration;
            if (minDelay > mediaPlayerModel.getLiveDelay()) {
                logger.warn('Browser does not support fetch API with StreamReader. Increasing live delay to be 20% higher than segment duration:', minDelay.toFixed(2));
                mediaPlayerModel.setLiveDelay(minDelay);
            }
        }
    }

    function onBufferLevelStateChanged(e) {
        // do not stall playback when get an event from Stream that is not active
        if (e.streamInfo.id !== streamInfo.id) return;

        if (mediaPlayerModel.getLowLatencyEnabled()) {
            if (e.state === _BufferController2.default.BUFFER_EMPTY && !isSeeking()) {
                if (!playbackStalled) {
                    playbackStalled = true;
                    stopPlaybackCatchUp();
                }
            }
        } else {
            videoModel.setStallState(e.mediaType, e.state === _BufferController2.default.BUFFER_EMPTY);
        }
    }

    function onPlaybackStalled(e) {
        eventBus.trigger(_Events2.default.PLAYBACK_STALLED, {
            e: e
        });
    }

    function addAllListeners() {
        videoModel.addEventListener('canplay', onCanPlay);
        videoModel.addEventListener('play', onPlaybackStart);
        videoModel.addEventListener('waiting', onPlaybackWaiting);
        videoModel.addEventListener('playing', onPlaybackPlaying);
        videoModel.addEventListener('pause', onPlaybackPaused);
        videoModel.addEventListener('error', onPlaybackError);
        videoModel.addEventListener('seeking', onPlaybackSeeking);
        videoModel.addEventListener('seeked', onPlaybackSeeked);
        videoModel.addEventListener('timeupdate', onPlaybackTimeUpdated);
        videoModel.addEventListener('progress', onPlaybackProgress);
        videoModel.addEventListener('ratechange', onPlaybackRateChanged);
        videoModel.addEventListener('loadedmetadata', onPlaybackMetaDataLoaded);
        videoModel.addEventListener('stalled', onPlaybackStalled);
        videoModel.addEventListener('ended', onNativePlaybackEnded);
    }

    function removeAllListeners() {
        videoModel.removeEventListener('canplay', onCanPlay);
        videoModel.removeEventListener('play', onPlaybackStart);
        videoModel.removeEventListener('waiting', onPlaybackWaiting);
        videoModel.removeEventListener('playing', onPlaybackPlaying);
        videoModel.removeEventListener('pause', onPlaybackPaused);
        videoModel.removeEventListener('error', onPlaybackError);
        videoModel.removeEventListener('seeking', onPlaybackSeeking);
        videoModel.removeEventListener('seeked', onPlaybackSeeked);
        videoModel.removeEventListener('timeupdate', onPlaybackTimeUpdated);
        videoModel.removeEventListener('progress', onPlaybackProgress);
        videoModel.removeEventListener('ratechange', onPlaybackRateChanged);
        videoModel.removeEventListener('loadedmetadata', onPlaybackMetaDataLoaded);
        videoModel.removeEventListener('stalled', onPlaybackStalled);
        videoModel.removeEventListener('ended', onNativePlaybackEnded);
    }

    instance = {
        initialize: initialize,
        setConfig: setConfig,
        getStartTimeFromUriParameters: getStartTimeFromUriParameters,
        getStreamStartTime: getStreamStartTime,
        getTimeToStreamEnd: getTimeToStreamEnd,
        getTime: getTime,
        getNormalizedTime: getNormalizedTime,
        getPlaybackRate: getPlaybackRate,
        getPlayedRanges: getPlayedRanges,
        getEnded: getEnded,
        getIsDynamic: getIsDynamic,
        getStreamController: getStreamController,
        setLiveStartTime: setLiveStartTime,
        getLiveStartTime: getLiveStartTime,
        computeLiveDelay: computeLiveDelay,
        getLiveDelay: getLiveDelay,
        getCurrentLiveLatency: getCurrentLiveLatency,
        play: play,
        isPaused: isPaused,
        pause: pause,
        isSeeking: isSeeking,
        seek: seek,
        reset: reset
    };

    setup();

    return instance;
}

PlaybackController.__dashjs_factory_name = 'PlaybackController';
exports.default = _FactoryMaker2.default.getSingletonFactory(PlaybackController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/ScheduleController.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/ScheduleController.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _PlayList = __webpack_require__(/*! ../vo/metrics/PlayList */ "./node_modules/dashjs/src/streaming/vo/metrics/PlayList.js");

var _AbrController = __webpack_require__(/*! ./AbrController */ "./node_modules/dashjs/src/streaming/controllers/AbrController.js");

var _AbrController2 = _interopRequireDefault(_AbrController);

var _BufferController = __webpack_require__(/*! ./BufferController */ "./node_modules/dashjs/src/streaming/controllers/BufferController.js");

var _BufferController2 = _interopRequireDefault(_BufferController);

var _BufferLevelRule = __webpack_require__(/*! ../rules/scheduling/BufferLevelRule */ "./node_modules/dashjs/src/streaming/rules/scheduling/BufferLevelRule.js");

var _BufferLevelRule2 = _interopRequireDefault(_BufferLevelRule);

var _NextFragmentRequestRule = __webpack_require__(/*! ../rules/scheduling/NextFragmentRequestRule */ "./node_modules/dashjs/src/streaming/rules/scheduling/NextFragmentRequestRule.js");

var _NextFragmentRequestRule2 = _interopRequireDefault(_NextFragmentRequestRule);

var _FragmentModel = __webpack_require__(/*! ../models/FragmentModel */ "./node_modules/dashjs/src/streaming/models/FragmentModel.js");

var _FragmentModel2 = _interopRequireDefault(_FragmentModel);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _MediaController = __webpack_require__(/*! ./MediaController */ "./node_modules/dashjs/src/streaming/controllers/MediaController.js");

var _MediaController2 = _interopRequireDefault(_MediaController);

var _SegmentsUtils = __webpack_require__(/*! ../../dash/utils/SegmentsUtils */ "./node_modules/dashjs/src/dash/utils/SegmentsUtils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ScheduleController(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var metricsModel = config.metricsModel;
    var adapter = config.adapter;
    var dashMetrics = config.dashMetrics;
    var dashManifestModel = config.dashManifestModel;
    var timelineConverter = config.timelineConverter;
    var mediaPlayerModel = config.mediaPlayerModel;
    var abrController = config.abrController;
    var playbackController = config.playbackController;
    var streamController = config.streamController;
    var textController = config.textController;
    var type = config.type;
    var streamProcessor = config.streamProcessor;
    var mediaController = config.mediaController;

    var instance = void 0,
        logger = void 0,
        fragmentModel = void 0,
        currentRepresentationInfo = void 0,
        initialRequest = void 0,
        isStopped = void 0,
        playListMetrics = void 0,
        playListTraceMetrics = void 0,
        playListTraceMetricsClosed = void 0,
        isFragmentProcessingInProgress = void 0,
        timeToLoadDelay = void 0,
        scheduleTimeout = void 0,
        seekTarget = void 0,
        bufferLevelRule = void 0,
        nextFragmentRequestRule = void 0,
        lastFragmentRequest = void 0,
        topQualityIndex = void 0,
        lastInitQuality = void 0,
        replaceRequestArray = void 0,
        switchTrack = void 0,
        bufferResetInProgress = void 0,
        mediaRequest = void 0,
        isReplacementRequest = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        resetInitialSettings();
    }

    function initialize() {
        fragmentModel = streamProcessor.getFragmentModel();

        bufferLevelRule = (0, _BufferLevelRule2.default)(context).create({
            abrController: abrController,
            dashMetrics: dashMetrics,
            metricsModel: metricsModel,
            mediaPlayerModel: mediaPlayerModel,
            textController: textController
        });

        nextFragmentRequestRule = (0, _NextFragmentRequestRule2.default)(context).create({
            adapter: adapter,
            textController: textController,
            playbackController: playbackController
        });

        if (dashManifestModel.getIsTextTrack(config.mimeType)) {
            eventBus.on(_Events2.default.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);
        }

        eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);
        eventBus.on(_Events2.default.DATA_UPDATE_STARTED, onDataUpdateStarted, this);
        eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
        eventBus.on(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);
        eventBus.on(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this);
        eventBus.on(_Events2.default.STREAM_INITIALIZED, onStreamInitialized, this);
        eventBus.on(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);
        eventBus.on(_Events2.default.BUFFER_CLEARED, onBufferCleared, this);
        eventBus.on(_Events2.default.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);
        eventBus.on(_Events2.default.INIT_REQUESTED, onInitRequested, this);
        eventBus.on(_Events2.default.QUOTA_EXCEEDED, onQuotaExceeded, this);
        eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this);
        eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this);
        eventBus.on(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);
        eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);
        eventBus.on(_Events2.default.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);
        eventBus.on(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);
    }

    function isStarted() {
        return isStopped === false;
    }

    function start() {
        if (!currentRepresentationInfo || streamProcessor.isBufferingCompleted()) {
            logger.warn('Start denied to Schedule Controller');
            return;
        }
        logger.debug('Schedule Controller starts');
        addPlaylistTraceMetrics();
        isStopped = false;

        if (initialRequest) {
            initialRequest = false;
        }

        startScheduleTimer(0);
    }

    function stop() {
        if (isStopped) {
            return;
        }
        logger.debug('Schedule Controller stops');
        isStopped = true;
        clearTimeout(scheduleTimeout);
    }

    function hasTopQualityChanged(type, id) {
        topQualityIndex[id] = topQualityIndex[id] || {};
        var newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);

        if (topQualityIndex[id][type] != newTopQualityIndex) {
            logger.info('Top quality ' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);
            topQualityIndex[id][type] = newTopQualityIndex;
            return true;
        }
        return false;
    }

    function schedule() {
        var bufferController = streamProcessor.getBufferController();
        if (isStopped || isFragmentProcessingInProgress || !bufferController || playbackController.isPaused() && !mediaPlayerModel.getScheduleWhilePaused() || (type === _Constants2.default.FRAGMENTED_TEXT || type === _Constants2.default.TEXT) && !textController.isTextEnabled()) {
            logger.debug('Schedule stop!');
            return;
        }

        if (bufferController.getIsBufferingCompleted()) {
            logger.debug('Schedule stop because buffering is completed!');
            return;
        }

        validateExecutedFragmentRequest();

        var type = currentRepresentationInfo.mediaInfo.type;
        var isReplacement = replaceRequestArray.length > 0;
        var streamInfo = streamProcessor.getStreamInfo();
        if (!streamProcessor.getBufferController().getIsPruningInProgress() && (bufferResetInProgress || isNaN(lastInitQuality) || switchTrack || isReplacement || hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type, streamInfo.id) || bufferLevelRule.execute(streamProcessor, streamController.isTrackTypePresent(_Constants2.default.VIDEO)))) {

            var getNextFragment = function getNextFragment() {
                var fragmentController = streamProcessor.getFragmentController();
                if ((currentRepresentationInfo.quality !== lastInitQuality || switchTrack) && !bufferResetInProgress) {
                    logger.debug('Quality has changed, get init request for representationid = ' + currentRepresentationInfo.id);
                    if (switchTrack) {
                        bufferResetInProgress = mediaController.getSwitchMode(type) === _MediaController2.default.TRACK_SWITCH_MODE_ALWAYS_REPLACE ? true : false;
                        logger.debug('Switch track has been asked, get init request for ' + type + ' with representationid = ' + currentRepresentationInfo.id + 'bufferResetInProgress = ' + bufferResetInProgress);
                        streamProcessor.switchInitData(currentRepresentationInfo.id, bufferResetInProgress);
                        switchTrack = false;
                    } else {
                        streamProcessor.switchInitData(currentRepresentationInfo.id);
                    }
                    lastInitQuality = currentRepresentationInfo.quality;
                } else {
                    var replacement = replaceRequestArray.shift();

                    if (fragmentController.isInitializationRequest(replacement)) {
                        // To be sure the specific init segment had not already been loaded.
                        streamProcessor.switchInitData(replacement.representationId);
                    } else {
                        var request = void 0;
                        request = nextFragmentRequestRule.execute(streamProcessor, seekTarget, replacement);
                        setSeekTarget(NaN);
                        if (request && !replacement) {
                            if (!isNaN(request.startTime + request.duration)) {
                                adapter.setIndexHandlerTime(streamProcessor, request.startTime + request.duration);
                            }
                            request.delayLoadingTime = new Date().getTime() + timeToLoadDelay;
                            setTimeToLoadDelay(0);
                        }
                        if (!request && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic) {
                            logger.debug('Next fragment seems to be at the bleeding live edge and is not available yet. Rescheduling.');
                        }

                        if (request) {
                            logger.debug('Next fragment request url is ' + request.url);
                            fragmentModel.executeRequest(request);
                        } else {
                            // Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.
                            setFragmentProcessState(false);
                            startScheduleTimer(mediaPlayerModel.getLowLatencyEnabled() ? 100 : 500);
                        }
                    }
                }
            };

            setFragmentProcessState(true);
            if (!isReplacement && !switchTrack) {
                abrController.checkPlaybackQuality(type);
            }

            getNextFragment();
        } else {
            startScheduleTimer(500);
        }
    }

    function validateExecutedFragmentRequest() {
        // Validate that the fragment request executed and appended into the source buffer is as
        // good of quality as the current quality and is the correct media track.
        var time = playbackController.getTime();
        var safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;
        var request = fragmentModel.getRequests({
            state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
            time: time + safeBufferLevel,
            threshold: 0
        })[0];

        if (request && replaceRequestArray.indexOf(request) === -1 && !dashManifestModel.getIsTextTrack(type)) {
            var fastSwitchModeEnabled = mediaPlayerModel.getFastSwitchEnabled();
            var bufferLevel = streamProcessor.getBufferLevel();
            var abandonmentState = abrController.getAbandonmentStateFor(type);

            // Only replace on track switch when NEVER_REPLACE
            var trackChanged = !mediaController.isCurrentTrack(request.mediaInfo) && mediaController.getSwitchMode(request.mediaInfo.type) === _MediaController2.default.TRACK_SWITCH_MODE_NEVER_REPLACE;
            var qualityChanged = request.quality < currentRepresentationInfo.quality;

            if (fastSwitchModeEnabled && (trackChanged || qualityChanged) && bufferLevel >= safeBufferLevel && abandonmentState !== _AbrController2.default.ABANDON_LOAD) {
                replaceRequest(request);
                isReplacementRequest = true;
                logger.debug('Reloading outdated fragment at index: ', request.index);
            } else if (request.quality > currentRepresentationInfo.quality && !bufferResetInProgress) {
                // The buffer has better quality it in then what we would request so set append point to end of buffer!!
                setSeekTarget(playbackController.getTime() + streamProcessor.getBufferLevel());
            }
        }
    }

    function startScheduleTimer(value) {
        clearTimeout(scheduleTimeout);
        scheduleTimeout = setTimeout(schedule, value);
    }

    function onInitRequested(e) {
        if (!e.sender || e.sender.getStreamProcessor() !== streamProcessor) {
            return;
        }

        getInitRequest(currentRepresentationInfo.quality);
    }

    function setFragmentProcessState(state) {
        if (isFragmentProcessingInProgress !== state) {
            isFragmentProcessingInProgress = state;
        } else {
            logger.debug('isFragmentProcessingInProgress is already equal to', state);
        }
    }

    function getInitRequest(quality) {
        var request = adapter.getInitRequest(streamProcessor, quality);
        if (request) {
            setFragmentProcessState(true);
            request.url = (0, _SegmentsUtils.replaceTokenForTemplate)(request.url, 'Bandwidth', currentRepresentationInfo ? currentRepresentationInfo.bandwidth : null);
            fragmentModel.executeRequest(request);
        }
    }

    function switchTrackAsked() {
        switchTrack = true;
    }

    function replaceRequest(request) {
        replaceRequestArray.push(request);
    }

    function onQualityChanged(e) {
        if (type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {
            return;
        }

        currentRepresentationInfo = streamProcessor.getRepresentationInfo(e.newQuality);

        if (currentRepresentationInfo === null || currentRepresentationInfo === undefined) {
            throw new Error('Unexpected error! - currentRepresentationInfo is null or undefined');
        }

        clearPlayListTraceMetrics(new Date(), _PlayList.PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);
        addPlaylistTraceMetrics();
    }

    function completeQualityChange(trigger) {
        if (playbackController && fragmentModel) {
            var item = fragmentModel.getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                time: playbackController.getTime(),
                threshold: 0
            })[0];
            if (item && playbackController.getTime() >= item.startTime) {
                if ((!lastFragmentRequest.mediaInfo || item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id) && trigger) {
                    eventBus.trigger(_Events2.default.TRACK_CHANGE_RENDERED, {
                        mediaType: type,
                        oldMediaInfo: lastFragmentRequest.mediaInfo,
                        newMediaInfo: item.mediaInfo
                    });
                }
                if ((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger) {
                    eventBus.trigger(_Events2.default.QUALITY_CHANGE_RENDERED, {
                        mediaType: type,
                        oldQuality: lastFragmentRequest.quality,
                        newQuality: item.quality
                    });
                }
                lastFragmentRequest = {
                    mediaInfo: item.mediaInfo,
                    quality: item.quality,
                    adaptationIndex: item.adaptationIndex
                };
            }
        }
    }

    function onDataUpdateCompleted(e) {
        if (e.error || e.sender.getStreamProcessor() !== streamProcessor) {
            return;
        }

        currentRepresentationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);
    }

    function onStreamInitialized(e) {
        if (e.error || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {
            return;
        }

        currentRepresentationInfo = streamProcessor.getRepresentationInfo();

        if (initialRequest) {
            if (playbackController.getIsDynamic()) {
                timelineConverter.setTimeSyncCompleted(true);
                setLiveEdgeSeekTarget();
            } else {
                seekTarget = playbackController.getStreamStartTime(false);
                streamProcessor.getBufferController().setSeekStartTime(seekTarget);
            }
        }

        if (isStopped) {
            start();
        }
    }

    function setLiveEdgeSeekTarget() {
        var liveEdgeFinder = streamProcessor.getLiveEdgeFinder();
        if (liveEdgeFinder) {
            var liveEdge = liveEdgeFinder.getLiveEdge();
            var dvrWindowSize = currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize / 2;
            var startTime = liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration, dvrWindowSize);
            var request = adapter.getFragmentRequest(streamProcessor, currentRepresentationInfo, startTime, {
                ignoreIsFinished: true
            });

            if (request) {
                // When low latency mode is selected but browser doesn't support fetch
                // start at the beginning of the segment to avoid consuming the whole buffer
                if (mediaPlayerModel.getLowLatencyEnabled()) {
                    var liveStartTime = request.duration < mediaPlayerModel.getLiveDelay() ? request.startTime : request.startTime + request.duration - mediaPlayerModel.getLiveDelay();
                    playbackController.setLiveStartTime(liveStartTime);
                } else {
                    playbackController.setLiveStartTime(request.startTime);
                }
            } else {
                logger.debug('setLiveEdgeSeekTarget : getFragmentRequest returned undefined request object');
            }
            seekTarget = playbackController.getStreamStartTime(false, liveEdge);
            streamProcessor.getBufferController().setSeekStartTime(seekTarget);

            //special use case for multi period stream. If the startTime is out of the current period, send a seek command.
            //in onPlaybackSeeking callback (StreamController), the detection of switch stream is done.
            if (seekTarget > currentRepresentationInfo.mediaInfo.streamInfo.start + currentRepresentationInfo.mediaInfo.streamInfo.duration) {
                playbackController.seek(seekTarget);
            }

            var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_Constants2.default.STREAM));
            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                currentTime: seekTarget,
                presentationStartTime: liveEdge,
                latency: liveEdge - seekTarget,
                clientTimeOffset: timelineConverter.getClientTimeOffset()
            });
        }
    }

    function onStreamCompleted(e) {
        if (e.fragmentModel !== fragmentModel) {
            return;
        }

        stop();
        setFragmentProcessState(false);
        logger.info('Stream is complete');
    }

    function onFragmentLoadingCompleted(e) {
        if (e.sender !== fragmentModel) {
            return;
        }
        logger.info('OnFragmentLoadingCompleted - Url:', e.request ? e.request.url : 'undefined', ', Range:', e.request.range ? e.request.range : 'undefined');
        if (dashManifestModel.getIsTextTrack(type)) {
            setFragmentProcessState(false);
        }

        if (e.error && e.request.serviceLocation && !isStopped) {
            replaceRequest(e.request);
            setFragmentProcessState(false);
            startScheduleTimer(0);
        }

        if (bufferResetInProgress) {
            mediaRequest = e.request;
        }
    }

    function onPlaybackTimeUpdated() {
        completeQualityChange(true);
    }

    function onBytesAppended(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor) {
            return;
        }

        if (bufferResetInProgress && !isNaN(e.startTime)) {
            bufferResetInProgress = false;
            fragmentModel.addExecutedRequest(mediaRequest);
        }

        setFragmentProcessState(false);
        if (isReplacementRequest && !isNaN(e.startTime)) {
            //replace requests process is in progress, call schedule in n seconds.
            //it is done in order to not add a fragment at the new quality at the end of the buffer before replace process is over.
            //Indeed, if schedule is called too early, the executed request tested is the same that the one tested during previous schedule (at the new quality).
            var currentTime = playbackController.getTime();
            var fragEndTime = e.startTime + currentRepresentationInfo.fragmentDuration;
            var safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;
            if (currentTime + safeBufferLevel >= fragEndTime) {
                startScheduleTimer(0);
            } else {
                startScheduleTimer((fragEndTime - (currentTime + safeBufferLevel)) * 1000);
            }
            isReplacementRequest = false;
        } else {
            startScheduleTimer(0);
        }
    }

    function onFragmentLoadingAbandoned(e) {
        if (e.streamProcessor !== streamProcessor) {
            return;
        }
        logger.info('onFragmentLoadingAbandoned for ' + type + ', request: ' + e.request.url + ' has been aborted');
        if (!playbackController.isSeeking() && !switchTrack) {
            logger.info('onFragmentLoadingAbandoned for ' + type + ', request: ' + e.request.url + ' has to be downloaded again, origin is not seeking process or switch track call');
            replaceRequest(e.request);
        }
        setFragmentProcessState(false);
        startScheduleTimer(0);
    }

    function onDataUpdateStarted(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor) {
            return;
        }

        stop();
    }

    function onBufferCleared(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor) {
            return;
        }

        var streamInfo = streamProcessor.getStreamInfo();
        if (streamInfo) {
            if (e.unintended) {
                // There was an unintended buffer remove, probably creating a gap in the buffer, remove every saved request
                fragmentModel.removeExecutedRequestsAfterTime(e.from, streamInfo.duration);
            } else {
                fragmentModel.syncExecutedRequestsWithBufferedRange(streamProcessor.getBufferController().getBuffer().getAllBufferRanges(), streamInfo.duration);
            }
        }

        if (e.hasEnoughSpaceToAppend && isStopped) {
            start();
        }
    }

    function onBufferLevelStateChanged(e) {
        if (e.sender.getStreamProcessor() === streamProcessor && e.state === _BufferController2.default.BUFFER_EMPTY && !playbackController.isSeeking()) {
            logger.info('Buffer is empty! Stalling!');
            clearPlayListTraceMetrics(new Date(), _PlayList.PlayListTrace.REBUFFERING_REASON);
        }
    }

    function onQuotaExceeded(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor) {
            return;
        }

        stop();
        setFragmentProcessState(false);
    }

    function onURLResolutionFailed() {
        fragmentModel.abortRequests();
        stop();
    }

    function onTimedTextRequested(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor) {
            return;
        }

        //if subtitles are disabled, do not download subtitles file.
        if (textController.isTextEnabled()) {
            getInitRequest(e.index);
        }
    }

    function onPlaybackStarted() {
        if (isStopped || !mediaPlayerModel.getScheduleWhilePaused()) {
            start();
        }
    }

    function onPlaybackSeeking(e) {
        seekTarget = e.seekTime;
        setTimeToLoadDelay(0);

        if (isStopped) {
            start();
        }

        var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_Constants2.default.STREAM));
        var latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;
        metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
            latency: latency
        });

        //if, during the seek command, the scheduleController is waiting : stop waiting, request chunk as soon as possible
        if (!isFragmentProcessingInProgress) {
            startScheduleTimer(0);
        } else {
            logger.debug('onPlaybackSeeking for ' + type + ', call fragmentModel.abortRequests in order to seek quicker');
            fragmentModel.abortRequests();
        }
    }

    function onPlaybackRateChanged(e) {
        if (playListTraceMetrics) {
            playListTraceMetrics.playbackspeed = e.playbackRate.toString();
        }
    }

    function setSeekTarget(value) {
        seekTarget = value;
    }

    function setTimeToLoadDelay(value) {
        timeToLoadDelay = value;
    }

    function getBufferTarget() {
        return bufferLevelRule.getBufferTarget(streamProcessor, streamController.isTrackTypePresent(_Constants2.default.VIDEO));
    }

    function getType() {
        return type;
    }

    function setPlayList(playList) {
        playListMetrics = playList;
    }

    function finalisePlayList(time, reason) {
        clearPlayListTraceMetrics(time, reason);
        playListMetrics = null;
    }

    function clearPlayListTraceMetrics(endTime, stopreason) {
        if (playListMetrics && playListTraceMetricsClosed === false) {
            var startTime = playListTraceMetrics.start;
            var duration = endTime.getTime() - startTime.getTime();
            playListTraceMetrics.duration = duration;
            playListTraceMetrics.stopreason = stopreason;
            playListMetrics.trace.push(playListTraceMetrics);
            playListTraceMetricsClosed = true;
        }
    }

    function addPlaylistTraceMetrics() {
        if (playListMetrics && playListTraceMetricsClosed === true && currentRepresentationInfo) {
            playListTraceMetricsClosed = false;
            playListTraceMetrics = new _PlayList.PlayListTrace();
            playListTraceMetrics.representationid = currentRepresentationInfo.id;
            playListTraceMetrics.start = new Date();
            playListTraceMetrics.mstart = playbackController.getTime() * 1000;
            playListTraceMetrics.playbackspeed = playbackController.getPlaybackRate().toString();
        }
    }

    function resetInitialSettings() {
        isFragmentProcessingInProgress = false;
        timeToLoadDelay = 0;
        seekTarget = NaN;
        playListMetrics = null;
        playListTraceMetrics = null;
        playListTraceMetricsClosed = true;
        initialRequest = true;
        lastInitQuality = NaN;
        lastFragmentRequest = {
            mediaInfo: undefined,
            quality: NaN,
            adaptationIndex: NaN
        };
        topQualityIndex = {};
        replaceRequestArray = [];
        isStopped = true;
        switchTrack = false;
        bufferResetInProgress = false;
        mediaRequest = null;
        isReplacementRequest = false;
    }

    function reset() {
        eventBus.off(_Events2.default.DATA_UPDATE_STARTED, onDataUpdateStarted, this);
        eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);
        eventBus.off(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);
        eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);
        eventBus.off(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);
        eventBus.off(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this);
        eventBus.off(_Events2.default.STREAM_INITIALIZED, onStreamInitialized, this);
        eventBus.off(_Events2.default.QUOTA_EXCEEDED, onQuotaExceeded, this);
        eventBus.off(_Events2.default.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);
        eventBus.off(_Events2.default.BUFFER_CLEARED, onBufferCleared, this);
        eventBus.off(_Events2.default.INIT_REQUESTED, onInitRequested, this);
        eventBus.off(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);
        eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this);
        eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this);
        eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);
        eventBus.off(_Events2.default.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);
        eventBus.off(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);
        if (dashManifestModel.getIsTextTrack(type)) {
            eventBus.off(_Events2.default.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);
        }

        stop();
        completeQualityChange(false);
        resetInitialSettings();
    }

    instance = {
        initialize: initialize,
        getType: getType,
        setSeekTarget: setSeekTarget,
        setTimeToLoadDelay: setTimeToLoadDelay,
        replaceRequest: replaceRequest,
        switchTrackAsked: switchTrackAsked,
        isStarted: isStarted,
        start: start,
        stop: stop,
        reset: reset,
        setPlayList: setPlayList,
        getBufferTarget: getBufferTarget,
        finalisePlayList: finalisePlayList
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


ScheduleController.__dashjs_factory_name = 'ScheduleController';
exports.default = _FactoryMaker2.default.getClassFactory(ScheduleController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/StreamController.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/StreamController.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _MetricsConstants = __webpack_require__(/*! ../constants/MetricsConstants */ "./node_modules/dashjs/src/streaming/constants/MetricsConstants.js");

var _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);

var _Stream = __webpack_require__(/*! ../Stream */ "./node_modules/dashjs/src/streaming/Stream.js");

var _Stream2 = _interopRequireDefault(_Stream);

var _ManifestUpdater = __webpack_require__(/*! ../ManifestUpdater */ "./node_modules/dashjs/src/streaming/ManifestUpdater.js");

var _ManifestUpdater2 = _interopRequireDefault(_ManifestUpdater);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _PlayList = __webpack_require__(/*! ../vo/metrics/PlayList */ "./node_modules/dashjs/src/streaming/vo/metrics/PlayList.js");

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _InitCache = __webpack_require__(/*! ../utils/InitCache */ "./node_modules/dashjs/src/streaming/utils/InitCache.js");

var _InitCache2 = _interopRequireDefault(_InitCache);

var _URLUtils = __webpack_require__(/*! ../utils/URLUtils */ "./node_modules/dashjs/src/streaming/utils/URLUtils.js");

var _URLUtils2 = _interopRequireDefault(_URLUtils);

var _MediaPlayerEvents = __webpack_require__(/*! ../MediaPlayerEvents */ "./node_modules/dashjs/src/streaming/MediaPlayerEvents.js");

var _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);

var _TimeSyncController = __webpack_require__(/*! ./TimeSyncController */ "./node_modules/dashjs/src/streaming/controllers/TimeSyncController.js");

var _TimeSyncController2 = _interopRequireDefault(_TimeSyncController);

var _BaseURLController = __webpack_require__(/*! ./BaseURLController */ "./node_modules/dashjs/src/streaming/controllers/BaseURLController.js");

var _BaseURLController2 = _interopRequireDefault(_BaseURLController);

var _MediaSourceController = __webpack_require__(/*! ./MediaSourceController */ "./node_modules/dashjs/src/streaming/controllers/MediaSourceController.js");

var _MediaSourceController2 = _interopRequireDefault(_MediaSourceController);

var _DashJSError = __webpack_require__(/*! ../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Errors = __webpack_require__(/*! ../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function StreamController() {
    // Check whether there is a gap every 40 wallClockUpdateEvent times
    var STALL_THRESHOLD_TO_CHECK_GAPS = 40;

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        capabilities = void 0,
        manifestUpdater = void 0,
        manifestLoader = void 0,
        manifestModel = void 0,
        dashManifestModel = void 0,
        adapter = void 0,
        metricsModel = void 0,
        dashMetrics = void 0,
        mediaSourceController = void 0,
        timeSyncController = void 0,
        baseURLController = void 0,
        domStorage = void 0,
        abrController = void 0,
        mediaController = void 0,
        textController = void 0,
        initCache = void 0,
        urlUtils = void 0,
        errHandler = void 0,
        timelineConverter = void 0,
        streams = void 0,
        activeStream = void 0,
        protectionController = void 0,
        protectionData = void 0,
        autoPlay = void 0,
        isStreamSwitchingInProgress = void 0,
        hasMediaError = void 0,
        hasInitialisationError = void 0,
        mediaSource = void 0,
        videoModel = void 0,
        playbackController = void 0,
        mediaPlayerModel = void 0,
        isPaused = void 0,
        initialPlayback = void 0,
        playListMetrics = void 0,
        videoTrackDetected = void 0,
        audioTrackDetected = void 0,
        alreadyTimeSynced = void 0,
        isPeriodSwitchInProgress = void 0,
        playbackEndedTimerId = void 0,
        preloadTimerId = void 0,
        wallclockTicked = void 0,
        buffers = void 0,
        useSmoothPeriodTransition = void 0,
        preloading = void 0,
        lastPlaybackTime = void 0,
        supportsChangeType = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        timeSyncController = (0, _TimeSyncController2.default)(context).getInstance();
        baseURLController = (0, _BaseURLController2.default)(context).getInstance();
        mediaSourceController = (0, _MediaSourceController2.default)(context).getInstance();
        initCache = (0, _InitCache2.default)(context).getInstance();
        urlUtils = (0, _URLUtils2.default)(context).getInstance();

        resetInitialSettings();
    }

    function initialize(autoPl, protData) {
        checkSetConfigCall();

        autoPlay = autoPl;
        protectionData = protData;
        timelineConverter.initialize();

        manifestUpdater = (0, _ManifestUpdater2.default)(context).create();
        manifestUpdater.setConfig({
            manifestModel: manifestModel,
            dashManifestModel: dashManifestModel,
            mediaPlayerModel: mediaPlayerModel,
            manifestLoader: manifestLoader,
            errHandler: errHandler
        });
        manifestUpdater.initialize();

        baseURLController.setConfig({
            dashManifestModel: dashManifestModel
        });

        registerEvents();
    }

    function registerEvents() {
        eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);
        eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this);
        eventBus.on(_Events2.default.PLAYBACK_ERROR, onPlaybackError, this);
        eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this);
        eventBus.on(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this);
        eventBus.on(_Events2.default.PLAYBACK_ENDED, onEnded, this);
        eventBus.on(_Events2.default.MANIFEST_UPDATED, onManifestUpdated, this);
        eventBus.on(_Events2.default.BUFFERING_COMPLETED, onTrackBufferingCompleted, this);
        eventBus.on(_Events2.default.STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, this);
        eventBus.on(_Events2.default.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, this);
        eventBus.on(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncCompleted, this);
        eventBus.on(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);
        eventBus.on(_MediaPlayerEvents2.default.METRIC_ADDED, onMetricAdded, this);
    }

    function unRegisterEvents() {
        eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);
        eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this);
        eventBus.off(_Events2.default.PLAYBACK_ERROR, onPlaybackError, this);
        eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this);
        eventBus.off(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this);
        eventBus.off(_Events2.default.PLAYBACK_ENDED, onEnded, this);
        eventBus.off(_Events2.default.MANIFEST_UPDATED, onManifestUpdated, this);
        eventBus.off(_Events2.default.BUFFERING_COMPLETED, onTrackBufferingCompleted, this);
        eventBus.off(_Events2.default.STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, this);
        eventBus.off(_Events2.default.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, this);
        eventBus.off(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncCompleted, this);
        eventBus.off(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);
        eventBus.off(_MediaPlayerEvents2.default.METRIC_ADDED, onMetricAdded, this);
    }

    /*
     * Called when current playback position is changed.
     * Used to determine the time current stream is finished and we should switch to the next stream.
     */
    function onPlaybackTimeUpdated() /*e*/{
        if (isTrackTypePresent(_Constants2.default.VIDEO)) {
            var playbackQuality = videoModel.getPlaybackQuality();
            if (playbackQuality) {
                metricsModel.addDroppedFrames(_Constants2.default.VIDEO, playbackQuality);
            }
        }
    }

    function onWallclockTimeUpdated() /*e*/{
        if (!mediaPlayerModel.getJumpGaps() || getActiveStreamProcessors() === 0 || playbackController.isSeeking() || isPaused || isStreamSwitchingInProgress || hasMediaError || hasInitialisationError) {
            return;
        }

        wallclockTicked++;
        if (wallclockTicked >= STALL_THRESHOLD_TO_CHECK_GAPS) {
            var currentTime = playbackController.getTime();
            if (lastPlaybackTime === currentTime) {
                jumpGap(currentTime);
            } else {
                lastPlaybackTime = currentTime;
            }
            wallclockTicked = 0;
        }
    }

    function jumpGap(time) {
        var streamProcessors = getActiveStreamProcessors();
        var smallGapLimit = mediaPlayerModel.getSmallGapLimit();
        var seekToPosition = void 0;

        // Find out what is the right time position to jump to taking
        // into account state of buffer
        for (var i = 0; i < streamProcessors.length; i++) {
            var mediaBuffer = streamProcessors[i].getBuffer();
            var ranges = mediaBuffer.getAllBufferRanges();
            var nextRangeStartTime = void 0;
            if (!ranges || ranges.length <= 1) continue;

            // Get the range just after current time position
            for (var j = 0; j < ranges.length; j++) {
                if (time < ranges.start(j)) {
                    nextRangeStartTime = ranges.start(j);
                    break;
                }
            }

            if (nextRangeStartTime > 0) {
                var gap = nextRangeStartTime - time;
                if (gap > 0 && gap <= smallGapLimit) {
                    if (seekToPosition === undefined || nextRangeStartTime > seekToPosition) {
                        seekToPosition = nextRangeStartTime;
                    }
                }
            }
        }

        var timeToStreamEnd = playbackController.getTimeToStreamEnd();
        if (seekToPosition === undefined && !isNaN(timeToStreamEnd) && timeToStreamEnd < smallGapLimit) {
            seekToPosition = time + timeToStreamEnd;
        }

        // If there is a safe position to jump to, do the seeking
        if (seekToPosition > 0) {
            if (!isNaN(timeToStreamEnd) && seekToPosition >= time + timeToStreamEnd) {
                logger.info('Jumping media gap (discontinuity) at time ', time, '. Jumping to end of the stream');
                eventBus.trigger(_Events2.default.PLAYBACK_ENDED, { 'isLast': getActiveStreamInfo().isLast });
            } else {
                logger.info('Jumping media gap (discontinuity) at time ', time, '. Jumping to time position', seekToPosition);
                playbackController.seek(seekToPosition, true, true);
            }
        }
    }

    function onPlaybackSeeking(e) {
        var seekingStream = getStreamForTime(e.seekTime);

        //if end period has been detected, stop timer and reset isPeriodSwitchInProgress
        if (playbackEndedTimerId) {
            stopEndPeriodTimer();
            isPeriodSwitchInProgress = false;
        }

        if (preloadTimerId) {
            stopPreloadTimer();
        }

        if (seekingStream === activeStream && preloading) {
            // Seeking to the current period was requested while preloading the next one, deactivate preloading one
            preloading.deactivate(true);
        }

        if (seekingStream && (seekingStream !== activeStream || preloading && !activeStream.isActive())) {
            // If we're preloading other stream, the active one was deactivated and we need to switch back
            flushPlaylistMetrics(_PlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON);
            switchStream(activeStream, seekingStream, e.seekTime);
        } else {
            flushPlaylistMetrics(_PlayList.PlayListTrace.USER_REQUEST_STOP_REASON);
        }

        addPlaylistMetrics(_PlayList.PlayList.SEEK_START_REASON);
    }

    function onPlaybackStarted() /*e*/{
        logger.debug('[onPlaybackStarted]');
        if (initialPlayback) {
            initialPlayback = false;
            addPlaylistMetrics(_PlayList.PlayList.INITIAL_PLAYOUT_START_REASON);
        } else {
            if (isPaused) {
                isPaused = false;
                addPlaylistMetrics(_PlayList.PlayList.RESUME_FROM_PAUSE_START_REASON);
                toggleEndPeriodTimer();
            }
        }
    }

    function onPlaybackPaused(e) {
        logger.debug('[onPlaybackPaused]');
        if (!e.ended) {
            isPaused = true;
            flushPlaylistMetrics(_PlayList.PlayListTrace.USER_REQUEST_STOP_REASON);
            toggleEndPeriodTimer();
        }
    }

    function stopEndPeriodTimer() {
        logger.debug('[toggleEndPeriodTimer] stop end period timer.');
        clearTimeout(playbackEndedTimerId);
        playbackEndedTimerId = undefined;
    }

    function stopPreloadTimer() {
        logger.debug('[PreloadTimer] stop period preload timer.');
        clearTimeout(preloadTimerId);
        preloadTimerId = undefined;
    }

    function toggleEndPeriodTimer() {
        //stream buffering completed has not been detected, nothing to do....
        if (isPeriodSwitchInProgress) {
            //stream buffering completed has been detected, if end period timer is running, stop it, otherwise start it....
            if (playbackEndedTimerId) {
                stopEndPeriodTimer();
            } else {
                var timeToEnd = playbackController.getTimeToStreamEnd();
                var delayPlaybackEnded = timeToEnd > 0 ? timeToEnd * 1000 : 0;
                var preloadDelay = delayPlaybackEnded < 2000 ? delayPlaybackEnded / 4 : delayPlaybackEnded - 2000;
                logger.debug('[toggleEndPeriodTimer] Going to fire preload in', preloadDelay, 'milliseconds');
                preloadTimerId = setTimeout(onStreamCanLoadNext, preloadDelay);
                logger.debug('[toggleEndPeriodTimer] start-up of timer to notify PLAYBACK_ENDED event. It will be triggered in', delayPlaybackEnded, 'milliseconds');
                playbackEndedTimerId = setTimeout(function () {
                    eventBus.trigger(_Events2.default.PLAYBACK_ENDED, { 'isLast': getActiveStreamInfo().isLast });
                }, delayPlaybackEnded);
            }
        }
    }

    function onTrackBufferingCompleted(e) {
        // In multiperiod situations, as soon as one of the tracks (AUDIO, VIDEO) is finished we should
        // start doing prefetching of the next period
        if (!e.sender) {
            return;
        }
        if (e.sender.getType() !== _Constants2.default.AUDIO && e.sender.getType() !== _Constants2.default.VIDEO) {
            return;
        }

        var isLast = getActiveStreamInfo().isLast;
        if (mediaSource && !isLast && playbackEndedTimerId === undefined) {
            logger.info('[onTrackBufferingCompleted] end of period detected. Track', e.sender.getType(), 'has finished');
            isPeriodSwitchInProgress = true;
            if (isPaused === false) {
                toggleEndPeriodTimer();
            }
        }
    }

    function onStreamBufferingCompleted() {
        var isLast = getActiveStreamInfo().isLast;
        if (mediaSource && isLast) {
            logger.info('[onStreamBufferingCompleted] calls signalEndOfStream of mediaSourceController.');
            mediaSourceController.signalEndOfStream(mediaSource);
        }
    }

    function onStreamCanLoadNext() {
        var isLast = getActiveStreamInfo().isLast;
        if (mediaSource && !isLast) {
            var newStream = getNextStream();

            // Smooth period transition allowed only if both of these conditions are true:
            // 1.- None of the periods uses contentProtection.
            // 2.- changeType method implemented by browser or periods use the same codec.
            useSmoothPeriodTransition = activeStream.isProtectionCompatible(newStream) && (supportsChangeType || activeStream.isMediaCodecCompatible(newStream));

            if (useSmoothPeriodTransition) {
                logger.info('[onStreamCanLoadNext] Preloading next stream');
                activeStream.stopEventController();
                activeStream.deactivate(true);
                newStream.preload(mediaSource, buffers);
                preloading = newStream;
                newStream.getProcessors().forEach(function (p) {
                    adapter.setIndexHandlerTime(p, newStream.getStartTime());
                });
            }
        }
    }

    function getStreamForTime(time) {
        var duration = 0;
        var stream = null;

        var ln = streams.length;

        if (ln > 0) {
            duration += streams[0].getStartTime();
        }

        for (var i = 0; i < ln; i++) {
            stream = streams[i];
            duration = parseFloat((duration + stream.getDuration()).toFixed(5));

            if (time < duration) {
                return stream;
            }
        }

        return null;
    }

    /**
     * Returns a playhead time, in seconds, converted to be relative
     * to the start of an identified stream/period or null if no such stream
     * @param {number} time
     * @param {string} id
     * @returns {number|null}
     */
    function getTimeRelativeToStreamId(time, id) {
        var stream = null;
        var baseStart = 0;
        var streamStart = 0;
        var streamDur = null;

        var ln = streams.length;

        for (var i = 0; i < ln; i++) {
            stream = streams[i];
            streamStart = stream.getStartTime();
            streamDur = stream.getDuration();

            // use start time, if not undefined or NaN or similar
            if (Number.isFinite(streamStart)) {
                baseStart = streamStart;
            }

            if (stream.getId() === id) {
                return time - baseStart;
            } else {
                // use duration if not undefined or NaN or similar
                if (Number.isFinite(streamDur)) {
                    baseStart += streamDur;
                }
            }
        }

        return null;
    }

    function getActiveStreamProcessors() {
        return activeStream ? activeStream.getProcessors() : [];
    }

    function onEnded() {
        var nextStream = getNextStream();
        if (nextStream) {
            audioTrackDetected = undefined;
            videoTrackDetected = undefined;
            switchStream(activeStream, nextStream, NaN);
        } else {
            logger.debug('StreamController no next stream found');
        }
        flushPlaylistMetrics(nextStream ? _PlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON : _PlayList.PlayListTrace.END_OF_CONTENT_STOP_REASON);
        playbackEndedTimerId = undefined;
        isPeriodSwitchInProgress = false;
    }

    function getNextStream() {
        if (activeStream) {
            var start = getActiveStreamInfo().start;
            var duration = getActiveStreamInfo().duration;

            return streams.filter(function (stream) {
                return stream.getStreamInfo().start === parseFloat((start + duration).toFixed(5));
            })[0];
        }
    }

    function switchStream(oldStream, newStream, seekTime) {
        if (isStreamSwitchingInProgress || !newStream || oldStream === newStream && newStream.isActive()) return;
        isStreamSwitchingInProgress = true;

        eventBus.trigger(_Events2.default.PERIOD_SWITCH_STARTED, {
            fromStreamInfo: oldStream ? oldStream.getStreamInfo() : null,
            toStreamInfo: newStream.getStreamInfo()
        });

        useSmoothPeriodTransition = false;
        if (oldStream) {
            oldStream.stopEventController();
            useSmoothPeriodTransition = activeStream.isProtectionCompatible(newStream) && (supportsChangeType || activeStream.isMediaCodecCompatible(newStream)) && !seekTime || newStream.getPreloaded();
            oldStream.deactivate(useSmoothPeriodTransition);
        }

        activeStream = newStream;
        preloading = false;
        playbackController.initialize(getActiveStreamInfo(), useSmoothPeriodTransition);
        if (videoModel.getElement()) {
            //TODO detect if we should close jump to activateStream.
            openMediaSource(seekTime, oldStream, false, useSmoothPeriodTransition);
        } else {
            preloadStream(seekTime);
        }
    }

    function preloadStream(seekTime) {
        activateStream(seekTime, useSmoothPeriodTransition);
    }

    function switchToVideoElement(seekTime) {
        if (!activeStream) {
            switchStream(null, getStreamForTime(seekTime), seekTime);
        } else {
            playbackController.initialize(getActiveStreamInfo());
            openMediaSource(seekTime, null, true, false);
        }
    }

    function detachVideoElement() {
        for (var i = 0; i < streams.length; i++) {
            streams[i].deactivate();
        }
        activeStream = null;
    }

    function openMediaSource(seekTime, oldStream, streamActivated, keepBuffers) {
        var sourceUrl = void 0;

        function onMediaSourceOpen() {
            // Manage situations in which a call to reset happens while MediaSource is being opened
            if (!mediaSource) return;

            logger.debug('MediaSource is open!');
            window.URL.revokeObjectURL(sourceUrl);
            mediaSource.removeEventListener('sourceopen', onMediaSourceOpen);
            mediaSource.removeEventListener('webkitsourceopen', onMediaSourceOpen);
            setMediaDuration();

            if (!oldStream) {
                eventBus.trigger(_Events2.default.SOURCE_INITIALIZED);
            }

            if (streamActivated) {
                activeStream.setMediaSource(mediaSource);
            } else {
                activateStream(seekTime, keepBuffers);
            }
        }

        if (!mediaSource) {
            mediaSource = mediaSourceController.createMediaSource();
            mediaSource.addEventListener('sourceopen', onMediaSourceOpen, false);
            mediaSource.addEventListener('webkitsourceopen', onMediaSourceOpen, false);
            sourceUrl = mediaSourceController.attachMediaSource(mediaSource, videoModel);
            logger.debug('MediaSource attached to element.  Waiting on open...');
        } else {
            if (keepBuffers) {
                activateStream(seekTime, keepBuffers);
                if (!oldStream) {
                    eventBus.trigger(_Events2.default.SOURCE_INITIALIZED);
                }
            } else {
                mediaSourceController.detachMediaSource(videoModel);
                mediaSource.addEventListener('sourceopen', onMediaSourceOpen, false);
                mediaSource.addEventListener('webkitsourceopen', onMediaSourceOpen, false);
                sourceUrl = mediaSourceController.attachMediaSource(mediaSource, videoModel);
                logger.debug('MediaSource attached to element.  Waiting on open...');
            }
        }
    }

    function activateStream(seekTime, keepBuffers) {
        buffers = activeStream.activate(mediaSource, keepBuffers ? buffers : undefined);
        audioTrackDetected = checkTrackPresence(_Constants2.default.AUDIO);
        videoTrackDetected = checkTrackPresence(_Constants2.default.VIDEO);

        // check if change type is supported by the browser
        if (buffers) {
            var keys = Object.keys(buffers);
            if (keys.length > 0 && buffers[keys[0]].changeType) {
                logger.debug('SourceBuffer changeType method supported. Use it to switch codecs in periods transitions');
                supportsChangeType = true;
            }
        }

        if (!isNaN(seekTime)) {
            playbackController.seek(seekTime); //we only need to call seek here, IndexHandlerTime was set from seeking event
        } else {
            var startTime = playbackController.getStreamStartTime(true);
            getActiveStreamProcessors().forEach(function (p) {
                adapter.setIndexHandlerTime(p, startTime);
            });
        }

        activeStream.startEventController();
        if (autoPlay || !initialPlayback) {
            playbackController.play();
        }

        isStreamSwitchingInProgress = false;
        eventBus.trigger(_Events2.default.PERIOD_SWITCH_COMPLETED, {
            toStreamInfo: getActiveStreamInfo()
        });
    }

    function setMediaDuration(duration) {
        var manifestDuration = duration ? duration : getActiveStreamInfo().manifestInfo.duration;
        var mediaDuration = mediaSourceController.setDuration(mediaSource, manifestDuration);
        logger.debug('Duration successfully set to: ' + mediaDuration);
    }

    function getComposedStream(streamInfo) {
        for (var i = 0, ln = streams.length; i < ln; i++) {
            if (streams[i].getId() === streamInfo.id) {
                return streams[i];
            }
        }
        return null;
    }

    function composeStreams() {
        try {
            var streamsInfo = adapter.getStreamsInfo();
            if (streamsInfo.length === 0) {
                throw new Error('There are no streams');
            }

            var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_Constants2.default.STREAM));
            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                currentTime: playbackController.getTime(),
                buffered: videoModel.getBufferRange(),
                presentationStartTime: streamsInfo[0].start,
                clientTimeOffset: timelineConverter.getClientTimeOffset()
            });

            for (var i = 0, ln = streamsInfo.length; i < ln; i++) {
                // If the Stream object does not exist we probably loaded the manifest the first time or it was
                // introduced in the updated manifest, so we need to create a new Stream and perform all the initialization operations
                var streamInfo = streamsInfo[i];
                var stream = getComposedStream(streamInfo);

                if (!stream) {
                    stream = (0, _Stream2.default)(context).create({
                        manifestModel: manifestModel,
                        dashManifestModel: dashManifestModel,
                        mediaPlayerModel: mediaPlayerModel,
                        metricsModel: metricsModel,
                        dashMetrics: dashMetrics,
                        manifestUpdater: manifestUpdater,
                        adapter: adapter,
                        timelineConverter: timelineConverter,
                        capabilities: capabilities,
                        errHandler: errHandler,
                        baseURLController: baseURLController,
                        domStorage: domStorage,
                        abrController: abrController,
                        playbackController: playbackController,
                        mediaController: mediaController,
                        textController: textController,
                        videoModel: videoModel,
                        streamController: instance
                    });
                    streams.push(stream);
                    stream.initialize(streamInfo, protectionController);
                } else {
                    stream.updateData(streamInfo);
                }

                metricsModel.addManifestUpdateStreamInfo(manifestUpdateInfo, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);
            }

            if (!activeStream) {
                // we need to figure out what the correct starting period is
                var startTimeFormUriParameters = playbackController.getStartTimeFromUriParameters();
                var initialStream = null;
                if (startTimeFormUriParameters) {
                    var initialTime = !isNaN(startTimeFormUriParameters.fragS) ? startTimeFormUriParameters.fragS : startTimeFormUriParameters.fragT;
                    initialStream = getStreamForTime(initialTime);
                }
                switchStream(null, initialStream !== null ? initialStream : streams[0], NaN);
            }

            eventBus.trigger(_Events2.default.STREAMS_COMPOSED);
        } catch (e) {
            errHandler.manifestError(e.message, 'nostreamscomposed', manifestModel.getValue());
            errHandler.error(new _DashJSError2.default(_Errors2.default.MANIFEST_ERROR_ID_NOSTREAMS_CODE, e.message + 'nostreamscomposed', manifestModel.getValue()));
            hasInitialisationError = true;
            reset();
        }
    }

    function onTimeSyncCompleted() /*e*/{
        var manifest = manifestModel.getValue();
        //TODO check if we can move this to initialize??
        if (protectionController) {
            eventBus.trigger(_Events2.default.PROTECTION_CREATED, {
                controller: protectionController,
                manifest: manifest
            });
            protectionController.setMediaElement(videoModel.getElement());
            if (protectionData) {
                protectionController.setProtectionData(protectionData);
            }
        }

        composeStreams();
    }

    function onManifestUpdated(e) {
        if (!e.error) {
            if (!alreadyTimeSynced) {
                //Since streams are not composed yet , need to manually look up useCalculatedLiveEdgeTime to detect if stream
                //is SegmentTimeline to avoid using time source
                var manifest = e.manifest;
                adapter.updatePeriods(manifest);
                var streamInfo = adapter.getStreamsInfo(undefined, 1)[0];
                var mediaInfo = adapter.getMediaInfoForType(streamInfo, _Constants2.default.VIDEO) || adapter.getMediaInfoForType(streamInfo, _Constants2.default.AUDIO);

                var useCalculatedLiveEdgeTime = void 0;
                if (mediaInfo) {
                    useCalculatedLiveEdgeTime = dashManifestModel.getUseCalculatedLiveEdgeTimeForAdaptation(adapter.getDataForMedia(mediaInfo));
                    if (useCalculatedLiveEdgeTime) {
                        logger.debug('SegmentTimeline detected using calculated Live Edge Time');
                        mediaPlayerModel.setUseManifestDateHeaderTimeSource(false);
                    }
                }

                var manifestUTCTimingSources = dashManifestModel.getUTCTimingSources(e.manifest);
                var allUTCTimingSources = !dashManifestModel.getIsDynamic(manifest) || useCalculatedLiveEdgeTime ? manifestUTCTimingSources : manifestUTCTimingSources.concat(mediaPlayerModel.getUTCTimingSources());
                var isHTTPS = urlUtils.isHTTPS(e.manifest.url);

                allUTCTimingSources.forEach(function (item) {
                    if (item.value.replace(/.*?:\/\//g, '') === mediaPlayerModel.getDefaultUtcTimingSource().value.replace(/.*?:\/\//g, '')) {
                        item.value = item.value.replace(isHTTPS ? new RegExp(/^(http:)?\/\//i) : new RegExp(/^(https:)?\/\//i), isHTTPS ? 'https://' : 'http://');
                        logger.debug('Matching default timing source protocol to manifest protocol: ', item.value);
                    }
                });

                baseURLController.initialize(manifest);

                timeSyncController.setConfig({
                    metricsModel: metricsModel,
                    dashMetrics: dashMetrics,
                    baseURLController: baseURLController
                });
                timeSyncController.initialize(allUTCTimingSources, mediaPlayerModel.getUseManifestDateHeaderTimeSource());
                alreadyTimeSynced = true;
            }
        } else {
            hasInitialisationError = true;
            reset();
        }
    }

    function isTrackTypePresent(trackType) {
        var isTrackTypeDetected = void 0;

        if (!trackType) {
            return isTrackTypeDetected;
        }

        switch (trackType) {
            case _Constants2.default.VIDEO:
                isTrackTypeDetected = videoTrackDetected;
                break;
            case _Constants2.default.AUDIO:
                isTrackTypeDetected = audioTrackDetected;
                break;
        }
        return isTrackTypeDetected;
    }

    function checkTrackPresence(type) {
        var isDetected = false;
        getActiveStreamProcessors().forEach(function (p) {
            if (p.getMediaInfo().type === type) {
                isDetected = true;
            }
        });
        return isDetected;
    }

    function flushPlaylistMetrics(reason, time) {
        time = time || new Date();

        if (playListMetrics) {
            getActiveStreamProcessors().forEach(function (p) {
                var ctrlr = p.getScheduleController();
                if (ctrlr) {
                    ctrlr.finalisePlayList(time, reason);
                }
            });
            metricsModel.addPlayList(playListMetrics);
            playListMetrics = null;
        }
    }

    function addPlaylistMetrics(startReason) {
        playListMetrics = new _PlayList.PlayList();
        playListMetrics.start = new Date();
        playListMetrics.mstart = playbackController.getTime() * 1000;
        playListMetrics.starttype = startReason;

        getActiveStreamProcessors().forEach(function (p) {
            var ctrlr = p.getScheduleController();
            if (ctrlr) {
                ctrlr.setPlayList(playListMetrics);
            }
        });
    }

    function onPlaybackError(e) {
        if (!e.error) return;

        var msg = '';

        switch (e.error.code) {
            case 1:
                msg = 'MEDIA_ERR_ABORTED';
                break;
            case 2:
                msg = 'MEDIA_ERR_NETWORK';
                break;
            case 3:
                msg = 'MEDIA_ERR_DECODE';
                break;
            case 4:
                msg = 'MEDIA_ERR_SRC_NOT_SUPPORTED';
                break;
            case 5:
                msg = 'MEDIA_ERR_ENCRYPTED';
                break;
            default:
                msg = 'UNKNOWN';
                break;
        }

        hasMediaError = true;

        if (e.error.message) {
            msg += ' (' + e.error.message + ')';
        }

        if (e.error.msExtendedCode) {
            msg += ' (0x' + (e.error.msExtendedCode >>> 0).toString(16).toUpperCase() + ')';
        }

        logger.fatal('Video Element Error: ' + msg);
        if (e.error) {
            logger.fatal(e.error);
        }
        errHandler.mediaSourceError(msg);
        errHandler.error(new _DashJSError2.default(e.error.code, msg));
        reset();
    }

    function getActiveStreamInfo() {
        return activeStream ? activeStream.getStreamInfo() : null;
    }

    function getStreamById(id) {
        return streams.filter(function (item) {
            return item.getId() === id;
        })[0];
    }

    function checkSetConfigCall() {
        if (!manifestLoader || !manifestLoader.hasOwnProperty('load') || !timelineConverter || !timelineConverter.hasOwnProperty('initialize') || !timelineConverter.hasOwnProperty('reset') || !timelineConverter.hasOwnProperty('getClientTimeOffset') || !manifestModel || !errHandler || !metricsModel || !playbackController) {
            throw new Error('setConfig function has to be called previously');
        }
    }

    function checkInitializeCall() {
        if (!manifestUpdater || !manifestUpdater.hasOwnProperty('setManifest')) {
            throw new Error('initialize function has to be called previously');
        }
    }

    function load(url) {
        checkSetConfigCall();
        manifestLoader.load(url);
    }

    function loadWithManifest(manifest) {
        checkInitializeCall();
        manifestUpdater.setManifest(manifest);
    }

    function onManifestValidityChanged(e) {
        if (!isNaN(e.newDuration)) {
            setMediaDuration(e.newDuration);
        }
    }

    function setConfig(config) {
        if (!config) return;

        if (config.capabilities) {
            capabilities = config.capabilities;
        }
        if (config.manifestLoader) {
            manifestLoader = config.manifestLoader;
        }
        if (config.manifestModel) {
            manifestModel = config.manifestModel;
        }
        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
        if (config.mediaPlayerModel) {
            mediaPlayerModel = config.mediaPlayerModel;
        }
        if (config.protectionController) {
            protectionController = config.protectionController;
        }
        if (config.adapter) {
            adapter = config.adapter;
        }
        if (config.metricsModel) {
            metricsModel = config.metricsModel;
        }
        if (config.dashMetrics) {
            dashMetrics = config.dashMetrics;
        }
        if (config.errHandler) {
            errHandler = config.errHandler;
        }
        if (config.timelineConverter) {
            timelineConverter = config.timelineConverter;
        }
        if (config.videoModel) {
            videoModel = config.videoModel;
        }
        if (config.playbackController) {
            playbackController = config.playbackController;
        }
        if (config.domStorage) {
            domStorage = config.domStorage;
        }
        if (config.abrController) {
            abrController = config.abrController;
        }
        if (config.mediaController) {
            mediaController = config.mediaController;
        }
        if (config.textController) {
            textController = config.textController;
        }
    }

    function setProtectionData(protData) {
        protectionData = protData;
    }

    function resetInitialSettings() {
        streams = [];
        protectionController = null;
        isStreamSwitchingInProgress = false;
        activeStream = null;
        hasMediaError = false;
        hasInitialisationError = false;
        videoTrackDetected = undefined;
        audioTrackDetected = undefined;
        initialPlayback = true;
        isPaused = false;
        autoPlay = true;
        playListMetrics = null;
        playbackEndedTimerId = undefined;
        alreadyTimeSynced = false;
        isPeriodSwitchInProgress = false;
        wallclockTicked = 0;
    }

    function reset() {
        checkSetConfigCall();

        timeSyncController.reset();

        flushPlaylistMetrics(hasMediaError || hasInitialisationError ? _PlayList.PlayListTrace.FAILURE_STOP_REASON : _PlayList.PlayListTrace.USER_REQUEST_STOP_REASON);

        for (var i = 0, ln = streams ? streams.length : 0; i < ln; i++) {
            var stream = streams[i];
            stream.reset(hasMediaError);
        }

        unRegisterEvents();

        baseURLController.reset();
        manifestUpdater.reset();
        metricsModel.clearAllCurrentMetrics();
        manifestModel.setValue(null);
        manifestLoader.reset();
        timelineConverter.reset();
        initCache.reset();

        if (mediaSource) {
            mediaSourceController.detachMediaSource(videoModel);
            mediaSource = null;
        }
        videoModel = null;
        if (protectionController) {
            protectionController.setMediaElement(null);
            protectionController = null;
            protectionData = null;
            if (manifestModel.getValue()) {
                eventBus.trigger(_Events2.default.PROTECTION_DESTROYED, {
                    data: manifestModel.getValue().url
                });
            }
        }

        eventBus.trigger(_Events2.default.STREAM_TEARDOWN_COMPLETE);
        resetInitialSettings();
    }

    function onMetricAdded(e) {
        if (e.metric === _MetricsConstants2.default.DVR_INFO) {
            //Match media type? How can DVR window be different for media types?
            //Should we normalize and union the two?
            if (e.mediaType === _Constants2.default.AUDIO) {
                mediaSourceController.setSeekable(mediaSource, e.value.range.start, e.value.range.end);
            }
        }
    }

    function refreshManifest() {
        manifestUpdater.refreshManifest();
    }

    instance = {
        initialize: initialize,
        getActiveStreamInfo: getActiveStreamInfo,
        setMediaDuration: setMediaDuration,
        isTrackTypePresent: isTrackTypePresent,
        switchToVideoElement: switchToVideoElement,
        detachVideoElement: detachVideoElement,
        getStreamById: getStreamById,
        getStreamForTime: getStreamForTime,
        getTimeRelativeToStreamId: getTimeRelativeToStreamId,
        load: load,
        loadWithManifest: loadWithManifest,
        getActiveStreamProcessors: getActiveStreamProcessors,
        setConfig: setConfig,
        refreshManifest: refreshManifest,
        setProtectionData: setProtectionData,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


StreamController.__dashjs_factory_name = 'StreamController';
exports.default = _FactoryMaker2.default.getSingletonFactory(StreamController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/TimeSyncController.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/TimeSyncController.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _DashJSError = __webpack_require__(/*! ./../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _HTTPRequest = __webpack_require__(/*! ./../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _EventBus = __webpack_require__(/*! ./../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ./../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _Errors = __webpack_require__(/*! ./../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _URLUtils = __webpack_require__(/*! ../utils/URLUtils */ "./node_modules/dashjs/src/streaming/utils/URLUtils.js");

var _URLUtils2 = _interopRequireDefault(_URLUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HTTP_TIMEOUT_MS = 5000; /**
                             * The copyright in this software is being made available under the BSD License,
                             * included below. This software may be subject to other third party and contributor
                             * rights, including patent rights, and no such rights are granted under this license.
                             *
                             * Copyright (c) 2013, Dash Industry Forum.
                             * All rights reserved.
                             *
                             * Redistribution and use in source and binary forms, with or without modification,
                             * are permitted provided that the following conditions are met:
                             *  * Redistributions of source code must retain the above copyright notice, this
                             *  list of conditions and the following disclaimer.
                             *  * Redistributions in binary form must reproduce the above copyright notice,
                             *  this list of conditions and the following disclaimer in the documentation and/or
                             *  other materials provided with the distribution.
                             *  * Neither the name of Dash Industry Forum nor the names of its
                             *  contributors may be used to endorse or promote products derived from this software
                             *  without specific prior written permission.
                             *
                             *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                             *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                             *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                             *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                             *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                             *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                             *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                             *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                             *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                             *  POSSIBILITY OF SUCH DAMAGE.
                             */


function TimeSyncController() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var urlUtils = (0, _URLUtils2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        offsetToDeviceTimeMs = void 0,
        isSynchronizing = void 0,
        useManifestDateHeaderTimeSource = void 0,
        handlers = void 0,
        metricsModel = void 0,
        dashMetrics = void 0,
        baseURLController = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function initialize(timingSources, useManifestDateHeader) {
        useManifestDateHeaderTimeSource = useManifestDateHeader;
        offsetToDeviceTimeMs = 0;
        isSynchronizing = false;

        // a list of known schemeIdUris and a method to call with @value
        handlers = {
            'urn:mpeg:dash:utc:http-head:2014': httpHeadHandler,
            'urn:mpeg:dash:utc:http-xsdate:2014': httpHandler.bind(null, xsdatetimeDecoder),
            'urn:mpeg:dash:utc:http-iso:2014': httpHandler.bind(null, iso8601Decoder),
            'urn:mpeg:dash:utc:direct:2014': directHandler,

            // some specs referencing early ISO23009-1 drafts incorrectly use
            // 2012 in the URI, rather than 2014. support these for now.
            'urn:mpeg:dash:utc:http-head:2012': httpHeadHandler,
            'urn:mpeg:dash:utc:http-xsdate:2012': httpHandler.bind(null, xsdatetimeDecoder),
            'urn:mpeg:dash:utc:http-iso:2012': httpHandler.bind(null, iso8601Decoder),
            'urn:mpeg:dash:utc:direct:2012': directHandler,

            // it isn't clear how the data returned would be formatted, and
            // no public examples available so http-ntp not supported for now.
            // presumably you would do an arraybuffer type xhr and decode the
            // binary data returned but I would want to see a sample first.
            'urn:mpeg:dash:utc:http-ntp:2014': notSupportedHandler,

            // not clear how this would be supported in javascript (in browser)
            'urn:mpeg:dash:utc:ntp:2014': notSupportedHandler,
            'urn:mpeg:dash:utc:sntp:2014': notSupportedHandler
        };

        if (!getIsSynchronizing()) {
            attemptSync(timingSources);
        }
    }

    function setConfig(config) {
        if (!config) return;

        if (config.metricsModel) {
            metricsModel = config.metricsModel;
        }

        if (config.dashMetrics) {
            dashMetrics = config.dashMetrics;
        }

        if (config.baseURLController) {
            baseURLController = config.baseURLController;
        }
    }

    function getOffsetToDeviceTimeMs() {
        return getOffsetMs();
    }

    function setIsSynchronizing(value) {
        isSynchronizing = value;
    }

    function getIsSynchronizing() {
        return isSynchronizing;
    }

    function setOffsetMs(value) {
        offsetToDeviceTimeMs = value;
    }

    function getOffsetMs() {
        return offsetToDeviceTimeMs;
    }

    // takes xsdatetime and returns milliseconds since UNIX epoch
    // may not be necessary as xsdatetime is very similar to ISO 8601
    // which is natively understood by javascript Date parser
    function alternateXsdatetimeDecoder(xsdatetimeStr) {
        // taken from DashParser - should probably refactor both uses
        var SECONDS_IN_MIN = 60;
        var MINUTES_IN_HOUR = 60;
        var MILLISECONDS_IN_SECONDS = 1000;
        var datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+\-])([0-9]{2})([0-9]{2}))?/;

        var utcDate = void 0,
            timezoneOffset = void 0;

        var match = datetimeRegex.exec(xsdatetimeStr);

        // If the string does not contain a timezone offset different browsers can interpret it either
        // as UTC or as a local time so we have to parse the string manually to normalize the given date value for
        // all browsers
        utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, // months start from zero
        parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && (parseInt(match[6], 10) || 0), match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0);
        // If the date has timezone offset take it into account as well
        if (match[9] && match[10]) {
            timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);
            utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;
        }

        return new Date(utcDate).getTime();
    }

    // try to use the built in parser, since xsdate is a constrained ISO8601
    // which is supported natively by Date.parse. if that fails, try a
    // regex-based version used elsewhere in this application.
    function xsdatetimeDecoder(xsdatetimeStr) {
        var parsedDate = Date.parse(xsdatetimeStr);

        if (isNaN(parsedDate)) {
            parsedDate = alternateXsdatetimeDecoder(xsdatetimeStr);
        }

        return parsedDate;
    }

    // takes ISO 8601 timestamp and returns milliseconds since UNIX epoch
    function iso8601Decoder(isoStr) {
        return Date.parse(isoStr);
    }

    // takes RFC 1123 timestamp (which is same as ISO8601) and returns
    // milliseconds since UNIX epoch
    function rfc1123Decoder(dateStr) {
        return Date.parse(dateStr);
    }

    function notSupportedHandler(url, onSuccessCB, onFailureCB) {
        onFailureCB();
    }

    function directHandler(xsdatetimeStr, onSuccessCB, onFailureCB) {
        var time = xsdatetimeDecoder(xsdatetimeStr);

        if (!isNaN(time)) {
            onSuccessCB(time);
            return;
        }

        onFailureCB();
    }

    function httpHandler(decoder, url, onSuccessCB, onFailureCB, isHeadRequest) {
        var oncomplete = void 0,
            onload = void 0;
        var complete = false;
        var req = new XMLHttpRequest();

        var verb = isHeadRequest ? _HTTPRequest.HTTPRequest.HEAD : _HTTPRequest.HTTPRequest.GET;
        var urls = url.match(/\S+/g);

        // according to ISO 23009-1, url could be a white-space
        // separated list of URLs. just handle one at a time.
        url = urls.shift();

        oncomplete = function oncomplete() {
            if (complete) {
                return;
            }

            // we only want to pass through here once per xhr,
            // regardless of whether the load was successful.
            complete = true;

            // if there are more urls to try, call self.
            if (urls.length) {
                httpHandler(decoder, urls.join(' '), onSuccessCB, onFailureCB, isHeadRequest);
            } else {
                onFailureCB();
            }
        };

        onload = function onload() {
            var time = void 0,
                result = void 0;

            if (req.status === 200) {
                time = isHeadRequest ? req.getResponseHeader('Date') : req.response;

                result = decoder(time);

                // decoder returns NaN if non-standard input
                if (!isNaN(result)) {
                    onSuccessCB(result);
                    complete = true;
                }
            }
        };

        if (urlUtils.isRelative(url)) {
            // passing no path to resolve will return just MPD BaseURL/baseUri
            var baseUrl = baseURLController.resolve();
            if (baseUrl) {
                url = urlUtils.resolve(url, baseUrl.url);
            }
        }

        req.open(verb, url);
        req.timeout = HTTP_TIMEOUT_MS || 0;
        req.onload = onload;
        req.onloadend = oncomplete;
        req.send();
    }

    function httpHeadHandler(url, onSuccessCB, onFailureCB) {
        httpHandler(rfc1123Decoder, url, onSuccessCB, onFailureCB, true);
    }

    function checkForDateHeader() {
        var metrics = metricsModel.getReadOnlyMetricsFor(_Constants2.default.STREAM);
        var dateHeaderValue = dashMetrics.getLatestMPDRequestHeaderValueByID(metrics, 'Date');
        var dateHeaderTime = dateHeaderValue !== null ? new Date(dateHeaderValue).getTime() : Number.NaN;

        if (!isNaN(dateHeaderTime)) {
            setOffsetMs(dateHeaderTime - new Date().getTime());
            completeTimeSyncSequence(false, dateHeaderTime / 1000, offsetToDeviceTimeMs);
        } else {
            completeTimeSyncSequence(true);
        }
    }

    function completeTimeSyncSequence(failed, time, offset) {
        setIsSynchronizing(false);
        eventBus.trigger(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, { time: time, offset: offset, error: failed ? new _DashJSError2.default(_Errors2.default.TIME_SYNC_FAILED_ERROR_CODE, _Errors2.default.TIME_SYNC_FAILED_ERROR_MESSAGE) : null });
    }

    function calculateTimeOffset(serverTime, deviceTime) {
        return serverTime - deviceTime;
    }

    function attemptSync(sources, sourceIndex) {

        // if called with no sourceIndex, use zero (highest priority)
        var index = sourceIndex || 0;

        // the sources should be ordered in priority from the manifest.
        // try each in turn, from the top, until either something
        // sensible happens, or we run out of sources to try.
        var source = sources[index];

        // callback to emit event to listeners
        var onComplete = function onComplete(time, offset) {
            var failed = !time || !offset;
            if (failed && useManifestDateHeaderTimeSource) {
                //Before falling back to binary search , check if date header exists on MPD. if so, use for a time source.
                checkForDateHeader();
            } else {
                completeTimeSyncSequence(failed, time, offset);
            }
        };

        setIsSynchronizing(true);

        if (source) {
            // check if there is a handler for this @schemeIdUri
            if (handlers.hasOwnProperty(source.schemeIdUri)) {
                // if so, call it with its @value
                handlers[source.schemeIdUri](source.value, function (serverTime) {
                    // the timing source returned something useful
                    var deviceTime = new Date().getTime();
                    var offset = calculateTimeOffset(serverTime, deviceTime);

                    setOffsetMs(offset);

                    logger.info('Local time: ' + new Date(deviceTime));
                    logger.info('Server time: ' + new Date(serverTime));
                    logger.info('Server Time - Local Time (ms): ' + offset);

                    onComplete(serverTime, offset);
                }, function () {
                    // the timing source was probably uncontactable
                    // or returned something we can't use - try again
                    // with the remaining sources
                    attemptSync(sources, index + 1);
                });
            } else {
                // an unknown schemeIdUri must have been found
                // try again with the remaining sources
                attemptSync(sources, index + 1);
            }
        } else {
            // no valid time source could be found, just use device time
            setOffsetMs(0);
            onComplete();
        }
    }

    function reset() {
        setIsSynchronizing(false);
    }

    instance = {
        initialize: initialize,
        getOffsetToDeviceTimeMs: getOffsetToDeviceTimeMs,
        setConfig: setConfig,
        reset: reset
    };

    setup();

    return instance;
}

TimeSyncController.__dashjs_factory_name = 'TimeSyncController';
var factory = _FactoryMaker2.default.getSingletonFactory(TimeSyncController);
factory.HTTP_TIMEOUT_MS = HTTP_TIMEOUT_MS;
_FactoryMaker2.default.updateSingletonFactory(TimeSyncController.__dashjs_factory_name, factory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/controllers/XlinkController.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/controllers/XlinkController.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _XlinkLoader = __webpack_require__(/*! ../XlinkLoader */ "./node_modules/dashjs/src/streaming/XlinkLoader.js");

var _XlinkLoader2 = _interopRequireDefault(_XlinkLoader);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _xml2json = __webpack_require__(/*! ../../../externals/xml2json */ "./node_modules/dashjs/externals/xml2json.js");

var _xml2json2 = _interopRequireDefault(_xml2json);

var _URLUtils = __webpack_require__(/*! ../utils/URLUtils */ "./node_modules/dashjs/src/streaming/utils/URLUtils.js");

var _URLUtils2 = _interopRequireDefault(_URLUtils);

var _DashConstants = __webpack_require__(/*! ../../dash/constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RESOLVE_TYPE_ONLOAD = 'onLoad'; /**
                                     * The copyright in this software is being made available under the BSD License,
                                     * included below. This software may be subject to other third party and contributor
                                     * rights, including patent rights, and no such rights are granted under this license.
                                     *
                                     * Copyright (c) 2013, Dash Industry Forum.
                                     * All rights reserved.
                                     *
                                     * Redistribution and use in source and binary forms, with or without modification,
                                     * are permitted provided that the following conditions are met:
                                     *  * Redistributions of source code must retain the above copyright notice, this
                                     *  list of conditions and the following disclaimer.
                                     *  * Redistributions in binary form must reproduce the above copyright notice,
                                     *  this list of conditions and the following disclaimer in the documentation and/or
                                     *  other materials provided with the distribution.
                                     *  * Neither the name of Dash Industry Forum nor the names of its
                                     *  contributors may be used to endorse or promote products derived from this software
                                     *  without specific prior written permission.
                                     *
                                     *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                     *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                     *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                     *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                     *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                     *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                     *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                     *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                     *  POSSIBILITY OF SUCH DAMAGE.
                                     */

var RESOLVE_TYPE_ONACTUATE = 'onActuate';
var RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';

function XlinkController(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var urlUtils = (0, _URLUtils2.default)(context).getInstance();

    var instance = void 0,
        matchers = void 0,
        iron = void 0,
        manifest = void 0,
        converter = void 0,
        xlinkLoader = void 0;

    function setup() {
        eventBus.on(_Events2.default.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);

        xlinkLoader = (0, _XlinkLoader2.default)(context).create({
            errHandler: config.errHandler,
            metricsModel: config.metricsModel,
            mediaPlayerModel: config.mediaPlayerModel,
            requestModifier: config.requestModifier
        });
    }

    function setMatchers(value) {
        if (value) {
            matchers = value;
        }
    }

    function setIron(value) {
        if (value) {
            iron = value;
        }
    }

    /**
     * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>
     * @param {Object} mpd - the manifest
     */
    function resolveManifestOnLoad(mpd) {
        var elements = void 0;
        // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided
        converter = new _xml2json2.default({
            escapeMode: false,
            attributePrefix: '',
            arrayAccessForm: 'property',
            emptyNodeForm: 'object',
            stripWhitespaces: false,
            enableToStringFunc: false,
            ignoreRoot: true,
            matchers: matchers
        });

        manifest = mpd;
        elements = getElementsToResolve(manifest.Period_asArray, manifest, _DashConstants2.default.PERIOD, RESOLVE_TYPE_ONLOAD);
        resolve(elements, _DashConstants2.default.PERIOD, RESOLVE_TYPE_ONLOAD);
    }

    function reset() {
        eventBus.off(_Events2.default.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);

        if (xlinkLoader) {
            xlinkLoader.reset();
            xlinkLoader = null;
        }
    }

    function resolve(elements, type, resolveType) {
        var resolveObject = {};
        var element = void 0,
            url = void 0;

        resolveObject.elements = elements;
        resolveObject.type = type;
        resolveObject.resolveType = resolveType;
        // If nothing to resolve, directly call allElementsLoaded
        if (resolveObject.elements.length === 0) {
            onXlinkAllElementsLoaded(resolveObject);
        }
        for (var i = 0; i < resolveObject.elements.length; i++) {
            element = resolveObject.elements[i];
            if (urlUtils.isHTTPURL(element.url)) {
                url = element.url;
            } else {
                url = element.originalContent.BaseURL + element.url;
            }
            xlinkLoader.load(url, element, resolveObject);
        }
    }

    function onXlinkElementLoaded(event) {
        var element = void 0,
            resolveObject = void 0;

        var openingTag = '<response>';
        var closingTag = '</response>';
        var mergedContent = '';

        element = event.element;
        resolveObject = event.resolveObject;
        // if the element resolved into content parse the content
        if (element.resolvedContent) {
            var index = 0;
            // we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container
            if (element.resolvedContent.indexOf('<?xml') === 0) {
                index = element.resolvedContent.indexOf('?>') + 2; //find the closing position of the xml declaration, if it exists.
            }
            mergedContent = element.resolvedContent.substr(0, index) + openingTag + element.resolvedContent.substr(index) + closingTag;
            element.resolvedContent = converter.xml_str2json(mergedContent);
        }
        if (isResolvingFinished(resolveObject)) {
            onXlinkAllElementsLoaded(resolveObject);
        }
    }

    // We got to wait till all elements of the current queue are resolved before merging back
    function onXlinkAllElementsLoaded(resolveObject) {
        var elements = [];
        var i = void 0,
            obj = void 0;

        mergeElementsBack(resolveObject);
        if (resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE) {
            eventBus.trigger(_Events2.default.XLINK_READY, { manifest: manifest });
        }
        if (resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) {
            switch (resolveObject.type) {
                // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel
                case _DashConstants2.default.PERIOD:
                    for (i = 0; i < manifest[_DashConstants2.default.PERIOD + '_asArray'].length; i++) {
                        obj = manifest[_DashConstants2.default.PERIOD + '_asArray'][i];
                        if (obj.hasOwnProperty(_DashConstants2.default.ADAPTATION_SET + '_asArray')) {
                            elements = elements.concat(getElementsToResolve(obj[_DashConstants2.default.ADAPTATION_SET + '_asArray'], obj, _DashConstants2.default.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD));
                        }
                        if (obj.hasOwnProperty(_DashConstants2.default.EVENT_STREAM + '_asArray')) {
                            elements = elements.concat(getElementsToResolve(obj[_DashConstants2.default.EVENT_STREAM + '_asArray'], obj, _DashConstants2.default.EVENT_STREAM, RESOLVE_TYPE_ONLOAD));
                        }
                    }
                    resolve(elements, _DashConstants2.default.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD);
                    break;
                case _DashConstants2.default.ADAPTATION_SET:
                    // TODO: Resolve SegmentList here
                    eventBus.trigger(_Events2.default.XLINK_READY, { manifest: manifest });
                    break;
            }
        }
    }

    // Returns the elements with the specific resolve Type
    function getElementsToResolve(elements, parentElement, type, resolveType) {
        var toResolve = [];
        var element = void 0,
            i = void 0,
            xlinkObject = void 0;
        // first remove all the resolve-to-zero elements
        for (i = elements.length - 1; i >= 0; i--) {
            element = elements[i];
            if (element.hasOwnProperty('xlink:href') && element['xlink:href'] === RESOLVE_TO_ZERO) {
                elements.splice(i, 1);
            }
        }
        // now get the elements with the right resolve type
        for (i = 0; i < elements.length; i++) {
            element = elements[i];
            if (element.hasOwnProperty('xlink:href') && element.hasOwnProperty('xlink:actuate') && element['xlink:actuate'] === resolveType) {
                xlinkObject = createXlinkObject(element['xlink:href'], parentElement, type, i, resolveType, element);
                toResolve.push(xlinkObject);
            }
        }
        return toResolve;
    }

    function mergeElementsBack(resolveObject) {
        var resolvedElements = [];
        var element = void 0,
            type = void 0,
            obj = void 0,
            i = void 0,
            j = void 0,
            k = void 0;
        // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending
        for (i = resolveObject.elements.length - 1; i >= 0; i--) {
            element = resolveObject.elements[i];
            type = element.type + '_asArray';

            // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes
            if (!element.resolvedContent || isInappropriateTarget()) {
                delete element.originalContent['xlink:actuate'];
                delete element.originalContent['xlink:href'];
                resolvedElements.push(element.originalContent);
            }
            // Element was successfully resolved
            else if (element.resolvedContent) {
                    for (j = 0; j < element.resolvedContent[type].length; j++) {
                        //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes
                        obj = element.resolvedContent[type][j];
                        resolvedElements.push(obj);
                    }
                }
            // Replace the old elements in the parent with the resolved ones
            element.parentElement[type].splice(element.index, 1);
            for (k = 0; k < resolvedElements.length; k++) {
                element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);
            }
            resolvedElements = [];
        }
        if (resolveObject.elements.length > 0) {
            iron.run(manifest);
        }
    }

    function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {
        return {
            url: url,
            parentElement: parentElement,
            type: type,
            index: index,
            resolveType: resolveType,
            originalContent: originalContent,
            resolvedContent: null,
            resolved: false
        };
    }

    // Check if all pending requests are finished
    function isResolvingFinished(elementsToResolve) {
        var i = void 0,
            obj = void 0;
        for (i = 0; i < elementsToResolve.elements.length; i++) {
            obj = elementsToResolve.elements[i];
            if (obj.resolved === false) {
                return false;
            }
        }
        return true;
    }

    // TODO : Do some syntax check here if the target is valid or not
    function isInappropriateTarget() {
        return false;
    }

    instance = {
        resolveManifestOnLoad: resolveManifestOnLoad,
        setMatchers: setMatchers,
        setIron: setIron,
        reset: reset
    };

    setup();
    return instance;
}

XlinkController.__dashjs_factory_name = 'XlinkController';
exports.default = _FactoryMaker2.default.getClassFactory(XlinkController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/MetricsReporting.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/MetricsReporting.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _DVBErrorsTranslator = __webpack_require__(/*! ./utils/DVBErrorsTranslator */ "./node_modules/dashjs/src/streaming/metrics/utils/DVBErrorsTranslator.js");

var _DVBErrorsTranslator2 = _interopRequireDefault(_DVBErrorsTranslator);

var _MetricsReportingEvents = __webpack_require__(/*! ./MetricsReportingEvents */ "./node_modules/dashjs/src/streaming/metrics/MetricsReportingEvents.js");

var _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);

var _MetricsCollectionController = __webpack_require__(/*! ./controllers/MetricsCollectionController */ "./node_modules/dashjs/src/streaming/metrics/controllers/MetricsCollectionController.js");

var _MetricsCollectionController2 = _interopRequireDefault(_MetricsCollectionController);

var _MetricsHandlerFactory = __webpack_require__(/*! ./metrics/MetricsHandlerFactory */ "./node_modules/dashjs/src/streaming/metrics/metrics/MetricsHandlerFactory.js");

var _MetricsHandlerFactory2 = _interopRequireDefault(_MetricsHandlerFactory);

var _ReportingFactory = __webpack_require__(/*! ./reporting/ReportingFactory */ "./node_modules/dashjs/src/streaming/metrics/reporting/ReportingFactory.js");

var _ReportingFactory2 = _interopRequireDefault(_ReportingFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function MetricsReporting() {

    var context = this.context;
    var instance = void 0,
        dvbErrorsTranslator = void 0;

    /**
     * Create a MetricsCollectionController, and a DVBErrorsTranslator
     * @param {Object} config - dependancies from owner
     * @return {MetricsCollectionController} Metrics Collection Controller
     */
    function createMetricsReporting(config) {
        dvbErrorsTranslator = (0, _DVBErrorsTranslator2.default)(context).getInstance({
            eventBus: config.eventBus,
            metricsModel: config.metricsModel,
            metricsConstants: config.metricsConstants,
            events: config.events
        });

        return (0, _MetricsCollectionController2.default)(context).create(config);
    }

    /**
     * Get the ReportingFactory to allow new reporters to be registered
     * @return {ReportingFactory} Reporting Factory
     */
    function getReportingFactory() {
        return (0, _ReportingFactory2.default)(context).getInstance();
    }

    /**
     * Get the MetricsHandlerFactory to allow new handlers to be registered
     * @return {MetricsHandlerFactory} Metrics Handler Factory
     */
    function getMetricsHandlerFactory() {
        return (0, _MetricsHandlerFactory2.default)(context).getInstance();
    }

    instance = {
        createMetricsReporting: createMetricsReporting,
        getReportingFactory: getReportingFactory,
        getMetricsHandlerFactory: getMetricsHandlerFactory
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

MetricsReporting.__dashjs_factory_name = 'MetricsReporting';
var factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */
factory.events = _MetricsReportingEvents2.default;
dashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/MetricsReportingEvents.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/MetricsReportingEvents.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _EventsBase2 = __webpack_require__(/*! ../../core/events/EventsBase */ "./node_modules/dashjs/src/core/events/EventsBase.js");

var _EventsBase3 = _interopRequireDefault(_EventsBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var MetricsReportingEvents = function (_EventsBase) {
    _inherits(MetricsReportingEvents, _EventsBase);

    function MetricsReportingEvents() {
        _classCallCheck(this, MetricsReportingEvents);

        var _this = _possibleConstructorReturn(this, (MetricsReportingEvents.__proto__ || Object.getPrototypeOf(MetricsReportingEvents)).call(this));

        _this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';
        _this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';
        return _this;
    }

    return MetricsReportingEvents;
}(_EventsBase3.default);

var metricsReportingEvents = new MetricsReportingEvents();
exports.default = metricsReportingEvents;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/controllers/MetricsCollectionController.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/controllers/MetricsCollectionController.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MetricsController = __webpack_require__(/*! ./MetricsController */ "./node_modules/dashjs/src/streaming/metrics/controllers/MetricsController.js");

var _MetricsController2 = _interopRequireDefault(_MetricsController);

var _ManifestParsing = __webpack_require__(/*! ../utils/ManifestParsing */ "./node_modules/dashjs/src/streaming/metrics/utils/ManifestParsing.js");

var _ManifestParsing2 = _interopRequireDefault(_ManifestParsing);

var _MetricsReportingEvents = __webpack_require__(/*! ../MetricsReportingEvents */ "./node_modules/dashjs/src/streaming/metrics/MetricsReportingEvents.js");

var _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function MetricsCollectionController(config) {

    config = config || {};
    var metricsControllers = {};

    var context = this.context;
    var eventBus = config.eventBus;
    var events = config.events;

    function update(e) {
        if (e.error) {
            return;
        }

        // start by assuming all existing controllers need removing
        var controllersToRemove = Object.keys(metricsControllers);

        var metrics = (0, _ManifestParsing2.default)(context).getInstance({
            dashManifestModel: config.dashManifestModel,
            constants: config.constants
        }).getMetrics(e.manifest);

        metrics.forEach(function (m) {
            var key = JSON.stringify(m);

            if (!metricsControllers.hasOwnProperty(key)) {
                try {
                    var controller = (0, _MetricsController2.default)(context).create(config);
                    controller.initialize(m);
                    metricsControllers[key] = controller;
                } catch (e) {
                    // fail quietly
                }
            } else {
                // we still need this controller - delete from removal list
                controllersToRemove.splice(key, 1);
            }
        });

        // now remove the unwanted controllers
        controllersToRemove.forEach(function (c) {
            metricsControllers[c].reset();
            delete metricsControllers[c];
        });

        eventBus.trigger(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE);
    }

    function resetMetricsControllers() {
        Object.keys(metricsControllers).forEach(function (key) {
            metricsControllers[key].reset();
        });

        metricsControllers = {};
    }

    function setup() {
        eventBus.on(events.MANIFEST_UPDATED, update);
        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);
    }

    function reset() {
        eventBus.off(events.MANIFEST_UPDATED, update);
        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);
    }

    setup();

    return {
        reset: reset
    };
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

MetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';
exports.default = dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/controllers/MetricsController.js":
/*!************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/controllers/MetricsController.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _RangeController = __webpack_require__(/*! ./RangeController */ "./node_modules/dashjs/src/streaming/metrics/controllers/RangeController.js");

var _RangeController2 = _interopRequireDefault(_RangeController);

var _ReportingController = __webpack_require__(/*! ./ReportingController */ "./node_modules/dashjs/src/streaming/metrics/controllers/ReportingController.js");

var _ReportingController2 = _interopRequireDefault(_ReportingController);

var _MetricsHandlersController = __webpack_require__(/*! ./MetricsHandlersController */ "./node_modules/dashjs/src/streaming/metrics/controllers/MetricsHandlersController.js");

var _MetricsHandlersController2 = _interopRequireDefault(_MetricsHandlersController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function MetricsController(config) {

    config = config || {};
    var metricsHandlersController = void 0,
        reportingController = void 0,
        rangeController = void 0,
        instance = void 0;

    var context = this.context;

    function initialize(metricsEntry) {
        try {
            rangeController = (0, _RangeController2.default)(context).create({
                mediaElement: config.mediaElement
            });

            rangeController.initialize(metricsEntry.Range);

            reportingController = (0, _ReportingController2.default)(context).create({
                debug: config.debug,
                metricsConstants: config.metricsConstants
            });

            reportingController.initialize(metricsEntry.Reporting, rangeController);

            metricsHandlersController = (0, _MetricsHandlersController2.default)(context).create({
                debug: config.debug,
                eventBus: config.eventBus,
                metricsConstants: config.metricsConstants,
                events: config.events
            });

            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);
        } catch (e) {
            reset();
            throw e;
        }
    }

    function reset() {
        if (metricsHandlersController) {
            metricsHandlersController.reset();
        }

        if (reportingController) {
            reportingController.reset();
        }

        if (rangeController) {
            rangeController.reset();
        }
    }

    instance = {
        initialize: initialize,
        reset: reset
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

MetricsController.__dashjs_factory_name = 'MetricsController';
exports.default = dashjs.FactoryMaker.getClassFactory(MetricsController); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/controllers/MetricsHandlersController.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/controllers/MetricsHandlersController.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MetricsHandlerFactory = __webpack_require__(/*! ../metrics/MetricsHandlerFactory */ "./node_modules/dashjs/src/streaming/metrics/metrics/MetricsHandlerFactory.js");

var _MetricsHandlerFactory2 = _interopRequireDefault(_MetricsHandlerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function MetricsHandlersController(config) {

    config = config || {};
    var handlers = [];

    var instance = void 0;
    var context = this.context;
    var eventBus = config.eventBus;
    var Events = config.events;

    var metricsHandlerFactory = (0, _MetricsHandlerFactory2.default)(context).getInstance({
        debug: config.debug,
        eventBus: config.eventBus,
        metricsConstants: config.metricsConstants
    });

    function handle(e) {
        handlers.forEach(function (handler) {
            handler.handleNewMetric(e.metric, e.value, e.mediaType);
        });
    }

    function initialize(metrics, reportingController) {
        metrics.split(',').forEach(function (m, midx, ms) {
            var handler = void 0;

            // there is a bug in ISO23009-1 where the metrics attribute
            // is a comma-separated list but HttpList key can contain a
            // comma enclosed by ().
            if (m.indexOf('(') !== -1 && m.indexOf(')') === -1) {
                var nextm = ms[midx + 1];

                if (nextm && nextm.indexOf('(') === -1 && nextm.indexOf(')') !== -1) {
                    m += ',' + nextm;

                    // delete the next metric so forEach does not visit.
                    delete ms[midx + 1];
                }
            }

            handler = metricsHandlerFactory.create(m, reportingController);

            if (handler) {
                handlers.push(handler);
            }
        });

        eventBus.on(Events.METRIC_ADDED, handle, instance);

        eventBus.on(Events.METRIC_UPDATED, handle, instance);
    }

    function reset() {
        eventBus.off(Events.METRIC_ADDED, handle, instance);

        eventBus.off(Events.METRIC_UPDATED, handle, instance);

        handlers.forEach(function (handler) {
            return handler.reset();
        });

        handlers = [];
    }

    instance = {
        initialize: initialize,
        reset: reset
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

MetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';
exports.default = dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/controllers/RangeController.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/controllers/RangeController.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _CustomTimeRanges = __webpack_require__(/*! ../../utils/CustomTimeRanges */ "./node_modules/dashjs/src/streaming/utils/CustomTimeRanges.js");

var _CustomTimeRanges2 = _interopRequireDefault(_CustomTimeRanges);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function RangeController(config) {

    config = config || {};
    var useWallClockTime = false;
    var context = this.context;
    var instance = void 0,
        ranges = void 0;

    var mediaElement = config.mediaElement;

    function initialize(rs) {
        if (rs && rs.length) {
            rs.forEach(function (r) {
                var start = r.starttime;
                var end = start + r.duration;

                ranges.add(start, end);
            });

            useWallClockTime = !!rs[0]._useWallClockTime;
        }
    }

    function reset() {
        ranges.clear();
    }

    function setup() {
        ranges = (0, _CustomTimeRanges2.default)(context).create();
    }

    function isEnabled() {
        var numRanges = ranges.length;
        var time = void 0;

        if (!numRanges) {
            return true;
        }

        // When not present, DASH Metrics reporting is requested
        // for the whole duration of the content.
        time = useWallClockTime ? new Date().getTime() / 1000 : mediaElement.currentTime;

        for (var i = 0; i < numRanges; i += 1) {
            var start = ranges.start(i);
            var end = ranges.end(i);

            if (start <= time && time < end) {
                return true;
            }
        }

        return false;
    }

    instance = {
        initialize: initialize,
        reset: reset,
        isEnabled: isEnabled
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

RangeController.__dashjs_factory_name = 'RangeController';
exports.default = dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/controllers/ReportingController.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/controllers/ReportingController.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ReportingFactory = __webpack_require__(/*! ../reporting/ReportingFactory */ "./node_modules/dashjs/src/streaming/metrics/reporting/ReportingFactory.js");

var _ReportingFactory2 = _interopRequireDefault(_ReportingFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ReportingController(config) {

    var reporters = [];
    var instance = void 0;

    var reportingFactory = (0, _ReportingFactory2.default)(this.context).getInstance(config);

    function initialize(reporting, rangeController) {
        // "if multiple Reporting elements are present, it is expected that
        // the client processes one of the recognized reporting schemes."
        // to ignore this, and support multiple Reporting per Metric,
        // simply change the 'some' below to 'forEach'
        reporting.some(function (r) {
            var reporter = reportingFactory.create(r, rangeController);

            if (reporter) {
                reporters.push(reporter);
                return true;
            }
        });
    }

    function reset() {
        reporters.forEach(function (r) {
            return r.reset();
        });
        reporters = [];
    }

    function report(type, vos) {
        reporters.forEach(function (r) {
            return r.report(type, vos);
        });
    }

    instance = {
        initialize: initialize,
        reset: reset,
        report: report
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

ReportingController.__dashjs_factory_name = 'ReportingController';
exports.default = dashjs.FactoryMaker.getClassFactory(ReportingController); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/metrics/MetricsHandlerFactory.js":
/*!************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/metrics/MetricsHandlerFactory.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _BufferLevelHandler = __webpack_require__(/*! ./handlers/BufferLevelHandler */ "./node_modules/dashjs/src/streaming/metrics/metrics/handlers/BufferLevelHandler.js");

var _BufferLevelHandler2 = _interopRequireDefault(_BufferLevelHandler);

var _DVBErrorsHandler = __webpack_require__(/*! ./handlers/DVBErrorsHandler */ "./node_modules/dashjs/src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js");

var _DVBErrorsHandler2 = _interopRequireDefault(_DVBErrorsHandler);

var _HttpListHandler = __webpack_require__(/*! ./handlers/HttpListHandler */ "./node_modules/dashjs/src/streaming/metrics/metrics/handlers/HttpListHandler.js");

var _HttpListHandler2 = _interopRequireDefault(_HttpListHandler);

var _GenericMetricHandler = __webpack_require__(/*! ./handlers/GenericMetricHandler */ "./node_modules/dashjs/src/streaming/metrics/metrics/handlers/GenericMetricHandler.js");

var _GenericMetricHandler2 = _interopRequireDefault(_GenericMetricHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function MetricsHandlerFactory(config) {

    config = config || {};
    var instance = void 0;
    var debug = config.debug;

    // group 1: key, [group 3: n [, group 5: type]]
    var keyRegex = /([a-zA-Z]*)(\(([0-9]*)(\,\s*([a-zA-Z]*))?\))?/;

    var context = this.context;
    var knownFactoryProducts = {
        BufferLevel: _BufferLevelHandler2.default,
        DVBErrors: _DVBErrorsHandler2.default,
        HttpList: _HttpListHandler2.default,
        PlayList: _GenericMetricHandler2.default,
        RepSwitchList: _GenericMetricHandler2.default,
        TcpList: _GenericMetricHandler2.default
    };

    function create(listType, reportingController) {
        var matches = listType.match(keyRegex);
        var handler;

        if (!matches) {
            return;
        }

        try {
            handler = knownFactoryProducts[matches[1]](context).create({
                eventBus: config.eventBus,
                metricsConstants: config.metricsConstants
            });

            handler.initialize(matches[1], reportingController, matches[3], matches[5]);
        } catch (e) {
            handler = null;
            debug.error('MetricsHandlerFactory: Could not create handler for type ' + matches[1] + ' with args ' + matches[3] + ', ' + matches[5] + ' (' + e.message + ')');
        }

        return handler;
    }

    function register(key, handler) {
        knownFactoryProducts[key] = handler;
    }

    function unregister(key) {
        delete knownFactoryProducts[key];
    }

    instance = {
        create: create,
        register: register,
        unregister: unregister
    };

    return instance;
}

MetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';
exports.default = dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/metrics/handlers/BufferLevelHandler.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/metrics/handlers/BufferLevelHandler.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _HandlerHelpers = __webpack_require__(/*! ../../utils/HandlerHelpers */ "./node_modules/dashjs/src/streaming/metrics/utils/HandlerHelpers.js");

var _HandlerHelpers2 = _interopRequireDefault(_HandlerHelpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BufferLevelHandler(config) {

    config = config || {};
    var instance = void 0,
        reportingController = void 0,
        n = void 0,
        name = void 0,
        interval = void 0,
        lastReportedTime = void 0;

    var context = this.context;
    var handlerHelpers = (0, _HandlerHelpers2.default)(context).getInstance();

    var storedVOs = [];

    var metricsConstants = config.metricsConstants;

    function getLowestBufferLevelVO() {
        try {
            return Object.keys(storedVOs).map(function (key) {
                return storedVOs[key];
            }).reduce(function (a, b) {
                return a.level < b.level ? a : b;
            });
        } catch (e) {
            return;
        }
    }

    function intervalCallback() {
        var vo = getLowestBufferLevelVO();

        if (vo) {
            if (lastReportedTime !== vo.t) {
                lastReportedTime = vo.t;
                reportingController.report(name, vo);
            }
        }
    }

    function initialize(basename, rc, n_ms) {
        if (rc) {
            // this will throw if n is invalid, to be
            // caught by the initialize caller.
            n = handlerHelpers.validateN(n_ms);
            reportingController = rc;
            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);
            interval = setInterval(intervalCallback, n);
        }
    }

    function reset() {
        clearInterval(interval);
        interval = null;
        n = 0;
        reportingController = null;
        lastReportedTime = null;
    }

    function handleNewMetric(metric, vo, type) {
        if (metric === metricsConstants.BUFFER_LEVEL) {
            storedVOs[type] = vo;
        }
    }

    instance = {
        initialize: initialize,
        reset: reset,
        handleNewMetric: handleNewMetric
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

BufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';
exports.default = dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MetricsReportingEvents = __webpack_require__(/*! ../../MetricsReportingEvents */ "./node_modules/dashjs/src/streaming/metrics/MetricsReportingEvents.js");

var _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DVBErrorsHandler(config) {

    config = config || {};
    var instance = void 0,
        reportingController = void 0;

    var eventBus = config.eventBus;
    var metricsConstants = config.metricsConstants;

    function onInitialisationComplete() {
        // we only want to report this once per call to initialize
        eventBus.off(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this);

        // Note: A Player becoming a reporting Player is itself
        // something which is recorded by the DVBErrors metric.
        eventBus.trigger(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER);
    }

    function initialize(unused, rc) {
        if (rc) {
            reportingController = rc;

            eventBus.on(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this);
        }
    }

    function reset() {
        reportingController = null;
    }

    function handleNewMetric(metric, vo) {
        // simply pass metric straight through
        if (metric === metricsConstants.DVB_ERRORS) {
            if (reportingController) {
                reportingController.report(metric, vo);
            }
        }
    }

    instance = {
        initialize: initialize,
        reset: reset,
        handleNewMetric: handleNewMetric
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

exports.default = dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/metrics/handlers/GenericMetricHandler.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/metrics/handlers/GenericMetricHandler.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function GenericMetricHandler() {

    var instance = void 0,
        metricName = void 0,
        reportingController = void 0;

    function initialize(name, rc) {
        metricName = name;
        reportingController = rc;
    }

    function reset() {
        reportingController = null;
        metricName = undefined;
    }

    function handleNewMetric(metric, vo) {
        // simply pass metric straight through
        if (metric === metricName) {
            if (reportingController) {
                reportingController.report(metricName, vo);
            }
        }
    }

    instance = {
        initialize: initialize,
        reset: reset,
        handleNewMetric: handleNewMetric
    };

    return instance;
}

GenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';
exports.default = dashjs.FactoryMaker.getClassFactory(GenericMetricHandler); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/metrics/handlers/HttpListHandler.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/metrics/handlers/HttpListHandler.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _HandlerHelpers = __webpack_require__(/*! ../../utils/HandlerHelpers */ "./node_modules/dashjs/src/streaming/metrics/utils/HandlerHelpers.js");

var _HandlerHelpers2 = _interopRequireDefault(_HandlerHelpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function HttpListHandler(config) {

    config = config || {};
    var instance = void 0,
        reportingController = void 0,
        n = void 0,
        type = void 0,
        name = void 0,
        interval = void 0;

    var storedVos = [];

    var handlerHelpers = (0, _HandlerHelpers2.default)(this.context).getInstance();

    var metricsConstants = config.metricsConstants;

    function intervalCallback() {
        var vos = storedVos;

        if (vos.length) {
            if (reportingController) {
                reportingController.report(name, vos);
            }
        }

        storedVos = [];
    }

    function initialize(basename, rc, n_ms, requestType) {
        if (rc) {

            // this will throw if n is invalid, to be
            // caught by the initialize caller.
            n = handlerHelpers.validateN(n_ms);

            reportingController = rc;

            if (requestType && requestType.length) {
                type = requestType;
            }

            name = handlerHelpers.reconstructFullMetricName(basename, n_ms, requestType);

            interval = setInterval(intervalCallback, n);
        }
    }

    function reset() {
        clearInterval(interval);
        interval = null;
        n = null;
        type = null;
        storedVos = [];
        reportingController = null;
    }

    function handleNewMetric(metric, vo) {
        if (metric === metricsConstants.HTTP_REQUEST) {
            if (!type || type === vo.type) {
                storedVos.push(vo);
            }
        }
    }

    instance = {
        initialize: initialize,
        reset: reset,
        handleNewMetric: handleNewMetric
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

HttpListHandler.__dashjs_factory_name = 'HttpListHandler';
exports.default = dashjs.FactoryMaker.getClassFactory(HttpListHandler); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/reporting/ReportingFactory.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/reporting/ReportingFactory.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _DVBReporting = __webpack_require__(/*! ./reporters/DVBReporting */ "./node_modules/dashjs/src/streaming/metrics/reporting/reporters/DVBReporting.js");

var _DVBReporting2 = _interopRequireDefault(_DVBReporting);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ReportingFactory(config) {
    config = config || {};

    var knownReportingSchemeIdUris = {
        'urn:dvb:dash:reporting:2014': _DVBReporting2.default
    };

    var context = this.context;
    var debug = config.debug;
    var metricsConstants = config.metricsConstants;

    var instance = void 0;

    function create(entry, rangeController) {
        var reporting = void 0;

        try {
            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({
                metricsConstants: metricsConstants
            });

            reporting.initialize(entry, rangeController);
        } catch (e) {
            reporting = null;
            debug.error('ReportingFactory: could not create Reporting with schemeIdUri ' + entry.schemeIdUri + ' (' + e.message + ')');
        }

        return reporting;
    }

    function register(schemeIdUri, moduleName) {
        knownReportingSchemeIdUris[schemeIdUri] = moduleName;
    }

    function unregister(schemeIdUri) {
        delete knownReportingSchemeIdUris[schemeIdUri];
    }

    instance = {
        create: create,
        register: register,
        unregister: unregister
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

ReportingFactory.__dashjs_factory_name = 'ReportingFactory';
exports.default = dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/reporting/reporters/DVBReporting.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/reporting/reporters/DVBReporting.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MetricSerialiser = __webpack_require__(/*! ../../utils/MetricSerialiser */ "./node_modules/dashjs/src/streaming/metrics/utils/MetricSerialiser.js");

var _MetricSerialiser2 = _interopRequireDefault(_MetricSerialiser);

var _RNG = __webpack_require__(/*! ../../utils/RNG */ "./node_modules/dashjs/src/streaming/metrics/utils/RNG.js");

var _RNG2 = _interopRequireDefault(_RNG);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function DVBReporting(config) {
    config = config || {};
    var instance = void 0;

    var context = this.context;
    var metricSerialiser = void 0,
        randomNumberGenerator = void 0,
        reportingPlayerStatusDecided = void 0,
        isReportingPlayer = void 0,
        reportingUrl = void 0,
        rangeController = void 0;

    var USE_DRAFT_DVB_SPEC = true;
    var allowPendingRequestsToCompleteOnReset = true;
    var pendingRequests = [];

    var metricsConstants = config.metricsConstants;

    function setup() {
        metricSerialiser = (0, _MetricSerialiser2.default)(context).getInstance();
        randomNumberGenerator = (0, _RNG2.default)(context).getInstance();

        resetInitialSettings();
    }

    function doGetRequest(url, successCB, failureCB) {
        var req = new XMLHttpRequest();
        var oncomplete = function oncomplete() {
            var reqIndex = pendingRequests.indexOf(req);

            if (reqIndex === -1) {
                return;
            } else {
                pendingRequests.splice(reqIndex, 1);
            }

            if (req.status >= 200 && req.status < 300) {
                if (successCB) {
                    successCB();
                }
            } else {
                if (failureCB) {
                    failureCB();
                }
            }
        };

        pendingRequests.push(req);

        try {
            req.open('GET', url);
            req.onloadend = oncomplete;
            req.onerror = oncomplete;
            req.send();
        } catch (e) {
            req.onerror();
        }
    }

    function report(type, vos) {
        if (!Array.isArray(vos)) {
            vos = [vos];
        }

        // If the Player is not a reporting Player, then the Player shall
        // not report any errors.
        // ... In addition to any time restrictions specified by a Range
        // element within the Metrics element.
        if (isReportingPlayer && rangeController.isEnabled()) {

            // This reporting mechanism operates by creating one HTTP GET
            // request for every entry in the top level list of the metric.
            vos.forEach(function (vo) {
                var url = metricSerialiser.serialise(vo);

                // this has been proposed for errata
                if (USE_DRAFT_DVB_SPEC && type !== metricsConstants.DVB_ERRORS) {
                    url = 'metricname=' + type + '&' + url;
                }

                // Take the value of the @reportingUrl attribute, append a
                // question mark ('?') character and then append the string
                // created in the previous step.
                url = reportingUrl + '?' + url;

                // Make an HTTP GET request to the URL contained within the
                // string created in the previous step.
                doGetRequest(url, null, function () {
                    // If the Player is unable to make the report, for
                    // example because the @reportingUrl is invalid, the
                    // host cannot be reached, or an HTTP status code other
                    // than one in the 200 series is received, the Player
                    // shall cease being a reporting Player for the
                    // duration of the MPD.
                    isReportingPlayer = false;
                });
            });
        }
    }

    function initialize(entry, rc) {
        var probability = void 0;

        rangeController = rc;

        reportingUrl = entry['dvb:reportingUrl'];

        // If a required attribute is missing, the Reporting descriptor may
        // be ignored by the Player
        if (!reportingUrl) {
            throw new Error('required parameter missing (dvb:reportingUrl)');
        }

        // A Player's status, as a reporting Player or not, shall remain
        // static for the duration of the MPD, regardless of MPD updates.
        // (i.e. only calling reset (or failure) changes this state)
        if (!reportingPlayerStatusDecided) {
            // NOTE: DVB spec has a typo where it incorrectly references the
            // priority attribute, which should be probability
            probability = entry['dvb:probability'] || entry['dvb:priority'] || 0;
            // If the @priority attribute is set to 1000, it shall be a reporting Player.
            // If the @priority attribute is missing, the Player shall not be a reporting Player.
            // For any other value of the @probability attribute, it shall decide at random whether to be a
            // reporting Player, such that the probability of being one is @probability/1000.
            if (probability && (probability === 1000 || probability / 1000 >= randomNumberGenerator.random())) {
                isReportingPlayer = true;
            }

            reportingPlayerStatusDecided = true;
        }
    }

    function resetInitialSettings() {
        reportingPlayerStatusDecided = false;
        isReportingPlayer = false;
        reportingUrl = null;
        rangeController = null;
    }

    function reset() {
        if (!allowPendingRequestsToCompleteOnReset) {
            pendingRequests.forEach(function (req) {
                return req.abort();
            });
            pendingRequests = [];
        }

        resetInitialSettings();
    }

    instance = {
        report: report,
        initialize: initialize,
        reset: reset
    };

    setup();

    return instance;
}

DVBReporting.__dashjs_factory_name = 'DVBReporting';
exports.default = dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/utils/DVBErrorsTranslator.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/utils/DVBErrorsTranslator.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _DVBErrors = __webpack_require__(/*! ../vo/DVBErrors */ "./node_modules/dashjs/src/streaming/metrics/vo/DVBErrors.js");

var _DVBErrors2 = _interopRequireDefault(_DVBErrors);

var _MetricsReportingEvents = __webpack_require__(/*! ../MetricsReportingEvents */ "./node_modules/dashjs/src/streaming/metrics/MetricsReportingEvents.js");

var _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function DVBErrorsTranslator(config) {

    config = config || {};
    var instance = void 0,
        mpd = void 0;
    var eventBus = config.eventBus;
    var metricModel = config.metricsModel;
    var metricsConstants = config.metricsConstants;
    //MediaPlayerEvents have been added to Events in MediaPlayer class
    var Events = config.events;

    function report(vo) {
        var o = new _DVBErrors2.default();

        if (!mpd) {
            return;
        }

        for (var key in vo) {
            if (vo.hasOwnProperty(key)) {
                o[key] = vo[key];
            }
        }

        if (!o.mpdurl) {
            o.mpdurl = mpd.originalUrl || mpd.url;
        }

        if (!o.terror) {
            o.terror = new Date();
        }

        metricModel.addDVBErrors(o);
    }

    function onManifestUpdate(e) {
        if (e.error) {
            return;
        }

        mpd = e.manifest;
    }

    function onServiceLocationChanged(e) {
        report({
            errorcode: _DVBErrors2.default.BASE_URL_CHANGED,
            servicelocation: e.entry
        });
    }

    function onBecameReporter() {
        report({
            errorcode: _DVBErrors2.default.BECAME_REPORTER
        });
    }

    function handleHttpMetric(vo) {
        if (vo.responsecode === 0 || // connection failure - unknown
        vo.responsecode >= 400 || // HTTP error status code
        vo.responsecode < 100 || // unknown status codes
        vo.responsecode >= 600) {
            // unknown status codes
            report({
                errorcode: vo.responsecode || _DVBErrors2.default.CONNECTION_ERROR,
                url: vo.url,
                terror: vo.tresponse,
                servicelocation: vo._serviceLocation
            });
        }
    }

    function onMetricEvent(e) {
        switch (e.metric) {
            case metricsConstants.HTTP_REQUEST:
                handleHttpMetric(e.value);
                break;
            default:
                break;
        }
    }

    function onPlaybackError(e) {
        var reason = e.error ? e.error.code : 0;
        var errorcode = void 0;

        switch (reason) {
            case MediaError.MEDIA_ERR_NETWORK:
                errorcode = _DVBErrors2.default.CONNECTION_ERROR;
                break;
            case MediaError.MEDIA_ERR_DECODE:
                errorcode = _DVBErrors2.default.CORRUPT_MEDIA_OTHER;
                break;
            default:
                return;
        }

        report({
            errorcode: errorcode
        });
    }

    function initialise() {
        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);
        eventBus.on(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance);
        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);
        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);
        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);
        eventBus.on(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);
    }

    function reset() {
        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);
        eventBus.off(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance);
        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);
        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);
        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);
        eventBus.off(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);
    }

    instance = {
        initialise: initialise,
        reset: reset
    };

    initialise();

    return instance;
}

DVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';
exports.default = dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/utils/HandlerHelpers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/utils/HandlerHelpers.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function HandlerHelpers() {
    return {
        reconstructFullMetricName: function reconstructFullMetricName(key, n, type) {
            var mn = key;

            if (n) {
                mn += '(' + n;

                if (type && type.length) {
                    mn += ',' + type;
                }

                mn += ')';
            }

            return mn;
        },

        validateN: function validateN(n_ms) {
            if (!n_ms) {
                throw new Error('missing n');
            }

            if (isNaN(n_ms)) {
                throw new Error('n is NaN');
            }

            // n is a positive integer is defined to refer to the metric
            // in which the buffer level is recorded every n ms.
            if (n_ms < 0) {
                throw new Error('n must be positive');
            }

            return n_ms;
        }
    };
}

HandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';
exports.default = dashjs.FactoryMaker.getSingletonFactory(HandlerHelpers); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/utils/ManifestParsing.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/utils/ManifestParsing.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Metrics = __webpack_require__(/*! ../vo/Metrics */ "./node_modules/dashjs/src/streaming/metrics/vo/Metrics.js");

var _Metrics2 = _interopRequireDefault(_Metrics);

var _Range = __webpack_require__(/*! ../vo/Range */ "./node_modules/dashjs/src/streaming/metrics/vo/Range.js");

var _Range2 = _interopRequireDefault(_Range);

var _Reporting = __webpack_require__(/*! ../vo/Reporting */ "./node_modules/dashjs/src/streaming/metrics/vo/Reporting.js");

var _Reporting2 = _interopRequireDefault(_Reporting);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ManifestParsing(config) {
    config = config || {};
    var instance = void 0;
    var dashManifestModel = config.dashManifestModel;
    var constants = config.constants;

    function getMetricsRangeStartTime(manifest, dynamic, range) {
        var mpd = dashManifestModel.getMpd(manifest);
        var voPeriods;
        var presentationStartTime = 0;
        var reportingStartTime;

        if (dynamic) {
            // For services with MPD@type='dynamic', the start time is
            // indicated in wall clock time by adding the value of this
            // attribute to the value of the MPD@availabilityStartTime
            // attribute.
            presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;
        } else {
            // For services with MPD@type='static', the start time is indicated
            // in Media Presentation time and is relative to the PeriodStart
            // time of the first Period in this MPD.
            voPeriods = this.getRegularPeriods(mpd);

            if (voPeriods.length) {
                presentationStartTime = voPeriods[0].start;
            }
        }

        // When not present, DASH Metrics collection is
        // requested from the beginning of content
        // consumption.
        reportingStartTime = presentationStartTime;

        if (range && range.hasOwnProperty(constants.START_TIME)) {
            reportingStartTime += range.starttime;
        }

        return reportingStartTime;
    }

    function getMetrics(manifest) {
        var metrics = [];

        if (manifest.Metrics_asArray) {
            manifest.Metrics_asArray.forEach(function (metric) {
                var metricEntry = new _Metrics2.default();
                var isDynamic = dashManifestModel.getIsDynamic(manifest);

                if (metric.hasOwnProperty('metrics')) {
                    metricEntry.metrics = metric.metrics;
                } else {
                    return;
                }

                if (metric.Range_asArray) {
                    metric.Range_asArray.forEach(function (range) {
                        var rangeEntry = new _Range2.default();

                        rangeEntry.starttime = getMetricsRangeStartTime(manifest, isDynamic, range);

                        if (range.hasOwnProperty('duration')) {
                            rangeEntry.duration = range.duration;
                        } else {
                            // if not present, the value is identical to the
                            // Media Presentation duration.
                            rangeEntry.duration = dashManifestModel.getDuration(manifest);
                        }

                        rangeEntry._useWallClockTime = isDynamic;

                        metricEntry.Range.push(rangeEntry);
                    });
                }

                if (metric.Reporting_asArray) {
                    metric.Reporting_asArray.forEach(function (reporting) {
                        var reportingEntry = new _Reporting2.default();

                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {
                            reportingEntry.schemeIdUri = reporting.schemeIdUri;
                        } else {
                            // Invalid Reporting. schemeIdUri must be set. Ignore.
                            return;
                        }

                        for (var prop in reporting) {
                            if (reporting.hasOwnProperty(prop)) {
                                reportingEntry[prop] = reporting[prop];
                            }
                        }

                        metricEntry.Reporting.push(reportingEntry);
                    });
                } else {
                    // Invalid Metrics. At least one reporting must be present. Ignore
                    return;
                }

                metrics.push(metricEntry);
            });
        }

        return metrics;
    }

    instance = {
        getMetrics: getMetrics
    };

    return instance;
}

ManifestParsing.__dashjs_factory_name = 'ManifestParsing';
exports.default = dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/utils/MetricSerialiser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/utils/MetricSerialiser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function MetricSerialiser() {

    // For each entry in the top level list within the metric (in the case
    // of the DVBErrors metric each entry corresponds to an "error event"
    // described in clause 10.8.4) the Player shall:
    function serialise(metric) {
        var pairs = [];
        var obj = [];
        var key = void 0,
            value = void 0;

        // Take each (key, value) pair from the metric entry and create a
        // string consisting of the name of the key, followed by an equals
        // ('=') character, followed by the string representation of the
        // value. The string representation of the value is created based
        // on the type of the value following the instructions in Table 22.
        for (key in metric) {
            if (metric.hasOwnProperty(key) && key.indexOf('_') !== 0) {
                value = metric[key];

                // we want to ensure that keys still end up in the report
                // even if there is no value
                if (value === undefined || value === null) {
                    value = '';
                }

                // DVB A168 10.12.4 Table 22
                if (Array.isArray(value)) {
                    // if trace or similar is null, do not include in output
                    if (!value.length) {
                        continue;
                    }

                    obj = [];

                    value.forEach(function (v) {
                        var isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';

                        obj.push(isBuiltIn ? v : serialise(v));
                    });

                    value = obj.map(encodeURIComponent).join(',');
                } else if (typeof value === 'string') {
                    value = encodeURIComponent(value);
                } else if (value instanceof Date) {
                    value = value.toISOString();
                } else if (typeof value === 'number') {
                    value = Math.round(value);
                }

                pairs.push(key + '=' + value);
            }
        }

        // Concatenate the strings created in the previous step with an
        // ampersand ('&') character between each one.
        return pairs.join('&');
    }

    return {
        serialise: serialise
    };
}

MetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';
exports.default = dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/utils/RNG.js":
/*!****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/utils/RNG.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function RNG() {

    // check whether secure random numbers are available. if not, revert to
    // using Math.random
    var crypto = window.crypto || window.msCrypto;

    // could just as easily use any other array type by changing line below
    var ArrayType = Uint32Array;
    var MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;

    // currently there is only one client for this code, and that only uses
    // a single random number per initialisation. may want to increase this
    // number if more consumers in the future
    var NUM_RANDOM_NUMBERS = 10;

    var randomNumbers = void 0,
        index = void 0,
        instance = void 0;

    function initialise() {
        if (crypto) {
            if (!randomNumbers) {
                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);
            }
            crypto.getRandomValues(randomNumbers);
            index = 0;
        }
    }

    function rand(min, max) {
        var r = void 0;

        if (!min) {
            min = 0;
        }

        if (!max) {
            max = 1;
        }

        if (crypto) {
            if (index === randomNumbers.length) {
                initialise();
            }

            r = randomNumbers[index] / MAX_VALUE;
            index += 1;
        } else {
            r = Math.random();
        }

        return r * (max - min) + min;
    }

    instance = {
        random: rand
    };

    initialise();

    return instance;
}

RNG.__dashjs_factory_name = 'RNG';
exports.default = dashjs.FactoryMaker.getSingletonFactory(RNG); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/vo/DVBErrors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/vo/DVBErrors.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var DVBErrors = function DVBErrors() {
    _classCallCheck(this, DVBErrors);

    this.mpdurl = null;
    // String - Absolute URL from which the MPD was originally
    // retrieved (MPD updates will not change this value).

    this.errorcode = null;
    // String - The value of errorcode depends upon the type
    // of error being reported. For an error listed in the
    // ErrorType column below the value is as described in the
    // Value column.
    //
    // ErrorType                                            Value
    // ---------                                            -----
    // HTTP error status code                               HTTP status code
    // Unknown HTTP status code                             HTTP status code
    // SSL connection failed                                "SSL" followed by SSL alert value
    // DNS resolution failed                                "C00"
    // Host unreachable                                     "C01"
    // Connection refused                                   "C02"
    // Connection error – Not otherwise specified           "C03"
    // Corrupt media – ISO BMFF container cannot be parsed  "M00"
    // Corrupt media – Not otherwise specified              "M01"
    // Changing Base URL in use due to errors               "F00"
    // Becoming an error reporting Player                   "S00"

    this.terror = null;
    // Real-Time - Date and time at which error occurred in UTC,
    // formatted as a combined date and time according to ISO 8601.

    this.url = null;
    // String - Absolute URL from which data was being requested
    // when this error occurred. If the error report is in relation
    // to corrupt media or changing BaseURL, this may be a null
    // string if the URL from which the media was obtained or
    // which led to the change of BaseURL is no longer known.

    this.ipaddress = null;
    // String - IP Address which the host name in "url" resolved to.
    // If the error report is in relation to corrupt media or
    // changing BaseURL, this may be a null string if the URL
    // from which the media was obtained or which led to the
    // change of BaseURL is no longer known.

    this.servicelocation = null;
    // String - The value of the serviceLocation field in the
    // BaseURL being used. In the event of this report indicating
    // a change of BaseURL this is the value from the BaseURL
    // being moved from.
};

DVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';
DVBErrors.DNS_RESOLUTION_FAILED = 'C00';
DVBErrors.HOST_UNREACHABLE = 'C01';
DVBErrors.CONNECTION_REFUSED = 'C02';
DVBErrors.CONNECTION_ERROR = 'C03';
DVBErrors.CORRUPT_MEDIA_ISOBMFF = 'M00';
DVBErrors.CORRUPT_MEDIA_OTHER = 'M01';
DVBErrors.BASE_URL_CHANGED = 'F00';
DVBErrors.BECAME_REPORTER = 'S00';

exports.default = DVBErrors;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/vo/Metrics.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/vo/Metrics.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var Metrics = function Metrics() {
  _classCallCheck(this, Metrics);

  this.metrics = '';
  this.Range = [];
  this.Reporting = [];
};

exports.default = Metrics;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/vo/Range.js":
/*!***************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/vo/Range.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var Range = function Range() {
  _classCallCheck(this, Range);

  // as defined in ISO23009-1
  this.starttime = 0;
  this.duration = Infinity;

  // for internal use
  this._useWallClockTime = false;
};

exports.default = Range;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/metrics/vo/Reporting.js":
/*!*******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/metrics/vo/Reporting.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var Reporting = function Reporting() {
  _classCallCheck(this, Reporting);

  // Reporting is a DescriptorType and doesn't have any additional fields
  this.schemeIdUri = '';
  this.value = '';
};

exports.default = Reporting;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/models/BaseURLTreeModel.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/models/BaseURLTreeModel.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ObjectUtils = __webpack_require__(/*! ../utils/ObjectUtils */ "./node_modules/dashjs/src/streaming/utils/ObjectUtils.js");

var _ObjectUtils2 = _interopRequireDefault(_ObjectUtils);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * The copyright in this software is being made available under the BSD License,
                                                                                                                                                           * included below. This software may be subject to other third party and contributor
                                                                                                                                                           * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                           *
                                                                                                                                                           * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                           * All rights reserved.
                                                                                                                                                           *
                                                                                                                                                           * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                           * are permitted provided that the following conditions are met:
                                                                                                                                                           *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                           *  list of conditions and the following disclaimer.
                                                                                                                                                           *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                           *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                           *  other materials provided with the distribution.
                                                                                                                                                           *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                           *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                           *  without specific prior written permission.
                                                                                                                                                           *
                                                                                                                                                           *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                           *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                           *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                           *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                           *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                           *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                           *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                           *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                           *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                           *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                           */

var DEFAULT_INDEX = NaN;

var Node = function Node(_baseUrls, _selectedIdx) {
    _classCallCheck(this, Node);

    this.data = {
        baseUrls: _baseUrls || null,
        selectedIdx: _selectedIdx || DEFAULT_INDEX
    };
    this.children = [];
};

function BaseURLTreeModel() {
    var instance = void 0,
        root = void 0,
        dashManifestModel = void 0;

    var context = this.context;
    var objectUtils = (0, _ObjectUtils2.default)(context).getInstance();

    function setup() {
        reset();
    }

    function setConfig(config) {
        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
    }

    function checkSetConfigCall() {
        if (!dashManifestModel || !dashManifestModel.hasOwnProperty('getBaseURLsFromElement') || !dashManifestModel.hasOwnProperty('getRepresentationSortFunction')) {
            throw new Error('setConfig function has to be called previously');
        }
    }

    function updateChildData(node, index, element) {
        var baseUrls = dashManifestModel.getBaseURLsFromElement(element);

        if (!node[index]) {
            node[index] = new Node(baseUrls);
        } else {
            if (!objectUtils.areEqual(baseUrls, node[index].data.baseUrls)) {
                node[index].data.baseUrls = baseUrls;
                node[index].data.selectedIdx = DEFAULT_INDEX;
            }
        }
    }

    function getBaseURLCollectionsFromManifest(manifest) {
        checkSetConfigCall();
        var baseUrls = dashManifestModel.getBaseURLsFromElement(manifest);

        if (!objectUtils.areEqual(baseUrls, root.data.baseUrls)) {
            root.data.baseUrls = baseUrls;
            root.data.selectedIdx = DEFAULT_INDEX;
        }

        if (manifest && manifest.Period_asArray) {
            manifest.Period_asArray.forEach(function (p, pi) {
                updateChildData(root.children, pi, p);

                if (p.AdaptationSet_asArray) {
                    p.AdaptationSet_asArray.forEach(function (a, ai) {
                        updateChildData(root.children[pi].children, ai, a);

                        if (a.Representation_asArray) {
                            a.Representation_asArray.sort(dashManifestModel.getRepresentationSortFunction()).forEach(function (r, ri) {
                                updateChildData(root.children[pi].children[ai].children, ri, r);
                            });
                        }
                    });
                }
            });
        }
    }

    function walk(callback, node) {
        var target = node || root;

        callback(target.data);

        if (target.children) {
            target.children.forEach(function (child) {
                return walk(callback, child);
            });
        }
    }

    function invalidateSelectedIndexes(serviceLocation) {
        walk(function (data) {
            if (!isNaN(data.selectedIdx)) {
                if (serviceLocation === data.baseUrls[data.selectedIdx].serviceLocation) {
                    data.selectedIdx = DEFAULT_INDEX;
                }
            }
        });
    }

    function update(manifest) {
        getBaseURLCollectionsFromManifest(manifest);
    }

    function reset() {
        root = new Node();
    }

    function getForPath(path) {
        var target = root;
        var nodes = [target.data];

        if (path) {
            path.forEach(function (p) {
                target = target.children[p];

                if (target) {
                    nodes.push(target.data);
                }
            });
        }

        return nodes.filter(function (n) {
            return n.baseUrls.length;
        });
    }

    instance = {
        reset: reset,
        update: update,
        getForPath: getForPath,
        invalidateSelectedIndexes: invalidateSelectedIndexes,
        setConfig: setConfig
    };

    setup();

    return instance;
}

BaseURLTreeModel.__dashjs_factory_name = 'BaseURLTreeModel';
exports.default = _FactoryMaker2.default.getClassFactory(BaseURLTreeModel);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/models/FragmentModel.js":
/*!*******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/models/FragmentModel.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _FragmentRequest = __webpack_require__(/*! ../vo/FragmentRequest */ "./node_modules/dashjs/src/streaming/vo/FragmentRequest.js");

var _FragmentRequest2 = _interopRequireDefault(_FragmentRequest);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FRAGMENT_MODEL_LOADING = 'loading'; /**
                                         * The copyright in this software is being made available under the BSD License,
                                         * included below. This software may be subject to other third party and contributor
                                         * rights, including patent rights, and no such rights are granted under this license.
                                         *
                                         * Copyright (c) 2013, Dash Industry Forum.
                                         * All rights reserved.
                                         *
                                         * Redistribution and use in source and binary forms, with or without modification,
                                         * are permitted provided that the following conditions are met:
                                         *  * Redistributions of source code must retain the above copyright notice, this
                                         *  list of conditions and the following disclaimer.
                                         *  * Redistributions in binary form must reproduce the above copyright notice,
                                         *  this list of conditions and the following disclaimer in the documentation and/or
                                         *  other materials provided with the distribution.
                                         *  * Neither the name of Dash Industry Forum nor the names of its
                                         *  contributors may be used to endorse or promote products derived from this software
                                         *  without specific prior written permission.
                                         *
                                         *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                         *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                         *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                         *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                         *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                         *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                         *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                         *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                         *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                         *  POSSIBILITY OF SUCH DAMAGE.
                                         */

var FRAGMENT_MODEL_EXECUTED = 'executed';
var FRAGMENT_MODEL_CANCELED = 'canceled';
var FRAGMENT_MODEL_FAILED = 'failed';

function FragmentModel(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var metricsModel = config.metricsModel;
    var fragmentLoader = config.fragmentLoader;

    var instance = void 0,
        logger = void 0,
        streamProcessor = void 0,
        executedRequests = void 0,
        loadingRequests = void 0,
        mediaManifestOffset = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        resetInitialSettings();
        eventBus.on(_Events2.default.LOADING_COMPLETED, onLoadingCompleted, instance);
        eventBus.on(_Events2.default.LOADING_DATA_PROGRESS, onLoadingInProgress, instance);
        eventBus.on(_Events2.default.LOADING_ABANDONED, onLoadingAborted, instance);
    }

    function setStreamProcessor(value) {
        streamProcessor = value;
    }

    function getStreamProcessor() {
        return streamProcessor;
    }

    //The difference between the buffered media presentation time and the manifest's believed presentation time. +ve means media is later than manifest.
    function setMediaManifestOffset(value) {
        mediaManifestOffset = value;
    }

    function isFragmentInBuffer(request, bufferRanges) {
        var intersects = false;
        for (var i = 0; i < bufferRanges.length; i++) {
            if (request.startTime + mediaManifestOffset + 0.5 >= bufferRanges.start(i) && request.startTime + mediaManifestOffset + request.duration - 0.5 <= bufferRanges.end(i)) {
                intersects = true;
                break;
            }
        }

        return intersects;
    }

    function isFragmentLoaded(request, bufferRanges) {
        var isEqualComplete = function isEqualComplete(req1, req2) {
            return req1.action === _FragmentRequest2.default.ACTION_COMPLETE && req1.action === req2.action;
        };

        var isEqualMedia = function isEqualMedia(req1, req2) {
            return !isNaN(req1.index) && req1.startTime === req2.startTime && req1.adaptationIndex === req2.adaptationIndex && req1.type === req2.type;
        };

        var isEqualInit = function isEqualInit(req1, req2) {
            return isNaN(req1.index) && isNaN(req2.index) && req1.quality === req2.quality;
        };

        var check = function check(requests) {
            var isInBuffer = bufferRanges ? isFragmentInBuffer(request, bufferRanges) : true;
            var isLastRequest = requests.length > 0 && requests[requests.length - 1].index === request.index; //Don't keep repeating the last fragment if not in buffer, move on.
            var isLoaded = requests.some(function (req) {
                return isEqualMedia(request, req) && (isInBuffer || isLastRequest) || isEqualInit(request, req) || isEqualComplete(request, req);
            });

            return isLoaded;
        };

        if (!request) {
            return false;
        }

        return check(executedRequests);
    }

    function isFragmentLoadedOrPending(request) {
        var isLoaded = false;
        var i = 0;
        var req = void 0;

        // First, check if the fragment has already been loaded
        isLoaded = isFragmentLoaded(request);

        // Then, check if the fragment is about to be loeaded
        if (!isLoaded) {
            for (i = 0; i < loadingRequests.length; i++) {
                req = loadingRequests[i];
                if (request.url === req.url && request.startTime === req.startTime) {
                    isLoaded = true;
                }
            }
        }

        return isLoaded;
    }

    /**
     *
     * Gets an array of {@link FragmentRequest} objects
     *
     * @param {Object} filter The object with properties by which the method filters the requests to be returned.
     *  the only mandatory property is state, which must be a value from
     *  other properties should match the properties of {@link FragmentRequest}. E.g.:
     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns
     *  all the requests from executedRequests array where requests.quality = filter.quality
     *
     * @returns {Array}
     * @memberof FragmentModel#
     */
    function getRequests(filter) {
        var states = filter ? filter.state instanceof Array ? filter.state : [filter.state] : [];

        var filteredRequests = [];
        states.forEach(function (state) {
            var requests = getRequestsForState(state);
            filteredRequests = filteredRequests.concat(filterRequests(requests, filter));
        });

        return filteredRequests;
    }

    function getRequestThreshold(req) {
        return isNaN(req.duration) ? 0.25 : Math.min(req.duration / 8, 0.5);
    }

    function removeExecutedRequestsBeforeTime(time) {
        executedRequests = executedRequests.filter(function (req) {
            var threshold = getRequestThreshold(req);
            return isNaN(req.startTime) || (time !== undefined ? req.startTime >= time - threshold : false);
        });
    }

    function removeExecutedRequestsAfterTime(time) {
        executedRequests = executedRequests.filter(function (req) {
            return isNaN(req.startTime) || (time !== undefined ? req.startTime + req.duration < time : false);
        });
    }

    function removeExecutedRequestsInTimeRange(start, end) {
        if (end <= start + 0.5) {
            return;
        }

        executedRequests = executedRequests.filter(function (req) {
            var threshold = getRequestThreshold(req);
            return isNaN(req.startTime) || req.startTime >= end - threshold || isNaN(req.duration) || req.startTime + req.duration <= start + threshold;
        });
    }

    // Remove requests that are not "represented" by any of buffered ranges
    function syncExecutedRequestsWithBufferedRange(bufferedRanges, streamDuration) {
        if (!bufferedRanges || bufferedRanges.length === 0) {
            removeExecutedRequestsBeforeTime();
            return;
        }

        var start = 0;
        for (var i = 0, ln = bufferedRanges.length; i < ln; i++) {
            removeExecutedRequestsInTimeRange(start, bufferedRanges.start(i));
            start = bufferedRanges.end(i);
        }
        if (streamDuration > 0) {
            removeExecutedRequestsInTimeRange(start, streamDuration);
        }
    }

    function abortRequests() {
        fragmentLoader.abort();
        loadingRequests = [];
    }

    function executeRequest(request) {
        switch (request.action) {
            case _FragmentRequest2.default.ACTION_COMPLETE:
                executedRequests.push(request);
                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED);
                logger.debug('executeRequest trigger STREAM_COMPLETED');
                eventBus.trigger(_Events2.default.STREAM_COMPLETED, {
                    request: request,
                    fragmentModel: this
                });
                break;
            case _FragmentRequest2.default.ACTION_DOWNLOAD:
                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING);
                loadingRequests.push(request);
                loadCurrentFragment(request);
                break;
            default:
                logger.warn('Unknown request action.');
        }
    }

    function loadCurrentFragment(request) {
        eventBus.trigger(_Events2.default.FRAGMENT_LOADING_STARTED, {
            sender: instance,
            request: request
        });
        fragmentLoader.load(request);
    }

    function getRequestForTime(arr, time, threshold) {
        // loop through the executed requests and pick the one for which the playback interval matches the given time
        var lastIdx = arr.length - 1;
        for (var i = lastIdx; i >= 0; i--) {
            var req = arr[i];
            var start = req.startTime;
            var end = start + req.duration;
            threshold = !isNaN(threshold) ? threshold : getRequestThreshold(req);
            if (!isNaN(start) && !isNaN(end) && time + threshold >= start && time - threshold < end || isNaN(start) && isNaN(time)) {
                return req;
            }
        }
        return null;
    }

    function filterRequests(arr, filter) {
        // for time use a specific filtration function
        if (filter.hasOwnProperty('time')) {
            return [getRequestForTime(arr, filter.time, filter.threshold)];
        }

        return arr.filter(function (request) {
            for (var prop in filter) {
                if (prop === 'state') continue;
                if (filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return false;
            }

            return true;
        });
    }

    function getRequestsForState(state) {
        var requests = void 0;
        switch (state) {
            case FRAGMENT_MODEL_LOADING:
                requests = loadingRequests;
                break;
            case FRAGMENT_MODEL_EXECUTED:
                requests = executedRequests;
                break;
            default:
                requests = [];
        }
        return requests;
    }

    function addSchedulingInfoMetrics(request, state) {
        metricsModel.addSchedulingInfo(request.mediaType, new Date(), request.type, request.startTime, request.availabilityStartTime, request.duration, request.quality, request.range, state);

        metricsModel.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);
    }

    function onLoadingCompleted(e) {
        if (e.sender !== fragmentLoader) return;

        loadingRequests.splice(loadingRequests.indexOf(e.request), 1);

        if (e.response && !e.error) {
            executedRequests.push(e.request);
        }

        addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED);

        eventBus.trigger(_Events2.default.FRAGMENT_LOADING_COMPLETED, {
            request: e.request,
            response: e.response,
            error: e.error,
            sender: this
        });
    }

    function onLoadingInProgress(e) {
        if (e.sender !== fragmentLoader) return;

        eventBus.trigger(_Events2.default.FRAGMENT_LOADING_PROGRESS, {
            request: e.request,
            response: e.response,
            error: e.error,
            sender: this
        });
    }

    function onLoadingAborted(e) {
        if (e.sender !== fragmentLoader) return;

        eventBus.trigger(_Events2.default.FRAGMENT_LOADING_ABANDONED, { streamProcessor: this.getStreamProcessor(), request: e.request, mediaType: e.mediaType });
    }

    function resetInitialSettings() {
        executedRequests = [];
        loadingRequests = [];
        mediaManifestOffset = 0;
    }

    function reset() {
        eventBus.off(_Events2.default.LOADING_COMPLETED, onLoadingCompleted, this);
        eventBus.off(_Events2.default.LOADING_DATA_PROGRESS, onLoadingInProgress, this);
        eventBus.off(_Events2.default.LOADING_ABANDONED, onLoadingAborted, this);

        if (fragmentLoader) {
            fragmentLoader.reset();
        }
        resetInitialSettings();
    }

    function addExecutedRequest(request) {
        executedRequests.push(request);
    }

    instance = {
        setStreamProcessor: setStreamProcessor,
        getStreamProcessor: getStreamProcessor,
        getRequests: getRequests,
        isFragmentLoaded: isFragmentLoaded,
        isFragmentLoadedOrPending: isFragmentLoadedOrPending,
        removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,
        removeExecutedRequestsAfterTime: removeExecutedRequestsAfterTime,
        syncExecutedRequestsWithBufferedRange: syncExecutedRequestsWithBufferedRange,
        abortRequests: abortRequests,
        executeRequest: executeRequest,
        setMediaManifestOffset: setMediaManifestOffset,
        addExecutedRequest: addExecutedRequest,
        reset: reset
    };

    setup();
    return instance;
}

FragmentModel.__dashjs_factory_name = 'FragmentModel';
var factory = _FactoryMaker2.default.getClassFactory(FragmentModel);
factory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING;
factory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED;
factory.FRAGMENT_MODEL_CANCELED = FRAGMENT_MODEL_CANCELED;
factory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED;
_FactoryMaker2.default.updateClassFactory(FragmentModel.__dashjs_factory_name, factory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/models/ManifestModel.js":
/*!*******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/models/ManifestModel.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ManifestModel() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        manifest = void 0;

    function getValue() {
        return manifest;
    }

    function setValue(value) {
        manifest = value;
        if (value) {
            eventBus.trigger(_Events2.default.MANIFEST_LOADED, { data: value });
        }
    }

    instance = {
        getValue: getValue,
        setValue: setValue
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


ManifestModel.__dashjs_factory_name = 'ManifestModel';
exports.default = _FactoryMaker2.default.getSingletonFactory(ManifestModel);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/models/MediaPlayerModel.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/models/MediaPlayerModel.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _UTCTiming = __webpack_require__(/*! ../../dash/vo/UTCTiming */ "./node_modules/dashjs/src/dash/vo/UTCTiming.js");

var _UTCTiming2 = _interopRequireDefault(_UTCTiming);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _HTTPRequest = __webpack_require__(/*! ../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _ABRRulesCollection = __webpack_require__(/*! ../rules/abr/ABRRulesCollection */ "./node_modules/dashjs/src/streaming/rules/abr/ABRRulesCollection.js");

var _ABRRulesCollection2 = _interopRequireDefault(_ABRRulesCollection);

var _SupervisorTools = __webpack_require__(/*! ../utils/SupervisorTools */ "./node_modules/dashjs/src/streaming/utils/SupervisorTools.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                   * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                   * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                   * All rights reserved.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                   * are permitted provided that the following conditions are met:
                                                                                                                                                                                                                   *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                   *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                   *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                   *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                   *  other materials provided with the distribution.
                                                                                                                                                                                                                   *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                   *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                   *  without specific prior written permission.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                                                                                   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                                                                                   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                                                                                   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                                                                                   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                                                                                   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                                                                                   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                                                                                   *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                   */


var LIVE_DELAY_FRAGMENT_COUNT = 4;

var DEFAULT_LOCAL_STORAGE_BITRATE_EXPIRATION = 360000;
var DEFAULT_LOCAL_STORAGE_MEDIA_SETTINGS_EXPIRATION = 360000;

var BANDWIDTH_SAFETY_FACTOR = 0.9;
var ABANDON_LOAD_TIMEOUT = 10000;

var BUFFER_TO_KEEP = 20;
var BUFFER_AHEAD_TO_KEEP = 80;
var BUFFER_PRUNING_INTERVAL = 10;
var DEFAULT_MIN_BUFFER_TIME = 12;
var DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH = 20;
var BUFFER_TIME_AT_TOP_QUALITY = 60;
var BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM = 60;
var LONG_FORM_CONTENT_DURATION_THRESHOLD = 600;
var SEGMENT_OVERLAP_TOLERANCE_TIME = 0.2;
var SMALL_GAP_LIMIT = 0.8;
var MANIFEST_UPDATE_RETRY_INTERVAL = 100;

var CACHE_LOAD_THRESHOLD_VIDEO = 50;
var CACHE_LOAD_THRESHOLD_AUDIO = 5;

var FRAGMENT_RETRY_ATTEMPTS = 3;
var FRAGMENT_RETRY_INTERVAL = 1000;

var MANIFEST_RETRY_ATTEMPTS = 3;
var MANIFEST_RETRY_INTERVAL = 500;

var XLINK_RETRY_ATTEMPTS = 1;
var XLINK_RETRY_INTERVAL = 500;

var DEFAULT_LOW_LATENCY_LIVE_DELAY = 3.0;
var LOW_LATENCY_REDUCTION_FACTOR = 10;
var LOW_LATENCY_MULTIPLY_FACTOR = 5;
var LOW_LATENCY_CATCH_UP_MIN_DRIFT = 0.02;
var LOW_LATENCY_CATCH_UP_MAX_DRIFT = 0;
var LOW_LATENCY_CATCH_UP_PLAYBACK_RATE = 0.5;

//This value influences the startup time for live (in ms).
var WALLCLOCK_TIME_UPDATE_INTERVAL = 1000;

var DEFAULT_XHR_WITH_CREDENTIALS = false;

function MediaPlayerModel() {

    var instance = void 0,
        useManifestDateHeaderTimeSource = void 0,
        useSuggestedPresentationDelay = void 0,
        UTCTimingSources = void 0,
        liveDelayFragmentCount = void 0,
        liveDelay = void 0,
        scheduleWhilePaused = void 0,
        bufferToKeep = void 0,
        bufferAheadToKeep = void 0,
        bufferPruningInterval = void 0,
        lastBitrateCachingInfo = void 0,
        lastMediaSettingsCachingInfo = void 0,
        stableBufferTime = void 0,
        bufferTimeAtTopQuality = void 0,
        bufferTimeAtTopQualityLongForm = void 0,
        longFormContentDurationThreshold = void 0,
        segmentOverlapToleranceTime = void 0,
        bandwidthSafetyFactor = void 0,
        abandonLoadTimeout = void 0,
        retryAttempts = void 0,
        retryIntervals = void 0,
        wallclockTimeUpdateInterval = void 0,
        ABRStrategy = void 0,
        useDefaultABRRules = void 0,
        xhrWithCredentials = void 0,
        fragmentRequestTimeout = void 0,
        fastSwitchEnabled = void 0,
        customABRRule = void 0,
        movingAverageMethod = void 0,
        cacheLoadThresholds = void 0,
        jumpGaps = void 0,
        smallGapLimit = void 0,
        lowLatencyEnabled = void 0,
        manifestUpdateRetryInterval = void 0,
        keepProtectionMediaKeys = void 0,
        liveCatchUpMinDrift = void 0,
        liveCatchUpMaxDrift = void 0,
        liveCatchUpPlaybackRate = void 0;

    var DEFAULT_UTC_TIMING_SOURCE = {
        scheme: 'urn:mpeg:dash:utc:http-xsdate:2014',
        value: 'http://time.akamai.com/?iso&ms'
    };

    function setup() {
        var _retryAttempts, _retryIntervals;

        UTCTimingSources = [];
        useSuggestedPresentationDelay = false;
        useManifestDateHeaderTimeSource = true;
        scheduleWhilePaused = true;
        ABRStrategy = _Constants2.default.ABR_STRATEGY_DYNAMIC;
        useDefaultABRRules = true;
        fastSwitchEnabled = false;
        lastBitrateCachingInfo = {
            enabled: true,
            ttl: DEFAULT_LOCAL_STORAGE_BITRATE_EXPIRATION
        };
        lastMediaSettingsCachingInfo = {
            enabled: true,
            ttl: DEFAULT_LOCAL_STORAGE_MEDIA_SETTINGS_EXPIRATION
        };
        liveDelayFragmentCount = LIVE_DELAY_FRAGMENT_COUNT;
        liveDelay = undefined; // Explicitly state that default is undefined
        bufferToKeep = BUFFER_TO_KEEP;
        bufferAheadToKeep = BUFFER_AHEAD_TO_KEEP;
        bufferPruningInterval = BUFFER_PRUNING_INTERVAL;
        stableBufferTime = NaN;
        bufferTimeAtTopQuality = BUFFER_TIME_AT_TOP_QUALITY;
        bufferTimeAtTopQualityLongForm = BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM;
        longFormContentDurationThreshold = LONG_FORM_CONTENT_DURATION_THRESHOLD;
        segmentOverlapToleranceTime = SEGMENT_OVERLAP_TOLERANCE_TIME;
        bandwidthSafetyFactor = BANDWIDTH_SAFETY_FACTOR;
        abandonLoadTimeout = ABANDON_LOAD_TIMEOUT;
        wallclockTimeUpdateInterval = WALLCLOCK_TIME_UPDATE_INTERVAL;
        jumpGaps = false;
        smallGapLimit = SMALL_GAP_LIMIT;
        manifestUpdateRetryInterval = MANIFEST_UPDATE_RETRY_INTERVAL;
        xhrWithCredentials = {
            default: DEFAULT_XHR_WITH_CREDENTIALS
        };
        fragmentRequestTimeout = 0;
        customABRRule = [];
        movingAverageMethod = _Constants2.default.MOVING_AVERAGE_SLIDING_WINDOW;
        lowLatencyEnabled = false;
        liveCatchUpMinDrift = LOW_LATENCY_CATCH_UP_MIN_DRIFT;
        liveCatchUpMaxDrift = LOW_LATENCY_CATCH_UP_MAX_DRIFT;
        liveCatchUpPlaybackRate = LOW_LATENCY_CATCH_UP_PLAYBACK_RATE;

        retryAttempts = (_retryAttempts = {}, _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.MPD_TYPE, MANIFEST_RETRY_ATTEMPTS), _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, XLINK_RETRY_ATTEMPTS), _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.OTHER_TYPE, FRAGMENT_RETRY_ATTEMPTS), _retryAttempts);

        retryIntervals = (_retryIntervals = {}, _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.MPD_TYPE, MANIFEST_RETRY_INTERVAL), _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, XLINK_RETRY_INTERVAL), _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.OTHER_TYPE, FRAGMENT_RETRY_INTERVAL), _retryIntervals);

        cacheLoadThresholds = {};
        cacheLoadThresholds[_Constants2.default.VIDEO] = CACHE_LOAD_THRESHOLD_VIDEO;
        cacheLoadThresholds[_Constants2.default.AUDIO] = CACHE_LOAD_THRESHOLD_AUDIO;

        keepProtectionMediaKeys = false;
    }

    //TODO Should we use Object.define to have setters/getters? makes more readable code on other side.

    function setABRStrategy(value) {
        if (value === _Constants2.default.ABR_STRATEGY_DYNAMIC || value === _Constants2.default.ABR_STRATEGY_BOLA || value === _Constants2.default.ABR_STRATEGY_THROUGHPUT) {
            ABRStrategy = value;
        } else {
            throw _Constants2.default.BAD_ARGUMENT_ERROR;
        }
    }

    function getABRStrategy() {
        return ABRStrategy;
    }

    function setUseDefaultABRRules(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        useDefaultABRRules = value;
    }

    function getUseDefaultABRRules() {
        return useDefaultABRRules;
    }

    function findABRCustomRuleIndex(rulename) {
        var i = void 0;
        for (i = 0; i < customABRRule.length; i++) {
            if (customABRRule[i].rulename === rulename) {
                return i;
            }
        }
        return -1;
    }

    function getABRCustomRules() {
        return customABRRule;
    }

    function addABRCustomRule(type, rulename, rule) {
        if (typeof type !== 'string' || type !== _ABRRulesCollection2.default.ABANDON_FRAGMENT_RULES && type !== _ABRRulesCollection2.default.QUALITY_SWITCH_RULES || typeof rulename !== 'string') {
            throw _Constants2.default.BAD_ARGUMENT_ERROR;
        }
        var index = findABRCustomRuleIndex(rulename);
        if (index === -1) {
            // add rule
            customABRRule.push({
                type: type,
                rulename: rulename,
                rule: rule
            });
        } else {
            // update rule
            customABRRule[index].type = type;
            customABRRule[index].rule = rule;
        }
    }

    function removeABRCustomRule(rulename) {
        if (rulename) {
            var index = findABRCustomRuleIndex(rulename);
            //if no rulename custom rule has been found, do nothing
            if (index !== -1) {
                // remove rule
                customABRRule.splice(index, 1);
            }
        } else {
            //if no rulename is defined, remove all ABR custome rules
            customABRRule = [];
        }
    }

    function setBandwidthSafetyFactor(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        bandwidthSafetyFactor = value;
    }

    function getBandwidthSafetyFactor() {
        return bandwidthSafetyFactor;
    }

    function setAbandonLoadTimeout(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        abandonLoadTimeout = value;
    }

    function getAbandonLoadTimeout() {
        return abandonLoadTimeout;
    }

    function setStableBufferTime(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        stableBufferTime = value;
    }

    function getStableBufferTime() {
        if (getLowLatencyEnabled()) {
            return getLiveDelay() * 0.6;
        }
        return !isNaN(stableBufferTime) ? stableBufferTime : fastSwitchEnabled ? DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH : DEFAULT_MIN_BUFFER_TIME;
    }

    function setBufferTimeAtTopQuality(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        bufferTimeAtTopQuality = value;
    }

    function getBufferTimeAtTopQuality() {
        return bufferTimeAtTopQuality;
    }

    function setBufferTimeAtTopQualityLongForm(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        bufferTimeAtTopQualityLongForm = value;
    }

    function getBufferTimeAtTopQualityLongForm() {
        return bufferTimeAtTopQualityLongForm;
    }

    function setLongFormContentDurationThreshold(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        longFormContentDurationThreshold = value;
    }

    function getLongFormContentDurationThreshold() {
        return longFormContentDurationThreshold;
    }

    function setSegmentOverlapToleranceTime(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        segmentOverlapToleranceTime = value;
    }

    function getSegmentOverlapToleranceTime() {
        return segmentOverlapToleranceTime;
    }

    function setCacheLoadThresholdForType(type, value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        (0, _SupervisorTools.checkIsVideoOrAudioType)(type);
        cacheLoadThresholds[type] = value;
    }

    function getCacheLoadThresholdForType(type) {
        return cacheLoadThresholds[type];
    }

    function setBufferToKeep(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        bufferToKeep = value;
    }

    function getBufferToKeep() {
        return bufferToKeep;
    }

    function setBufferAheadToKeep(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        bufferAheadToKeep = value;
    }

    function getBufferAheadToKeep() {
        return bufferAheadToKeep;
    }

    function setLastBitrateCachingInfo(enable, ttl) {
        if (typeof enable !== 'boolean' || ttl !== undefined && (typeof ttl !== 'number' || isNaN(ttl))) {
            throw _Constants2.default.BAD_ARGUMENT_ERROR;
        }
        lastBitrateCachingInfo.enabled = enable;
        if (ttl !== undefined) {
            lastBitrateCachingInfo.ttl = ttl;
        }
    }

    function getLastBitrateCachingInfo() {
        return lastBitrateCachingInfo;
    }

    function setLastMediaSettingsCachingInfo(enable, ttl) {
        if (typeof enable !== 'boolean' || ttl !== undefined && (typeof ttl !== 'number' || isNaN(ttl))) {
            throw _Constants2.default.BAD_ARGUMENT_ERROR;
        }
        lastMediaSettingsCachingInfo.enabled = enable;
        if (ttl !== undefined) {
            lastMediaSettingsCachingInfo.ttl = ttl;
        }
    }

    function getLastMediaSettingsCachingInfo() {
        return lastMediaSettingsCachingInfo;
    }

    function setBufferPruningInterval(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        bufferPruningInterval = value;
    }

    function getBufferPruningInterval() {
        return bufferPruningInterval;
    }

    function setRetryAttemptsForType(type, value) {
        if (typeof value !== 'number' || typeof type !== 'string' || type !== _HTTPRequest.HTTPRequest.MPD_TYPE && type !== _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE) {
            throw _Constants2.default.BAD_ARGUMENT_ERROR;
        }
        retryAttempts[type] = value;
    }

    function getRetryAttemptsForType(type) {
        return getLowLatencyEnabled() ? retryAttempts[type] * LOW_LATENCY_MULTIPLY_FACTOR : retryAttempts[type];
    }

    function setRetryIntervalForType(type, value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        retryIntervals[type] = value;
    }

    function getRetryIntervalForType(type) {
        return getLowLatencyEnabled() ? retryIntervals[type] / LOW_LATENCY_REDUCTION_FACTOR : retryIntervals[type];
    }

    function setWallclockTimeUpdateInterval(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        wallclockTimeUpdateInterval = value;
    }

    function getWallclockTimeUpdateInterval() {
        return wallclockTimeUpdateInterval;
    }

    function setScheduleWhilePaused(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        scheduleWhilePaused = value;
    }

    function getScheduleWhilePaused() {
        return scheduleWhilePaused;
    }

    function setLiveDelayFragmentCount(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        liveDelayFragmentCount = value;
    }

    function getLiveDelayFragmentCount() {
        return liveDelayFragmentCount;
    }

    function setLiveDelay(value) {
        if (value !== undefined) {
            // undefined is the default value...
            (0, _SupervisorTools.checkParameterType)(value, 'number');
        }
        liveDelay = value;
    }

    function getLiveDelay() {
        if (lowLatencyEnabled) {
            return liveDelay || DEFAULT_LOW_LATENCY_LIVE_DELAY;
        }
        return liveDelay;
    }

    function setUseManifestDateHeaderTimeSource(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        useManifestDateHeaderTimeSource = value;
    }

    function getUseManifestDateHeaderTimeSource() {
        return useManifestDateHeaderTimeSource;
    }

    function setUseSuggestedPresentationDelay(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        useSuggestedPresentationDelay = value;
    }

    function getUseSuggestedPresentationDelay() {
        return useSuggestedPresentationDelay;
    }

    function addUTCTimingSource(schemeIdUri, value) {
        removeUTCTimingSource(schemeIdUri, value); //check if it already exists and remove if so.
        var vo = new _UTCTiming2.default();
        vo.schemeIdUri = schemeIdUri;
        vo.value = value;
        UTCTimingSources.push(vo);
    }

    function getUTCTimingSources() {
        return UTCTimingSources;
    }

    function removeUTCTimingSource(schemeIdUri, value) {
        (0, _SupervisorTools.checkParameterType)(schemeIdUri, 'string');
        (0, _SupervisorTools.checkParameterType)(value, 'string');
        UTCTimingSources.forEach(function (obj, idx) {
            if (obj.schemeIdUri === schemeIdUri && obj.value === value) {
                UTCTimingSources.splice(idx, 1);
            }
        });
    }

    function clearDefaultUTCTimingSources() {
        UTCTimingSources = [];
    }

    function restoreDefaultUTCTimingSources() {
        addUTCTimingSource(DEFAULT_UTC_TIMING_SOURCE.scheme, DEFAULT_UTC_TIMING_SOURCE.value);
    }

    function setXHRWithCredentialsForType(type, value) {
        if (!type) {
            Object.keys(xhrWithCredentials).forEach(function (key) {
                setXHRWithCredentialsForType(key, value);
            });
        } else {
            xhrWithCredentials[type] = !!value;
        }
    }

    function getXHRWithCredentialsForType(type) {
        var useCreds = xhrWithCredentials[type];

        return useCreds === undefined ? xhrWithCredentials.default : useCreds;
    }

    function getFastSwitchEnabled() {
        return fastSwitchEnabled;
    }

    function setFastSwitchEnabled(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        fastSwitchEnabled = value;
    }

    function setMovingAverageMethod(value) {
        if (value === _Constants2.default.MOVING_AVERAGE_SLIDING_WINDOW || value === _Constants2.default.MOVING_AVERAGE_EWMA) {
            movingAverageMethod = value;
        } else {
            throw _Constants2.default.BAD_ARGUMENT_ERROR;
        }
    }

    function getMovingAverageMethod() {
        return movingAverageMethod;
    }

    function setJumpGaps(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        jumpGaps = value;
    }

    function getJumpGaps() {
        return jumpGaps;
    }

    function setSmallGapLimit(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        smallGapLimit = value;
    }

    function getSmallGapLimit() {
        return smallGapLimit;
    }

    function getLowLatencyEnabled() {
        return lowLatencyEnabled;
    }

    function setLowLatencyEnabled(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        lowLatencyEnabled = value;
    }

    function setCatchUpPlaybackRate(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        (0, _SupervisorTools.checkRange)(value, 0.0, 0.5);

        liveCatchUpPlaybackRate = value;
    }

    function getCatchUpPlaybackRate() {
        return liveCatchUpPlaybackRate;
    }

    function setLowLatencyMinDrift(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        liveCatchUpMinDrift = value;
    }

    function getLowLatencyMinDrift() {
        return liveCatchUpMinDrift;
    }

    function setLowLatencyMaxDriftBeforeSeeking(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        liveCatchUpMaxDrift = value;
    }

    function getLowLatencyMaxDriftBeforeSeeking() {
        return liveCatchUpMaxDrift;
    }

    function setManifestUpdateRetryInterval(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'number');
        manifestUpdateRetryInterval = value;
    }

    function getManifestUpdateRetryInterval() {
        return manifestUpdateRetryInterval;
    }

    function setKeepProtectionMediaKeys(value) {
        (0, _SupervisorTools.checkParameterType)(value, 'boolean');
        keepProtectionMediaKeys = value;
    }

    function getKeepProtectionMediaKeys() {
        return keepProtectionMediaKeys;
    }

    function getDefaultUtcTimingSource() {
        return DEFAULT_UTC_TIMING_SOURCE;
    }

    function setFragmentRequestTimeout(value) {
        fragmentRequestTimeout = value;
    }

    function getFragmentRequestTimeout() {
        return fragmentRequestTimeout;
    }

    function reset() {
        //TODO need to figure out what props to persist across sessions and which to reset if any.
        //setup();
    }

    instance = {
        setABRStrategy: setABRStrategy,
        getABRStrategy: getABRStrategy,
        setUseDefaultABRRules: setUseDefaultABRRules,
        getUseDefaultABRRules: getUseDefaultABRRules,
        getABRCustomRules: getABRCustomRules,
        addABRCustomRule: addABRCustomRule,
        removeABRCustomRule: removeABRCustomRule,
        setBandwidthSafetyFactor: setBandwidthSafetyFactor,
        getBandwidthSafetyFactor: getBandwidthSafetyFactor,
        setAbandonLoadTimeout: setAbandonLoadTimeout,
        getAbandonLoadTimeout: getAbandonLoadTimeout,
        setLastBitrateCachingInfo: setLastBitrateCachingInfo,
        getLastBitrateCachingInfo: getLastBitrateCachingInfo,
        setLastMediaSettingsCachingInfo: setLastMediaSettingsCachingInfo,
        getLastMediaSettingsCachingInfo: getLastMediaSettingsCachingInfo,
        setStableBufferTime: setStableBufferTime,
        getStableBufferTime: getStableBufferTime,
        setBufferTimeAtTopQuality: setBufferTimeAtTopQuality,
        getBufferTimeAtTopQuality: getBufferTimeAtTopQuality,
        setBufferTimeAtTopQualityLongForm: setBufferTimeAtTopQualityLongForm,
        getBufferTimeAtTopQualityLongForm: getBufferTimeAtTopQualityLongForm,
        setLongFormContentDurationThreshold: setLongFormContentDurationThreshold,
        getLongFormContentDurationThreshold: getLongFormContentDurationThreshold,
        setSegmentOverlapToleranceTime: setSegmentOverlapToleranceTime,
        getSegmentOverlapToleranceTime: getSegmentOverlapToleranceTime,
        getCacheLoadThresholdForType: getCacheLoadThresholdForType,
        setCacheLoadThresholdForType: setCacheLoadThresholdForType,
        setBufferToKeep: setBufferToKeep,
        getBufferToKeep: getBufferToKeep,
        setBufferAheadToKeep: setBufferAheadToKeep,
        getBufferAheadToKeep: getBufferAheadToKeep,
        setBufferPruningInterval: setBufferPruningInterval,
        getBufferPruningInterval: getBufferPruningInterval,
        setRetryAttemptsForType: setRetryAttemptsForType,
        getRetryAttemptsForType: getRetryAttemptsForType,
        setRetryIntervalForType: setRetryIntervalForType,
        getRetryIntervalForType: getRetryIntervalForType,
        setWallclockTimeUpdateInterval: setWallclockTimeUpdateInterval,
        getWallclockTimeUpdateInterval: getWallclockTimeUpdateInterval,
        setScheduleWhilePaused: setScheduleWhilePaused,
        getScheduleWhilePaused: getScheduleWhilePaused,
        getUseSuggestedPresentationDelay: getUseSuggestedPresentationDelay,
        setUseSuggestedPresentationDelay: setUseSuggestedPresentationDelay,
        setLiveDelayFragmentCount: setLiveDelayFragmentCount,
        getLiveDelayFragmentCount: getLiveDelayFragmentCount,
        getLiveDelay: getLiveDelay,
        setLiveDelay: setLiveDelay,
        setUseManifestDateHeaderTimeSource: setUseManifestDateHeaderTimeSource,
        getUseManifestDateHeaderTimeSource: getUseManifestDateHeaderTimeSource,
        addUTCTimingSource: addUTCTimingSource,
        removeUTCTimingSource: removeUTCTimingSource,
        getUTCTimingSources: getUTCTimingSources,
        clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,
        restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,
        setXHRWithCredentialsForType: setXHRWithCredentialsForType,
        getXHRWithCredentialsForType: getXHRWithCredentialsForType,
        setFastSwitchEnabled: setFastSwitchEnabled,
        getFastSwitchEnabled: getFastSwitchEnabled,
        setMovingAverageMethod: setMovingAverageMethod,
        getMovingAverageMethod: getMovingAverageMethod,
        setJumpGaps: setJumpGaps,
        getJumpGaps: getJumpGaps,
        setSmallGapLimit: setSmallGapLimit,
        getSmallGapLimit: getSmallGapLimit,
        getLowLatencyEnabled: getLowLatencyEnabled,
        setLowLatencyEnabled: setLowLatencyEnabled,
        setCatchUpPlaybackRate: setCatchUpPlaybackRate,
        getCatchUpPlaybackRate: getCatchUpPlaybackRate,
        setLowLatencyMinDrift: setLowLatencyMinDrift,
        getLowLatencyMinDrift: getLowLatencyMinDrift,
        setLowLatencyMaxDriftBeforeSeeking: setLowLatencyMaxDriftBeforeSeeking,
        getLowLatencyMaxDriftBeforeSeeking: getLowLatencyMaxDriftBeforeSeeking,
        setManifestUpdateRetryInterval: setManifestUpdateRetryInterval,
        getManifestUpdateRetryInterval: getManifestUpdateRetryInterval,
        setKeepProtectionMediaKeys: setKeepProtectionMediaKeys,
        getKeepProtectionMediaKeys: getKeepProtectionMediaKeys,
        getDefaultUtcTimingSource: getDefaultUtcTimingSource,
        setFragmentRequestTimeout: setFragmentRequestTimeout,
        getFragmentRequestTimeout: getFragmentRequestTimeout,
        reset: reset
    };

    setup();

    return instance;
}

//TODO see if you can move this and not export and just getter to get default value.
MediaPlayerModel.__dashjs_factory_name = 'MediaPlayerModel';
exports.default = _FactoryMaker2.default.getSingletonFactory(MediaPlayerModel);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/models/MetricsModel.js":
/*!******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/models/MetricsModel.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _MetricsConstants = __webpack_require__(/*! ../constants/MetricsConstants */ "./node_modules/dashjs/src/streaming/constants/MetricsConstants.js");

var _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);

var _MetricsList = __webpack_require__(/*! ../vo/MetricsList */ "./node_modules/dashjs/src/streaming/vo/MetricsList.js");

var _MetricsList2 = _interopRequireDefault(_MetricsList);

var _HTTPRequest = __webpack_require__(/*! ../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _RepresentationSwitch = __webpack_require__(/*! ../vo/metrics/RepresentationSwitch */ "./node_modules/dashjs/src/streaming/vo/metrics/RepresentationSwitch.js");

var _RepresentationSwitch2 = _interopRequireDefault(_RepresentationSwitch);

var _BufferLevel = __webpack_require__(/*! ../vo/metrics/BufferLevel */ "./node_modules/dashjs/src/streaming/vo/metrics/BufferLevel.js");

var _BufferLevel2 = _interopRequireDefault(_BufferLevel);

var _BufferState = __webpack_require__(/*! ../vo/metrics/BufferState */ "./node_modules/dashjs/src/streaming/vo/metrics/BufferState.js");

var _BufferState2 = _interopRequireDefault(_BufferState);

var _DVRInfo = __webpack_require__(/*! ../vo/metrics/DVRInfo */ "./node_modules/dashjs/src/streaming/vo/metrics/DVRInfo.js");

var _DVRInfo2 = _interopRequireDefault(_DVRInfo);

var _DroppedFrames = __webpack_require__(/*! ../vo/metrics/DroppedFrames */ "./node_modules/dashjs/src/streaming/vo/metrics/DroppedFrames.js");

var _DroppedFrames2 = _interopRequireDefault(_DroppedFrames);

var _ManifestUpdate = __webpack_require__(/*! ../vo/metrics/ManifestUpdate */ "./node_modules/dashjs/src/streaming/vo/metrics/ManifestUpdate.js");

var _SchedulingInfo = __webpack_require__(/*! ../vo/metrics/SchedulingInfo */ "./node_modules/dashjs/src/streaming/vo/metrics/SchedulingInfo.js");

var _SchedulingInfo2 = _interopRequireDefault(_SchedulingInfo);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _RequestsQueue = __webpack_require__(/*! ../vo/metrics/RequestsQueue */ "./node_modules/dashjs/src/streaming/vo/metrics/RequestsQueue.js");

var _RequestsQueue2 = _interopRequireDefault(_RequestsQueue);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function MetricsModel() {

    var MAXIMUM_LIST_DEPTH = 1000;

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        streamMetrics = void 0;

    function setup() {
        streamMetrics = {};
    }

    function metricsChanged() {
        eventBus.trigger(_Events2.default.METRICS_CHANGED);
    }

    function metricChanged(mediaType) {
        eventBus.trigger(_Events2.default.METRIC_CHANGED, { mediaType: mediaType });
        metricsChanged();
    }

    function metricUpdated(mediaType, metricType, vo) {
        eventBus.trigger(_Events2.default.METRIC_UPDATED, { mediaType: mediaType, metric: metricType, value: vo });
        metricChanged(mediaType);
    }

    function metricAdded(mediaType, metricType, vo) {
        eventBus.trigger(_Events2.default.METRIC_ADDED, { mediaType: mediaType, metric: metricType, value: vo });
        metricChanged(mediaType);
    }

    function clearCurrentMetricsForType(type) {
        delete streamMetrics[type];
        metricChanged(type);
    }

    function clearAllCurrentMetrics() {
        streamMetrics = {};
        metricsChanged();
    }

    function getReadOnlyMetricsFor(type) {
        if (streamMetrics.hasOwnProperty(type)) {
            return streamMetrics[type];
        }

        return null;
    }

    function getMetricsFor(type) {
        var metrics = void 0;

        if (streamMetrics.hasOwnProperty(type)) {
            metrics = streamMetrics[type];
        } else {
            metrics = new _MetricsList2.default();
            streamMetrics[type] = metrics;
        }

        return metrics;
    }

    function pushMetrics(type, list, value) {
        var metrics = getMetricsFor(type);
        metrics[list].push(value);
        if (metrics[list].length > MAXIMUM_LIST_DEPTH) {
            metrics[list].shift();
        }
    }

    function appendHttpTrace(httpRequest, s, d, b) {
        var vo = new _HTTPRequest.HTTPRequestTrace();

        vo.s = s;
        vo.d = d;
        vo.b = b;

        httpRequest.trace.push(vo);

        if (!httpRequest.interval) {
            httpRequest.interval = 0;
        }

        httpRequest.interval += d;

        return vo;
    }

    function addHttpRequest(mediaType, tcpid, type, url, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces, quality) {
        var vo = new _HTTPRequest.HTTPRequest();

        // ISO 23009-1 D.4.3 NOTE 2:
        // All entries for a given object will have the same URL and range
        // and so can easily be correlated. If there were redirects or
        // failures there will be one entry for each redirect/failure.
        // The redirect-to URL or alternative url (where multiple have been
        // provided in the MPD) will appear as the actualurl of the next
        // entry with the same url value.
        if (actualurl && actualurl !== url) {

            // given the above, add an entry for the original request
            addHttpRequest(mediaType, null, type, url, null, null, range, trequest, null, // unknown
            null, // unknown
            null, // unknown, probably a 302
            mediaduration, null, null);

            vo.actualurl = actualurl;
        }

        vo.tcpid = tcpid;
        vo.type = type;
        vo.url = url;
        vo.range = range;
        vo.trequest = trequest;
        vo.tresponse = tresponse;
        vo.responsecode = responsecode;
        vo.quality = quality;

        vo._tfinish = tfinish;
        vo._stream = mediaType;
        vo._mediaduration = mediaduration;
        vo._responseHeaders = responseHeaders;
        vo._serviceLocation = serviceLocation;

        if (traces) {
            traces.forEach(function (trace) {
                appendHttpTrace(vo, trace.s, trace.d, trace.b);
            });
        } else {
            // The interval and trace shall be absent for redirect and failure records.
            delete vo.interval;
            delete vo.trace;
        }

        pushAndNotify(mediaType, _MetricsConstants2.default.HTTP_REQUEST, vo);
    }

    function addRepresentationSwitch(mediaType, t, mt, to, lto) {
        var vo = new _RepresentationSwitch2.default();

        vo.t = t;
        vo.mt = mt;
        vo.to = to;

        if (lto) {
            vo.lto = lto;
        } else {
            delete vo.lto;
        }

        pushAndNotify(mediaType, _MetricsConstants2.default.TRACK_SWITCH, vo);
    }

    function pushAndNotify(mediaType, metricType, metricObject) {
        pushMetrics(mediaType, metricType, metricObject);
        metricAdded(mediaType, metricType, metricObject);
    }

    function addBufferLevel(mediaType, t, level) {
        var vo = new _BufferLevel2.default();
        vo.t = t;
        vo.level = level;

        pushAndNotify(mediaType, _MetricsConstants2.default.BUFFER_LEVEL, vo);
    }

    function addBufferState(mediaType, state, target) {
        var vo = new _BufferState2.default();
        vo.target = target;
        vo.state = state;

        pushAndNotify(mediaType, _MetricsConstants2.default.BUFFER_STATE, vo);
    }

    function addDVRInfo(mediaType, currentTime, mpd, range) {
        var vo = new _DVRInfo2.default();
        vo.time = currentTime;
        vo.range = range;
        vo.manifestInfo = mpd;

        pushAndNotify(mediaType, _MetricsConstants2.default.DVR_INFO, vo);
    }

    function addDroppedFrames(mediaType, quality) {
        var vo = new _DroppedFrames2.default();
        var list = getMetricsFor(mediaType).DroppedFrames;

        vo.time = quality.creationTime;
        vo.droppedFrames = quality.droppedVideoFrames;

        if (list.length > 0 && list[list.length - 1] == vo) {
            return;
        }

        pushAndNotify(mediaType, _MetricsConstants2.default.DROPPED_FRAMES, vo);
    }

    function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {
        var vo = new _SchedulingInfo2.default();

        vo.mediaType = mediaType;
        vo.t = t;

        vo.type = type;
        vo.startTime = startTime;
        vo.availabilityStartTime = availabilityStartTime;
        vo.duration = duration;
        vo.quality = quality;
        vo.range = range;

        vo.state = state;

        pushAndNotify(mediaType, _MetricsConstants2.default.SCHEDULING_INFO, vo);
    }

    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {
        var vo = new _RequestsQueue2.default();
        vo.loadingRequests = loadingRequests;
        vo.executedRequests = executedRequests;

        getMetricsFor(mediaType).RequestsQueue = vo;
        metricAdded(mediaType, _MetricsConstants2.default.REQUESTS_QUEUE, vo);
    }

    function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {
        var vo = new _ManifestUpdate.ManifestUpdate();

        vo.mediaType = mediaType;
        vo.type = type;
        vo.requestTime = requestTime; // when this manifest update was requested
        vo.fetchTime = fetchTime; // when this manifest update was received
        vo.availabilityStartTime = availabilityStartTime;
        vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)
        vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time
        vo.currentTime = currentTime; // actual element.currentTime
        vo.buffered = buffered; // actual element.ranges
        vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)

        pushMetrics(_Constants2.default.STREAM, _MetricsConstants2.default.MANIFEST_UPDATE, vo);
        metricAdded(mediaType, _MetricsConstants2.default.MANIFEST_UPDATE, vo);
    }

    function updateManifestUpdateInfo(manifestUpdate, updatedFields) {
        if (manifestUpdate) {
            for (var field in updatedFields) {
                manifestUpdate[field] = updatedFields[field];
            }

            metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE, manifestUpdate);
        }
    }

    function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {
        if (manifestUpdate) {
            var vo = new _ManifestUpdate.ManifestUpdateStreamInfo();

            vo.id = id;
            vo.index = index;
            vo.start = start;
            vo.duration = duration;

            manifestUpdate.streamInfo.push(vo);
            metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);
        }
    }

    function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {
        if (manifestUpdate) {

            var vo = new _ManifestUpdate.ManifestUpdateRepresentationInfo();
            vo.id = id;
            vo.index = index;
            vo.streamIndex = streamIndex;
            vo.mediaType = mediaType;
            vo.startNumber = startNumber;
            vo.fragmentInfoType = fragmentInfoType;
            vo.presentationTimeOffset = presentationTimeOffset;

            manifestUpdate.representationInfo.push(vo);
            metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);
        }
    }

    function addPlayList(vo) {
        var type = _Constants2.default.STREAM;

        if (vo.trace && Array.isArray(vo.trace)) {
            vo.trace.forEach(function (trace) {
                if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {
                    delete trace.subreplevel;
                }
            });
        } else {
            delete vo.trace;
        }

        pushAndNotify(type, _MetricsConstants2.default.PLAY_LIST, vo);
    }

    function addDVBErrors(vo) {
        var type = _Constants2.default.STREAM;

        pushAndNotify(type, _MetricsConstants2.default.DVB_ERRORS, vo);
    }

    instance = {
        clearCurrentMetricsForType: clearCurrentMetricsForType,
        clearAllCurrentMetrics: clearAllCurrentMetrics,
        getReadOnlyMetricsFor: getReadOnlyMetricsFor,
        getMetricsFor: getMetricsFor,
        addHttpRequest: addHttpRequest,
        addRepresentationSwitch: addRepresentationSwitch,
        addBufferLevel: addBufferLevel,
        addBufferState: addBufferState,
        addDVRInfo: addDVRInfo,
        addDroppedFrames: addDroppedFrames,
        addSchedulingInfo: addSchedulingInfo,
        addRequestsQueue: addRequestsQueue,
        addManifestUpdate: addManifestUpdate,
        updateManifestUpdateInfo: updateManifestUpdateInfo,
        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,
        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,
        addPlayList: addPlayList,
        addDVBErrors: addDVBErrors
    };

    setup();
    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


MetricsModel.__dashjs_factory_name = 'MetricsModel';
exports.default = _FactoryMaker2.default.getSingletonFactory(MetricsModel);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/models/URIFragmentModel.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/models/URIFragmentModel.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _URIFragmentData = __webpack_require__(/*! ../vo/URIFragmentData */ "./node_modules/dashjs/src/streaming/vo/URIFragmentData.js");

var _URIFragmentData2 = _interopRequireDefault(_URIFragmentData);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Model class managing URI fragments.
 */
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function URIFragmentModel() {

    var instance = void 0,
        URIFragmentDataVO = void 0;

    /**
     * @param {string} uri The URI to parse for fragment extraction
     * @memberof module:URIFragmentModel
     * @instance
     */
    function initialize(uri) {
        URIFragmentDataVO = new _URIFragmentData2.default();

        if (!uri) return null;

        var hashIndex = uri.indexOf('#');
        if (hashIndex !== -1) {
            var fragments = uri.substr(hashIndex + 1).split('&');
            for (var i = 0, len = fragments.length; i < len; ++i) {
                var fragment = fragments[i];
                var equalIndex = fragment.indexOf('=');
                if (equalIndex !== -1) {
                    var key = fragment.substring(0, equalIndex);
                    if (URIFragmentDataVO.hasOwnProperty(key)) {
                        URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);
                    }
                }
            }
        }
    }

    /**
     * @returns {URIFragmentData} Object containing supported URI fragments
     * @memberof module:URIFragmentModel
     * @instance
     */
    function getURIFragmentData() {
        return URIFragmentDataVO;
    }

    instance = {
        initialize: initialize,
        getURIFragmentData: getURIFragmentData
    };

    return instance;
}

URIFragmentModel.__dashjs_factory_name = 'URIFragmentModel';
exports.default = _FactoryMaker2.default.getSingletonFactory(URIFragmentModel);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/models/VideoModel.js":
/*!****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/models/VideoModel.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function VideoModel() {

    var instance = void 0,
        logger = void 0,
        element = void 0,
        TTMLRenderingDiv = void 0,
        previousPlaybackRate = void 0;

    var VIDEO_MODEL_WRONG_ELEMENT_TYPE = 'element is not video or audio DOM type!';

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var stalledStreams = [];

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function initialize() {
        eventBus.on(_Events2.default.PLAYBACK_PLAYING, onPlaying, this);
    }

    function reset() {
        eventBus.off(_Events2.default.PLAYBACK_PLAYING, onPlaying, this);
    }

    function onPlaybackCanPlay() {
        if (element) {
            element.playbackRate = previousPlaybackRate || 1;
            element.removeEventListener('canplay', onPlaybackCanPlay);
        }
    }

    function setPlaybackRate(value) {
        if (!element) return;
        if (element.readyState <= 2 && value > 0) {
            // If media element hasn't loaded enough data to play yet, wait until it has
            element.addEventListener('canplay', onPlaybackCanPlay);
        } else {
            element.playbackRate = value;
        }
    }

    //TODO Move the DVR window calculations from MediaPlayer to Here.
    function setCurrentTime(currentTime, stickToBuffered) {
        if (element) {
            //_currentTime = currentTime;

            // We don't set the same currentTime because it can cause firing unexpected Pause event in IE11
            // providing playbackRate property equals to zero.
            if (element.currentTime == currentTime) return;

            // TODO Despite the fact that MediaSource 'open' event has been fired IE11 cannot set videoElement.currentTime
            // immediately (it throws InvalidStateError). It seems that this is related to videoElement.readyState property
            // Initially it is 0, but soon after 'open' event it goes to 1 and setting currentTime is allowed. Chrome allows to
            // set currentTime even if readyState = 0.
            // setTimeout is used to workaround InvalidStateError in IE11
            try {
                currentTime = stickToBuffered ? stickTimeToBuffered(currentTime) : currentTime;
                element.currentTime = currentTime;
            } catch (e) {
                if (element.readyState === 0 && e.code === e.INVALID_STATE_ERR) {
                    setTimeout(function () {
                        element.currentTime = currentTime;
                    }, 400);
                }
            }
        }
    }

    function stickTimeToBuffered(time) {
        var buffered = getBufferRange();
        var closestTime = time;
        var closestDistance = 9999999999;
        if (buffered) {
            for (var i = 0; i < buffered.length; i++) {
                var start = buffered.start(i);
                var end = buffered.end(i);
                var distanceToStart = Math.abs(start - time);
                var distanceToEnd = Math.abs(end - time);

                if (time >= start && time <= end) {
                    return time;
                }

                if (distanceToStart < closestDistance) {
                    closestDistance = distanceToStart;
                    closestTime = start;
                }

                if (distanceToEnd < closestDistance) {
                    closestDistance = distanceToEnd;
                    closestTime = end;
                }
            }
        }
        return closestTime;
    }

    function getElement() {
        return element;
    }

    function setElement(value) {
        //add check of value type
        if (value === null || value === undefined || value && /^(VIDEO|AUDIO)$/i.test(value.nodeName)) {
            element = value;
            // Workaround to force Firefox to fire the canplay event.
            if (element) {
                element.preload = 'auto';
            }
        } else {
            throw VIDEO_MODEL_WRONG_ELEMENT_TYPE;
        }
    }

    function setSource(source) {
        if (element) {
            if (source) {
                element.src = source;
            } else {
                element.removeAttribute('src');
                element.load();
            }
        }
    }

    function getSource() {
        return element ? element.src : null;
    }

    function getTTMLRenderingDiv() {
        return TTMLRenderingDiv;
    }

    function setTTMLRenderingDiv(div) {
        TTMLRenderingDiv = div;
        // The styling will allow the captions to match the video window size and position.
        TTMLRenderingDiv.style.position = 'absolute';
        TTMLRenderingDiv.style.display = 'flex';
        TTMLRenderingDiv.style.overflow = 'hidden';
        TTMLRenderingDiv.style.pointerEvents = 'none';
        TTMLRenderingDiv.style.top = 0;
        TTMLRenderingDiv.style.left = 0;
    }

    function setStallState(type, state) {
        stallStream(type, state);
    }

    function isStalled() {
        return stalledStreams.length > 0;
    }

    function addStalledStream(type) {
        var event = void 0;

        if (type === null || element.seeking || stalledStreams.indexOf(type) !== -1) {
            return;
        }

        stalledStreams.push(type);
        if (element && stalledStreams.length === 1) {
            // Halt playback until nothing is stalled.
            event = document.createEvent('Event');
            event.initEvent('waiting', true, false);
            previousPlaybackRate = element.playbackRate;
            setPlaybackRate(0);
            element.dispatchEvent(event);
        }
    }

    function removeStalledStream(type) {
        var index = stalledStreams.indexOf(type);
        var event = void 0;

        if (type === null) {
            return;
        }
        if (index !== -1) {
            stalledStreams.splice(index, 1);
        }
        // If nothing is stalled resume playback.
        if (element && isStalled() === false && element.playbackRate === 0) {
            setPlaybackRate(previousPlaybackRate || 1);
            if (!element.paused) {
                event = document.createEvent('Event');
                event.initEvent('playing', true, false);
                element.dispatchEvent(event);
            }
        }
    }

    function stallStream(type, isStalled) {
        if (isStalled) {
            addStalledStream(type);
        } else {
            removeStalledStream(type);
        }
    }

    //Calling play on the element will emit playing - even if the stream is stalled. If the stream is stalled, emit a waiting event.
    function onPlaying() {
        if (element && isStalled() && element.playbackRate === 0) {
            var event = document.createEvent('Event');
            event.initEvent('waiting', true, false);
            element.dispatchEvent(event);
        }
    }

    function getPlaybackQuality() {
        if (!element) {
            return null;
        }
        var hasWebKit = 'webkitDroppedFrameCount' in element && 'webkitDecodedFrameCount' in element;
        var hasQuality = 'getVideoPlaybackQuality' in element;
        var result = null;

        if (hasQuality) {
            result = element.getVideoPlaybackQuality();
        } else if (hasWebKit) {
            result = {
                droppedVideoFrames: element.webkitDroppedFrameCount,
                totalVideoFrames: element.webkitDroppedFrameCount + element.webkitDecodedFrameCount,
                creationTime: new Date()
            };
        }

        return result;
    }

    function play() {
        if (element) {
            element.autoplay = true;
            var p = element.play();
            if (p && p.catch && typeof Promise !== 'undefined') {
                p.catch(function (e) {
                    if (e.name === 'NotAllowedError') {
                        eventBus.trigger(_Events2.default.PLAYBACK_NOT_ALLOWED);
                    }
                    logger.warn('Caught pending play exception - continuing (' + e + ')');
                });
            }
        }
    }

    function isPaused() {
        return element ? element.paused : null;
    }

    function pause() {
        if (element) {
            element.pause();
            element.autoplay = false;
        }
    }

    function isSeeking() {
        return element ? element.seeking : null;
    }

    function getTime() {
        return element ? element.currentTime : null;
    }

    function getPlaybackRate() {
        return element ? element.playbackRate : null;
    }

    function getPlayedRanges() {
        return element ? element.played : null;
    }

    function getEnded() {
        return element ? element.ended : null;
    }

    function addEventListener(eventName, eventCallBack) {
        if (element) {
            element.addEventListener(eventName, eventCallBack);
        }
    }

    function removeEventListener(eventName, eventCallBack) {
        if (element) {
            element.removeEventListener(eventName, eventCallBack);
        }
    }

    function getReadyState() {
        return element ? element.readyState : NaN;
    }

    function getBufferRange() {
        return element ? element.buffered : null;
    }

    function getClientWidth() {
        return element ? element.clientWidth : NaN;
    }

    function getClientHeight() {
        return element ? element.clientHeight : NaN;
    }

    function getVideoWidth() {
        return element ? element.videoWidth : NaN;
    }

    function getVideoHeight() {
        return element ? element.videoHeight : NaN;
    }

    function getVideoRelativeOffsetTop() {
        return element && element.parentNode ? element.getBoundingClientRect().top - element.parentNode.getBoundingClientRect().top : NaN;
    }

    function getVideoRelativeOffsetLeft() {
        return element && element.parentNode ? element.getBoundingClientRect().left - element.parentNode.getBoundingClientRect().left : NaN;
    }

    function getTextTracks() {
        return element ? element.textTracks : [];
    }

    function getTextTrack(kind, label, lang, isTTML, isEmbedded) {
        if (element) {
            for (var i = 0; i < element.textTracks.length; i++) {
                //label parameter could be a number (due to adaptationSet), but label, the attribute of textTrack, is a string => to modify...
                //label could also be undefined (due to adaptationSet)
                if (element.textTracks[i].kind === kind && (label ? element.textTracks[i].label == label : true) && element.textTracks[i].language === lang && element.textTracks[i].isTTML === isTTML && element.textTracks[i].isEmbedded === isEmbedded) {
                    return element.textTracks[i];
                }
            }
        }

        return null;
    }

    function addTextTrack(kind, label, lang) {
        if (element) {
            return element.addTextTrack(kind, label, lang);
        }
        return null;
    }

    function appendChild(childElement) {
        if (element) {
            element.appendChild(childElement);
            //in Chrome, we need to differenciate textTrack with same lang, kind and label but different format (vtt, ttml, etc...)
            if (childElement.isTTML !== undefined) {
                element.textTracks[element.textTracks.length - 1].isTTML = childElement.isTTML;
                element.textTracks[element.textTracks.length - 1].isEmbedded = childElement.isEmbedded;
            }
        }
    }

    function removeChild(childElement) {
        if (element) {
            element.removeChild(childElement);
        }
    }

    instance = {
        initialize: initialize,
        setCurrentTime: setCurrentTime,
        play: play,
        isPaused: isPaused,
        pause: pause,
        isSeeking: isSeeking,
        getTime: getTime,
        getPlaybackRate: getPlaybackRate,
        setPlaybackRate: setPlaybackRate,
        getPlayedRanges: getPlayedRanges,
        getEnded: getEnded,
        setStallState: setStallState,
        getElement: getElement,
        setElement: setElement,
        setSource: setSource,
        getSource: getSource,
        getTTMLRenderingDiv: getTTMLRenderingDiv,
        setTTMLRenderingDiv: setTTMLRenderingDiv,
        getPlaybackQuality: getPlaybackQuality,
        addEventListener: addEventListener,
        removeEventListener: removeEventListener,
        getReadyState: getReadyState,
        getBufferRange: getBufferRange,
        getClientWidth: getClientWidth,
        getClientHeight: getClientHeight,
        getTextTracks: getTextTracks,
        getTextTrack: getTextTrack,
        addTextTrack: addTextTrack,
        appendChild: appendChild,
        removeChild: removeChild,
        getVideoWidth: getVideoWidth,
        getVideoHeight: getVideoHeight,
        getVideoRelativeOffsetTop: getVideoRelativeOffsetTop,
        getVideoRelativeOffsetLeft: getVideoRelativeOffsetLeft,
        reset: reset
    };

    setup();

    return instance;
}

VideoModel.__dashjs_factory_name = 'VideoModel';
exports.default = _FactoryMaker2.default.getSingletonFactory(VideoModel);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/net/FetchLoader.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/net/FetchLoader.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @module FetchLoader
* @description Manages download of resources via HTTP using fetch.
* @param {Object} cfg - dependencies from parent
*/
function FetchLoader(cfg) {

    cfg = cfg || {};
    var requestModifier = cfg.requestModifier;
    var boxParser = cfg.boxParser;

    var instance = void 0;

    function load(httpRequest) {

        // Variables will be used in the callback functions
        var requestStartTime = new Date();
        var request = httpRequest.request;

        var headers = new Headers(); /*jshint ignore:line*/
        if (request.range) {
            headers.append('Range', 'bytes=' + request.range);
        }

        if (!request.requestStartDate) {
            request.requestStartDate = requestStartTime;
        }

        if (requestModifier) {
            // modifyRequestHeader expects a XMLHttpRequest object so,
            // to keep backward compatibility, we should expose a setRequestHeader method
            // TODO: Remove RequestModifier dependency on XMLHttpRequest object and define
            // a more generic way to intercept/modify requests
            requestModifier.modifyRequestHeader({
                setRequestHeader: function setRequestHeader(header, value) {
                    headers.append(header, value);
                }
            });
        }

        var abortController = void 0;
        if (typeof window.AbortController === 'function') {
            abortController = new AbortController(); /*jshint ignore:line*/
            httpRequest.abortController = abortController;
        }

        var reqOptions = {
            method: httpRequest.method,
            headers: headers,
            credentials: httpRequest.withCredentials ? 'include' : undefined,
            signal: abortController ? abortController.signal : undefined
        };

        fetch(httpRequest.url, reqOptions).then(function (response) {
            if (!httpRequest.response) {
                httpRequest.response = {};
            }
            httpRequest.response.status = response.status;
            httpRequest.response.statusText = response.statusText;
            httpRequest.response.responseURL = response.url;

            if (!response.ok) {
                httpRequest.onerror();
            }

            var responseHeaders = '';
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = response.headers.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    responseHeaders += key + ': ' + response.headers.get(key) + '\n';
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            httpRequest.response.responseHeaders = responseHeaders;

            if (!response.body) {
                // Fetch returning a ReadableStream response body is not currently supported by all browsers.
                // Browser compatibility: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
                // If it is not supported, returning the whole segment when it's ready (as xhr)
                return response.arrayBuffer().then(function (buffer) {
                    httpRequest.response.response = buffer;
                    var event = {
                        loaded: buffer.byteLength,
                        total: buffer.byteLength,
                        stream: false
                    };
                    httpRequest.progress(event);
                    httpRequest.onload();
                    httpRequest.onend();
                    return;
                });
            }

            var totalBytes = parseInt(response.headers.get('Content-Length'), 10);
            var bytesReceived = 0;
            var signaledFirstByte = false;
            var remaining = new Uint8Array();
            var offset = 0;

            httpRequest.reader = response.body.getReader();
            var downLoadedData = [];

            var processResult = function processResult(_ref) {
                var value = _ref.value,
                    done = _ref.done;

                if (done) {
                    if (remaining) {
                        // If there is pending data, call progress so network metrics
                        // are correctly generated
                        // Same structure as https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress
                        httpRequest.progress({
                            loaded: bytesReceived,
                            total: isNaN(totalBytes) ? bytesReceived : totalBytes,
                            lengthComputable: true,
                            time: calculateDownloadedTime(downLoadedData, bytesReceived),
                            stream: true
                        });

                        httpRequest.response.response = remaining.buffer;
                    }
                    httpRequest.onload();
                    httpRequest.onend();
                    return;
                }

                if (value && value.length > 0) {
                    remaining = concatTypedArray(remaining, value);
                    bytesReceived += value.length;
                    downLoadedData.push({
                        ts: Date.now(),
                        bytes: value.length
                    });

                    var boxesInfo = boxParser.findLastTopIsoBoxCompleted(['moov', 'mdat'], remaining, offset);
                    if (boxesInfo.found) {
                        var end = boxesInfo.lastCompletedOffset + boxesInfo.size;

                        // If we are going to pass full buffer, avoid copying it and pass
                        // complete buffer. Otherwise clone the part of the buffer that is completed
                        // and adjust remaining buffer. A clone is needed because ArrayBuffer of a typed-array
                        // keeps a reference to the original data
                        var data = void 0;
                        if (end === remaining.length) {
                            data = remaining;
                            remaining = new Uint8Array();
                        } else {
                            data = new Uint8Array(remaining.subarray(0, end));
                            remaining = remaining.subarray(end);
                        }

                        // Announce progress but don't track traces. Throughput measures are quite unstable
                        // when they are based in small amount of data
                        httpRequest.progress({
                            data: data.buffer,
                            lengthComputable: false,
                            noTrace: true
                        });

                        offset = 0;
                    } else {
                        offset = boxesInfo.lastCompletedOffset;

                        // Call progress so it generates traces that will be later used to know when the first byte
                        // were received
                        if (!signaledFirstByte) {
                            httpRequest.progress({
                                lengthComputable: false,
                                noTrace: true
                            });
                            signaledFirstByte = true;
                        }
                    }
                }
                read(httpRequest, processResult);
            };

            read(httpRequest, processResult);
        }).catch(function (e) {
            if (httpRequest.onerror) {
                httpRequest.onerror(e);
            }
        });
    }

    function read(httpRequest, processResult) {
        httpRequest.reader.read().then(processResult).catch(function (e) {
            if (httpRequest.onerror && httpRequest.response.status === 200) {
                // Error, but response code is 200, trigger error
                httpRequest.onerror(e);
            }
        });
    }

    function concatTypedArray(remaining, data) {
        if (remaining.length === 0) {
            return data;
        }
        var result = new Uint8Array(remaining.length + data.length);
        result.set(remaining);
        result.set(data, remaining.length);
        return result;
    }

    function abort(request) {
        if (request.abortController) {
            // For firefox and edge
            request.abortController.abort();
        } else if (request.reader) {
            // For Chrome
            try {
                request.reader.cancel();
            } catch (e) {
                // throw exceptions (TypeError) when reader was previously closed,
                // for example, because a network issue
            }
        }
    }

    function calculateDownloadedTime(datum, bytesReceived) {
        datum = datum.filter(function (data) {
            return data.bytes > bytesReceived / 4 / datum.length;
        });
        if (datum.length > 1) {
            var time = 0;
            var avgTimeDistance = (datum[datum.length - 1].ts - datum[0].ts) / datum.length;
            datum.forEach(function (data, index) {
                // To be counted the data has to be over a threshold
                var next = datum[index + 1];
                if (next) {
                    var distance = next.ts - data.ts;
                    time += distance < avgTimeDistance ? distance : 0;
                }
            });
            return time;
        }
        return null;
    }

    instance = {
        load: load,
        abort: abort,
        calculateDownloadedTime: calculateDownloadedTime
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

FetchLoader.__dashjs_factory_name = 'FetchLoader';

var factory = _FactoryMaker2.default.getClassFactory(FetchLoader);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/net/HTTPLoader.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/net/HTTPLoader.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _XHRLoader = __webpack_require__(/*! ./XHRLoader */ "./node_modules/dashjs/src/streaming/net/XHRLoader.js");

var _XHRLoader2 = _interopRequireDefault(_XHRLoader);

var _FetchLoader = __webpack_require__(/*! ./FetchLoader */ "./node_modules/dashjs/src/streaming/net/FetchLoader.js");

var _FetchLoader2 = _interopRequireDefault(_FetchLoader);

var _HTTPRequest = __webpack_require__(/*! ../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Errors = __webpack_require__(/*! ../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _DashJSError = __webpack_require__(/*! ../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                   * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                   * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                   * All rights reserved.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                   * are permitted provided that the following conditions are met:
                                                                                                                                                                                                                   *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                   *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                   *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                   *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                   *  other materials provided with the distribution.
                                                                                                                                                                                                                   *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                   *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                   *  without specific prior written permission.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                                                                                   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                                                                                   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                                                                                   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                                                                                   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                                                                                   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                                                                                   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                                                                                   *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                   */


/**
 * @module HTTPLoader
 * @description Manages download of resources via HTTP.
 * @param {Object} cfg - dependancies from parent
 */
function HTTPLoader(cfg) {

    cfg = cfg || {};

    var context = this.context;
    var errHandler = cfg.errHandler;
    var metricsModel = cfg.metricsModel;
    var mediaPlayerModel = cfg.mediaPlayerModel;
    var requestModifier = cfg.requestModifier;
    var boxParser = cfg.boxParser;
    var useFetch = cfg.useFetch || false;
    var requestTimeout = cfg.requestTimeout || 0;

    var logger = void 0,
        instance = void 0,
        requests = void 0,
        delayedRequests = void 0,
        retryRequests = void 0,
        downloadErrorToRequestTypeMap = void 0,
        newDownloadErrorToRequestTypeMap = void 0;

    function setup() {
        var _downloadErrorToReque, _newDownloadErrorToRe;

        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        requests = [];
        delayedRequests = [];
        retryRequests = [];

        downloadErrorToRequestTypeMap = (_downloadErrorToReque = {}, _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.MPD_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_MANIFEST), _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_XLINK), _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_INITIALIZATION), _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_CONTENT), _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_CONTENT), _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_CONTENT), _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.OTHER_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_CONTENT), _downloadErrorToReque);

        newDownloadErrorToRequestTypeMap = (_newDownloadErrorToRe = {}, _defineProperty(_newDownloadErrorToRe, _HTTPRequest.HTTPRequest.MPD_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_MANIFEST_CODE), _defineProperty(_newDownloadErrorToRe, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_XLINK_CODE), _defineProperty(_newDownloadErrorToRe, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE), _defineProperty(_newDownloadErrorToRe, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_CONTENT_CODE), _defineProperty(_newDownloadErrorToRe, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_CONTENT_CODE), _defineProperty(_newDownloadErrorToRe, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_CONTENT_CODE), _defineProperty(_newDownloadErrorToRe, _HTTPRequest.HTTPRequest.OTHER_TYPE, _Errors2.default.DOWNLOAD_ERROR_ID_CONTENT_CODE), _newDownloadErrorToRe);
    }

    function scheduleRetry(config, remainingAttempts, request) {
        var retryRequest = { config: config };
        retryRequests.push(retryRequest);
        retryRequest.timeout = setTimeout(function () {
            if (retryRequests.indexOf(retryRequest) === -1) {
                return;
            } else {
                retryRequests.splice(retryRequests.indexOf(retryRequest), 1);
            }
            internalLoad(config, remainingAttempts);
        }, mediaPlayerModel.getRetryIntervalForType(request.type));
    }

    function internalLoad(config, remainingAttempts) {
        var request = config.request;
        var traces = [];
        var firstProgress = true;
        var needFailureReport = true;
        var requestStartTime = new Date();
        var lastTraceTime = requestStartTime;
        var lastTraceReceivedCount = 0;
        var httpRequest = void 0;

        if (!requestModifier || !metricsModel || !errHandler) {
            throw new Error('config object is not correct or missing');
        }

        var handleLoaded = function handleLoaded(success) {
            needFailureReport = false;

            request.requestStartDate = requestStartTime;
            request.requestEndDate = new Date();
            request.firstByteDate = request.firstByteDate || requestStartTime;

            if (!request.checkExistenceOnly) {
                metricsModel.addHttpRequest(request.mediaType, null, request.type, request.url, httpRequest.response ? httpRequest.response.responseURL : null, request.serviceLocation || null, request.range || null, request.requestStartDate, request.firstByteDate, request.requestEndDate, httpRequest.response ? httpRequest.response.status : null, request.duration, httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() : httpRequest.response ? httpRequest.response.responseHeaders : [], success ? traces : null, request.quality);

                if (request.type === _HTTPRequest.HTTPRequest.MPD_TYPE) {
                    metricsModel.addManifestUpdate('stream', request.type, request.requestStartDate, request.requestEndDate);
                }
            }
        };

        var onloadend = function onloadend() {
            if (requests.indexOf(httpRequest) === -1) {
                return;
            } else {
                requests.splice(requests.indexOf(httpRequest), 1);
            }

            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299 && httpRequest.response.response) {
                if (hasContentLengthMismatch(httpRequest.response)) {
                    handleLoaded(false);
                    if (remainingAttempts > 0) {
                        remainingAttempts--;
                        scheduleRetry(config, remainingAttempts, request);
                    } else {
                        errHandler.error(new _DashJSError2.default(_Errors2.default.DOWNLOAD_CONTENT_LENGTH_MISMATCH, request.url + ' has a content-length header that does not match its data length', { request: request, response: httpRequest.response }));
                    }
                } else {
                    handleLoaded(true);

                    if (config.success) {
                        config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);
                    }

                    if (config.complete) {
                        config.complete(request, httpRequest.response.statusText);
                    }
                }
            } else if (needFailureReport) {
                handleLoaded(false);

                if (remainingAttempts > 0) {
                    remainingAttempts--;
                    scheduleRetry(config, remainingAttempts, request);
                } else {
                    errHandler.downloadError(downloadErrorToRequestTypeMap[request.type], request.url, request);

                    errHandler.error(new _DashJSError2.default(newDownloadErrorToRequestTypeMap[request.type], request.url + ' is not available', { request: request, response: httpRequest.response }));

                    if (config.error) {
                        config.error(request, 'error', httpRequest.response.statusText);
                    }

                    if (config.complete) {
                        config.complete(request, httpRequest.response.statusText);
                    }
                }
            }
        };

        var progress = function progress(event) {
            var currentTime = new Date();

            if (firstProgress) {
                firstProgress = false;
                if (!event.lengthComputable || event.lengthComputable && event.total !== event.loaded) {
                    request.firstByteDate = currentTime;
                }
            }

            if (event.lengthComputable) {
                request.bytesLoaded = event.loaded;
                request.bytesTotal = event.total;
            }

            if (!event.noTrace) {
                traces.push({
                    s: lastTraceTime,
                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),
                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]
                });

                lastTraceTime = currentTime;
                lastTraceReceivedCount = event.loaded;
            }

            if (config.progress && event) {
                config.progress(event);
            }
        };

        var onload = function onload() {};

        var onabort = function onabort() {
            if (config.abort) {
                config.abort(request);
            }
        };

        var ontimeout = function ontimeout(event) {
            var timeoutMessage = void 0;
            if (event.lengthComputable) {
                var percentageComplete = event.loaded / event.total * 100;
                timeoutMessage = 'Request timeout: loaded: ' + event.loaded + ', out of: ' + event.total + ' : ' + percentageComplete.toFixed(3) + '% Completed';
            } else {
                timeoutMessage = 'Request timeout: non-computable download size';
            }
            logger.warn(timeoutMessage);
        };

        var loader = void 0;
        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE) {
            loader = (0, _FetchLoader2.default)(context).create({
                requestModifier: requestModifier,
                boxParser: boxParser
            });
        } else {
            loader = (0, _XHRLoader2.default)(context).create({
                requestModifier: requestModifier,
                boxParser: boxParser
            });
        }

        var modifiedUrl = requestModifier.modifyRequestURL(request.url);
        var verb = request.checkExistenceOnly ? _HTTPRequest.HTTPRequest.HEAD : _HTTPRequest.HTTPRequest.GET;
        var withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);

        httpRequest = {
            url: modifiedUrl,
            method: verb,
            withCredentials: withCredentials,
            request: request,
            onload: onload,
            onend: onloadend,
            onerror: onloadend,
            progress: progress,
            onabort: onabort,
            ontimeout: ontimeout,
            loader: loader,
            timeout: requestTimeout
        };

        // Adds the ability to delay single fragment loading time to control buffer.
        var now = new Date().getTime();
        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {
            // no delay - just send
            requests.push(httpRequest);
            loader.load(httpRequest);
        } else {
            // delay
            var delayedRequest = { httpRequest: httpRequest };
            delayedRequests.push(delayedRequest);
            delayedRequest.delayTimeout = setTimeout(function () {
                if (delayedRequests.indexOf(delayedRequest) === -1) {
                    return;
                } else {
                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);
                }
                try {
                    requestStartTime = new Date();
                    lastTraceTime = requestStartTime;
                    requests.push(delayedRequest.httpRequest);
                    loader.load(delayedRequest.httpRequest);
                } catch (e) {
                    delayedRequest.httpRequest.onerror();
                }
            }, request.delayLoadingTime - now);
        }
    }

    function hasContentLengthMismatch(response) {
        if (response && response.responseType === 'arraybuffer' && response.getResponseHeader) {
            var headerLength = response.getResponseHeader('content-length');
            var dataLength = response.response.byteLength;

            if (headerLength && dataLength && Math.abs(dataLength - headerLength) > headerLength * 0.25) {
                logger.warn('Content length doesn\'t match header\'s declared content-length at ' + response.responseURL + ' header: ' + headerLength + '; data: ' + dataLength);
                return true;
            }
        }

        return false;
    }

    /**
     * Initiates a download of the resource described by config.request
     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks
     * @memberof module:HTTPLoader
     * @instance
     */
    function load(config) {
        if (config.request) {
            internalLoad(config, mediaPlayerModel.getRetryAttemptsForType(config.request.type));
        }
    }

    /**
     * Aborts any inflight downloads
     * @memberof module:HTTPLoader
     * @instance
     */
    function abort() {
        retryRequests.forEach(function (t) {
            clearTimeout(t.timeout);
            // abort request in order to trigger LOADING_ABANDONED event
            if (t.config.request && t.config.abort) {
                t.config.abort(t.config.request);
            }
        });
        retryRequests = [];

        delayedRequests.forEach(function (x) {
            return clearTimeout(x.delayTimeout);
        });
        delayedRequests = [];

        requests.forEach(function (x) {
            // abort will trigger onloadend which we don't want
            // when deliberately aborting inflight requests -
            // set them to undefined so they are not called
            x.onloadend = x.onerror = x.onprogress = undefined;
            x.loader.abort(x);
            x.onabort();
        });
        requests = [];
    }

    instance = {
        load: load,
        abort: abort
    };

    setup();

    return instance;
}

HTTPLoader.__dashjs_factory_name = 'HTTPLoader';

var factory = _FactoryMaker2.default.getClassFactory(HTTPLoader);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/net/XHRLoader.js":
/*!************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/net/XHRLoader.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module XHRLoader
 * @description Manages download of resources via HTTP.
 * @param {Object} cfg - dependencies from parent
 */
function XHRLoader(cfg) {

    cfg = cfg || {};
    var requestModifier = cfg.requestModifier;

    var instance = void 0;

    function load(httpRequest) {

        // Variables will be used in the callback functions
        var requestStartTime = new Date();
        var request = httpRequest.request;

        var xhr = new XMLHttpRequest();
        xhr.open(httpRequest.method, httpRequest.url, true);

        if (request.responseType) {
            xhr.responseType = request.responseType;
        }

        if (request.range) {
            xhr.setRequestHeader('Range', 'bytes=' + request.range);
        }

        if (!request.requestStartDate) {
            request.requestStartDate = requestStartTime;
        }

        if (requestModifier) {
            xhr = requestModifier.modifyRequestHeader(xhr);
        }

        xhr.withCredentials = httpRequest.withCredentials;

        xhr.onload = httpRequest.onload;
        xhr.onloadend = httpRequest.onend;
        xhr.onerror = httpRequest.onerror;
        xhr.onprogress = httpRequest.progress;
        xhr.onabort = httpRequest.onabort;
        xhr.ontimeout = httpRequest.ontimeout;
        xhr.timeout = httpRequest.timeout;

        xhr.send();

        httpRequest.response = xhr;
    }

    function abort(request) {
        var x = request.response;
        x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.
        x.abort();
    }

    instance = {
        load: load,
        abort: abort
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


XHRLoader.__dashjs_factory_name = 'XHRLoader';

var factory = _FactoryMaker2.default.getClassFactory(XHRLoader);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/CommonEncryption.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/CommonEncryption.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

var CommonEncryption = function () {
    function CommonEncryption() {
        _classCallCheck(this, CommonEncryption);
    }

    _createClass(CommonEncryption, null, [{
        key: 'findCencContentProtection',

        /**
         * Find and return the ContentProtection element in the given array
         * that indicates support for MPEG Common Encryption
         *
         * @param {Array} cpArray array of content protection elements
         * @returns {Object|null} the Common Encryption content protection element or
         * null if one was not found
         */
        value: function findCencContentProtection(cpArray) {
            var retVal = null;
            for (var i = 0; i < cpArray.length; ++i) {
                var cp = cpArray[i];
                if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' && cp.value.toLowerCase() === 'cenc') retVal = cp;
            }
            return retVal;
        }

        /**
         * Returns just the data portion of a single PSSH
         *
         * @param {ArrayBuffer} pssh - the PSSH
         * @return {ArrayBuffer} data portion of the PSSH
         */

    }, {
        key: 'getPSSHData',
        value: function getPSSHData(pssh) {
            var offset = 8; // Box size and type fields
            var view = new DataView(pssh);

            // Read version
            var version = view.getUint8(offset);

            offset += 20; // Version (1), flags (3), system ID (16)

            if (version > 0) {
                offset += 4 + 16 * view.getUint32(offset); // Key ID count (4) and All key IDs (16*count)
            }

            offset += 4; // Data size
            return pssh.slice(offset);
        }

        /**
         * Returns the PSSH associated with the given key system from the concatenated
         * list of PSSH boxes in the given initData
         *
         * @param {KeySystem} keySystem the desired
         * key system
         * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.
         * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found
         * or null if a valid association could not be found.
         */

    }, {
        key: 'getPSSHForKeySystem',
        value: function getPSSHForKeySystem(keySystem, initData) {
            var psshList = CommonEncryption.parsePSSHList(initData);
            if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {
                return psshList[keySystem.uuid.toLowerCase()];
            }
            return null;
        }

        /**
         * Parse a standard common encryption PSSH which contains a simple
         * base64-encoding of the init data
         *
         * @param {Object} cpData the ContentProtection element
         * @param {BASE64} BASE64 reference
         * @returns {ArrayBuffer|null} the init data or null if not found
         */

    }, {
        key: 'parseInitDataFromContentProtection',
        value: function parseInitDataFromContentProtection(cpData, BASE64) {
            if ('pssh' in cpData) {
                return BASE64.decodeArray(cpData.pssh.__text).buffer;
            }
            return null;
        }

        /**
         * Parses list of PSSH boxes into keysystem-specific PSSH data
         *
         * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by
         * CDM as initialization data when CommonEncryption content is detected
         * @returns {Object|Array} an object that has a property named according to each of
         * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)
         * and a ArrayBuffer (the entire PSSH box) as the property value
         */

    }, {
        key: 'parsePSSHList',
        value: function parsePSSHList(data) {

            if (data === null) return [];

            var dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support
            var done = false;
            var pssh = {};

            // TODO: Need to check every data read for end of buffer
            var byteCursor = 0;
            while (!done) {

                var size = void 0,
                    nextBox = void 0,
                    version = void 0,
                    systemID = void 0,
                    psshDataSize = void 0;
                var boxStart = byteCursor;

                if (byteCursor >= dv.buffer.byteLength) break;

                /* Box size */
                size = dv.getUint32(byteCursor);
                nextBox = byteCursor + size;
                byteCursor += 4;

                /* Verify PSSH */
                if (dv.getUint32(byteCursor) !== 0x70737368) {
                    byteCursor = nextBox;
                    continue;
                }
                byteCursor += 4;

                /* Version must be 0 or 1 */
                version = dv.getUint8(byteCursor);
                if (version !== 0 && version !== 1) {
                    byteCursor = nextBox;
                    continue;
                }
                byteCursor++;

                byteCursor += 3; /* skip flags */

                // 16-byte UUID/SystemID
                systemID = '';
                var i = void 0,
                    val = void 0;
                for (i = 0; i < 4; i++) {
                    val = dv.getUint8(byteCursor + i).toString(16);
                    systemID += val.length === 1 ? '0' + val : val;
                }
                byteCursor += 4;
                systemID += '-';
                for (i = 0; i < 2; i++) {
                    val = dv.getUint8(byteCursor + i).toString(16);
                    systemID += val.length === 1 ? '0' + val : val;
                }
                byteCursor += 2;
                systemID += '-';
                for (i = 0; i < 2; i++) {
                    val = dv.getUint8(byteCursor + i).toString(16);
                    systemID += val.length === 1 ? '0' + val : val;
                }
                byteCursor += 2;
                systemID += '-';
                for (i = 0; i < 2; i++) {
                    val = dv.getUint8(byteCursor + i).toString(16);
                    systemID += val.length === 1 ? '0' + val : val;
                }
                byteCursor += 2;
                systemID += '-';
                for (i = 0; i < 6; i++) {
                    val = dv.getUint8(byteCursor + i).toString(16);
                    systemID += val.length === 1 ? '0' + val : val;
                }
                byteCursor += 6;

                systemID = systemID.toLowerCase();

                /* PSSH Data Size */
                psshDataSize = dv.getUint32(byteCursor);
                byteCursor += 4;

                /* PSSH Data */
                pssh[systemID] = dv.buffer.slice(boxStart, nextBox);
                byteCursor = nextBox;
            }

            return pssh;
        }
    }]);

    return CommonEncryption;
}();

exports.default = CommonEncryption;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/Protection.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/Protection.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ProtectionController = __webpack_require__(/*! ./controllers/ProtectionController */ "./node_modules/dashjs/src/streaming/protection/controllers/ProtectionController.js");

var _ProtectionController2 = _interopRequireDefault(_ProtectionController);

var _ProtectionKeyController = __webpack_require__(/*! ./controllers/ProtectionKeyController */ "./node_modules/dashjs/src/streaming/protection/controllers/ProtectionKeyController.js");

var _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController);

var _ProtectionEvents = __webpack_require__(/*! ./ProtectionEvents */ "./node_modules/dashjs/src/streaming/protection/ProtectionEvents.js");

var _ProtectionEvents2 = _interopRequireDefault(_ProtectionEvents);

var _ProtectionErrors = __webpack_require__(/*! ./errors/ProtectionErrors */ "./node_modules/dashjs/src/streaming/protection/errors/ProtectionErrors.js");

var _ProtectionErrors2 = _interopRequireDefault(_ProtectionErrors);

var _ProtectionModel_21Jan = __webpack_require__(/*! ./models/ProtectionModel_21Jan2015 */ "./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_21Jan2015.js");

var _ProtectionModel_21Jan2 = _interopRequireDefault(_ProtectionModel_21Jan);

var _ProtectionModel_3Feb = __webpack_require__(/*! ./models/ProtectionModel_3Feb2014 */ "./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_3Feb2014.js");

var _ProtectionModel_3Feb2 = _interopRequireDefault(_ProtectionModel_3Feb);

var _ProtectionModel_01b = __webpack_require__(/*! ./models/ProtectionModel_01b */ "./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_01b.js");

var _ProtectionModel_01b2 = _interopRequireDefault(_ProtectionModel_01b);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var APIS_ProtectionModel_01b = [
// Un-prefixed as per spec
{
    // Video Element
    generateKeyRequest: 'generateKeyRequest',
    addKey: 'addKey',
    cancelKeyRequest: 'cancelKeyRequest',

    // Events
    needkey: 'needkey',
    keyerror: 'keyerror',
    keyadded: 'keyadded',
    keymessage: 'keymessage'
},
// Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)
{
    // Video Element
    generateKeyRequest: 'webkitGenerateKeyRequest',
    addKey: 'webkitAddKey',
    cancelKeyRequest: 'webkitCancelKeyRequest',

    // Events
    needkey: 'webkitneedkey',
    keyerror: 'webkitkeyerror',
    keyadded: 'webkitkeyadded',
    keymessage: 'webkitkeymessage'
}]; /**
     * The copyright in this software is being made available under the BSD License,
     * included below. This software may be subject to other third party and contributor
     * rights, including patent rights, and no such rights are granted under this license.
     *
     * Copyright (c) 2013, Dash Industry Forum.
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification,
     * are permitted provided that the following conditions are met:
     *  * Redistributions of source code must retain the above copyright notice, this
     *  list of conditions and the following disclaimer.
     *  * Redistributions in binary form must reproduce the above copyright notice,
     *  this list of conditions and the following disclaimer in the documentation and/or
     *  other materials provided with the distribution.
     *  * Neither the name of Dash Industry Forum nor the names of its
     *  contributors may be used to endorse or promote products derived from this software
     *  without specific prior written permission.
     *
     *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
     *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     *  POSSIBILITY OF SUCH DAMAGE.
     */


var APIS_ProtectionModel_3Feb2014 = [
// Un-prefixed as per spec
// Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions
{
    // Video Element
    setMediaKeys: 'setMediaKeys',
    // MediaKeys
    MediaKeys: 'MediaKeys',
    // MediaKeySession
    release: 'close',

    // Events
    needkey: 'needkey',
    error: 'keyerror',
    message: 'keymessage',
    ready: 'keyadded',
    close: 'keyclose'
},
// MS-prefixed (IE11, Windows 8.1)
{
    // Video Element
    setMediaKeys: 'msSetMediaKeys',
    // MediaKeys
    MediaKeys: 'MSMediaKeys',
    // MediaKeySession
    release: 'close',
    // Events
    needkey: 'msneedkey',
    error: 'mskeyerror',
    message: 'mskeymessage',
    ready: 'mskeyadded',
    close: 'mskeyclose'
}];

function Protection() {
    var instance = void 0;
    var context = this.context;

    /**
     * Create a ProtectionController and associated ProtectionModel for use with
     * a single piece of content.
     *
     * @param {Object} config
     * @return {ProtectionController} protection controller
     *
     */
    function createProtectionSystem(config) {
        var controller = null;

        var protectionKeyController = (0, _ProtectionKeyController2.default)(context).getInstance();
        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });
        protectionKeyController.initialize();

        var protectionModel = getProtectionModel(config);

        if (!controller && protectionModel) {
            //TODO add ability to set external controller if still needed at all?
            controller = (0, _ProtectionController2.default)(context).create({
                protectionModel: protectionModel,
                protectionKeyController: protectionKeyController,
                eventBus: config.eventBus,
                debug: config.debug,
                events: config.events,
                BASE64: config.BASE64,
                constants: config.constants
            });
            config.capabilities.setEncryptedMediaSupported(true);
        }
        return controller;
    }

    function getProtectionModel(config) {
        var debug = config.debug;
        var logger = debug.getLogger(instance);
        var eventBus = config.eventBus;
        var errHandler = config.errHandler;
        var videoElement = config.videoModel ? config.videoModel.getElement() : null;

        if ((!videoElement || videoElement.onencrypted !== undefined) && (!videoElement || videoElement.mediaKeys !== undefined)) {
            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');
            return (0, _ProtectionModel_21Jan2.default)(context).create({ debug: debug, eventBus: eventBus, events: config.events });
        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {
            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');
            return (0, _ProtectionModel_3Feb2.default)(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });
        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {
            logger.info('EME detected on this user agent! (ProtectionModel_01b)');
            return (0, _ProtectionModel_01b2.default)(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });
        } else {
            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');
            return null;
        }
    }

    function getAPI(videoElement, apis) {
        for (var i = 0; i < apis.length; i++) {
            var api = apis[i];
            // detect if api is supported by browser
            // check only first function in api -> should be fine
            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {
                continue;
            }

            return api;
        }

        return null;
    }

    instance = {
        createProtectionSystem: createProtectionSystem
    };

    return instance;
}

Protection.__dashjs_factory_name = 'Protection';
var factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */
factory.events = _ProtectionEvents2.default;
factory.errors = _ProtectionErrors2.default;
dashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/ProtectionEvents.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/ProtectionEvents.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _EventsBase2 = __webpack_require__(/*! ../../core/events/EventsBase */ "./node_modules/dashjs/src/core/events/EventsBase.js");

var _EventsBase3 = _interopRequireDefault(_EventsBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * @class
 *
 */
var ProtectionEvents = function (_EventsBase) {
  _inherits(ProtectionEvents, _EventsBase);

  /**
   * @description Public facing external events to be used when including protection package.
   * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed
   * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.
   */
  function ProtectionEvents() {
    _classCallCheck(this, ProtectionEvents);

    /**
     * Event ID for events delivered when the protection set receives
     * a key message from the CDM
     *
     * @ignore
     */
    var _this = _possibleConstructorReturn(this, (ProtectionEvents.__proto__ || Object.getPrototypeOf(ProtectionEvents)).call(this));

    _this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';

    /**
     * Event ID for events delivered when a key system selection procedure
     * completes
     * @ignore
     */
    _this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';

    /**
     * Event ID for events delivered when the status of one decryption keys has changed
     * @ignore
     */
    _this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';

    /**
     * Event ID for events delivered when a new key has been added
     *
     * @constant
     * @deprecated The latest versions of the EME specification no longer
     * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}
     * is preferred.
     * @event ProtectionEvents#KEY_ADDED
     */
    _this.KEY_ADDED = 'public_keyAdded';
    /**
     * Event ID for events delivered when an error is encountered by the CDM
     * while processing a license server response message
     * @event ProtectionEvents#KEY_ERROR
     */
    _this.KEY_ERROR = 'public_keyError';

    /**
     * Event ID for events delivered when the protection set receives
     * a key message from the CDM
     * @event ProtectionEvents#KEY_MESSAGE
     */
    _this.KEY_MESSAGE = 'public_keyMessage';

    /**
     * Event ID for events delivered when a key session close
     * process has completed
     * @event ProtectionEvents#KEY_SESSION_CLOSED
     */
    _this.KEY_SESSION_CLOSED = 'public_keySessionClosed';

    /**
     * Event ID for events delivered when a new key sessions creation
     * process has completed
     * @event ProtectionEvents#KEY_SESSION_CREATED
     */
    _this.KEY_SESSION_CREATED = 'public_keySessionCreated';

    /**
     * Event ID for events delivered when a key session removal
     * process has completed
     * @event ProtectionEvents#KEY_SESSION_REMOVED
     */
    _this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';

    /**
     * Event ID for events delivered when the status of one or more
     * decryption keys has changed
     * @event ProtectionEvents#KEY_STATUSES_CHANGED
     */
    _this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';

    /**
     * Event ID for events delivered when a key system access procedure
     * has completed
     * @ignore
     */
    _this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';

    /**
     * Event ID for events delivered when a key system selection procedure
     * completes
     * @event ProtectionEvents#KEY_SYSTEM_SELECTED
     */
    _this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';

    /**
     * Event ID for events delivered when a license request procedure
     * has completed
     * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE
     */
    _this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';

    /**
     * Event ID for needkey/encrypted events
     * @ignore
     */
    _this.NEED_KEY = 'needkey';

    /**
     * Event ID for events delivered when the Protection system is detected and created.
     * @event ProtectionEvents#PROTECTION_CREATED
     */
    _this.PROTECTION_CREATED = 'public_protectioncreated';

    /**
     * Event ID for events delivered when the Protection system is destroyed.
     * @event ProtectionEvents#PROTECTION_DESTROYED
     */
    _this.PROTECTION_DESTROYED = 'public_protectiondestroyed';

    /**
     * Event ID for events delivered when a new server certificate has
     * been delivered to the CDM
     * @ignore
     */
    _this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';

    /**
     * Event ID for events delivered when the process of shutting down
     * a protection set has completed
     * @ignore
     */
    _this.TEARDOWN_COMPLETE = 'protectionTeardownComplete';

    /**
     * Event ID for events delivered when a HTMLMediaElement has been
     * associated with the protection set
     * @ignore
     */
    _this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';
    return _this;
  }

  return ProtectionEvents;
}(_EventsBase3.default);

var protectionEvents = new ProtectionEvents();
exports.default = protectionEvents;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/controllers/ProtectionController.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/controllers/ProtectionController.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                               * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                               * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                               * All rights reserved.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                               * are permitted provided that the following conditions are met:
                                                                                                                                                                                                                                                                               *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                               *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                                                                               *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                               *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                               *  other materials provided with the distribution.
                                                                                                                                                                                                                                                                               *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                               *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                               *  without specific prior written permission.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                                                                                                                                               *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                                                                                                                                               *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                                                                                                                                               *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                                                                               *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                                                                                                                                               *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                                                                                                                                               *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                                                                                                                                               *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                                                                               *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                                                                                                                                               *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                                                                               */

var _CommonEncryption = __webpack_require__(/*! ../CommonEncryption */ "./node_modules/dashjs/src/streaming/protection/CommonEncryption.js");

var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);

var _MediaCapability = __webpack_require__(/*! ../vo/MediaCapability */ "./node_modules/dashjs/src/streaming/protection/vo/MediaCapability.js");

var _MediaCapability2 = _interopRequireDefault(_MediaCapability);

var _KeySystemConfiguration = __webpack_require__(/*! ../vo/KeySystemConfiguration */ "./node_modules/dashjs/src/streaming/protection/vo/KeySystemConfiguration.js");

var _KeySystemConfiguration2 = _interopRequireDefault(_KeySystemConfiguration);

var _ProtectionErrors = __webpack_require__(/*! ../errors/ProtectionErrors */ "./node_modules/dashjs/src/streaming/protection/errors/ProtectionErrors.js");

var _ProtectionErrors2 = _interopRequireDefault(_ProtectionErrors);

var _DashJSError = __webpack_require__(/*! ../../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;
var NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;

var LICENSE_SERVER_REQUEST_RETRIES = 3;
var LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;
var LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;

/**
 * @module ProtectionController
 * @description Provides access to media protection information and functionality.  Each
 * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}
 * which encapsulates a set of protection information (EME APIs, selected key system,
 * key sessions).  The APIs of ProtectionController mostly align with the latest EME
 * APIs.  Key system selection is mostly automated when combined with app-overrideable
 * functionality provided in {@link ProtectionKeyController}.
 * @todo ProtectionController does almost all of its tasks automatically after init() is
 * called.  Applications might want more control over this process and want to go through
 * each step manually (key system selection, session creation, session maintenance).
 * @param {Object} config
 */

function ProtectionController(config) {

    config = config || {};
    var protectionKeyController = config.protectionKeyController;
    var protectionModel = config.protectionModel;
    var eventBus = config.eventBus;
    var events = config.events;
    var debug = config.debug;
    var BASE64 = config.BASE64;
    var constants = config.constants;
    var needkeyRetries = [];

    var instance = void 0,
        logger = void 0,
        pendingNeedKeyData = void 0,
        mediaInfoArr = void 0,
        protDataSet = void 0,
        sessionType = void 0,
        audioRobustness = void 0,
        videoRobustness = void 0,
        keySystem = void 0;

    function setup() {
        logger = debug.getLogger(instance);
        pendingNeedKeyData = [];
        mediaInfoArr = [];
        sessionType = 'temporary';
        audioRobustness = '';
        videoRobustness = '';
    }

    function checkConfig() {
        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {
            throw new Error('Missing config parameter(s)');
        }
    }

    /**
     * Initialize this protection system with a given audio
     * or video stream information.
     *
     * @param {StreamInfo} [mediaInfo] Media information
     * @memberof module:ProtectionController
     * @instance
     * @todo This API will change when we have better support for allowing applications
     * to select different adaptation sets for playback.  Right now it is clunky for
     * applications to create {@link StreamInfo} with the right information,
     */
    function initializeForMedia(mediaInfo) {
        // Not checking here if a session for similar KS/KID combination is already created
        // because still don't know which keysystem will be selected.
        // Once Keysystem is selected and before creating the session, we will do that check
        // so we create the strictly necessary DRM sessions
        if (!mediaInfo) {
            throw new Error('mediaInfo can not be null or undefined');
        }

        checkConfig();

        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);
        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);

        mediaInfoArr.push(mediaInfo);

        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio
        // and video will be the same.  Just use one valid MediaInfo object
        var supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);
        if (supportedKS && supportedKS.length > 0) {
            selectKeySystem(supportedKS, true);
        }
    }

    /**
     * Returns a set of supported key systems and CENC initialization data
     * from the given array of ContentProtection elements.  Only
     * key systems that are supported by this player will be returned.
     * Key systems are returned in priority order (highest first).
     *
     * @param {Array.<Object>} cps - array of content protection elements parsed
     * from the manifest
     * @returns {Array.<Object>} array of objects indicating which supported key
     * systems were found.  Empty array is returned if no
     * supported key systems were found
     * @memberof module:ProtectionKeyController
     * @instance
     */
    function getSupportedKeySystemsFromContentProtection(cps) {
        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);
    }

    /**
     * Create a new key session associated with the given initialization data from
     * the MPD or from the PSSH box in the media
     *
     * @param {ArrayBuffer} initData the initialization data
     * @param {Uint8Array} cdmData the custom data to provide to licenser
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#KeySessionCreated
     * @todo In older versions of the EME spec, there was a one-to-one relationship between
     * initialization data and key sessions.  That is no longer true in the latest APIs.  This
     * API will need to modified (and a new "generateRequest(keySession, initData)" API created)
     * to come up to speed with the latest EME standard
     */
    function createKeySession(initData, cdmData) {
        var initDataForKS = _CommonEncryption2.default.getPSSHForKeySystem(keySystem, initData);
        var protData = getProtData(keySystem);
        if (initDataForKS) {

            // Check for duplicate initData
            var currentInitData = protectionModel.getAllInitData();
            for (var i = 0; i < currentInitData.length; i++) {
                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {
                    logger.warn('DRM: Ignoring initData because we have already seen it!');
                    return;
                }
            }
            try {
                if (protData.sessionId) {
                    setSessionType('persistent-license');
                    protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData, protData.sessionId);
                } else {
                    protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);
                }
                if (protData.audioRobustness) {
                    audioRobustness = protData.audioRobustness;
                }
                if (protData.videoRobustness) {
                    videoRobustness = protData.videoRobustness;
                }
            } catch (error) {
                eventBus.trigger(events.KEY_SESSION_CREATED, { data: null, error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_CODE, _ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message) });
            }
        } else if (initData) {
            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);
        } else {
            eventBus.trigger(events.KEY_SESSION_CREATED, { data: null, error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_CODE, _ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!') });
        }
    }

    /**
     * Loads a key session with the given session ID from persistent storage.  This
     * essentially creates a new key session
     *
     * @param {string} sessionID
     * @param {string} initData
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#KeySessionCreated
     */
    function loadKeySession(sessionID, initData) {
        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));
    }

    /**
     * Removes the given key session from persistent storage and closes the session
     * as if {@link ProtectionController#closeKeySession}
     * was called
     *
     * @param {SessionToken} sessionToken the session
     * token
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#KeySessionRemoved
     * @fires ProtectionController#KeySessionClosed
     */
    function removeKeySession(sessionToken) {
        protectionModel.removeKeySession(sessionToken);
    }

    /**
     * Closes the key session and releases all associated decryption keys.  These
     * keys will no longer be available for decrypting media
     *
     * @param {SessionToken} sessionToken the session
     * token
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#KeySessionClosed
     */
    function closeKeySession(sessionToken) {
        protectionModel.closeKeySession(sessionToken);
    }

    /**
     * Sets a server certificate for use by the CDM when signing key messages
     * intended for a particular license server.  This will fire
     * an error event if a key system has not yet been selected.
     *
     * @param {ArrayBuffer} serverCertificate a CDM-specific license server
     * certificate
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#ServerCertificateUpdated
     */
    function setServerCertificate(serverCertificate) {
        protectionModel.setServerCertificate(serverCertificate);
    }

    /**
     * Associate this protection system with the given HTMLMediaElement.  This
     * causes the system to register for needkey/encrypted events from the given
     * element and provides a destination for setting of MediaKeys
     *
     * @param {HTMLMediaElement} element the media element to which the protection
     * system should be associated
     * @memberof module:ProtectionController
     * @instance
     */
    function setMediaElement(element) {
        if (element) {
            protectionModel.setMediaElement(element);
            eventBus.on(events.NEED_KEY, onNeedKey, this);
        } else if (element === null) {
            protectionModel.setMediaElement(element);
            eventBus.off(events.NEED_KEY, onNeedKey, this);
        }
    }

    /**
     * Sets the session type to use when creating key sessions.  Either "temporary" or
     * "persistent-license".  Default is "temporary".
     *
     * @param {string} value the session type
     * @memberof module:ProtectionController
     * @instance
     */
    function setSessionType(value) {
        sessionType = value;
    }

    /**
     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.
     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.
     *
     * @param {string} level the robustness level
     * @memberof module:ProtectionController
     * @instance
     */
    function setRobustnessLevel(level) {
        audioRobustness = level;
        videoRobustness = level;
    }

    /**
     * Attach KeySystem-specific data to use for license acquisition with EME
     *
     * @param {Object} data an object containing property names corresponding to
     * key system name strings (e.g. "org.w3.clearkey") and associated values
     * being instances of {@link ProtectionData}
     * @memberof module:ProtectionController
     * @instance
     */
    function setProtectionData(data) {
        protDataSet = data;
        protectionKeyController.setProtectionData(data);
    }

    /**
     * Stop method is called when current playback is stopped/resetted.
     *
     * @memberof module:ProtectionController
     * @instance
     */
    function stop() {
        if (protectionModel) {
            protectionModel.stop();
        }
    }

    /**
     * Destroys all protection data associated with this protection set.  This includes
     * deleting all key sessions. In the case of persistent key sessions, the sessions
     * will simply be unloaded and not deleted.  Additionally, if this protection set is
     * associated with a HTMLMediaElement, it will be detached from that element.
     *
     * @memberof module:ProtectionController
     * @instance
     */
    function reset() {

        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);
        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);

        setMediaElement(null);

        keySystem = undefined; //TODO-Refactor look at why undefined is needed for this. refactor

        if (protectionModel) {
            protectionModel.reset();
            protectionModel = null;
        }

        needkeyRetries.forEach(function (retryTimeout) {
            return clearTimeout(retryTimeout);
        });
        needkeyRetries = [];

        mediaInfoArr = [];
    }

    ///////////////
    // Private
    ///////////////

    function getProtData(keySystem) {
        var protData = null;
        if (keySystem) {
            var keySystemString = keySystem.systemString;

            if (protDataSet) {
                protData = keySystemString in protDataSet ? protDataSet[keySystemString] : null;
            }
        }
        return protData;
    }

    function getKeySystemConfiguration(keySystem) {
        var protData = getProtData(keySystem);
        var audioCapabilities = [];
        var videoCapabilities = [];
        var audioRobustness = protData && protData.audioRobustness && protData.audioRobustness.length > 0 ? protData.audioRobustness : audioRobustness;
        var videoRobustness = protData && protData.videoRobustness && protData.videoRobustness.length > 0 ? protData.videoRobustness : videoRobustness;
        var ksSessionType = getSessionType(keySystem);
        var distinctiveIdentifier = protData && protData.distinctiveIdentifier ? protData.distinctiveIdentifier : 'optional';
        var persistentState = protData && protData.persistentState ? protData.persistentState : ksSessionType === 'temporary' ? 'optional' : 'required';

        mediaInfoArr.forEach(function (media) {
            if (media.type === constants.AUDIO) {
                audioCapabilities.push(new _MediaCapability2.default(media.codec, audioRobustness));
            } else if (media.type === constants.VIDEO) {
                videoCapabilities.push(new _MediaCapability2.default(media.codec, videoRobustness));
            }
        });

        return new _KeySystemConfiguration2.default(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, [ksSessionType]);
    }

    function getSessionType(keySystem) {
        var protData = getProtData(keySystem);
        var ksSessionType = protData && protData.sessionType ? protData.sessionType : sessionType;
        return ksSessionType;
    }

    function selectKeySystem(supportedKS, fromManifest) {
        var self = this;
        var requestedKeySystems = [];

        var ksIdx = void 0;
        if (keySystem) {
            // We have a key system
            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {
                if (keySystem === supportedKS[ksIdx].ks) {
                    var _ret = function () {

                        requestedKeySystems.push({ ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)] });

                        // Ensure that we would be granted key system access using the key
                        // system and codec information
                        var onKeySystemAccessComplete = function onKeySystemAccessComplete(event) {
                            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                            if (event.error) {
                                if (!fromManifest) {
                                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, _ProtectionErrors2.default.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });
                                }
                            } else {
                                logger.info('DRM: KeySystem Access Granted');
                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: event.data });
                                if (supportedKS[ksIdx].sessionStarted && supportedKS[ksIdx].sessionId) {
                                    // Load MediaKeySession with sessionId
                                    loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);
                                } else if (supportedKS[ksIdx].initData) {
                                    // Create new MediaKeySession with initData
                                    createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);
                                    supportedKS[ksIdx].sessionStarted = true;
                                }
                            }
                        };
                        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                        protectionModel.requestKeySystemAccess(requestedKeySystems);
                        return 'break';
                    }();

                    if (_ret === 'break') break;
                }
            }
        } else if (keySystem === undefined) {
            // First time through, so we need to select a key system
            keySystem = null;
            pendingNeedKeyData.push(supportedKS);

            // Add all key systems to our request list since we have yet to select a key system
            for (var i = 0; i < supportedKS.length; i++) {
                requestedKeySystems.push({ ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)] });
            }

            var keySystemAccess = void 0;
            var onKeySystemAccessComplete = function onKeySystemAccessComplete(event) {
                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                if (event.error) {
                    keySystem = undefined;
                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);
                    if (!fromManifest) {
                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: null, error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, _ProtectionErrors2.default.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });
                    }
                } else {
                    keySystemAccess = event.data;
                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');
                    protectionModel.selectKeySystem(keySystemAccess);
                }
            };
            var onKeySystemSelected = function onKeySystemSelected(event) {
                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);
                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
                if (!event.error) {
                    if (!protectionModel) {
                        return;
                    }
                    keySystem = protectionModel.getKeySystem();
                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });
                    // Set server certificate from protData
                    var protData = getProtData(keySystem);
                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {
                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);
                    }
                    for (var _i = 0; _i < pendingNeedKeyData.length; _i++) {
                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[_i].length; ksIdx++) {
                            if (keySystem === pendingNeedKeyData[_i][ksIdx].ks) {
                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating
                                // initData and overwrite possible initData indicated in encrypted event (EME)
                                if (protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty('clearkeys')) {
                                    var initData = { kids: Object.keys(protData.clearkeys) };
                                    pendingNeedKeyData[_i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));
                                }
                                if (pendingNeedKeyData[_i][ksIdx].sessionStarted && pendingNeedKeyData[_i][ksIdx].sessionId) {
                                    // Load MediaKeySession with sessionId
                                    loadKeySession(pendingNeedKeyData[_i][ksIdx].sessionId, pendingNeedKeyData[_i][ksIdx].initData);
                                } else if (pendingNeedKeyData[_i][ksIdx].initData !== null) {
                                    // Create new MediaKeySession with initData
                                    createKeySession(pendingNeedKeyData[_i][ksIdx].initData, pendingNeedKeyData[_i][ksIdx].cdmData);
                                    pendingNeedKeyData[_i][ksIdx].sessionStarted = true;
                                }
                                break;
                            }
                        }
                    }
                } else {
                    keySystem = undefined;
                    if (!fromManifest) {
                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: null, error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, _ProtectionErrors2.default.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error) });
                    }
                }
            };
            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);
            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);
            protectionModel.requestKeySystemAccess(requestedKeySystems);
        } else {
            // We are in the process of selecting a key system, so just save the data
            pendingNeedKeyData.push(supportedKS);
        }
    }

    function sendLicenseRequestCompleteEvent(data, error) {
        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });
    }

    function onKeyStatusChanged(e) {
        if (e.error) {
            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });
        } else {
            logger.debug('DRM: key status = ' + e.status);
        }
    }

    function onKeyMessage(e) {
        logger.debug('DRM: onKeyMessage');

        // Dispatch event to applications indicating we received a key message
        var keyMessage = e.data;
        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });
        var messageType = keyMessage.messageType ? keyMessage.messageType : 'license-request';
        var message = keyMessage.message;
        var sessionToken = keyMessage.sessionToken;
        var protData = getProtData(keySystem);
        var keySystemString = keySystem ? keySystem.systemString : null;
        var licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);
        var eventData = { sessionToken: sessionToken, messageType: messageType };

        // Ensure message from CDM is not empty
        if (!message || message.byteLength === 0) {
            sendLicenseRequestCompleteEvent(eventData, new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, _ProtectionErrors2.default.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));
            return;
        }

        // Message not destined for license server
        if (!licenseServerData) {
            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());
            sendLicenseRequestCompleteEvent(eventData);
            return;
        }

        // Perform any special handling for ClearKey
        if (protectionKeyController.isClearKey(keySystem)) {
            var clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);
            if (clearkeys) {
                logger.debug('DRM: ClearKey license request handled by application!');
                sendLicenseRequestCompleteEvent(eventData);
                protectionModel.updateKeySession(sessionToken, clearkeys);
                return;
            }
        }

        // All remaining key system scenarios require a request to a remote license server
        // Determine license server URL
        var url = null;
        if (protData && protData.serverURL) {
            var serverURL = protData.serverURL;
            if (typeof serverURL === 'string' && serverURL !== '') {
                url = serverURL;
            } else if ((typeof serverURL === 'undefined' ? 'undefined' : _typeof(serverURL)) === 'object' && serverURL.hasOwnProperty(messageType)) {
                url = serverURL[messageType];
            }
        } else if (protData && protData.laURL && protData.laURL !== '') {
            // TODO: Deprecated!
            url = protData.laURL;
        } else {
            url = keySystem.getLicenseServerURLFromInitData(_CommonEncryption2.default.getPSSHData(sessionToken.initData));
            if (!url) {
                url = e.data.laURL;
            }
        }
        // Possibly update or override the URL based on the message
        url = licenseServerData.getServerURLFromMessage(url, message, messageType);

        // Ensure valid license server URL
        if (!url) {
            sendLicenseRequestCompleteEvent(eventData, new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, _ProtectionErrors2.default.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));
            return;
        }

        // Set optional XMLHttpRequest headers from protection data and message
        var reqHeaders = {};
        var withCredentials = false;
        var updateHeaders = function updateHeaders(headers) {
            if (headers) {
                for (var key in headers) {
                    if ('authorization' === key.toLowerCase()) {
                        withCredentials = true;
                    }
                    reqHeaders[key] = headers[key];
                }
            }
        };
        if (protData) {
            updateHeaders(protData.httpRequestHeaders);
        }
        updateHeaders(keySystem.getRequestHeadersFromMessage(message));

        // Overwrite withCredentials property from protData if present
        if (protData && typeof protData.withCredentials == 'boolean') {
            withCredentials = protData.withCredentials;
        }

        var reportError = function reportError(xhr, eventData, keySystemString, messageType) {
            var errorMsg = xhr.response ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE';
            sendLicenseRequestCompleteEvent(eventData, new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE, _ProtectionErrors2.default.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is "' + xhr.statusText + '" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));
        };

        var onLoad = function onLoad(xhr) {
            if (!protectionModel) {
                return;
            }

            if (xhr.status === 200) {
                var licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);
                if (licenseMessage !== null) {
                    sendLicenseRequestCompleteEvent(eventData);
                    protectionModel.updateKeySession(sessionToken, licenseMessage);
                } else {
                    reportError(xhr, eventData, keySystemString, messageType);
                }
            } else {
                reportError(xhr, eventData, keySystemString, messageType);
            }
        };

        var onAbort = function onAbort(xhr) {
            sendLicenseRequestCompleteEvent(eventData, new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE, _ProtectionErrors2.default.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is "' + xhr.statusText + '" (' + xhr.status + '), readyState is ' + xhr.readyState));
        };

        var onError = function onError(xhr) {
            sendLicenseRequestCompleteEvent(eventData, new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE, _ProtectionErrors2.default.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is "' + xhr.statusText + '" (' + xhr.status + '), readyState is ' + xhr.readyState));
        };

        var reqPayload = keySystem.getLicenseRequestFromMessage(message);
        var reqMethod = licenseServerData.getHTTPMethod(messageType);
        var responseType = licenseServerData.getResponseType(keySystemString, messageType);
        var timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;

        doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload, LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);
    }

    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience
    function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError) {
        var xhr = new XMLHttpRequest();

        xhr.open(method, url, true);
        xhr.responseType = responseType;
        xhr.withCredentials = withCredentials;
        if (timeout > 0) {
            xhr.timeout = timeout;
        }
        for (var key in headers) {
            xhr.setRequestHeader(key, headers[key]);
        }

        var retryRequest = function retryRequest() {
            // fail silently and retry
            retriesCount--;
            setTimeout(function () {
                doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError);
            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);
        };

        xhr.onload = function () {
            if (this.status === 200 || retriesCount <= 0) {
                onLoad(this);
            } else {
                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);
                retryRequest();
            }
        };

        xhr.ontimeout = xhr.onerror = function () {
            if (retriesCount <= 0) {
                onError(this);
            } else {
                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);
                retryRequest();
            }
        };

        xhr.onabort = function () {
            onAbort(this);
        };

        xhr.send(payload);
    }

    function onNeedKey(event, retry) {
        logger.debug('DRM: onNeedKey');
        // Ignore non-cenc initData
        if (event.key.initDataType !== 'cenc') {
            logger.warn('DRM:  Only \'cenc\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);
            return;
        }

        if (mediaInfoArr.length === 0) {
            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');
            retry = typeof retry === 'undefined' ? 1 : retry + 1;
            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {
                needkeyRetries.push(setTimeout(function () {
                    onNeedKey(event, retry);
                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));
                return;
            }
        }

        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).
        // Convert to ArrayBuffer
        var abInitData = event.key.initData;
        if (ArrayBuffer.isView(abInitData)) {
            abInitData = abInitData.buffer;
        }

        // If key system has already been selected and initData already seen, then do nothing
        if (keySystem) {
            var initDataForKS = _CommonEncryption2.default.getPSSHForKeySystem(keySystem, abInitData);
            if (initDataForKS) {

                // Check for duplicate initData
                var currentInitData = protectionModel.getAllInitData();
                for (var i = 0; i < currentInitData.length; i++) {
                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {
                        logger.warn('DRM: Ignoring initData because we have already seen it!');
                        return;
                    }
                }
            }
        }

        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));

        var supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);
        if (supportedKS.length === 0) {
            logger.debug('DRM: Received needkey event with initData, but we don\'t support any of the key systems!');
            return;
        }

        selectKeySystem(supportedKS, false);
    }

    function getKeySystems() {
        return protectionKeyController ? protectionKeyController.getKeySystems() : [];
    }

    instance = {
        initializeForMedia: initializeForMedia,
        createKeySession: createKeySession,
        loadKeySession: loadKeySession,
        removeKeySession: removeKeySession,
        closeKeySession: closeKeySession,
        setServerCertificate: setServerCertificate,
        setMediaElement: setMediaElement,
        setSessionType: setSessionType,
        setRobustnessLevel: setRobustnessLevel,
        setProtectionData: setProtectionData,
        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,
        getKeySystems: getKeySystems,
        stop: stop,
        reset: reset
    };

    setup();
    return instance;
}

ProtectionController.__dashjs_factory_name = 'ProtectionController';
exports.default = dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/controllers/ProtectionKeyController.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/controllers/ProtectionKeyController.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _CommonEncryption = __webpack_require__(/*! ./../CommonEncryption */ "./node_modules/dashjs/src/streaming/protection/CommonEncryption.js");

var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);

var _KeySystemClearKey = __webpack_require__(/*! ./../drm/KeySystemClearKey */ "./node_modules/dashjs/src/streaming/protection/drm/KeySystemClearKey.js");

var _KeySystemClearKey2 = _interopRequireDefault(_KeySystemClearKey);

var _KeySystemW3CClearKey = __webpack_require__(/*! ./../drm/KeySystemW3CClearKey */ "./node_modules/dashjs/src/streaming/protection/drm/KeySystemW3CClearKey.js");

var _KeySystemW3CClearKey2 = _interopRequireDefault(_KeySystemW3CClearKey);

var _KeySystemWidevine = __webpack_require__(/*! ./../drm/KeySystemWidevine */ "./node_modules/dashjs/src/streaming/protection/drm/KeySystemWidevine.js");

var _KeySystemWidevine2 = _interopRequireDefault(_KeySystemWidevine);

var _KeySystemPlayReady = __webpack_require__(/*! ./../drm/KeySystemPlayReady */ "./node_modules/dashjs/src/streaming/protection/drm/KeySystemPlayReady.js");

var _KeySystemPlayReady2 = _interopRequireDefault(_KeySystemPlayReady);

var _DRMToday = __webpack_require__(/*! ./../servers/DRMToday */ "./node_modules/dashjs/src/streaming/protection/servers/DRMToday.js");

var _DRMToday2 = _interopRequireDefault(_DRMToday);

var _PlayReady = __webpack_require__(/*! ./../servers/PlayReady */ "./node_modules/dashjs/src/streaming/protection/servers/PlayReady.js");

var _PlayReady2 = _interopRequireDefault(_PlayReady);

var _Widevine = __webpack_require__(/*! ./../servers/Widevine */ "./node_modules/dashjs/src/streaming/protection/servers/Widevine.js");

var _Widevine2 = _interopRequireDefault(_Widevine);

var _ClearKey = __webpack_require__(/*! ./../servers/ClearKey */ "./node_modules/dashjs/src/streaming/protection/servers/ClearKey.js");

var _ClearKey2 = _interopRequireDefault(_ClearKey);

var _ProtectionConstants = __webpack_require__(/*! ../../constants/ProtectionConstants */ "./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js");

var _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module ProtectionKeyController
 * @description Media protection key system functionality that can be modified/overridden by applications
 */
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function ProtectionKeyController() {

    var context = this.context;

    var instance = void 0,
        debug = void 0,
        logger = void 0,
        keySystems = void 0,
        BASE64 = void 0,
        clearkeyKeySystem = void 0,
        clearkeyW3CKeySystem = void 0;

    function setConfig(config) {
        if (!config) return;

        if (config.debug) {
            debug = config.debug;
            logger = debug.getLogger(instance);
        }

        if (config.BASE64) {
            BASE64 = config.BASE64;
        }
    }

    function initialize() {
        keySystems = [];

        var keySystem = void 0;

        // PlayReady
        keySystem = (0, _KeySystemPlayReady2.default)(context).getInstance({ BASE64: BASE64 });
        keySystems.push(keySystem);

        // Widevine
        keySystem = (0, _KeySystemWidevine2.default)(context).getInstance({ BASE64: BASE64 });
        keySystems.push(keySystem);

        // ClearKey
        keySystem = (0, _KeySystemClearKey2.default)(context).getInstance({ BASE64: BASE64 });
        keySystems.push(keySystem);
        clearkeyKeySystem = keySystem;

        // W3C ClearKey
        keySystem = (0, _KeySystemW3CClearKey2.default)(context).getInstance({ BASE64: BASE64, debug: debug });
        keySystems.push(keySystem);
        clearkeyW3CKeySystem = keySystem;
    }

    /**
     * Returns a prioritized list of key systems supported
     * by this player (not necessarily those supported by the
     * user agent)
     *
     * @returns {Array.<KeySystem>} a prioritized
     * list of key systems
     * @memberof module:ProtectionKeyController
     * @instance
     */
    function getKeySystems() {
        return keySystems;
    }

    /**
     * Returns the key system associated with the given key system string
     * name (i.e. 'org.w3.clearkey')
     *
     * @param {string} systemString the system string
     * @returns {KeySystem|null} the key system
     * or null if no supported key system is associated with the given key
     * system string
     * @memberof module:ProtectionKeyController
     * @instance
     */
    function getKeySystemBySystemString(systemString) {
        for (var i = 0; i < keySystems.length; i++) {
            if (keySystems[i].systemString === systemString) {
                return keySystems[i];
            }
        }
        return null;
    }

    /**
     * Determines whether the given key system is ClearKey.  This is
     * necessary because the EME spec defines ClearKey and its method
     * for providing keys to the key session; and this method has changed
     * between the various API versions.  Our EME-specific ProtectionModels
     * must know if the system is ClearKey so that it can format the keys
     * according to the particular spec version.
     *
     * @param {Object} keySystem the key
     * @returns {boolean} true if this is the ClearKey key system, false
     * otherwise
     * @memberof module:ProtectionKeyController
     * @instance
     */
    function isClearKey(keySystem) {
        return keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem;
    }

    /**
     * Check equality of initData array buffers.
     *
     * @param {ArrayBuffer} initData1 - first initData
     * @param {ArrayBuffer} initData2 - second initData
     * @returns {boolean} true if the initData arrays are equal in size and
     * contents, false otherwise
     * @memberof module:ProtectionKeyController
     * @instance
     */
    function initDataEquals(initData1, initData2) {
        if (initData1.byteLength === initData2.byteLength) {
            var data1 = new Uint8Array(initData1);
            var data2 = new Uint8Array(initData2);

            for (var j = 0; j < data1.length; j++) {
                if (data1[j] !== data2[j]) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    /**
     * Returns a set of supported key systems and CENC initialization data
     * from the given array of ContentProtection elements.  Only
     * key systems that are supported by this player will be returned.
     * Key systems are returned in priority order (highest first).
     *
     * @param {Array.<Object>} cps - array of content protection elements parsed
     * from the manifest
     * @returns {Array.<Object>} array of objects indicating which supported key
     * systems were found.  Empty array is returned if no
     * supported key systems were found
     * @memberof module:ProtectionKeyController
     * @instance
     */
    function getSupportedKeySystemsFromContentProtection(cps) {
        var cp = void 0,
            ks = void 0,
            ksIdx = void 0,
            cpIdx = void 0;
        var supportedKS = [];

        if (cps) {
            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {
                ks = keySystems[ksIdx];
                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {
                    cp = cps[cpIdx];
                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {
                        // Look for DRM-specific ContentProtection
                        var initData = ks.getInitData(cp);
                        if (!!initData) {
                            supportedKS.push({
                                ks: keySystems[ksIdx],
                                initData: initData,
                                cdmData: ks.getCDMData(),
                                sessionId: ks.getSessionId(cp)
                            });
                        } else if (this.isClearKey(ks)) {
                            supportedKS.push({
                                ks: ks,
                                initData: null
                            });
                        }
                    }
                }
            }
        }
        return supportedKS;
    }

    /**
     * Returns key systems supported by this player for the given PSSH
     * initializationData. Only key systems supported by this player
     * that have protection data present will be returned.  Key systems are returned in priority order
     * (highest priority first)
     *
     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs
     * supported by the content
     * @param {ProtectionData} protDataSet user specified protection data - license server url etc
     * supported by the content
     * @returns {Array.<Object>} array of objects indicating which supported key
     * systems were found.  Empty array is returned if no
     * supported key systems were found
     * @memberof module:ProtectionKeyController
     * @instance
     */
    function getSupportedKeySystems(initData, protDataSet) {
        var supportedKS = [];
        var pssh = _CommonEncryption2.default.parsePSSHList(initData);
        var ks = void 0,
            keySystemString = void 0,
            shouldNotFilterOutKeySystem = void 0;

        for (var ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {
            ks = keySystems[ksIdx];
            keySystemString = ks.systemString;
            shouldNotFilterOutKeySystem = protDataSet ? keySystemString in protDataSet : true;

            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {
                supportedKS.push({
                    ks: ks,
                    initData: pssh[ks.uuid],
                    cdmData: ks.getCDMData(),
                    sessionId: ks.getSessionId()
                });
            }
        }
        return supportedKS;
    }

    /**
     * Returns the license server implementation data that should be used for this request.
     *
     * @param {KeySystem} keySystem the key system
     * associated with this license request
     * @param {ProtectionData} protData protection data to use for the
     * request
     * @param {string} [messageType="license-request"] the message type associated with this
     * request.  Supported message types can be found
     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.
     * @returns {LicenseServer|null} the license server
     * implementation that should be used for this request or null if the player should not
     * pass messages of the given type to a license server
     * @memberof module:ProtectionKeyController
     * @instance
     *
     */
    function getLicenseServer(keySystem, protData, messageType) {

        // Our default server implementations do not do anything with "license-release" or
        // "individualization-request" messages, so we just send a success event
        if (messageType === 'license-release' || messageType === 'individualization-request') {
            return null;
        }

        var licenseServerData = null;
        if (protData && protData.hasOwnProperty('drmtoday')) {
            licenseServerData = (0, _DRMToday2.default)(context).getInstance({ BASE64: BASE64 });
        } else if (keySystem.systemString === _ProtectionConstants2.default.WIDEVINE_KEYSTEM_STRING) {
            licenseServerData = (0, _Widevine2.default)(context).getInstance();
        } else if (keySystem.systemString === _ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING) {
            licenseServerData = (0, _PlayReady2.default)(context).getInstance();
        } else if (keySystem.systemString === _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING) {
            licenseServerData = (0, _ClearKey2.default)(context).getInstance();
        }

        return licenseServerData;
    }

    /**
     * Allows application-specific retrieval of ClearKey keys.
     *
     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used
     * @param {ProtectionData} protData protection data to use for the
     * request
     * @param {ArrayBuffer} message the key message from the CDM
     * @return {ClearKeyKeySet|null} the clear keys associated with
     * the request or null if no keys can be returned by this function
     * @memberof module:ProtectionKeyController
     * @instance
     */
    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {
        try {
            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);
        } catch (error) {
            logger.error('Failed to retrieve clearkeys from ProtectionData');
            return null;
        }
    }

    function setProtectionData(protectionDataSet) {
        var getProtectionData = function getProtectionData(keySystemString) {
            var protData = null;
            if (protectionDataSet) {
                protData = keySystemString in protectionDataSet ? protectionDataSet[keySystemString] : null;
            }
            return protData;
        };

        for (var i = 0; i < keySystems.length; i++) {
            var keySystem = keySystems[i];
            if (keySystem.hasOwnProperty('init')) {
                keySystem.init(getProtectionData(keySystem.systemString));
            }
        }
    }

    instance = {
        initialize: initialize,
        setProtectionData: setProtectionData,
        isClearKey: isClearKey,
        initDataEquals: initDataEquals,
        getKeySystems: getKeySystems,
        getKeySystemBySystemString: getKeySystemBySystemString,
        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,
        getSupportedKeySystems: getSupportedKeySystems,
        getLicenseServer: getLicenseServer,
        processClearKeyLicenseRequest: processClearKeyLicenseRequest,
        setConfig: setConfig
    };

    return instance;
}

ProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';
exports.default = dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/drm/KeySystemClearKey.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/drm/KeySystemClearKey.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _KeyPair = __webpack_require__(/*! ../vo/KeyPair */ "./node_modules/dashjs/src/streaming/protection/vo/KeyPair.js");

var _KeyPair2 = _interopRequireDefault(_KeyPair);

var _ClearKeyKeySet = __webpack_require__(/*! ../vo/ClearKeyKeySet */ "./node_modules/dashjs/src/streaming/protection/vo/ClearKeyKeySet.js");

var _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet);

var _CommonEncryption = __webpack_require__(/*! ../CommonEncryption */ "./node_modules/dashjs/src/streaming/protection/CommonEncryption.js");

var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);

var _ProtectionConstants = __webpack_require__(/*! ../../constants/ProtectionConstants */ "./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js");

var _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

var uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';
var systemString = _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING;
var schemeIdURI = 'urn:uuid:' + uuid;

function KeySystemClearKey(config) {

    config = config || {};
    var instance = void 0;
    var BASE64 = config.BASE64;

    /**
     * Returns desired clearkeys (as specified in the CDM message) from protection data
     *
     * @param {ProtectionData} protectionData the protection data
     * @param {ArrayBuffer} message the ClearKey CDM message
     * @returns {ClearKeyKeySet} the key set or null if none found
     * @throws {Error} if a keyID specified in the CDM message was not found in the
     * protection data
     * @memberof KeySystemClearKey
     */
    function getClearKeysFromProtectionData(protectionData, message) {
        var clearkeySet = null;
        if (protectionData) {
            // ClearKey is the only system that does not require a license server URL, so we
            // handle it here when keys are specified in protection data
            var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));
            var keyPairs = [];
            for (var i = 0; i < jsonMsg.kids.length; i++) {
                var clearkeyID = jsonMsg.kids[i];
                var clearkey = protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;
                if (!clearkey) {
                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');
                }
                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded
                keyPairs.push(new _KeyPair2.default(clearkeyID, clearkey));
            }
            clearkeySet = new _ClearKeyKeySet2.default(keyPairs);
        }
        return clearkeySet;
    }

    function getInitData(cp) {
        return _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64);
    }

    function getRequestHeadersFromMessage() /*message*/{
        return null;
    }

    function getLicenseRequestFromMessage(message) {
        return new Uint8Array(message);
    }

    function getLicenseServerURLFromInitData() /*initData*/{
        return null;
    }

    function getCDMData() {
        return null;
    }

    function getSessionId() /*cp*/{
        return null;
    }

    instance = {
        uuid: uuid,
        schemeIdURI: schemeIdURI,
        systemString: systemString,
        getInitData: getInitData,
        getRequestHeadersFromMessage: getRequestHeadersFromMessage,
        getLicenseRequestFromMessage: getLicenseRequestFromMessage,
        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
        getCDMData: getCDMData,
        getSessionId: getSessionId,
        getClearKeysFromProtectionData: getClearKeysFromProtectionData
    };

    return instance;
}

KeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';
exports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/drm/KeySystemPlayReady.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/drm/KeySystemPlayReady.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _CommonEncryption = __webpack_require__(/*! ../CommonEncryption */ "./node_modules/dashjs/src/streaming/protection/CommonEncryption.js");

var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);

var _ProtectionConstants = __webpack_require__(/*! ../../constants/ProtectionConstants */ "./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js");

var _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Microsoft PlayReady DRM
 *
 * @class
 * @implements KeySystem
 */
var uuid = '9a04f079-9840-4286-ab92-e65be0885f95';
var systemString = _ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING;
var schemeIdURI = 'urn:uuid:' + uuid;
var PRCDMData = '<PlayReadyCDMData type="LicenseAcquisition"><LicenseAcquisition version="1.0" Proactive="false"><CustomData encoding="base64encoded">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';
var protData = void 0;

function KeySystemPlayReady(config) {

    config = config || {};
    var instance = void 0;
    var messageFormat = 'utf16';
    var BASE64 = config.BASE64;

    function checkConfig() {
        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray')) {
            throw new Error('Missing config parameter(s)');
        }
    }

    function getRequestHeadersFromMessage(message) {
        var msg = void 0,
            xmlDoc = void 0;
        var headers = {};
        var parser = new DOMParser();
        var dataview = messageFormat === 'utf16' ? new Uint16Array(message) : new Uint8Array(message);

        msg = String.fromCharCode.apply(null, dataview);
        xmlDoc = parser.parseFromString(msg, 'application/xml');

        var headerNameList = xmlDoc.getElementsByTagName('name');
        var headerValueList = xmlDoc.getElementsByTagName('value');
        for (var i = 0; i < headerNameList.length; i++) {
            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;
        }
        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.
        // this is NOT w3c conform and license servers may reject the request!
        // -> rename it to proper w3c definition!
        if (headers.hasOwnProperty('Content')) {
            headers['Content-Type'] = headers.Content;
            delete headers.Content;
        }
        // some devices (Ex: LG SmartTVs) require content-type to be defined
        if (!headers.hasOwnProperty('Content-Type')) {
            headers['Content-Type'] = 'text/xml; charset=' + messageFormat;
        }
        return headers;
    }

    function getLicenseRequestFromMessage(message) {
        var licenseRequest = null;
        var parser = new DOMParser();
        var dataview = messageFormat === 'utf16' ? new Uint16Array(message) : new Uint8Array(message);

        checkConfig();
        var msg = String.fromCharCode.apply(null, dataview);
        var xmlDoc = parser.parseFromString(msg, 'application/xml');

        if (xmlDoc.getElementsByTagName('Challenge')[0]) {
            var Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;
            if (Challenge) {
                licenseRequest = BASE64.decode(Challenge);
            }
        } else if (xmlDoc.getElementsByTagName('parsererror').length) {
            // In case it is not an XML doc, return the message itself
            // There are CDM implementations of some devices (example: some smartTVs) that
            // return directly the challenge without wrapping it in an xml doc
            return message;
        }

        return licenseRequest;
    }

    function getLicenseServerURLFromInitData(initData) {
        if (initData) {
            var data = new DataView(initData);
            var numRecords = data.getUint16(4, true);
            var offset = 6;
            var parser = new DOMParser();

            for (var i = 0; i < numRecords; i++) {
                // Parse the PlayReady Record header
                var recordType = data.getUint16(offset, true);
                offset += 2;
                var recordLength = data.getUint16(offset, true);
                offset += 2;
                if (recordType !== 0x0001) {
                    offset += recordLength;
                    continue;
                }

                var recordData = initData.slice(offset, offset + recordLength);
                var record = String.fromCharCode.apply(null, new Uint16Array(recordData));
                var xmlDoc = parser.parseFromString(record, 'application/xml');

                // First try <LA_URL>
                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {
                    var laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;
                    if (laurl) {
                        return laurl;
                    }
                }

                // Optionally, try <LUI_URL>
                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {
                    var luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;
                    if (luiurl) {
                        return luiurl;
                    }
                }
            }
        }

        return null;
    }

    function getInitData(cpData) {
        // * desc@ getInitData
        // *   generate PSSH data from PROHeader defined in MPD file
        // *   PSSH format:
        // *   size (4)
        // *   box type(PSSH) (8)
        // *   Protection SystemID (16)
        // *   protection system data size (4) - length of decoded PROHeader
        // *   decoded PROHeader data from MPD file
        var PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes
        var playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);

        var byteCursor = 0;
        var uint8arraydecodedPROHeader = null;

        var PROSize = void 0,
            PSSHSize = void 0,
            PSSHBoxBuffer = void 0,
            PSSHBox = void 0,
            PSSHData = void 0;

        checkConfig();
        // Handle common encryption PSSH
        if ('pssh' in cpData) {
            return _CommonEncryption2.default.parseInitDataFromContentProtection(cpData, BASE64);
        }
        // Handle native MS PlayReady ContentProtection elements
        if ('pro' in cpData) {
            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);
        } else if ('prheader' in cpData) {
            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);
        } else {
            return null;
        }

        PROSize = uint8arraydecodedPROHeader.length;
        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;

        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);

        PSSHBox = new Uint8Array(PSSHBoxBuffer);
        PSSHData = new DataView(PSSHBoxBuffer);

        PSSHData.setUint32(byteCursor, PSSHSize);
        byteCursor += 0x4;

        PSSHBox.set(PSSHBoxType, byteCursor);
        byteCursor += PSSHBoxType.length;

        PSSHBox.set(playreadySystemID, byteCursor);
        byteCursor += playreadySystemID.length;

        PSSHData.setUint32(byteCursor, PROSize);
        byteCursor += 0x4;

        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);
        byteCursor += PROSize;

        return PSSHBox.buffer;
    }

    /**
     * It seems that some PlayReady implementations return their XML-based CDM
     * messages using UTF16, while others return them as UTF8.  Use this function
     * to modify the message format to expect when parsing CDM messages.
     *
     * @param {string} format the expected message format.  Either "utf8" or "utf16".
     * @throws {Error} Specified message format is not one of "utf8" or "utf16"
     */
    function setPlayReadyMessageFormat(format) {
        if (format !== 'utf8' && format !== 'utf16') {
            throw new Error('Illegal PlayReady message format! -- ' + format);
        }
        messageFormat = format;
    }

    /**
     * Initialize the Key system with protection data
     * @param {Object} protectionData the protection data
     */
    function init(protectionData) {
        if (protectionData) {
            protData = protectionData;
        }
    }

    /**
     * Get Playready Custom data
     */
    function getCDMData() {
        var customData = void 0,
            cdmData = void 0,
            cdmDataBytes = void 0,
            i = void 0;

        checkConfig();
        if (protData && protData.cdmData) {
            // Convert custom data into multibyte string
            customData = [];
            for (i = 0; i < protData.cdmData.length; ++i) {
                customData.push(protData.cdmData.charCodeAt(i));
                customData.push(0);
            }
            customData = String.fromCharCode.apply(null, customData);

            // Encode in Base 64 the custom data string
            customData = BASE64.encode(customData);

            // Initialize CDM data with Base 64 encoded custom data
            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)
            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);

            // Convert CDM data into multibyte characters
            cdmDataBytes = [];
            for (i = 0; i < cdmData.length; ++i) {
                cdmDataBytes.push(cdmData.charCodeAt(i));
                cdmDataBytes.push(0);
            }

            return new Uint8Array(cdmDataBytes).buffer;
        }

        return null;
    }

    function getSessionId(cp) {
        // Get sessionId from protectionData or from manifest
        if (protData && protData.sessionId) {
            return protData.sessionId;
        } else if (cp && cp.sessionId) {
            return cp.sessionId;
        }
        return null;
    }

    instance = {
        uuid: uuid,
        schemeIdURI: schemeIdURI,
        systemString: systemString,
        getInitData: getInitData,
        getRequestHeadersFromMessage: getRequestHeadersFromMessage,
        getLicenseRequestFromMessage: getLicenseRequestFromMessage,
        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
        getCDMData: getCDMData,
        getSessionId: getSessionId,
        setPlayReadyMessageFormat: setPlayReadyMessageFormat,
        init: init
    };

    return instance;
}

KeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';
exports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/drm/KeySystemW3CClearKey.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/drm/KeySystemW3CClearKey.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _KeyPair = __webpack_require__(/*! ../vo/KeyPair */ "./node_modules/dashjs/src/streaming/protection/vo/KeyPair.js");

var _KeyPair2 = _interopRequireDefault(_KeyPair);

var _ClearKeyKeySet = __webpack_require__(/*! ../vo/ClearKeyKeySet */ "./node_modules/dashjs/src/streaming/protection/vo/ClearKeyKeySet.js");

var _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet);

var _CommonEncryption = __webpack_require__(/*! ../CommonEncryption */ "./node_modules/dashjs/src/streaming/protection/CommonEncryption.js");

var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);

var _ProtectionConstants = __webpack_require__(/*! ../../constants/ProtectionConstants */ "./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js");

var _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

var uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';
var systemString = _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING;
var schemeIdURI = 'urn:uuid:' + uuid;

function KeySystemW3CClearKey(config) {
    var instance = void 0;
    var BASE64 = config.BASE64;
    var logger = config.debug.getLogger(instance);
    /**
     * Returns desired clearkeys (as specified in the CDM message) from protection data
     *
     * @param {ProtectionData} protectionData the protection data
     * @param {ArrayBuffer} message the ClearKey CDM message
     * @returns {ClearKeyKeySet} the key set or null if none found
     * @throws {Error} if a keyID specified in the CDM message was not found in the
     * protection data
     * @memberof KeySystemClearKey
     */
    function getClearKeysFromProtectionData(protectionData, message) {
        var clearkeySet = null;
        if (protectionData) {
            // ClearKey is the only system that does not require a license server URL, so we
            // handle it here when keys are specified in protection data
            var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));
            var keyPairs = [];
            for (var i = 0; i < jsonMsg.kids.length; i++) {
                var clearkeyID = jsonMsg.kids[i];
                var clearkey = protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;
                if (!clearkey) {
                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');
                }
                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded
                keyPairs.push(new _KeyPair2.default(clearkeyID, clearkey));
            }
            clearkeySet = new _ClearKeyKeySet2.default(keyPairs);

            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');
        }
        return clearkeySet;
    }

    function getInitData(cp) {
        return _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64);
    }

    function getRequestHeadersFromMessage() /*message*/{
        return null;
    }

    function getLicenseRequestFromMessage(message) {
        return new Uint8Array(message);
    }

    function getLicenseServerURLFromInitData() /*initData*/{
        return null;
    }

    function getCDMData() {
        return null;
    }

    function getSessionId() /*cp*/{
        return null;
    }

    instance = {
        uuid: uuid,
        schemeIdURI: schemeIdURI,
        systemString: systemString,
        getInitData: getInitData,
        getRequestHeadersFromMessage: getRequestHeadersFromMessage,
        getLicenseRequestFromMessage: getLicenseRequestFromMessage,
        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
        getCDMData: getCDMData,
        getSessionId: getSessionId,
        getClearKeysFromProtectionData: getClearKeysFromProtectionData
    };

    return instance;
}

KeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';
exports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/drm/KeySystemWidevine.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/drm/KeySystemWidevine.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _CommonEncryption = __webpack_require__(/*! ../CommonEncryption */ "./node_modules/dashjs/src/streaming/protection/CommonEncryption.js");

var _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);

var _ProtectionConstants = __webpack_require__(/*! ../../constants/ProtectionConstants */ "./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js");

var _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Google Widevine DRM
 *
 * @class
 * @implements MediaPlayer.dependencies.protection.KeySystem
 */

var uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';
var systemString = _ProtectionConstants2.default.WIDEVINE_KEYSTEM_STRING;
var schemeIdURI = 'urn:uuid:' + uuid;

function KeySystemWidevine(config) {

    config = config || {};
    var instance = void 0;
    var protData = null;
    var BASE64 = config.BASE64;

    function init(protectionData) {
        if (protectionData) {
            protData = protectionData;
        }
    }

    function getInitData(cp) {
        return _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64);
    }

    function getRequestHeadersFromMessage() /*message*/{
        return null;
    }

    function getLicenseRequestFromMessage(message) {
        return new Uint8Array(message);
    }

    function getLicenseServerURLFromInitData() /*initData*/{
        return null;
    }

    function getCDMData() {
        return null;
    }

    function getSessionId(cp) {
        // Get sessionId from protectionData or from manifest
        if (protData && protData.sessionId) {
            return protData.sessionId;
        } else if (cp && cp.sessionId) {
            return cp.sessionId;
        }
        return null;
    }

    instance = {
        uuid: uuid,
        schemeIdURI: schemeIdURI,
        systemString: systemString,
        init: init,
        getInitData: getInitData,
        getRequestHeadersFromMessage: getRequestHeadersFromMessage,
        getLicenseRequestFromMessage: getLicenseRequestFromMessage,
        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
        getCDMData: getCDMData,
        getSessionId: getSessionId
    };

    return instance;
}

KeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';
exports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/errors/ProtectionErrors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/errors/ProtectionErrors.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ErrorsBase2 = __webpack_require__(/*! ../../../core/errors/ErrorsBase */ "./node_modules/dashjs/src/core/errors/ErrorsBase.js");

var _ErrorsBase3 = _interopRequireDefault(_ErrorsBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * @class
 *
 */
var ProtectionErrors = function (_ErrorsBase) {
  _inherits(ProtectionErrors, _ErrorsBase);

  function ProtectionErrors() {
    _classCallCheck(this, ProtectionErrors);

    /**
     *  Generid key Error code
     */
    var _this = _possibleConstructorReturn(this, (ProtectionErrors.__proto__ || Object.getPrototypeOf(ProtectionErrors)).call(this));

    _this.MEDIA_KEYERR_CODE = 100;
    /**
     *  Error code returned by keyerror api for ProtectionModel_01b
     */
    _this.MEDIA_KEYERR_UNKNOWN_CODE = 101;
    /**
     *  Error code returned by keyerror api for ProtectionModel_01b
     */
    _this.MEDIA_KEYERR_CLIENT_CODE = 102;
    /**
     *  Error code returned by keyerror api for ProtectionModel_01b
     */
    _this.MEDIA_KEYERR_SERVICE_CODE = 103;
    /**
     *  Error code returned by keyerror api for ProtectionModel_01b
     */
    _this.MEDIA_KEYERR_OUTPUT_CODE = 104;
    /**
     *  Error code returned by keyerror api for ProtectionModel_01b
     */
    _this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;
    /**
     *  Error code returned by keyerror api for ProtectionModel_01b
     */
    _this.MEDIA_KEYERR_DOMAIN_CODE = 106;

    /**
     *  Error code returned when an error occured in keymessage event for ProtectionModel_01b
     */
    _this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;
    /**
     *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)
     */
    _this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;
    /**
     *  Error code returned when License server certificate has not been successfully updated
     */
    _this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;
    /**
     *  Error code returned when license validity has expired
     */
    _this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;
    /**
     *  Error code returned when no licenser url is defined
     */
    _this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;
    /**
     *  Error code returned when key system access is denied
     */
    _this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;
    /**
     *  Error code returned when key session has not been successfully created
     */
    _this.KEY_SESSION_CREATED_ERROR_CODE = 113;
    /**
     *  Error code returned when license request failed after a keymessage event has been triggered
     */
    _this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;

    _this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\'t match any of the other codes.';
    _this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';
    _this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';
    _this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';
    _this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';
    _this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';
    _this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';
    _this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';
    _this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';
    _this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';
    _this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';
    _this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';
    _this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';
    _this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';
    return _this;
  }

  return ProtectionErrors;
}(_ErrorsBase3.default);

var protectionErrors = new ProtectionErrors();
exports.default = protectionErrors;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_01b.js":
/*!************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_01b.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ProtectionKeyController = __webpack_require__(/*! ../controllers/ProtectionKeyController */ "./node_modules/dashjs/src/streaming/protection/controllers/ProtectionKeyController.js");

var _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController);

var _NeedKey = __webpack_require__(/*! ../vo/NeedKey */ "./node_modules/dashjs/src/streaming/protection/vo/NeedKey.js");

var _NeedKey2 = _interopRequireDefault(_NeedKey);

var _DashJSError = __webpack_require__(/*! ../../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _KeyMessage = __webpack_require__(/*! ../vo/KeyMessage */ "./node_modules/dashjs/src/streaming/protection/vo/KeyMessage.js");

var _KeyMessage2 = _interopRequireDefault(_KeyMessage);

var _KeySystemConfiguration = __webpack_require__(/*! ../vo/KeySystemConfiguration */ "./node_modules/dashjs/src/streaming/protection/vo/KeySystemConfiguration.js");

var _KeySystemConfiguration2 = _interopRequireDefault(_KeySystemConfiguration);

var _KeySystemAccess = __webpack_require__(/*! ../vo/KeySystemAccess */ "./node_modules/dashjs/src/streaming/protection/vo/KeySystemAccess.js");

var _KeySystemAccess2 = _interopRequireDefault(_KeySystemAccess);

var _ProtectionErrors = __webpack_require__(/*! ../errors/ProtectionErrors */ "./node_modules/dashjs/src/streaming/protection/errors/ProtectionErrors.js");

var _ProtectionErrors2 = _interopRequireDefault(_ProtectionErrors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ProtectionModel_01b(config) {

    config = config || {};
    var context = this.context;
    var eventBus = config.eventBus; //Need to pass in here so we can use same instance since this is optional module
    var events = config.events;
    var debug = config.debug;
    var api = config.api;
    var errHandler = config.errHandler;

    var instance = void 0,
        logger = void 0,
        videoElement = void 0,
        keySystem = void 0,
        protectionKeyController = void 0,


    // With this version of the EME APIs, sessionIDs are not assigned to
    // sessions until the first key message is received.  We are assuming
    // that in the case of multiple sessions, key messages will be received
    // in the order that generateKeyRequest() is called.
    // Holding spot for newly-created sessions until we determine whether or
    // not the CDM supports sessionIDs
    pendingSessions = void 0,


    // List of sessions that have been initialized.  Only the first position will
    // be used in the case that the CDM does not support sessionIDs
    sessions = void 0,


    // Not all CDMs support the notion of sessionIDs.  Without sessionIDs
    // there is no way for us to differentiate between sessions, therefore
    // we must only allow a single session.  Once we receive the first key
    // message we can set this flag to determine if more sessions are allowed
    moreSessionsAllowed = void 0,


    // This is our main event handler for all desired HTMLMediaElement events
    // related to EME.  These events are translated into our API-independent
    // versions of the same events
    eventHandler = void 0;

    function setup() {
        logger = debug.getLogger(instance);
        videoElement = null;
        keySystem = null;
        pendingSessions = [];
        sessions = [];
        protectionKeyController = (0, _ProtectionKeyController2.default)(context).getInstance();
        eventHandler = createEventHandler();
    }

    function reset() {
        if (videoElement) {
            removeEventListeners();
        }
        for (var i = 0; i < sessions.length; i++) {
            closeKeySession(sessions[i]);
        }
        eventBus.trigger(events.TEARDOWN_COMPLETE);
    }

    function getKeySystem() {
        return keySystem;
    }

    function getAllInitData() {
        var retVal = [];
        for (var i = 0; i < pendingSessions.length; i++) {
            retVal.push(pendingSessions[i].initData);
        }
        for (var _i = 0; _i < sessions.length; _i++) {
            retVal.push(sessions[_i].initData);
        }
        return retVal;
    }

    function requestKeySystemAccess(ksConfigurations) {
        var ve = videoElement;
        if (!ve) {
            // Must have a video element to do this capability tests
            ve = document.createElement('video');
        }

        // Try key systems in order, first one with supported key system configuration
        // is used
        var found = false;
        for (var ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {
            var systemString = ksConfigurations[ksIdx].ks.systemString;
            var configs = ksConfigurations[ksIdx].configs;
            var supportedAudio = null;
            var supportedVideo = null;

            // Try key system configs in order, first one with supported audio/video
            // is used
            for (var configIdx = 0; configIdx < configs.length; configIdx++) {
                //let audios = configs[configIdx].audioCapabilities;
                var videos = configs[configIdx].videoCapabilities;
                // Look for supported video container/codecs
                if (videos && videos.length !== 0) {
                    supportedVideo = []; // Indicates that we have a requested video config
                    for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) {
                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {
                            supportedVideo.push(videos[videoIdx]);
                        }
                    }
                }

                // No supported audio or video in this configuration OR we have
                // requested audio or video configuration that is not supported
                if (!supportedAudio && !supportedVideo || supportedAudio && supportedAudio.length === 0 || supportedVideo && supportedVideo.length === 0) {
                    continue;
                }

                // This configuration is supported
                found = true;
                var ksConfig = new _KeySystemConfiguration2.default(supportedAudio, supportedVideo);
                var ks = protectionKeyController.getKeySystemBySystemString(systemString);
                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new _KeySystemAccess2.default(ks, ksConfig) });
                break;
            }
        }
        if (!found) {
            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });
        }
    }

    function selectKeySystem(keySystemAccess) {
        keySystem = keySystemAccess.keySystem;
        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
    }

    function setMediaElement(mediaElement) {
        if (videoElement === mediaElement) {
            return;
        }

        // Replacing the previous element
        if (videoElement) {
            removeEventListeners();

            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs
            for (var i = 0; i < sessions.length; i++) {
                closeKeySession(sessions[i]);
            }
            sessions = [];
        }

        videoElement = mediaElement;

        // Only if we are not detaching from the existing element
        if (videoElement) {
            videoElement.addEventListener(api.keyerror, eventHandler);
            videoElement.addEventListener(api.needkey, eventHandler);
            videoElement.addEventListener(api.keymessage, eventHandler);
            videoElement.addEventListener(api.keyadded, eventHandler);
            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);
        }
    }

    function createKeySession(initData /*, protData, keySystemType */) {
        if (!keySystem) {
            throw new Error('Can not create sessions until you have selected a key system');
        }

        // Determine if creating a new session is allowed
        if (moreSessionsAllowed || sessions.length === 0) {
            var newSession = { // Implements SessionToken
                sessionID: null,
                initData: initData,
                getSessionID: function getSessionID() {
                    return this.sessionID;
                },

                getExpirationTime: function getExpirationTime() {
                    return NaN;
                },

                getSessionType: function getSessionType() {
                    return 'temporary';
                }
            };
            pendingSessions.push(newSession);

            // Send our request to the CDM
            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));

            return newSession;
        } else {
            throw new Error('Multiple sessions not allowed!');
        }
    }

    function updateKeySession(sessionToken, message) {
        var sessionID = sessionToken.sessionID;
        if (!protectionKeyController.isClearKey(keySystem)) {
            // Send our request to the CDM
            videoElement[api.addKey](keySystem.systemString, new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);
        } else {
            // For clearkey, message is a ClearKeyKeySet
            for (var i = 0; i < message.keyPairs.length; i++) {
                videoElement[api.addKey](keySystem.systemString, message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);
            }
        }
    }

    function closeKeySession(sessionToken) {
        // Send our request to the CDM
        try {
            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);
        } catch (error) {
            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message });
        }
    }

    function setServerCertificate() /*serverCertificate*/{/* Not supported */}
    function loadKeySession() /*sessionID*/{/* Not supported */}
    function removeKeySession() /*sessionToken*/{/* Not supported */}

    function createEventHandler() {
        return {
            handleEvent: function handleEvent(event) {
                var sessionToken = null;
                switch (event.type) {
                    case api.needkey:
                        var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                        eventBus.trigger(events.NEED_KEY, { key: new _NeedKey2.default(initData, 'cenc') });
                        break;

                    case api.keyerror:
                        sessionToken = findSessionByID(sessions, event.sessionId);
                        if (!sessionToken) {
                            sessionToken = findSessionByID(pendingSessions, event.sessionId);
                        }

                        if (sessionToken) {
                            var code = _ProtectionErrors2.default.MEDIA_KEYERR_CODE;
                            var msg = '';
                            switch (event.errorCode.code) {
                                case 1:
                                    code = _ProtectionErrors2.default.MEDIA_KEYERR_UNKNOWN_CODE;
                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + _ProtectionErrors2.default.MEDIA_KEYERR_UNKNOWN_MESSAGE;
                                    break;
                                case 2:
                                    code = _ProtectionErrors2.default.MEDIA_KEYERR_CLIENT_CODE;
                                    msg += 'MEDIA_KEYERR_CLIENT - ' + _ProtectionErrors2.default.MEDIA_KEYERR_CLIENT_MESSAGE;
                                    break;
                                case 3:
                                    code = _ProtectionErrors2.default.MEDIA_KEYERR_SERVICE_CODE;
                                    msg += 'MEDIA_KEYERR_SERVICE - ' + _ProtectionErrors2.default.MEDIA_KEYERR_SERVICE_MESSAGE;
                                    break;
                                case 4:
                                    code = _ProtectionErrors2.default.MEDIA_KEYERR_OUTPUT_CODE;
                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + _ProtectionErrors2.default.MEDIA_KEYERR_OUTPUT_MESSAGE;
                                    break;
                                case 5:
                                    code = _ProtectionErrors2.default.MEDIA_KEYERR_HARDWARECHANGE_CODE;
                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + _ProtectionErrors2.default.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;
                                    break;
                                case 6:
                                    code = _ProtectionErrors2.default.MEDIA_KEYERR_DOMAIN_CODE;
                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + _ProtectionErrors2.default.MEDIA_KEYERR_DOMAIN_MESSAGE;
                                    break;
                            }
                            msg += '  System Code = ' + event.systemCode;
                            // TODO: Build error string based on key error
                            eventBus.trigger(events.KEY_ERROR, { data: new _DashJSError2.default(code, msg, sessionToken) });
                        } else {
                            logger.error('No session token found for key error');
                        }
                        break;

                    case api.keyadded:
                        sessionToken = findSessionByID(sessions, event.sessionId);
                        if (!sessionToken) {
                            sessionToken = findSessionByID(pendingSessions, event.sessionId);
                        }

                        if (sessionToken) {
                            logger.debug('DRM: Key added.');
                            eventBus.trigger(events.KEY_ADDED, { data: sessionToken }); //TODO not sure anything is using sessionToken? why there?
                        } else {
                            logger.debug('No session token found for key added');
                        }
                        break;

                    case api.keymessage:
                        // If this CDM does not support session IDs, we will be limited
                        // to a single session
                        moreSessionsAllowed = event.sessionId !== null && event.sessionId !== undefined;

                        // SessionIDs supported
                        if (moreSessionsAllowed) {
                            // Attempt to find an uninitialized token with this sessionID
                            sessionToken = findSessionByID(sessions, event.sessionId);
                            if (!sessionToken && pendingSessions.length > 0) {

                                // This is the first message for our latest session, so set the
                                // sessionID and add it to our list
                                sessionToken = pendingSessions.shift();
                                sessions.push(sessionToken);
                                sessionToken.sessionID = event.sessionId;

                                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });
                            }
                        } else if (pendingSessions.length > 0) {
                            // SessionIDs not supported
                            sessionToken = pendingSessions.shift();
                            sessions.push(sessionToken);

                            if (pendingSessions.length !== 0) {
                                errHandler.mediaKeyMessageError(_ProtectionErrors2.default.MEDIA_KEY_MESSAGE_ERROR_MESSAGE);
                                errHandler.error(new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEY_MESSAGE_ERROR_CODE, _ProtectionErrors2.default.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));
                            }
                        }

                        if (sessionToken) {
                            var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;

                            // For ClearKey, the spec mandates that you pass this message to the
                            // addKey method, so we always save it to the token since there is no
                            // way to tell which key system is in use
                            sessionToken.keyMessage = message;
                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new _KeyMessage2.default(sessionToken, message, event.defaultURL) });
                        } else {
                            logger.warn('No session token found for key message');
                        }
                        break;
                }
            }
        };
    }

    /**
     * Helper function to retrieve the stored session token based on a given
     * sessionID value
     *
     * @param {Array} sessionArray - the array of sessions to search
     * @param {*} sessionID - the sessionID to search for
     * @returns {*} the session token with the given sessionID
     */
    function findSessionByID(sessionArray, sessionID) {
        if (!sessionID || !sessionArray) {
            return null;
        } else {
            var len = sessionArray.length;
            for (var i = 0; i < len; i++) {
                if (sessionArray[i].sessionID == sessionID) {
                    return sessionArray[i];
                }
            }
            return null;
        }
    }

    function removeEventListeners() {
        videoElement.removeEventListener(api.keyerror, eventHandler);
        videoElement.removeEventListener(api.needkey, eventHandler);
        videoElement.removeEventListener(api.keymessage, eventHandler);
        videoElement.removeEventListener(api.keyadded, eventHandler);
    }

    instance = {
        getAllInitData: getAllInitData,
        requestKeySystemAccess: requestKeySystemAccess,
        getKeySystem: getKeySystem,
        selectKeySystem: selectKeySystem,
        setMediaElement: setMediaElement,
        createKeySession: createKeySession,
        updateKeySession: updateKeySession,
        closeKeySession: closeKeySession,
        setServerCertificate: setServerCertificate,
        loadKeySession: loadKeySession,
        removeKeySession: removeKeySession,
        stop: reset,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

/**
 * Initial implementation of EME
 *
 * Implemented by Google Chrome prior to v36
 *
 * @implements ProtectionModel
 * @class
 */


ProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';
exports.default = dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_21Jan2015.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_21Jan2015.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ProtectionKeyController = __webpack_require__(/*! ../controllers/ProtectionKeyController */ "./node_modules/dashjs/src/streaming/protection/controllers/ProtectionKeyController.js");

var _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController);

var _NeedKey = __webpack_require__(/*! ../vo/NeedKey */ "./node_modules/dashjs/src/streaming/protection/vo/NeedKey.js");

var _NeedKey2 = _interopRequireDefault(_NeedKey);

var _ProtectionErrors = __webpack_require__(/*! ../errors/ProtectionErrors */ "./node_modules/dashjs/src/streaming/protection/errors/ProtectionErrors.js");

var _ProtectionErrors2 = _interopRequireDefault(_ProtectionErrors);

var _DashJSError = __webpack_require__(/*! ../../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _KeyMessage = __webpack_require__(/*! ../vo/KeyMessage */ "./node_modules/dashjs/src/streaming/protection/vo/KeyMessage.js");

var _KeyMessage2 = _interopRequireDefault(_KeyMessage);

var _KeySystemAccess = __webpack_require__(/*! ../vo/KeySystemAccess */ "./node_modules/dashjs/src/streaming/protection/vo/KeySystemAccess.js");

var _KeySystemAccess2 = _interopRequireDefault(_KeySystemAccess);

var _ProtectionConstants = __webpack_require__(/*! ../../constants/ProtectionConstants */ "./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js");

var _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ProtectionModel_21Jan2015(config) {

    config = config || {};
    var context = this.context;
    var eventBus = config.eventBus; //Need to pass in here so we can use same instance since this is optional module
    var events = config.events;
    var debug = config.debug;

    var instance = void 0,
        logger = void 0,
        keySystem = void 0,
        videoElement = void 0,
        mediaKeys = void 0,
        sessions = void 0,
        eventHandler = void 0,
        protectionKeyController = void 0;

    function setup() {
        logger = debug.getLogger(instance);
        keySystem = null;
        videoElement = null;
        mediaKeys = null;
        sessions = [];
        protectionKeyController = (0, _ProtectionKeyController2.default)(context).getInstance();
        eventHandler = createEventHandler();
    }

    function reset() {
        var numSessions = sessions.length;
        var session = void 0;

        if (numSessions !== 0) {
            (function () {
                // Called when we are done closing a session.  Success or fail
                var done = function done(session) {
                    removeSession(session);
                    if (sessions.length === 0) {
                        if (videoElement) {
                            videoElement.removeEventListener('encrypted', eventHandler);
                            videoElement.setMediaKeys(null).then(function () {
                                eventBus.trigger(events.TEARDOWN_COMPLETE);
                            });
                        } else {
                            eventBus.trigger(events.TEARDOWN_COMPLETE);
                        }
                    }
                };
                for (var i = 0; i < numSessions; i++) {
                    session = sessions[i];
                    (function (s) {
                        // Override closed promise resolver
                        session.session.closed.then(function () {
                            done(s);
                        });
                        // Close the session and handle errors, otherwise promise
                        // resolver above will be called
                        closeKeySessionInternal(session).catch(function () {
                            done(s);
                        });
                    })(session);
                }
            })();
        } else {
            eventBus.trigger(events.TEARDOWN_COMPLETE);
        }
    }

    function stop() {
        // Close and remove not usable sessions
        var session = void 0;
        for (var i = 0; i < sessions.length; i++) {
            session = sessions[i];
            if (!session.getUsable()) {
                closeKeySessionInternal(session).catch(function () {
                    removeSession(session);
                });
            }
        }
    }

    function getKeySystem() {
        return keySystem;
    }

    function getAllInitData() {
        var retVal = [];
        for (var i = 0; i < sessions.length; i++) {
            if (sessions[i].initData) {
                retVal.push(sessions[i].initData);
            }
        }
        return retVal;
    }

    function requestKeySystemAccess(ksConfigurations) {
        requestKeySystemAccessInternal(ksConfigurations, 0);
    }

    function selectKeySystem(keySystemAccess) {
        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {
            keySystem = keySystemAccess.keySystem;
            mediaKeys = mkeys;
            if (videoElement) {
                videoElement.setMediaKeys(mediaKeys).then(function () {
                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
                });
            } else {
                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
            }
        }).catch(function () {
            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO' });
        });
    }

    function setMediaElement(mediaElement) {
        if (videoElement === mediaElement) return;

        // Replacing the previous element
        if (videoElement) {
            videoElement.removeEventListener('encrypted', eventHandler);
            if (videoElement.setMediaKeys) {
                videoElement.setMediaKeys(null);
            }
        }

        videoElement = mediaElement;

        // Only if we are not detaching from the existing element
        if (videoElement) {
            videoElement.addEventListener('encrypted', eventHandler);
            if (videoElement.setMediaKeys && mediaKeys) {
                videoElement.setMediaKeys(mediaKeys);
            }
        }
    }

    function setServerCertificate(serverCertificate) {
        if (!keySystem || !mediaKeys) {
            throw new Error('Can not set server certificate until you have selected a key system');
        }
        mediaKeys.setServerCertificate(serverCertificate).then(function () {
            logger.info('DRM: License server certificate successfully updated.');
            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);
        }).catch(function (error) {
            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, { error: new _DashJSError2.default(_ProtectionErrors2.default.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, _ProtectionErrors2.default.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name) });
        });
    }

    function createKeySession(initData, protData, sessionType, cdmData, sessionId) {
        if (!keySystem || !mediaKeys) {
            throw new Error('Can not create sessions until you have selected a key system');
        }

        if (sessionId !== undefined) {
            loadPersistedLicence(sessionId);
        } else {
            var session = mediaKeys.createSession(sessionType);
            var sessionToken = createSessionToken(session, initData, sessionType);
            var ks = this.getKeySystem();

            // Generate initial key request.
            // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed
            var dataType = ks.systemString === _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING && protData && protData.clearkeys ? 'keyids' : 'cenc';
            session.generateRequest(dataType, initData).then(function () {
                logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());
                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });
            }).catch(function (error) {
                // TODO: Better error string
                removeSession(sessionToken);
                eventBus.trigger(events.KEY_SESSION_CREATED, { data: null, error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_CODE, _ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name) });
            });
        }
    }

    function loadPersistedLicence(sessionId) {

        // seesionType needs to be peristent rather for new and stored licenses
        var session = mediaKeys.createSession('persistent-license');

        session.load(sessionId).then(function (success) {
            var sessionToken = createSessionToken(session);
            if (success) {
                logger.debug('Successfully loaded stored session with sessionID ', sessionId);

                if (sessionToken.getExpirationTime() < new Date()) {
                    // The token/license has expired!  We should probably remove the stored license.
                    logger.debug('The token has expired on ' + new Date(sessionToken.getExpirationTime()));
                    removeKeySession(sessionToken);
                }
            } else {
                // The application should remove its record of sessionId.
                console.error('No stored session with the ID ' + sessionId + ' was found.');
                eventBus.trigger(events.KEY_ERROR, { data: null, error: 'Could not load session! Invalid Session ID (' + sessionId + ')' });
                removeKeySession(sessionToken);
                return;
            }
        }).catch(function (e) {
            console.error.bind(console, 'Unable to load or initialize the stored session with the ID ' + sessionId + '. Error ' + e.name + ': ' + e.message);
        });
    }

    function updateKeySession(sessionToken, message) {
        var session = sessionToken.session;

        // Send our request to the key session
        if (protectionKeyController.isClearKey(keySystem)) {
            message = message.toJWK();
        }
        session.update(message).catch(function (error) {
            eventBus.trigger(events.KEY_ERROR, { data: new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken) });
        });
    }

    function loadKeySession(sessionID, initData, sessionType) {
        if (!keySystem || !mediaKeys) {
            throw new Error('Can not load sessions until you have selected a key system');
        }

        // Check if session Id is not already loaded or loading
        for (var i = 0; i < sessions.length; i++) {
            if (sessionID === sessions[i].sessionId) {
                logger.warn('DRM: Ignoring session ID because we have already seen it!');
                return;
            }
        }

        var session = mediaKeys.createSession(sessionType);
        var sessionToken = createSessionToken(session, initData, sessionType, sessionID);

        // Load persisted session data into our newly created session object
        session.load(sessionID).then(function (success) {
            if (success) {
                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());
                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });
            } else {
                removeSession(sessionToken);
                eventBus.trigger(events.KEY_SESSION_CREATED, { data: null, error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_CODE, _ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')') });
            }
        }).catch(function (error) {
            removeSession(sessionToken);
            eventBus.trigger(events.KEY_SESSION_CREATED, { data: null, error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_CODE, _ProtectionErrors2.default.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name) });
        });
    }

    function removeKeySession(sessionToken) {
        var session = sessionToken.session;

        session.remove().then(function () {
            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());
            eventBus.trigger(events.KEY_SESSION_REMOVED, { data: sessionToken.getSessionID() });
        }, function (error) {
            eventBus.trigger(events.KEY_SESSION_REMOVED, { data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name });
        });
    }

    function closeKeySession(sessionToken) {
        // Send our request to the key session
        closeKeySessionInternal(sessionToken).catch(function (error) {
            removeSession(sessionToken);
            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name });
        });
    }

    function requestKeySystemAccessInternal(ksConfigurations, idx) {

        if (navigator.requestMediaKeySystemAccess === undefined || typeof navigator.requestMediaKeySystemAccess !== 'function') {
            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Insecure origins are not allowed' });
            return;
        }

        (function (i) {
            var keySystem = ksConfigurations[i].ks;
            var configs = ksConfigurations[i].configs;
            var systemString = keySystem.systemString;

            // PATCH to support persistent licenses on Edge browser (see issue #2658)
            if (systemString === _ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {
                systemString += '.recommendation';
            }

            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {
                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()
                var configuration = typeof mediaKeySystemAccess.getConfiguration === 'function' ? mediaKeySystemAccess.getConfiguration() : null;
                var keySystemAccess = new _KeySystemAccess2.default(keySystem, configuration);
                keySystemAccess.mksa = mediaKeySystemAccess;
                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: keySystemAccess });
            }).catch(function (error) {
                if (++i < ksConfigurations.length) {
                    requestKeySystemAccessInternal(ksConfigurations, i);
                } else {
                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! ' + error.message });
                }
            });
        })(idx);
    }

    function closeKeySessionInternal(sessionToken) {
        var session = sessionToken.session;

        // Remove event listeners
        session.removeEventListener('keystatuseschange', sessionToken);
        session.removeEventListener('message', sessionToken);

        // Send our request to the key session
        return session.close();
    }

    // This is our main event handler for all desired HTMLMediaElement events
    // related to EME.  These events are translated into our API-independent
    // versions of the same events
    function createEventHandler() {
        return {
            handleEvent: function handleEvent(event) {
                switch (event.type) {
                    case 'encrypted':
                        if (event.initData) {
                            var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                            eventBus.trigger(events.NEED_KEY, { key: new _NeedKey2.default(initData, event.initDataType) });
                        }
                        break;
                }
            }
        };
    }

    function removeSession(token) {
        // Remove from our session list
        for (var i = 0; i < sessions.length; i++) {
            if (sessions[i] === token) {
                sessions.splice(i, 1);
                break;
            }
        }
    }

    function parseKeyStatus(args) {
        // Edge and Chrome implement different version of keystatues, param are not on same order
        var status = void 0,
            keyId = void 0;
        if (args && args.length > 0) {
            if (args[0]) {
                if (typeof args[0] === 'string') {
                    status = args[0];
                } else {
                    keyId = args[0];
                }
            }

            if (args[1]) {
                if (typeof args[1] === 'string') {
                    status = args[1];
                } else {
                    keyId = args[1];
                }
            }
        }
        return {
            status: status,
            keyId: keyId
        };
    }

    // Function to create our session token objects which manage the EME
    // MediaKeySession and session-specific event handler
    function createSessionToken(session, initData, sessionType, sessionID) {
        var token = { // Implements SessionToken
            session: session,
            initData: initData,
            sessionId: sessionID,

            // This is our main event handler for all desired MediaKeySession events
            // These events are translated into our API-independent versions of the
            // same events
            handleEvent: function handleEvent(event) {
                switch (event.type) {
                    case 'keystatuseschange':
                        eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: this });
                        event.target.keyStatuses.forEach(function () {
                            var keyStatus = parseKeyStatus(arguments);
                            switch (keyStatus.status) {
                                case 'expired':
                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, { error: new _DashJSError2.default(_ProtectionErrors2.default.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, _ProtectionErrors2.default.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE) });
                                    break;
                                default:
                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);
                                    break;
                            }
                        });
                        break;

                    case 'message':
                        var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;
                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new _KeyMessage2.default(this, message, undefined, event.messageType) });
                        break;
                }
            },

            getSessionID: function getSessionID() {
                return session.sessionId;
            },

            getExpirationTime: function getExpirationTime() {
                return session.expiration;
            },

            getKeyStatuses: function getKeyStatuses() {
                return session.keyStatuses;
            },

            getUsable: function getUsable() {
                var usable = false;
                session.keyStatuses.forEach(function () {
                    var keyStatus = parseKeyStatus(arguments);
                    if (keyStatus.status === 'usable') {
                        usable = true;
                    }
                });
                return usable;
            },

            getSessionType: function getSessionType() {
                return sessionType;
            }
        };

        // Add all event listeners
        session.addEventListener('keystatuseschange', token);
        session.addEventListener('message', token);

        // Register callback for session closed Promise
        session.closed.then(function () {
            removeSession(token);
            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());
            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: token.getSessionID() });
        });

        // Add to our session list
        sessions.push(token);

        return token;
    }

    instance = {
        getAllInitData: getAllInitData,
        requestKeySystemAccess: requestKeySystemAccess,
        getKeySystem: getKeySystem,
        selectKeySystem: selectKeySystem,
        setMediaElement: setMediaElement,
        setServerCertificate: setServerCertificate,
        createKeySession: createKeySession,
        updateKeySession: updateKeySession,
        loadKeySession: loadKeySession,
        removeKeySession: removeKeySession,
        closeKeySession: closeKeySession,
        stop: stop,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

/**
 * Most recent EME implementation
 *
 * Implemented by Google Chrome v36+ (Windows, OSX, Linux)
 *
 * @implements ProtectionModel
 * @class
 */


ProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';
exports.default = dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_3Feb2014.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/models/ProtectionModel_3Feb2014.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ProtectionKeyController = __webpack_require__(/*! ../controllers/ProtectionKeyController */ "./node_modules/dashjs/src/streaming/protection/controllers/ProtectionKeyController.js");

var _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController);

var _NeedKey = __webpack_require__(/*! ../vo/NeedKey */ "./node_modules/dashjs/src/streaming/protection/vo/NeedKey.js");

var _NeedKey2 = _interopRequireDefault(_NeedKey);

var _DashJSError = __webpack_require__(/*! ../../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _ProtectionErrors = __webpack_require__(/*! ../errors/ProtectionErrors */ "./node_modules/dashjs/src/streaming/protection/errors/ProtectionErrors.js");

var _ProtectionErrors2 = _interopRequireDefault(_ProtectionErrors);

var _KeyMessage = __webpack_require__(/*! ../vo/KeyMessage */ "./node_modules/dashjs/src/streaming/protection/vo/KeyMessage.js");

var _KeyMessage2 = _interopRequireDefault(_KeyMessage);

var _KeySystemConfiguration = __webpack_require__(/*! ../vo/KeySystemConfiguration */ "./node_modules/dashjs/src/streaming/protection/vo/KeySystemConfiguration.js");

var _KeySystemConfiguration2 = _interopRequireDefault(_KeySystemConfiguration);

var _KeySystemAccess = __webpack_require__(/*! ../vo/KeySystemAccess */ "./node_modules/dashjs/src/streaming/protection/vo/KeySystemAccess.js");

var _KeySystemAccess2 = _interopRequireDefault(_KeySystemAccess);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ProtectionModel_3Feb2014(config) {

    config = config || {};
    var context = this.context;
    var eventBus = config.eventBus; //Need to pass in here so we can use same instance since this is optional module
    var events = config.events;
    var debug = config.debug;
    var api = config.api;

    var instance = void 0,
        logger = void 0,
        videoElement = void 0,
        keySystem = void 0,
        mediaKeys = void 0,
        keySystemAccess = void 0,
        sessions = void 0,
        eventHandler = void 0,
        protectionKeyController = void 0;

    function setup() {
        logger = debug.getLogger(instance);
        videoElement = null;
        keySystem = null;
        mediaKeys = null;
        keySystemAccess = null;
        sessions = [];
        protectionKeyController = (0, _ProtectionKeyController2.default)(context).getInstance();
        eventHandler = createEventHandler();
    }

    function reset() {
        try {
            for (var i = 0; i < sessions.length; i++) {
                closeKeySession(sessions[i]);
            }
            if (videoElement) {
                videoElement.removeEventListener(api.needkey, eventHandler);
            }
            eventBus.trigger(events.TEARDOWN_COMPLETE);
        } catch (error) {
            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });
        }
    }

    function getKeySystem() {
        return keySystem;
    }

    function getAllInitData() {
        var retVal = [];
        for (var i = 0; i < sessions.length; i++) {
            retVal.push(sessions[i].initData);
        }
        return retVal;
    }

    function requestKeySystemAccess(ksConfigurations) {

        // Try key systems in order, first one with supported key system configuration
        // is used
        var found = false;
        for (var ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {
            var systemString = ksConfigurations[ksIdx].ks.systemString;
            var configs = ksConfigurations[ksIdx].configs;
            var supportedAudio = null;
            var supportedVideo = null;

            // Try key system configs in order, first one with supported audio/video
            // is used
            for (var configIdx = 0; configIdx < configs.length; configIdx++) {
                var audios = configs[configIdx].audioCapabilities;
                var videos = configs[configIdx].videoCapabilities;

                // Look for supported audio container/codecs
                if (audios && audios.length !== 0) {
                    supportedAudio = []; // Indicates that we have a requested audio config
                    for (var audioIdx = 0; audioIdx < audios.length; audioIdx++) {
                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {
                            supportedAudio.push(audios[audioIdx]);
                        }
                    }
                }

                // Look for supported video container/codecs
                if (videos && videos.length !== 0) {
                    supportedVideo = []; // Indicates that we have a requested video config
                    for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) {
                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {
                            supportedVideo.push(videos[videoIdx]);
                        }
                    }
                }

                // No supported audio or video in this configuration OR we have
                // requested audio or video configuration that is not supported
                if (!supportedAudio && !supportedVideo || supportedAudio && supportedAudio.length === 0 || supportedVideo && supportedVideo.length === 0) {
                    continue;
                }

                // This configuration is supported
                found = true;
                var ksConfig = new _KeySystemConfiguration2.default(supportedAudio, supportedVideo);
                var ks = protectionKeyController.getKeySystemBySystemString(systemString);
                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new _KeySystemAccess2.default(ks, ksConfig) });
                break;
            }
        }
        if (!found) {
            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });
        }
    }

    function selectKeySystem(ksAccess) {
        try {
            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);
            keySystem = ksAccess.keySystem;
            keySystemAccess = ksAccess;
            if (videoElement) {
                setMediaKeys();
            }
            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
        } catch (error) {
            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });
        }
    }

    function setMediaElement(mediaElement) {
        if (videoElement === mediaElement) return;

        // Replacing the previous element
        if (videoElement) {
            videoElement.removeEventListener(api.needkey, eventHandler);
        }

        videoElement = mediaElement;

        // Only if we are not detaching from the existing element
        if (videoElement) {
            videoElement.addEventListener(api.needkey, eventHandler);
            if (mediaKeys) {
                setMediaKeys();
            }
        }
    }

    function createKeySession(initData, protData, sessionType, cdmData) {
        if (!keySystem || !mediaKeys || !keySystemAccess) {
            throw new Error('Can not create sessions until you have selected a key system');
        }

        // Use the first video capability for the contentType.
        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format

        // If player is trying to playback Audio only stream - don't error out.
        var capabilities = null;

        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {
            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];
        }

        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {
            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];
        }

        if (capabilities === null) {
            throw new Error('Can not create sessions for unknown content types.');
        }

        var contentType = capabilities.contentType;
        var session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);
        var sessionToken = createSessionToken(session, initData);

        // Add all event listeners
        session.addEventListener(api.error, sessionToken);
        session.addEventListener(api.message, sessionToken);
        session.addEventListener(api.ready, sessionToken);
        session.addEventListener(api.close, sessionToken);

        // Add to our session list
        sessions.push(sessionToken);
        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());
        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });
    }

    function updateKeySession(sessionToken, message) {
        var session = sessionToken.session;

        if (!protectionKeyController.isClearKey(keySystem)) {
            // Send our request to the key session
            session.update(new Uint8Array(message));
        } else {
            // For clearkey, message is a ClearKeyKeySet
            session.update(new Uint8Array(message.toJWK()));
        }
    }

    /**
     * Close the given session and release all associated keys.  Following
     * this call, the sessionToken becomes invalid
     *
     * @param {Object} sessionToken - the session token
     */
    function closeKeySession(sessionToken) {
        var session = sessionToken.session;

        // Remove event listeners
        session.removeEventListener(api.error, sessionToken);
        session.removeEventListener(api.message, sessionToken);
        session.removeEventListener(api.ready, sessionToken);
        session.removeEventListener(api.close, sessionToken);

        // Remove from our session list
        for (var i = 0; i < sessions.length; i++) {
            if (sessions[i] === sessionToken) {
                sessions.splice(i, 1);
                break;
            }
        }

        // Send our request to the key session
        session[api.release]();
    }

    function setServerCertificate() /*serverCertificate*/{/* Not supported */}
    function loadKeySession() /*sessionID*/{/* Not supported */}
    function removeKeySession() /*sessionToken*/{/* Not supported */}

    function createEventHandler() {
        return {
            handleEvent: function handleEvent(event) {
                switch (event.type) {

                    case api.needkey:
                        if (event.initData) {
                            var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                            eventBus.trigger(events.NEED_KEY, { key: new _NeedKey2.default(initData, 'cenc') });
                        }
                        break;
                }
            }
        };
    }

    // IE11 does not let you set MediaKeys until it has entered a certain
    // readyState, so we need this logic to ensure we don't set the keys
    // too early
    function setMediaKeys() {
        var boundDoSetKeys = null;
        var doSetKeys = function doSetKeys() {
            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);
            videoElement[api.setMediaKeys](mediaKeys);
            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);
        };
        if (videoElement.readyState >= 1) {
            doSetKeys();
        } else {
            boundDoSetKeys = doSetKeys.bind(this);
            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);
        }
    }

    // Function to create our session token objects which manage the EME
    // MediaKeySession and session-specific event handler
    function createSessionToken(keySession, initData) {
        return {
            // Implements SessionToken
            session: keySession,
            initData: initData,

            getSessionID: function getSessionID() {
                return this.session.sessionId;
            },

            getExpirationTime: function getExpirationTime() {
                return NaN;
            },

            getSessionType: function getSessionType() {
                return 'temporary';
            },
            // This is our main event handler for all desired MediaKeySession events
            // These events are translated into our API-independent versions of the
            // same events
            handleEvent: function handleEvent(event) {
                switch (event.type) {
                    case api.error:
                        var errorStr = 'KeyError'; // TODO: Make better string from event
                        eventBus.trigger(events.KEY_ERROR, { data: new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEYERR_CODE, errorStr, this) });
                        break;
                    case api.message:
                        var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;
                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new _KeyMessage2.default(this, message, event.destinationURL) });
                        break;
                    case api.ready:
                        logger.debug('DRM: Key added.');
                        eventBus.trigger(events.KEY_ADDED);
                        break;

                    case api.close:
                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());
                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });
                        break;
                }
            }
        };
    }

    instance = {
        getAllInitData: getAllInitData,
        requestKeySystemAccess: requestKeySystemAccess,
        getKeySystem: getKeySystem,
        selectKeySystem: selectKeySystem,
        setMediaElement: setMediaElement,
        createKeySession: createKeySession,
        updateKeySession: updateKeySession,
        closeKeySession: closeKeySession,
        setServerCertificate: setServerCertificate,
        loadKeySession: loadKeySession,
        removeKeySession: removeKeySession,
        stop: reset,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

/**
 * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.
 *
 * Implemented by Internet Explorer 11 (Windows 8.1)
 *
 * @implements ProtectionModel
 * @class
 */

ProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';
exports.default = dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/servers/ClearKey.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/servers/ClearKey.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _KeyPair = __webpack_require__(/*! ../vo/KeyPair */ "./node_modules/dashjs/src/streaming/protection/vo/KeyPair.js");

var _KeyPair2 = _interopRequireDefault(_KeyPair);

var _ClearKeyKeySet = __webpack_require__(/*! ../vo/ClearKeyKeySet */ "./node_modules/dashjs/src/streaming/protection/vo/ClearKeyKeySet.js");

var _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * CableLabs ClearKey license server implementation
 *
 * For testing purposes and evaluating potential uses for ClearKey, we have developed
 * a dirt-simple API for requesting ClearKey licenses from a remote server.
 *
 * @implements LicenseServer
 * @class
 */
function ClearKey() {

    var instance = void 0;

    function getServerURLFromMessage(url, message /*, messageType*/) {
        // Build ClearKey server query string
        var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));
        url += '/?';
        for (var i = 0; i < jsonMsg.kids.length; i++) {
            url += jsonMsg.kids[i] + '&';
        }
        url = url.substring(0, url.length - 1);
        return url;
    }

    function getHTTPMethod() /*messageType*/{
        return 'GET';
    }

    function getResponseType() /*keySystemStr*/{
        return 'json';
    }

    function getLicenseMessage(serverResponse /*, keySystemStr, messageType*/) {
        if (!serverResponse.hasOwnProperty('keys')) {
            return null;
        }
        var keyPairs = [];
        for (var i = 0; i < serverResponse.keys.length; i++) {
            var keypair = serverResponse.keys[i];
            var keyid = keypair.kid.replace(/=/g, '');
            var key = keypair.k.replace(/=/g, '');

            keyPairs.push(new _KeyPair2.default(keyid, key));
        }
        return new _ClearKeyKeySet2.default(keyPairs);
    }

    function getErrorResponse(serverResponse /*, keySystemStr, messageType*/) {
        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));
    }

    instance = {
        getServerURLFromMessage: getServerURLFromMessage,
        getHTTPMethod: getHTTPMethod,
        getResponseType: getResponseType,
        getLicenseMessage: getLicenseMessage,
        getErrorResponse: getErrorResponse
    };

    return instance;
}

ClearKey.__dashjs_factory_name = 'ClearKey';
exports.default = dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/servers/DRMToday.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/servers/DRMToday.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ProtectionConstants = __webpack_require__(/*! ../../constants/ProtectionConstants */ "./node_modules/dashjs/src/streaming/constants/ProtectionConstants.js");

var _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DRMToday(config) {

    config = config || {};
    var BASE64 = config.BASE64;

    var keySystems = {};
    keySystems[_ProtectionConstants2.default.WIDEVINE_KEYSTEM_STRING] = {
        responseType: 'json',
        getLicenseMessage: function getLicenseMessage(response) {
            return BASE64.decodeArray(response.license);
        },
        getErrorResponse: function getErrorResponse(response) {
            return response;
        }
    };
    keySystems[_ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING] = {
        responseType: 'arraybuffer',
        getLicenseMessage: function getLicenseMessage(response) {
            return response;
        },
        getErrorResponse: function getErrorResponse(response) {
            return String.fromCharCode.apply(null, new Uint8Array(response));
        }
    };

    var instance = void 0;

    function checkConfig() {
        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {
            throw new Error('Missing config parameter(s)');
        }
    }

    function getServerURLFromMessage(url /*, message, messageType*/) {
        return url;
    }

    function getHTTPMethod() /*messageType*/{
        return 'POST';
    }

    function getResponseType(keySystemStr /*, messageType*/) {
        return keySystems[keySystemStr].responseType;
    }

    function getLicenseMessage(serverResponse, keySystemStr /*, messageType*/) {
        checkConfig();
        return keySystems[keySystemStr].getLicenseMessage(serverResponse);
    }

    function getErrorResponse(serverResponse, keySystemStr /*, messageType*/) {
        return keySystems[keySystemStr].getErrorResponse(serverResponse);
    }

    instance = {
        getServerURLFromMessage: getServerURLFromMessage,
        getHTTPMethod: getHTTPMethod,
        getResponseType: getResponseType,
        getLicenseMessage: getLicenseMessage,
        getErrorResponse: getErrorResponse
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

/**
 * CastLabs DRMToday License Server implementation
 *
 * @implements LicenseServer
 * @class
 */

DRMToday.__dashjs_factory_name = 'DRMToday';
exports.default = dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/servers/PlayReady.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/servers/PlayReady.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/* global escape: true */

/**
 * Microsoft PlayReady Test License Server
 *
 * For testing content that uses the PlayReady test server at
 *
 * @implements LicenseServer
 * @class
 */

function PlayReady() {

    var instance = void 0;

    var soap = 'http://schemas.xmlsoap.org/soap/envelope/';

    function uintToString(arrayBuffer) {
        var encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));
        var decodedString = decodeURIComponent(escape(encodedString));
        return decodedString;
    }

    function parseServerResponse(serverResponse) {
        if (window.DOMParser) {
            var stringResponse = uintToString(serverResponse);
            var parser = new window.DOMParser();
            var xmlDoc = parser.parseFromString(stringResponse, 'text/xml');
            var envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;
            var body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;
            var fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;

            if (fault) {
                return null;
            }
        }
        return serverResponse;
    }

    function parseErrorResponse(serverResponse) {
        var faultstring = '';
        var statusCode = '';
        var message = '';
        var idStart = -1;
        var idEnd = -1;

        if (window.DOMParser) {
            var stringResponse = uintToString(serverResponse);
            var parser = new window.DOMParser();
            var xmlDoc = parser.parseFromString(stringResponse, 'text/xml');
            var envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;
            var body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;
            var fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;
            var detail = fault ? fault.getElementsByTagName('detail')[0] : null;
            var exception = detail ? detail.getElementsByTagName('Exception')[0] : null;
            var node = null;

            if (fault === null) {
                return stringResponse;
            }

            node = fault.getElementsByTagName('faultstring')[0].firstChild;
            faultstring = node ? node.nodeValue : null;

            if (exception !== null) {
                node = exception.getElementsByTagName('StatusCode')[0];
                statusCode = node ? node.firstChild.nodeValue : null;
                node = exception.getElementsByTagName('Message')[0];
                message = node ? node.firstChild.nodeValue : null;
                idStart = message ? message.lastIndexOf('[') + 1 : -1;
                idEnd = message ? message.indexOf(']') : -1;
                message = message ? message.substring(idStart, idEnd) : '';
            }
        }

        var errorString = 'code: ' + statusCode + ', name: ' + faultstring;
        if (message) {
            errorString += ', message: ' + message;
        }

        return errorString;
    }

    function getServerURLFromMessage(url /*, message, messageType*/) {
        return url;
    }

    function getHTTPMethod() /*messageType*/{
        return 'POST';
    }

    function getResponseType() /*keySystemStr, messageType*/{
        return 'arraybuffer';
    }

    function getLicenseMessage(serverResponse /*, keySystemStr, messageType*/) {
        return parseServerResponse.call(this, serverResponse);
    }

    function getErrorResponse(serverResponse /*, keySystemStr, messageType*/) {
        return parseErrorResponse.call(this, serverResponse);
    }

    instance = {
        getServerURLFromMessage: getServerURLFromMessage,
        getHTTPMethod: getHTTPMethod,
        getResponseType: getResponseType,
        getLicenseMessage: getLicenseMessage,
        getErrorResponse: getErrorResponse
    };

    return instance;
}

PlayReady.__dashjs_factory_name = 'PlayReady';
exports.default = dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/servers/Widevine.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/servers/Widevine.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function Widevine() {

    var instance = void 0;

    function getServerURLFromMessage(url /*, message, messageType*/) {
        return url;
    }

    function getHTTPMethod() /*messageType*/{
        return 'POST';
    }

    function getResponseType() /*keySystemStr, messageType*/{
        return 'arraybuffer';
    }

    function getLicenseMessage(serverResponse /*, keySystemStr, messageType*/) {
        return serverResponse;
    }

    function getErrorResponse(serverResponse /*, keySystemStr, messageType*/) {
        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));
    }

    instance = {
        getServerURLFromMessage: getServerURLFromMessage,
        getHTTPMethod: getHTTPMethod,
        getResponseType: getResponseType,
        getLicenseMessage: getLicenseMessage,
        getErrorResponse: getErrorResponse
    };

    return instance;
}

Widevine.__dashjs_factory_name = 'Widevine';
exports.default = dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/vo/ClearKeyKeySet.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/vo/ClearKeyKeySet.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @classdesc A collection of ClearKey encryption keys with an (optional) associated
 *  type
 * @ignore
 */
var ClearKeyKeySet = function () {
    /**
     * @param {Array.<KeyPair>} keyPairs
     * @param {string} type the type of keys in this set.  One of either 'persistent'
     * or 'temporary'.  Can also be null or undefined.
     * @class
     * @ignore
     */
    function ClearKeyKeySet(keyPairs, type) {
        _classCallCheck(this, ClearKeyKeySet);

        if (type && type !== 'persistent' && type !== 'temporary') throw new Error('Invalid ClearKey key set type!  Must be one of \'persistent\' or \'temporary\'');
        this.keyPairs = keyPairs;
        this.type = type;
    }

    /**
     * Convert this key set to its JSON Web Key (JWK) representation
     *
     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer
     */


    _createClass(ClearKeyKeySet, [{
        key: 'toJWK',
        value: function toJWK() {
            var i = void 0;
            var numKeys = this.keyPairs.length;
            var jwk = { keys: [] };

            for (i = 0; i < numKeys; i++) {
                var key = {
                    kty: 'oct',
                    alg: 'A128KW',
                    kid: this.keyPairs[i].keyID,
                    k: this.keyPairs[i].key
                };
                jwk.keys.push(key);
            }
            if (this.type) {
                jwk.type = this.type;
            }
            var jwkString = JSON.stringify(jwk);
            var len = jwkString.length;

            // Convert JSON string to ArrayBuffer
            var buf = new ArrayBuffer(len);
            var bView = new Uint8Array(buf);
            for (i = 0; i < len; i++) {
                bView[i] = jwkString.charCodeAt(i);
            }return buf;
        }
    }]);

    return ClearKeyKeySet;
}();

exports.default = ClearKeyKeySet;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/vo/KeyMessage.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/vo/KeyMessage.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc EME-independent KeyMessage
 * @ignore
 */
var KeyMessage =
/**
 * @param {SessionToken} sessionToken the session
 * to which the key message is associated
 * @param {ArrayBuffer} message the key message
 * @param {string} defaultURL license acquisition URL provided by the CDM
 * @param {string} messageType Supported message types can be found
 * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.
 * @class
 */
function KeyMessage(sessionToken, message, defaultURL, messageType) {
  _classCallCheck(this, KeyMessage);

  this.sessionToken = sessionToken;
  this.message = message;
  this.defaultURL = defaultURL;
  this.messageType = messageType ? messageType : 'license-request';
};

exports.default = KeyMessage;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/vo/KeyPair.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/vo/KeyPair.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc Represents a 128-bit keyID and 128-bit encryption key
 * @ignore
 */
var KeyPair =
/**
 * @param {string} keyID 128-bit key ID, base64 encoded, with no padding
 * @param {string} key 128-bit encryption key, base64 encoded, with no padding
 * @class
 * @ignore
 */
function KeyPair(keyID, key) {
  _classCallCheck(this, KeyPair);

  this.keyID = keyID;
  this.key = key;
};

exports.default = KeyPair;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/vo/KeySystemAccess.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/vo/KeySystemAccess.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc Creates a new key system access token.  Represents a valid key system for
 * given piece of content and key system requirements.  Used to initialize license
 * acquisition operations.
 * @ignore
 */
var KeySystemAccess =
/**
 * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system
 * @param {KeySystemConfiguration} ksConfiguration the
 * subset of configurations passed to the key system access request that are supported
 * by this user agent
 * @class
 * @ignore
 */
function KeySystemAccess(keySystem, ksConfiguration) {
  _classCallCheck(this, KeySystemAccess);

  this.keySystem = keySystem;
  this.ksConfiguration = ksConfiguration;
};

exports.default = KeySystemAccess;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/vo/KeySystemConfiguration.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/vo/KeySystemConfiguration.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @classdesc Represents a set of configurations that describe the capabilities desired for
 *  support by a given CDM
 * @ignore
 */
var KeySystemConfiguration =
/**
 * @param {Array.<MediaCapability>} audioCapabilities array of
 * desired audio capabilities.  Higher preference capabilities should be placed earlier
 * in the array.
 * @param {Array.<MediaCapability>} videoCapabilities array of
 * desired video capabilities.  Higher preference capabilities should be placed earlier
 * in the array.
 * @param {string} distinctiveIdentifier desired use of distinctive identifiers.
 * One of "required", "optional", or "not-allowed"
 * @param {string} persistentState desired support for persistent storage of
 * key systems.  One of "required", "optional", or "not-allowed"
 * @param {Array.<string>} sessionTypes List of session types that must
 * be supported by the key system
 * @class
 */
function KeySystemConfiguration(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {
    _classCallCheck(this, KeySystemConfiguration);

    this.initDataTypes = ['cenc'];
    if (audioCapabilities && audioCapabilities.length) {
        this.audioCapabilities = audioCapabilities;
    }
    if (videoCapabilities && videoCapabilities.length) {
        this.videoCapabilities = videoCapabilities;
    }
    this.distinctiveIdentifier = distinctiveIdentifier;
    this.persistentState = persistentState;
    // adding persistent-license to sessionTypes to allow offline playback
    sessionTypes.push('persistent-license');
    this.sessionTypes = sessionTypes;
};

exports.default = KeySystemConfiguration;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/vo/MediaCapability.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/vo/MediaCapability.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc A media capability
 * @ignore
 */
var MediaCapability =
/**
 * @param {string} contentType MIME type and codecs (RFC6386)
 * @param {string} robustness
 * @class
 * @ignore
 */
function MediaCapability(contentType, robustness) {
  _classCallCheck(this, MediaCapability);

  this.contentType = contentType;
  this.robustness = robustness;
};

exports.default = MediaCapability;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/protection/vo/NeedKey.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/protection/vo/NeedKey.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc NeedKey
 * @ignore
 */
var NeedKey =
/**
 * @param {ArrayBuffer} initData the initialization data
 * @param {string} initDataType initialization data type
 * @class
 */
function NeedKey(initData, initDataType) {
  _classCallCheck(this, NeedKey);

  this.initData = initData;
  this.initDataType = initDataType;
};

exports.default = NeedKey;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/DroppedFramesHistory.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/DroppedFramesHistory.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DroppedFramesHistory() {

    var values = [];
    var lastDroppedFrames = 0;
    var lastTotalFrames = 0;

    function push(index, playbackQuality) {
        var droppedVideoFrames = playbackQuality && playbackQuality.droppedVideoFrames ? playbackQuality.droppedVideoFrames : 0;
        var totalVideoFrames = playbackQuality && playbackQuality.totalVideoFrames ? playbackQuality.totalVideoFrames : 0;

        var intervalDroppedFrames = droppedVideoFrames - lastDroppedFrames;
        lastDroppedFrames = droppedVideoFrames;

        var intervalTotalFrames = totalVideoFrames - lastTotalFrames;
        lastTotalFrames = totalVideoFrames;

        if (!isNaN(index)) {
            if (!values[index]) {
                values[index] = { droppedVideoFrames: intervalDroppedFrames, totalVideoFrames: intervalTotalFrames };
            } else {
                values[index].droppedVideoFrames += intervalDroppedFrames;
                values[index].totalVideoFrames += intervalTotalFrames;
            }
        }
    }

    function getDroppedFrameHistory() {
        return values;
    }

    function reset(playbackQuality) {
        values = [];
        lastDroppedFrames = playbackQuality.droppedVideoFrames;
        lastTotalFrames = playbackQuality.totalVideoFrames;
    }

    return {
        push: push,
        getFrameHistory: getDroppedFrameHistory,
        reset: reset
    };
}

DroppedFramesHistory.__dashjs_factory_name = 'DroppedFramesHistory';
var factory = _FactoryMaker2.default.getClassFactory(DroppedFramesHistory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/RulesContext.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/RulesContext.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function RulesContext(config) {

    config = config || {};
    var instance = void 0;
    var abrController = config.abrController;
    var switchHistory = config.switchHistory;
    var droppedFramesHistory = config.droppedFramesHistory;
    var currentRequest = config.currentRequest;
    var bufferOccupancyABR = config.useBufferOccupancyABR;
    var scheduleController = config.streamProcessor ? config.streamProcessor.getScheduleController() : null;
    var representationInfo = config.streamProcessor ? config.streamProcessor.getRepresentationInfo() : null;

    function getMediaType() {
        var mediaInfo = getMediaInfo();
        return mediaInfo ? mediaInfo.type : null;
    }

    function getStreamInfo() {
        var mediaInfo = getMediaInfo();
        return mediaInfo ? mediaInfo.streamInfo : null;
    }

    function getMediaInfo() {
        return representationInfo ? representationInfo.mediaInfo : null;
    }

    function getRepresentationInfo() {
        return representationInfo;
    }

    function getScheduleController() {
        return scheduleController;
    }

    function getAbrController() {
        return abrController;
    }

    function getSwitchHistory() {
        return switchHistory;
    }

    function getDroppedFramesHistory() {
        return droppedFramesHistory;
    }

    function getCurrentRequest() {
        return currentRequest;
    }

    function useBufferOccupancyABR() {
        return bufferOccupancyABR;
    }

    instance = {
        getMediaType: getMediaType,
        getMediaInfo: getMediaInfo,
        getDroppedFramesHistory: getDroppedFramesHistory,
        getCurrentRequest: getCurrentRequest,
        getSwitchHistory: getSwitchHistory,
        getStreamInfo: getStreamInfo,
        getScheduleController: getScheduleController,
        getAbrController: getAbrController,
        getRepresentationInfo: getRepresentationInfo,
        useBufferOccupancyABR: useBufferOccupancyABR
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

RulesContext.__dashjs_factory_name = 'RulesContext';
exports.default = _FactoryMaker2.default.getClassFactory(RulesContext);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js":
/*!******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/SwitchRequest.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NO_CHANGE = -1; /**
                     * The copyright in this software is being made available under the BSD License,
                     * included below. This software may be subject to other third party and contributor
                     * rights, including patent rights, and no such rights are granted under this license.
                     *
                     * Copyright (c) 2013, Dash Industry Forum.
                     * All rights reserved.
                     *
                     * Redistribution and use in source and binary forms, with or without modification,
                     * are permitted provided that the following conditions are met:
                     *  * Redistributions of source code must retain the above copyright notice, this
                     *  list of conditions and the following disclaimer.
                     *  * Redistributions in binary form must reproduce the above copyright notice,
                     *  this list of conditions and the following disclaimer in the documentation and/or
                     *  other materials provided with the distribution.
                     *  * Neither the name of Dash Industry Forum nor the names of its
                     *  contributors may be used to endorse or promote products derived from this software
                     *  without specific prior written permission.
                     *
                     *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                     *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                     *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                     *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                     *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                     *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                     *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                     *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                     *  POSSIBILITY OF SUCH DAMAGE.
                     */

var PRIORITY = {
    DEFAULT: 0.5,
    STRONG: 1,
    WEAK: 0
};

function SwitchRequest(q, r, p) {
    //TODO refactor all the calls to this to use config to be like everything else.
    var instance = void 0,
        quality = void 0,
        priority = void 0,
        reason = void 0;

    // check priority value
    function getPriority(p) {
        var ret = PRIORITY.DEFAULT;

        // check that p is one of declared priority value
        if (p === PRIORITY.DEFAULT || p === PRIORITY.STRONG || p === PRIORITY.WEAK) {
            ret = p;
        }
        return ret;
    }

    // init attributes
    quality = q === undefined ? NO_CHANGE : q;
    priority = getPriority(p);
    reason = r === undefined ? null : r;

    instance = {
        quality: quality,
        reason: reason,
        priority: priority
    };

    return instance;
}

SwitchRequest.__dashjs_factory_name = 'SwitchRequest';
var factory = _FactoryMaker2.default.getClassFactory(SwitchRequest);
factory.NO_CHANGE = NO_CHANGE;
factory.PRIORITY = PRIORITY;
_FactoryMaker2.default.updateClassFactory(SwitchRequest.__dashjs_factory_name, factory);

exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/SwitchRequestHistory.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/SwitchRequestHistory.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _SwitchRequest = __webpack_require__(/*! ./SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

var SWITCH_REQUEST_HISTORY_DEPTH = 8; // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule

function SwitchRequestHistory() {
    var switchRequests = []; // running total
    var srHistory = []; // history of each switch

    function push(switchRequest) {
        if (switchRequest.newValue === _SwitchRequest2.default.NO_CHANGE) {
            switchRequest.newValue = switchRequest.oldValue;
        }
        if (!switchRequests[switchRequest.oldValue]) {
            switchRequests[switchRequest.oldValue] = { noDrops: 0, drops: 0, dropSize: 0 };
        }

        // Set switch details
        var indexDiff = switchRequest.newValue - switchRequest.oldValue;
        var drop = indexDiff < 0 ? 1 : 0;
        var dropSize = drop ? -indexDiff : 0;
        var noDrop = drop ? 0 : 1;

        // Update running totals
        switchRequests[switchRequest.oldValue].drops += drop;
        switchRequests[switchRequest.oldValue].dropSize += dropSize;
        switchRequests[switchRequest.oldValue].noDrops += noDrop;

        // Save to history
        srHistory.push({ idx: switchRequest.oldValue, noDrop: noDrop, drop: drop, dropSize: dropSize });

        // Shift earliest switch off srHistory and readjust to keep depth of running totals constant
        if (srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH) {
            var srHistoryFirst = srHistory.shift();
            switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;
            switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;
            switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;
        }
    }

    function getSwitchRequests() {
        return switchRequests;
    }

    function reset() {
        switchRequests = [];
        srHistory = [];
    }

    return {
        push: push,
        getSwitchRequests: getSwitchRequests,
        reset: reset
    };
}

SwitchRequestHistory.__dashjs_factory_name = 'SwitchRequestHistory';
var factory = _FactoryMaker2.default.getClassFactory(SwitchRequestHistory);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/ThroughputHistory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/ThroughputHistory.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// throughput generally stored in kbit/s
// latency generally stored in ms

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2017, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function ThroughputHistory(config) {

    config = config || {};
    // sliding window constants
    var MAX_MEASUREMENTS_TO_KEEP = 20;
    var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;
    var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;
    var AVERAGE_LATENCY_SAMPLE_AMOUNT = 4;
    var THROUGHPUT_DECREASE_SCALE = 1.3;
    var THROUGHPUT_INCREASE_SCALE = 1.3;

    // EWMA constants
    var EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8;
    var EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3;
    var EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2;
    var EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1;

    var mediaPlayerModel = config.mediaPlayerModel;

    var throughputDict = void 0,
        latencyDict = void 0,
        ewmaThroughputDict = void 0,
        ewmaLatencyDict = void 0,
        ewmaHalfLife = void 0;

    function setup() {
        ewmaHalfLife = {
            throughputHalfLife: { fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS, slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS },
            latencyHalfLife: { fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT, slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT }
        };

        reset();
    }

    function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {
        if (mediaType === _Constants2.default.VIDEO) {
            return downloadTimeMs < mediaPlayerModel.getCacheLoadThresholdForType(_Constants2.default.VIDEO);
        } else if (mediaType === _Constants2.default.AUDIO) {
            return downloadTimeMs < mediaPlayerModel.getCacheLoadThresholdForType(_Constants2.default.AUDIO);
        }
    }

    function push(mediaType, httpRequest, useDeadTimeLatency) {
        if (!httpRequest.trace || !httpRequest.trace.length) {
            return;
        }

        var latencyTimeInMilliseconds = httpRequest.tresponse.getTime() - httpRequest.trequest.getTime() || 1;
        var downloadTimeInMilliseconds = httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime() || 1; //Make sure never 0 we divide by this value. Avoid infinity!
        var downloadBytes = httpRequest.trace.reduce(function (a, b) {
            return a + b.b[0];
        }, 0);

        var throughputMeasureTime = void 0;
        if (mediaPlayerModel.getLowLatencyEnabled()) {
            throughputMeasureTime = httpRequest.trace.reduce(function (a, b) {
                return a + b.d;
            }, 0);
        } else {
            throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;
        }

        var throughput = Math.round(8 * downloadBytes / throughputMeasureTime); // bits/ms = kbits/s

        checkSettingsForMediaType(mediaType);

        if (isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {
            if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) {
                // already have some entries which are not cached entries
                // prevent cached fragment loads from skewing the average values
                return;
            } else {
                // have no entries || have cached entries
                // no uncached entries yet, rely on cached entries because ABR rules need something to go by
                throughputDict[mediaType].hasCachedEntries = true;
            }
        } else if (throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries) {
            // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry
            clearSettingsForMediaType(mediaType);
        }

        throughputDict[mediaType].push(throughput);
        if (throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {
            throughputDict[mediaType].shift();
        }

        latencyDict[mediaType].push(latencyTimeInMilliseconds);
        if (latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {
            latencyDict[mediaType].shift();
        }

        updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, 0.001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife);
        updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);
    }

    function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {
        // Note about startup:
        // Estimates start at 0, so early values are underestimated.
        // This effect is countered in getAverageEwma() by dividing the estimates by:
        //     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)

        var fastAlpha = Math.pow(0.5, weight / halfLife.fast);
        ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;

        var slowAlpha = Math.pow(0.5, weight / halfLife.slow);
        ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;

        ewmaObj.totalWeight += weight;
    }

    function getSampleSize(isThroughput, mediaType, isLive) {
        var arr = void 0,
            sampleSize = void 0;

        if (isThroughput) {
            arr = throughputDict[mediaType];
            sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;
        } else {
            arr = latencyDict[mediaType];
            sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;
        }

        if (!arr) {
            sampleSize = 0;
        } else if (sampleSize >= arr.length) {
            sampleSize = arr.length;
        } else if (isThroughput) {
            // if throughput samples vary a lot, average over a wider sample
            for (var i = 1; i < sampleSize; ++i) {
                var ratio = arr[i] / arr[i - 1];
                if (ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) {
                    sampleSize += 1;
                    if (sampleSize === arr.length) {
                        // cannot increase sampleSize beyond arr.length
                        break;
                    }
                }
            }
        }

        return sampleSize;
    }

    function getAverage(isThroughput, mediaType, isDynamic) {
        // only two moving average methods defined at the moment
        return mediaPlayerModel.getMovingAverageMethod() !== _Constants2.default.MOVING_AVERAGE_SLIDING_WINDOW ? getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);
    }

    function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {
        var sampleSize = getSampleSize(isThroughput, mediaType, isDynamic);
        var dict = isThroughput ? throughputDict : latencyDict;
        var arr = dict[mediaType];

        if (sampleSize === 0 || !arr || arr.length === 0) {
            return NaN;
        }

        arr = arr.slice(-sampleSize); // still works if sampleSize too large
        // arr.length >= 1
        return arr.reduce(function (total, elem) {
            return total + elem;
        }) / arr.length;
    }

    function getAverageEwma(isThroughput, mediaType) {
        var halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife;
        var ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];

        if (!ewmaObj || ewmaObj.totalWeight <= 0) {
            return NaN;
        }

        // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)
        var fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.fast));
        var slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.slow));
        return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);
    }

    function getAverageThroughput(mediaType, isDynamic) {
        return getAverage(true, mediaType, isDynamic);
    }

    function getSafeAverageThroughput(mediaType, isDynamic) {
        var average = getAverageThroughput(mediaType, isDynamic);
        if (!isNaN(average)) {
            average *= mediaPlayerModel.getBandwidthSafetyFactor();
        }
        return average;
    }

    function getAverageLatency(mediaType) {
        return getAverage(false, mediaType);
    }

    function checkSettingsForMediaType(mediaType) {
        throughputDict[mediaType] = throughputDict[mediaType] || [];
        latencyDict[mediaType] = latencyDict[mediaType] || [];
        ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || { fastEstimate: 0, slowEstimate: 0, totalWeight: 0 };
        ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || { fastEstimate: 0, slowEstimate: 0, totalWeight: 0 };
    }

    function clearSettingsForMediaType(mediaType) {
        delete throughputDict[mediaType];
        delete latencyDict[mediaType];
        delete ewmaThroughputDict[mediaType];
        delete ewmaLatencyDict[mediaType];
        checkSettingsForMediaType(mediaType);
    }

    function reset() {
        throughputDict = {};
        latencyDict = {};
        ewmaThroughputDict = {};
        ewmaLatencyDict = {};
    }

    var instance = {
        push: push,
        getAverageThroughput: getAverageThroughput,
        getSafeAverageThroughput: getSafeAverageThroughput,
        getAverageLatency: getAverageLatency,
        reset: reset
    };

    setup();
    return instance;
}

ThroughputHistory.__dashjs_factory_name = 'ThroughputHistory';
exports.default = _FactoryMaker2.default.getClassFactory(ThroughputHistory);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/abr/ABRRulesCollection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/abr/ABRRulesCollection.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ThroughputRule = __webpack_require__(/*! ./ThroughputRule */ "./node_modules/dashjs/src/streaming/rules/abr/ThroughputRule.js");

var _ThroughputRule2 = _interopRequireDefault(_ThroughputRule);

var _InsufficientBufferRule = __webpack_require__(/*! ./InsufficientBufferRule */ "./node_modules/dashjs/src/streaming/rules/abr/InsufficientBufferRule.js");

var _InsufficientBufferRule2 = _interopRequireDefault(_InsufficientBufferRule);

var _AbandonRequestsRule = __webpack_require__(/*! ./AbandonRequestsRule */ "./node_modules/dashjs/src/streaming/rules/abr/AbandonRequestsRule.js");

var _AbandonRequestsRule2 = _interopRequireDefault(_AbandonRequestsRule);

var _DroppedFramesRule = __webpack_require__(/*! ./DroppedFramesRule */ "./node_modules/dashjs/src/streaming/rules/abr/DroppedFramesRule.js");

var _DroppedFramesRule2 = _interopRequireDefault(_DroppedFramesRule);

var _SwitchHistoryRule = __webpack_require__(/*! ./SwitchHistoryRule */ "./node_modules/dashjs/src/streaming/rules/abr/SwitchHistoryRule.js");

var _SwitchHistoryRule2 = _interopRequireDefault(_SwitchHistoryRule);

var _BolaRule = __webpack_require__(/*! ./BolaRule */ "./node_modules/dashjs/src/streaming/rules/abr/BolaRule.js");

var _BolaRule2 = _interopRequireDefault(_BolaRule);

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _SwitchRequest = __webpack_require__(/*! ../SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
var QUALITY_SWITCH_RULES = 'qualitySwitchRules';
var ABANDON_FRAGMENT_RULES = 'abandonFragmentRules';

function ABRRulesCollection(config) {

    config = config || {};
    var context = this.context;

    var mediaPlayerModel = config.mediaPlayerModel;
    var metricsModel = config.metricsModel;
    var dashMetrics = config.dashMetrics;

    var instance = void 0,
        qualitySwitchRules = void 0,
        abandonFragmentRules = void 0;

    function initialize() {
        qualitySwitchRules = [];
        abandonFragmentRules = [];

        if (mediaPlayerModel.getUseDefaultABRRules()) {
            // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE.
            // This is controlled by useBufferOccupancyABR mechanism in AbrController.
            qualitySwitchRules.push((0, _BolaRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                mediaPlayerModel: mediaPlayerModel
            }));
            qualitySwitchRules.push((0, _ThroughputRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics
            }));
            qualitySwitchRules.push((0, _InsufficientBufferRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics
            }));
            qualitySwitchRules.push((0, _SwitchHistoryRule2.default)(context).create());
            qualitySwitchRules.push((0, _DroppedFramesRule2.default)(context).create());
            abandonFragmentRules.push((0, _AbandonRequestsRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                mediaPlayerModel: mediaPlayerModel
            }));
        }

        // add custom ABR rules if any
        var customRules = mediaPlayerModel.getABRCustomRules();
        customRules.forEach(function (rule) {
            if (rule.type === QUALITY_SWITCH_RULES) {
                qualitySwitchRules.push(rule.rule(context).create());
            }

            if (rule.type === ABANDON_FRAGMENT_RULES) {
                abandonFragmentRules.push(rule.rule(context).create());
            }
        });
    }

    function getActiveRules(srArray) {
        return srArray.filter(function (sr) {
            return sr.quality > _SwitchRequest2.default.NO_CHANGE;
        });
    }

    function getMinSwitchRequest(srArray) {
        var values = {};
        var i = void 0,
            len = void 0,
            req = void 0,
            newQuality = void 0,
            quality = void 0;

        if (srArray.length === 0) {
            return;
        }

        values[_SwitchRequest2.default.PRIORITY.STRONG] = _SwitchRequest2.default.NO_CHANGE;
        values[_SwitchRequest2.default.PRIORITY.WEAK] = _SwitchRequest2.default.NO_CHANGE;
        values[_SwitchRequest2.default.PRIORITY.DEFAULT] = _SwitchRequest2.default.NO_CHANGE;

        for (i = 0, len = srArray.length; i < len; i += 1) {
            req = srArray[i];
            if (req.quality !== _SwitchRequest2.default.NO_CHANGE) {
                values[req.priority] = values[req.priority] > _SwitchRequest2.default.NO_CHANGE ? Math.min(values[req.priority], req.quality) : req.quality;
            }
        }

        if (values[_SwitchRequest2.default.PRIORITY.WEAK] !== _SwitchRequest2.default.NO_CHANGE) {
            newQuality = values[_SwitchRequest2.default.PRIORITY.WEAK];
        }

        if (values[_SwitchRequest2.default.PRIORITY.DEFAULT] !== _SwitchRequest2.default.NO_CHANGE) {
            newQuality = values[_SwitchRequest2.default.PRIORITY.DEFAULT];
        }

        if (values[_SwitchRequest2.default.PRIORITY.STRONG] !== _SwitchRequest2.default.NO_CHANGE) {
            newQuality = values[_SwitchRequest2.default.PRIORITY.STRONG];
        }

        if (newQuality !== _SwitchRequest2.default.NO_CHANGE) {
            quality = newQuality;
        }

        return (0, _SwitchRequest2.default)(context).create(quality);
    }

    function getMaxQuality(rulesContext) {
        var switchRequestArray = qualitySwitchRules.map(function (rule) {
            return rule.getMaxIndex(rulesContext);
        });
        var activeRules = getActiveRules(switchRequestArray);
        var maxQuality = getMinSwitchRequest(activeRules);

        return maxQuality || (0, _SwitchRequest2.default)(context).create();
    }

    function shouldAbandonFragment(rulesContext) {
        var abandonRequestArray = abandonFragmentRules.map(function (rule) {
            return rule.shouldAbandon(rulesContext);
        });
        var activeRules = getActiveRules(abandonRequestArray);
        var shouldAbandon = getMinSwitchRequest(activeRules);

        return shouldAbandon || (0, _SwitchRequest2.default)(context).create();
    }

    function reset() {
        [qualitySwitchRules, abandonFragmentRules].forEach(function (rules) {
            if (rules && rules.length) {
                rules.forEach(function (rule) {
                    return rule.reset && rule.reset();
                });
            }
        });
        qualitySwitchRules = [];
        abandonFragmentRules = [];
    }

    instance = {
        initialize: initialize,
        reset: reset,
        getMaxQuality: getMaxQuality,
        shouldAbandonFragment: shouldAbandonFragment
    };

    return instance;
}

ABRRulesCollection.__dashjs_factory_name = 'ABRRulesCollection';
var factory = _FactoryMaker2.default.getClassFactory(ABRRulesCollection);
factory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES;
factory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES;
_FactoryMaker2.default.updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name, factory);

exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/abr/AbandonRequestsRule.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/abr/AbandonRequestsRule.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _SwitchRequest = __webpack_require__(/*! ../SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function AbandonRequestsRule(config) {

    config = config || {};
    var ABANDON_MULTIPLIER = 1.8;
    var GRACE_TIME_THRESHOLD = 500;
    var MIN_LENGTH_TO_AVERAGE = 5;

    var context = this.context;
    var mediaPlayerModel = config.mediaPlayerModel;
    var metricsModel = config.metricsModel;
    var dashMetrics = config.dashMetrics;

    var instance = void 0,
        logger = void 0,
        fragmentDict = void 0,
        abandonDict = void 0,
        throughputArray = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        reset();
    }

    function setFragmentRequestDict(type, id) {
        fragmentDict[type] = fragmentDict[type] || {};
        fragmentDict[type][id] = fragmentDict[type][id] || {};
    }

    function storeLastRequestThroughputByType(type, throughput) {
        throughputArray[type] = throughputArray[type] || [];
        throughputArray[type].push(throughput);
    }

    function shouldAbandon(rulesContext) {
        var switchRequest = (0, _SwitchRequest2.default)(context).create(_SwitchRequest2.default.NO_CHANGE, { name: AbandonRequestsRule.__dashjs_factory_name });

        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') || !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')) {
            return switchRequest;
        }

        var mediaInfo = rulesContext.getMediaInfo();
        var mediaType = rulesContext.getMediaType();
        var req = rulesContext.getCurrentRequest();

        if (!isNaN(req.index)) {
            setFragmentRequestDict(mediaType, req.index);

            var stableBufferTime = mediaPlayerModel.getStableBufferTime();
            var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));
            if (bufferLevel > stableBufferTime) {
                return switchRequest;
            }

            var fragmentInfo = fragmentDict[mediaType][req.index];
            if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {
                return switchRequest;
            }

            //setup some init info based on first progress event
            if (fragmentInfo.firstByteTime === undefined) {
                throughputArray[mediaType] = [];
                fragmentInfo.firstByteTime = req.firstByteDate.getTime();
                fragmentInfo.segmentDuration = req.duration;
                fragmentInfo.bytesTotal = req.bytesTotal;
                fragmentInfo.id = req.index;
            }
            fragmentInfo.bytesLoaded = req.bytesLoaded;
            fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;

            if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {
                storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));
            }

            if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE && fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD && fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {

                var totalSampledValue = throughputArray[mediaType].reduce(function (a, b) {
                    return a + b;
                }, 0);
                fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);
                fragmentInfo.estimatedTimeOfDownload = +(fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps / 1000).toFixed(2);

                if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0) {
                    return switchRequest;
                } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {

                    var abrController = rulesContext.getAbrController();
                    var bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;
                    var bitrateList = abrController.getBitrateList(mediaInfo);
                    var newQuality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * mediaPlayerModel.getBandwidthSafetyFactor());
                    var estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType, mediaInfo.streamInfo)].bitrate;

                    if (bytesRemaining > estimateOtherBytesTotal) {
                        switchRequest.quality = newQuality;
                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;
                        switchRequest.reason.fragmentID = fragmentInfo.id;
                        abandonDict[fragmentInfo.id] = fragmentInfo;
                        logger.debug('( ', mediaType, 'frag id', fragmentInfo.id, ') is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);
                        delete fragmentDict[mediaType][fragmentInfo.id];
                    }
                }
            } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {
                delete fragmentDict[mediaType][fragmentInfo.id];
            }
        }

        return switchRequest;
    }

    function reset() {
        fragmentDict = {};
        abandonDict = {};
        throughputArray = [];
    }

    instance = {
        shouldAbandon: shouldAbandon,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


AbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';
exports.default = _FactoryMaker2.default.getClassFactory(AbandonRequestsRule);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/abr/BolaRule.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/abr/BolaRule.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MetricsConstants = __webpack_require__(/*! ../../constants/MetricsConstants */ "./node_modules/dashjs/src/streaming/constants/MetricsConstants.js");

var _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);

var _SwitchRequest = __webpack_require__(/*! ../SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _HTTPRequest = __webpack_require__(/*! ../../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _EventBus = __webpack_require__(/*! ../../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _Debug = __webpack_require__(/*! ../../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// BOLA_STATE_ONE_BITRATE   : If there is only one bitrate (or initialization failed), always return NO_CHANGE.
// BOLA_STATE_STARTUP       : Set placeholder buffer such that we download fragments at most recently measured throughput.
// BOLA_STATE_STEADY        : Buffer primed, we switch to steady operation.
// TODO: add BOLA_STATE_SEEK and tune BOLA behavior on seeking
var BOLA_STATE_ONE_BITRATE = 0; /**
                                 * The copyright in this software is being made available under the BSD License,
                                 * included below. This software may be subject to other third party and contributor
                                 * rights, including patent rights, and no such rights are granted under this license.
                                 *
                                 * Copyright (c) 2016, Dash Industry Forum.
                                 * All rights reserved.
                                 *
                                 * Redistribution and use in source and binary forms, with or without modification,
                                 * are permitted provided that the following conditions are met:
                                 *  * Redistributions of source code must retain the above copyright notice, this
                                 *  list of conditions and the following disclaimer.
                                 *  * Redistributions in binary form must reproduce the above copyright notice,
                                 *  this list of conditions and the following disclaimer in the documentation and/or
                                 *  other materials provided with the distribution.
                                 *  * Neither the name of Dash Industry Forum nor the names of its
                                 *  contributors may be used to endorse or promote products derived from this software
                                 *  without specific prior written permission.
                                 *
                                 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                 *  POSSIBILITY OF SUCH DAMAGE.
                                 */

// For a description of the BOLA adaptive bitrate (ABR) algorithm, see http://arxiv.org/abs/1601.06748

var BOLA_STATE_STARTUP = 1;
var BOLA_STATE_STEADY = 2;

var MINIMUM_BUFFER_S = 10; // BOLA should never add artificial delays if buffer is less than MINIMUM_BUFFER_S.
var MINIMUM_BUFFER_PER_BITRATE_LEVEL_S = 2;
// E.g. if there are 5 bitrates, BOLA switches to top bitrate at buffer = 10 + 5 * 2 = 20s.
// If Schedule Controller does not allow buffer to reach that level, it can be achieved through the placeholder buffer level.

var PLACEHOLDER_BUFFER_DECAY = 0.99; // Make sure placeholder buffer does not stick around too long.

function BolaRule(config) {

    config = config || {};
    var context = this.context;

    var dashMetrics = config.dashMetrics;
    var metricsModel = config.metricsModel;
    var mediaPlayerModel = config.mediaPlayerModel;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        bolaStateDict = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        resetInitialSettings();

        eventBus.on(_Events2.default.BUFFER_EMPTY, onBufferEmpty, instance);
        eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);
        eventBus.on(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);
        eventBus.on(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);
        eventBus.on(_Events2.default.METRIC_ADDED, onMetricAdded, instance);
        eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance);
        eventBus.on(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);
    }

    function utilitiesFromBitrates(bitrates) {
        return bitrates.map(function (b) {
            return Math.log(b);
        });
        // no need to worry about offset, utilities will be offset (uniformly) anyway later
    }

    // NOTE: in live streaming, the real buffer level can drop below minimumBufferS, but bola should not stick to lowest bitrate by using a placeholder buffer level
    function calculateBolaParameters(stableBufferTime, bitrates, utilities) {
        var highestUtilityIndex = utilities.reduce(function (highestIndex, u, uIndex) {
            return u > utilities[highestIndex] ? uIndex : highestIndex;
        }, 0);

        if (highestUtilityIndex === 0) {
            // if highestUtilityIndex === 0, then always use lowest bitrate
            return null;
        }

        var bufferTime = Math.max(stableBufferTime, MINIMUM_BUFFER_S + MINIMUM_BUFFER_PER_BITRATE_LEVEL_S * bitrates.length);

        // TODO: Investigate if following can be better if utilities are not the default Math.log utilities.
        // If using Math.log utilities, we can choose Vp and gp to always prefer bitrates[0] at minimumBufferS and bitrates[max] at bufferTarget.
        // (Vp * (utility + gp) - bufferLevel) / bitrate has the maxima described when:
        // Vp * (utilities[0] + gp - 1) === minimumBufferS and Vp * (utilities[max] + gp - 1) === bufferTarget
        // giving:
        var gp = (utilities[highestUtilityIndex] - 1) / (bufferTime / MINIMUM_BUFFER_S - 1);
        var Vp = MINIMUM_BUFFER_S / gp;
        // note that expressions for gp and Vp assume utilities[0] === 1, which is true because of normalization

        return { gp: gp, Vp: Vp };
    }

    function getInitialBolaState(rulesContext) {
        var initialState = {};
        var mediaInfo = rulesContext.getMediaInfo();
        var bitrates = mediaInfo.bitrateList.map(function (b) {
            return b.bandwidth;
        });
        var utilities = utilitiesFromBitrates(bitrates);
        utilities = utilities.map(function (u) {
            return u - utilities[0] + 1;
        }); // normalize
        var stableBufferTime = mediaPlayerModel.getStableBufferTime();
        var params = calculateBolaParameters(stableBufferTime, bitrates, utilities);

        if (!params) {
            // only happens when there is only one bitrate level
            initialState.state = BOLA_STATE_ONE_BITRATE;
        } else {
            initialState.state = BOLA_STATE_STARTUP;

            initialState.bitrates = bitrates;
            initialState.utilities = utilities;
            initialState.stableBufferTime = stableBufferTime;
            initialState.Vp = params.Vp;
            initialState.gp = params.gp;

            initialState.lastQuality = 0;
            clearBolaStateOnSeek(initialState);
        }

        return initialState;
    }

    function clearBolaStateOnSeek(bolaState) {
        bolaState.placeholderBuffer = 0;
        bolaState.mostAdvancedSegmentStart = NaN;
        bolaState.lastSegmentWasReplacement = false;
        bolaState.lastSegmentStart = NaN;
        bolaState.lastSegmentDurationS = NaN;
        bolaState.lastSegmentRequestTimeMs = NaN;
        bolaState.lastSegmentFinishTimeMs = NaN;
    }

    // If the buffer target is changed (can this happen mid-stream?), then adjust BOLA parameters accordingly.
    function checkBolaStateStableBufferTime(bolaState, mediaType) {
        var stableBufferTime = mediaPlayerModel.getStableBufferTime();
        if (bolaState.stableBufferTime !== stableBufferTime) {
            var params = calculateBolaParameters(stableBufferTime, bolaState.bitrates, bolaState.utilities);
            if (params.Vp !== bolaState.Vp || params.gp !== bolaState.gp) {
                // correct placeholder buffer using two criteria:
                // 1. do not change effective buffer level at effectiveBufferLevel === MINIMUM_BUFFER_S ( === Vp * gp )
                // 2. scale placeholder buffer by Vp subject to offset indicated in 1.

                var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));
                var effectiveBufferLevel = bufferLevel + bolaState.placeholderBuffer;

                effectiveBufferLevel -= MINIMUM_BUFFER_S;
                effectiveBufferLevel *= params.Vp / bolaState.Vp;
                effectiveBufferLevel += MINIMUM_BUFFER_S;

                bolaState.stableBufferTime = stableBufferTime;
                bolaState.Vp = params.Vp;
                bolaState.gp = params.gp;
                bolaState.placeholderBuffer = Math.max(0, effectiveBufferLevel - bufferLevel);
            }
        }
    }

    function getBolaState(rulesContext) {
        var mediaType = rulesContext.getMediaType();
        var bolaState = bolaStateDict[mediaType];
        if (!bolaState) {
            bolaState = getInitialBolaState(rulesContext);
            bolaStateDict[mediaType] = bolaState;
        } else if (bolaState.state !== BOLA_STATE_ONE_BITRATE) {
            checkBolaStateStableBufferTime(bolaState, mediaType);
        }
        return bolaState;
    }

    // The core idea of BOLA.
    function getQualityFromBufferLevel(bolaState, bufferLevel) {
        var bitrateCount = bolaState.bitrates.length;
        var quality = NaN;
        var score = NaN;
        for (var i = 0; i < bitrateCount; ++i) {
            var s = (bolaState.Vp * (bolaState.utilities[i] + bolaState.gp) - bufferLevel) / bolaState.bitrates[i];
            if (isNaN(score) || s >= score) {
                score = s;
                quality = i;
            }
        }
        return quality;
    }

    // maximum buffer level which prefers to download at quality rather than wait
    function maxBufferLevelForQuality(bolaState, quality) {
        return bolaState.Vp * (bolaState.utilities[quality] + bolaState.gp);
    }

    // the minimum buffer level that would cause BOLA to choose quality rather than a lower bitrate
    function minBufferLevelForQuality(bolaState, quality) {
        var qBitrate = bolaState.bitrates[quality];
        var qUtility = bolaState.utilities[quality];

        var min = 0;
        for (var i = quality - 1; i >= 0; --i) {
            // for each bitrate less than bitrates[quality], BOLA should prefer quality (unless other bitrate has higher utility)
            if (bolaState.utilities[i] < bolaState.utilities[quality]) {
                var iBitrate = bolaState.bitrates[i];
                var iUtility = bolaState.utilities[i];

                var level = bolaState.Vp * (bolaState.gp + (qBitrate * iUtility - iBitrate * qUtility) / (qBitrate - iBitrate));
                min = Math.max(min, level); // we want min to be small but at least level(i) for all i
            }
        }
        return min;
    }

    /*
     * The placeholder buffer increases the effective buffer that is used to calculate the bitrate.
     * There are two main reasons we might want to increase the placeholder buffer:
     *
     * 1. When a segment finishes downloading, we would expect to get a call on getMaxIndex() regarding the quality for
     *    the next segment. However, there might be a delay before the next call. E.g. when streaming live content, the
     *    next segment might not be available yet. If the call to getMaxIndex() does happens after a delay, we don't
     *    want the delay to change the BOLA decision - we only want to factor download time to decide on bitrate level.
     *
     * 2. It is possible to get a call to getMaxIndex() without having a segment download. The buffer target in dash.js
     *    is different for top-quality segments and lower-quality segments. If getMaxIndex() returns a lower-than-top
     *    quality, then the buffer controller might decide not to download a segment. When dash.js is ready for the next
     *    segment, getMaxIndex() will be called again. We don't want this extra delay to factor in the bitrate decision.
     */
    function updatePlaceholderBuffer(bolaState, mediaType) {
        var nowMs = Date.now();

        if (!isNaN(bolaState.lastSegmentFinishTimeMs)) {
            // compensate for non-bandwidth-derived delays, e.g., live streaming availability, buffer controller
            var delay = 0.001 * (nowMs - bolaState.lastSegmentFinishTimeMs);
            bolaState.placeholderBuffer += Math.max(0, delay);
        } else if (!isNaN(bolaState.lastCallTimeMs)) {
            // no download after last call, compensate for delay between calls
            var _delay = 0.001 * (nowMs - bolaState.lastCallTimeMs);
            bolaState.placeholderBuffer += Math.max(0, _delay);
        }

        bolaState.lastCallTimeMs = nowMs;
        bolaState.lastSegmentStart = NaN;
        bolaState.lastSegmentRequestTimeMs = NaN;
        bolaState.lastSegmentFinishTimeMs = NaN;

        checkBolaStateStableBufferTime(bolaState, mediaType);
    }

    function onBufferEmpty() {
        // if we rebuffer, we don't want the placeholder buffer to artificially raise BOLA quality
        for (var mediaType in bolaStateDict) {
            if (bolaStateDict.hasOwnProperty(mediaType) && bolaStateDict[mediaType].state === BOLA_STATE_STEADY) {
                bolaStateDict[mediaType].placeholderBuffer = 0;
            }
        }
    }

    function onPlaybackSeeking() {
        // TODO: 1. Verify what happens if we seek mid-fragment.
        // TODO: 2. If e.g. we have 10s fragments and seek, we might want to download the first fragment at a lower quality to restart playback quickly.
        for (var mediaType in bolaStateDict) {
            if (bolaStateDict.hasOwnProperty(mediaType)) {
                var bolaState = bolaStateDict[mediaType];
                if (bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                    bolaState.state = BOLA_STATE_STARTUP; // TODO: BOLA_STATE_SEEK?
                    clearBolaStateOnSeek(bolaState);
                }
            }
        }
    }

    function onPeriodSwitchStarted() {
        // TODO: does this have to be handled here?
    }

    function onMediaFragmentLoaded(e) {
        if (e && e.chunk && e.chunk.mediaInfo) {
            var bolaState = bolaStateDict[e.chunk.mediaInfo.type];
            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                var start = e.chunk.start;
                if (isNaN(bolaState.mostAdvancedSegmentStart) || start > bolaState.mostAdvancedSegmentStart) {
                    bolaState.mostAdvancedSegmentStart = start;
                    bolaState.lastSegmentWasReplacement = false;
                } else {
                    bolaState.lastSegmentWasReplacement = true;
                }

                bolaState.lastSegmentStart = start;
                bolaState.lastSegmentDurationS = e.chunk.duration;
                bolaState.lastQuality = e.chunk.quality;

                checkNewSegment(bolaState, e.chunk.mediaInfo.type);
            }
        }
    }

    function onMetricAdded(e) {
        if (e && e.metric === _MetricsConstants2.default.HTTP_REQUEST && e.value && e.value.type === _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE && e.value.trace && e.value.trace.length) {
            var bolaState = bolaStateDict[e.mediaType];
            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                bolaState.lastSegmentRequestTimeMs = e.value.trequest.getTime();
                bolaState.lastSegmentFinishTimeMs = e.value._tfinish.getTime();

                checkNewSegment(bolaState, e.mediaType);
            }
        }
    }

    /*
     * When a new segment is downloaded, we get two notifications: onMediaFragmentLoaded() and onMetricAdded(). It is
     * possible that the quality for the downloaded segment was lower (not higher) than the quality indicated by BOLA.
     * This might happen because of other rules such as the DroppedFramesRule. When this happens, we trim the
     * placeholder buffer to make BOLA more stable. This mechanism also avoids inflating the buffer when BOLA itself
     * decides not to increase the quality to avoid oscillations.
     *
     * We should also check for replacement segments (fast switching). In this case, a segment is downloaded but does
     * not grow the actual buffer. Fast switching might cause the buffer to deplete, causing BOLA to drop the bitrate.
     * We avoid this by growing the placeholder buffer.
     */
    function checkNewSegment(bolaState, mediaType) {
        if (!isNaN(bolaState.lastSegmentStart) && !isNaN(bolaState.lastSegmentRequestTimeMs) && !isNaN(bolaState.placeholderBuffer)) {
            bolaState.placeholderBuffer *= PLACEHOLDER_BUFFER_DECAY;

            // Find what maximum buffer corresponding to last segment was, and ensure placeholder is not relatively larger.
            if (!isNaN(bolaState.lastSegmentFinishTimeMs)) {
                var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));
                var bufferAtLastSegmentRequest = bufferLevel + 0.001 * (bolaState.lastSegmentFinishTimeMs - bolaState.lastSegmentRequestTimeMs); // estimate
                var maxEffectiveBufferForLastSegment = maxBufferLevelForQuality(bolaState, bolaState.lastQuality);
                var maxPlaceholderBuffer = Math.max(0, maxEffectiveBufferForLastSegment - bufferAtLastSegmentRequest);
                bolaState.placeholderBuffer = Math.min(maxPlaceholderBuffer, bolaState.placeholderBuffer);
            }

            // then see if we should grow placeholder buffer

            if (bolaState.lastSegmentWasReplacement && !isNaN(bolaState.lastSegmentDurationS)) {
                // compensate for segments that were downloaded but did not grow the buffer
                bolaState.placeholderBuffer += bolaState.lastSegmentDurationS;
            }

            bolaState.lastSegmentStart = NaN;
            bolaState.lastSegmentRequestTimeMs = NaN;
        }
    }

    function onQualityChangeRequested(e) {
        // Useful to store change requests when abandoning a download.
        if (e) {
            var bolaState = bolaStateDict[e.mediaType];
            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                bolaState.abrQuality = e.newQuality;
            }
        }
    }

    function onFragmentLoadingAbandoned(e) {
        if (e) {
            var bolaState = bolaStateDict[e.mediaType];
            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                // deflate placeholderBuffer - note that we want to be conservative when abandoning
                var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(e.mediaType));
                var wantEffectiveBufferLevel = void 0;
                if (bolaState.abrQuality > 0) {
                    // deflate to point where BOLA just chooses newQuality over newQuality-1
                    wantEffectiveBufferLevel = minBufferLevelForQuality(bolaState, bolaState.abrQuality);
                } else {
                    wantEffectiveBufferLevel = MINIMUM_BUFFER_S;
                }
                var maxPlaceholderBuffer = Math.max(0, wantEffectiveBufferLevel - bufferLevel);
                bolaState.placeholderBuffer = Math.min(bolaState.placeholderBuffer, maxPlaceholderBuffer);
            }
        }
    }

    function getMaxIndex(rulesContext) {
        var mediaInfo = rulesContext.getMediaInfo();
        var mediaType = rulesContext.getMediaType();
        var metrics = metricsModel.getReadOnlyMetricsFor(mediaType);
        var scheduleController = rulesContext.getScheduleController();
        var streamInfo = rulesContext.getStreamInfo();
        var abrController = rulesContext.getAbrController();
        var throughputHistory = abrController.getThroughputHistory();
        var streamId = streamInfo ? streamInfo.id : null;
        var isDynamic = streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic;
        var useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();
        var switchRequest = (0, _SwitchRequest2.default)(context).create();
        switchRequest.reason = switchRequest.reason || {};

        if (!useBufferOccupancyABR) {
            return switchRequest;
        }

        scheduleController.setTimeToLoadDelay(0);

        var bolaState = getBolaState(rulesContext);

        if (bolaState.state === BOLA_STATE_ONE_BITRATE) {
            // shouldn't even have been called
            return switchRequest;
        }

        var bufferLevel = dashMetrics.getCurrentBufferLevel(metrics);
        var throughput = throughputHistory.getAverageThroughput(mediaType, isDynamic);
        var safeThroughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);
        var latency = throughputHistory.getAverageLatency(mediaType);
        var quality = void 0;

        switchRequest.reason.state = bolaState.state;
        switchRequest.reason.throughput = throughput;
        switchRequest.reason.latency = latency;

        if (isNaN(throughput)) {
            // isNaN(throughput) === isNaN(safeThroughput) === isNaN(latency)
            // still starting up - not enough information
            return switchRequest;
        }

        switch (bolaState.state) {
            case BOLA_STATE_STARTUP:
                quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);

                switchRequest.quality = quality;
                switchRequest.reason.throughput = safeThroughput;

                bolaState.placeholderBuffer = Math.max(0, minBufferLevelForQuality(bolaState, quality) - bufferLevel);
                bolaState.lastQuality = quality;

                if (!isNaN(bolaState.lastSegmentDurationS) && bufferLevel >= bolaState.lastSegmentDurationS) {
                    bolaState.state = BOLA_STATE_STEADY;
                }

                break; // BOLA_STATE_STARTUP

            case BOLA_STATE_STEADY:

                // NB: The placeholder buffer is added to bufferLevel to come up with a bitrate.
                //     This might lead BOLA to be too optimistic and to choose a bitrate that would lead to rebuffering -
                //     if the real buffer bufferLevel runs out, the placeholder buffer cannot prevent rebuffering.
                //     However, the InsufficientBufferRule takes care of this scenario.

                updatePlaceholderBuffer(bolaState, mediaType);

                quality = getQualityFromBufferLevel(bolaState, bufferLevel + bolaState.placeholderBuffer);

                // we want to avoid oscillations
                // We implement the "BOLA-O" variant: when network bandwidth lies between two encoded bitrate levels, stick to the lowest level.
                var qualityForThroughput = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);
                if (quality > bolaState.lastQuality && quality > qualityForThroughput) {
                    // only intervene if we are trying to *increase* quality to an *unsustainable* level
                    // we are only avoid oscillations - do not drop below last quality

                    quality = Math.max(qualityForThroughput, bolaState.lastQuality);
                }

                // We do not want to overfill buffer with low quality chunks.
                // Note that there will be no delay if buffer level is below MINIMUM_BUFFER_S, probably even with some margin higher than MINIMUM_BUFFER_S.
                var delayS = Math.max(0, bufferLevel + bolaState.placeholderBuffer - maxBufferLevelForQuality(bolaState, quality));

                // First reduce placeholder buffer, then tell schedule controller to pause.
                if (delayS <= bolaState.placeholderBuffer) {
                    bolaState.placeholderBuffer -= delayS;
                    delayS = 0;
                } else {
                    delayS -= bolaState.placeholderBuffer;
                    bolaState.placeholderBuffer = 0;

                    if (quality < abrController.getTopQualityIndexFor(mediaType, streamId)) {
                        // At top quality, allow schedule controller to decide how far to fill buffer.
                        scheduleController.setTimeToLoadDelay(1000 * delayS);
                    } else {
                        delayS = 0;
                    }
                }

                switchRequest.quality = quality;
                switchRequest.reason.throughput = throughput;
                switchRequest.reason.latency = latency;
                switchRequest.reason.bufferLevel = bufferLevel;
                switchRequest.reason.placeholderBuffer = bolaState.placeholderBuffer;
                switchRequest.reason.delay = delayS;

                bolaState.lastQuality = quality;
                // keep bolaState.state === BOLA_STATE_STEADY

                break; // BOLA_STATE_STEADY

            default:
                logger.debug('BOLA ABR rule invoked in bad state.');
                // should not arrive here, try to recover
                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);
                switchRequest.reason.state = bolaState.state;
                switchRequest.reason.throughput = safeThroughput;
                switchRequest.reason.latency = latency;
                bolaState.state = BOLA_STATE_STARTUP;
                clearBolaStateOnSeek(bolaState);
        }

        return switchRequest;
    }

    function resetInitialSettings() {
        bolaStateDict = {};
    }

    function reset() {
        resetInitialSettings();

        eventBus.off(_Events2.default.BUFFER_EMPTY, onBufferEmpty, instance);
        eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);
        eventBus.off(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);
        eventBus.off(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);
        eventBus.off(_Events2.default.METRIC_ADDED, onMetricAdded, instance);
        eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance);
        eventBus.off(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);
    }

    instance = {
        getMaxIndex: getMaxIndex,
        reset: reset
    };

    setup();
    return instance;
}

BolaRule.__dashjs_factory_name = 'BolaRule';
exports.default = _FactoryMaker2.default.getClassFactory(BolaRule);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/abr/DroppedFramesRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/abr/DroppedFramesRule.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _SwitchRequest = __webpack_require__(/*! ../SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

var _Debug = __webpack_require__(/*! ../../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DroppedFramesRule() {

    var context = this.context;
    var instance = void 0,
        logger = void 0;

    var DROPPED_PERCENTAGE_FORBID = 0.15;
    var GOOD_SAMPLE_SIZE = 375; //Don't apply the rule until this many frames have been rendered(and counted under those indices).

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function getMaxIndex(rulesContext) {
        var droppedFramesHistory = rulesContext.getDroppedFramesHistory();
        if (droppedFramesHistory) {
            var dfh = droppedFramesHistory.getFrameHistory();
            var droppedFrames = 0;
            var totalFrames = 0;
            var maxIndex = _SwitchRequest2.default.NO_CHANGE;
            for (var i = 1; i < dfh.length; i++) {
                //No point in measuring dropped frames for the zeroeth index.
                if (dfh[i]) {
                    droppedFrames = dfh[i].droppedVideoFrames;
                    totalFrames = dfh[i].totalVideoFrames;

                    if (totalFrames > GOOD_SAMPLE_SIZE && droppedFrames / totalFrames > DROPPED_PERCENTAGE_FORBID) {
                        maxIndex = i - 1;
                        logger.debug('index: ' + maxIndex + ' Dropped Frames: ' + droppedFrames + ' Total Frames: ' + totalFrames);
                        break;
                    }
                }
            }
            return (0, _SwitchRequest2.default)(context).create(maxIndex, { droppedFrames: droppedFrames });
        }

        return (0, _SwitchRequest2.default)(context).create();
    }

    instance = {
        getMaxIndex: getMaxIndex
    };

    setup();

    return instance;
}

DroppedFramesRule.__dashjs_factory_name = 'DroppedFramesRule';
exports.default = _FactoryMaker2.default.getClassFactory(DroppedFramesRule);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/abr/InsufficientBufferRule.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/abr/InsufficientBufferRule.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _BufferController = __webpack_require__(/*! ../../controllers/BufferController */ "./node_modules/dashjs/src/streaming/controllers/BufferController.js");

var _BufferController2 = _interopRequireDefault(_BufferController);

var _EventBus = __webpack_require__(/*! ../../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _SwitchRequest = __webpack_require__(/*! ../SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function InsufficientBufferRule(config) {

    config = config || {};
    var INSUFFICIENT_BUFFER_SAFETY_FACTOR = 0.5;

    var context = this.context;

    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var metricsModel = config.metricsModel;
    var dashMetrics = config.dashMetrics;

    var instance = void 0,
        logger = void 0,
        bufferStateDict = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        resetInitialSettings();
        eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);
        eventBus.on(_Events2.default.BYTES_APPENDED_END_FRAGMENT, onEndFragment, instance);
    }

    function checkConfig() {
        if (!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor') || !dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferLevel')) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
    }
    /*
     * InsufficientBufferRule does not kick in before the first BUFFER_LOADED event happens. This is reset at every seek.
     *
     * If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.
     *
     * Otherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that
     * a whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.
     * If the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.
     * If the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.
     */
    function getMaxIndex(rulesContext) {
        var switchRequest = (0, _SwitchRequest2.default)(context).create();

        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaType')) {
            return switchRequest;
        }

        checkConfig();

        var mediaType = rulesContext.getMediaType();
        var metrics = metricsModel.getReadOnlyMetricsFor(mediaType);
        var lastBufferStateVO = metrics.BufferState.length > 0 ? metrics.BufferState[metrics.BufferState.length - 1] : null;
        var representationInfo = rulesContext.getRepresentationInfo();
        var fragmentDuration = representationInfo.fragmentDuration;

        // Don't ask for a bitrate change if there is not info about buffer state or if fragmentDuration is not defined
        if (!lastBufferStateVO || shouldIgnore(mediaType) || !fragmentDuration) {
            return switchRequest;
        }

        if (lastBufferStateVO.state === _BufferController2.default.BUFFER_EMPTY) {
            logger.debug('Switch to index 0; buffer is empty.');
            switchRequest.quality = 0;
            switchRequest.reason = 'InsufficientBufferRule: Buffer is empty';
        } else {
            var mediaInfo = rulesContext.getMediaInfo();
            var abrController = rulesContext.getAbrController();
            var throughputHistory = abrController.getThroughputHistory();

            var bufferLevel = dashMetrics.getCurrentBufferLevel(metrics);
            var throughput = throughputHistory.getAverageThroughput(mediaType);
            var latency = throughputHistory.getAverageLatency(mediaType);
            var bitrate = throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;

            switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, bitrate, latency);
            switchRequest.reason = 'InsufficientBufferRule: being conservative to avoid immediate rebuffering';
        }

        return switchRequest;
    }

    function shouldIgnore(mediaType) {
        return bufferStateDict[mediaType].ignoreCount > 0;
    }

    function resetInitialSettings() {
        bufferStateDict = {};
        bufferStateDict[_Constants2.default.VIDEO] = { ignoreCount: 2 };
        bufferStateDict[_Constants2.default.AUDIO] = { ignoreCount: 2 };
    }

    function onPlaybackSeeking() {
        resetInitialSettings();
    }

    function onEndFragment(e) {
        if (!isNaN(e.startTime) && (e.mediaType === _Constants2.default.AUDIO || e.mediaType === _Constants2.default.VIDEO)) {
            if (bufferStateDict[e.mediaType].ignoreCount > 0) {
                bufferStateDict[e.mediaType].ignoreCount--;
            }
        }
    }

    function reset() {
        resetInitialSettings();
        eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);
        eventBus.off(_Events2.default.BYTES_APPENDED_END_FRAGMENT, onEndFragment, instance);
    }

    instance = {
        getMaxIndex: getMaxIndex,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


InsufficientBufferRule.__dashjs_factory_name = 'InsufficientBufferRule';
exports.default = _FactoryMaker2.default.getClassFactory(InsufficientBufferRule);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/abr/SwitchHistoryRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/abr/SwitchHistoryRule.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _SwitchRequest = __webpack_require__(/*! ../SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SwitchHistoryRule() {

    var context = this.context;

    var instance = void 0,
        logger = void 0;

    //MAX_SWITCH is the number of drops made. It doesn't consider the size of the drop.
    var MAX_SWITCH = 0.075;

    //Before this number of switch requests(no switch or actual), don't apply the rule.
    //must be < SwitchRequestHistory SWITCH_REQUEST_HISTORY_DEPTH to enable rule
    var SAMPLE_SIZE = 6;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function getMaxIndex(rulesContext) {
        var switchRequestHistory = rulesContext ? rulesContext.getSwitchHistory() : null;
        var switchRequests = switchRequestHistory ? switchRequestHistory.getSwitchRequests() : [];
        var drops = 0;
        var noDrops = 0;
        var dropSize = 0;
        var switchRequest = (0, _SwitchRequest2.default)(context).create();

        for (var i = 0; i < switchRequests.length; i++) {
            if (switchRequests[i] !== undefined) {
                drops += switchRequests[i].drops;
                noDrops += switchRequests[i].noDrops;
                dropSize += switchRequests[i].dropSize;

                if (drops + noDrops >= SAMPLE_SIZE && drops / noDrops > MAX_SWITCH) {
                    switchRequest.quality = i > 0 && switchRequests[i].drops > 0 ? i - 1 : i;
                    switchRequest.reason = { index: switchRequest.quality, drops: drops, noDrops: noDrops, dropSize: dropSize };
                    logger.debug('Switch history rule index: ' + switchRequest.quality + ' samples: ' + (drops + noDrops) + ' drops: ' + drops);
                    break;
                }
            }
        }

        return switchRequest;
    }

    instance = {
        getMaxIndex: getMaxIndex
    };

    setup();

    return instance;
}

SwitchHistoryRule.__dashjs_factory_name = 'SwitchHistoryRule';
exports.default = _FactoryMaker2.default.getClassFactory(SwitchHistoryRule);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/abr/ThroughputRule.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/abr/ThroughputRule.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _BufferController = __webpack_require__(/*! ../../controllers/BufferController */ "./node_modules/dashjs/src/streaming/controllers/BufferController.js");

var _BufferController2 = _interopRequireDefault(_BufferController);

var _AbrController = __webpack_require__(/*! ../../controllers/AbrController */ "./node_modules/dashjs/src/streaming/controllers/AbrController.js");

var _AbrController2 = _interopRequireDefault(_AbrController);

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _SwitchRequest = __webpack_require__(/*! ../SwitchRequest */ "./node_modules/dashjs/src/streaming/rules/SwitchRequest.js");

var _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);

var _Constants = __webpack_require__(/*! ../../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function ThroughputRule(config) {

    config = config || {};
    var context = this.context;
    var metricsModel = config.metricsModel;

    var instance = void 0,
        logger = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function checkConfig() {
        if (!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor')) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
    }

    function getMaxIndex(rulesContext) {
        var switchRequest = (0, _SwitchRequest2.default)(context).create();

        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') || !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {
            return switchRequest;
        }

        checkConfig();

        var mediaInfo = rulesContext.getMediaInfo();
        var mediaType = rulesContext.getMediaType();
        var metrics = metricsModel.getReadOnlyMetricsFor(mediaType);
        var scheduleController = rulesContext.getScheduleController();
        var abrController = rulesContext.getAbrController();
        var streamInfo = rulesContext.getStreamInfo();
        var isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;
        var throughputHistory = abrController.getThroughputHistory();
        var throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);
        var latency = throughputHistory.getAverageLatency(mediaType);
        var bufferStateVO = metrics.BufferState.length > 0 ? metrics.BufferState[metrics.BufferState.length - 1] : null;
        var useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();

        if (!metrics || isNaN(throughput) || !bufferStateVO || useBufferOccupancyABR) {
            return switchRequest;
        }

        if (abrController.getAbandonmentStateFor(mediaType) !== _AbrController2.default.ABANDON_LOAD) {
            if (bufferStateVO.state === _BufferController2.default.BUFFER_LOADED || isDynamic) {
                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);
                scheduleController.setTimeToLoadDelay(0);
                logger.debug('requesting switch to index: ', switchRequest.quality, 'type: ', mediaType, 'Average throughput', Math.round(throughput), 'kbps');
                switchRequest.reason = { throughput: throughput, latency: latency };
            }
        }

        return switchRequest;
    }

    function reset() {
        // no persistent information to reset
    }

    instance = {
        getMaxIndex: getMaxIndex,
        reset: reset
    };

    setup();

    return instance;
}

ThroughputRule.__dashjs_factory_name = 'ThroughputRule';
exports.default = _FactoryMaker2.default.getClassFactory(ThroughputRule);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/scheduling/BufferLevelRule.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/scheduling/BufferLevelRule.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function BufferLevelRule(config) {

    config = config || {};
    var dashMetrics = config.dashMetrics;
    var metricsModel = config.metricsModel;
    var mediaPlayerModel = config.mediaPlayerModel;
    var textController = config.textController;
    var abrController = config.abrController;

    function setup() {}

    function execute(streamProcessor, videoTrackPresent) {
        if (!streamProcessor) {
            return true;
        }
        var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(streamProcessor.getType()));
        return bufferLevel < getBufferTarget(streamProcessor, videoTrackPresent);
    }

    function getBufferTarget(streamProcessor, videoTrackPresent) {
        var bufferTarget = NaN;

        if (!streamProcessor) {
            return bufferTarget;
        }
        var type = streamProcessor.getType();
        var representationInfo = streamProcessor.getRepresentationInfo();
        if (type === _Constants2.default.FRAGMENTED_TEXT) {
            bufferTarget = textController.isTextEnabled() ? representationInfo.fragmentDuration : 0;
        } else if (type === _Constants2.default.AUDIO && videoTrackPresent) {
            var videoBufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(_Constants2.default.VIDEO));
            if (isNaN(representationInfo.fragmentDuration)) {
                bufferTarget = videoBufferLevel;
            } else {
                bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);
            }
        } else {
            var streamInfo = representationInfo.mediaInfo.streamInfo;
            if (abrController.isPlayingAtTopQuality(streamInfo)) {
                var isLongFormContent = streamInfo.manifestInfo.duration >= mediaPlayerModel.getLongFormContentDurationThreshold();
                bufferTarget = isLongFormContent ? mediaPlayerModel.getBufferTimeAtTopQualityLongForm() : mediaPlayerModel.getBufferTimeAtTopQuality();
            } else {
                bufferTarget = mediaPlayerModel.getStableBufferTime();
            }
        }
        return bufferTarget;
    }

    var instance = {
        execute: execute,
        getBufferTarget: getBufferTarget
    };

    setup();
    return instance;
}

BufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';
exports.default = _FactoryMaker2.default.getClassFactory(BufferLevelRule);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/rules/scheduling/NextFragmentRequestRule.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/rules/scheduling/NextFragmentRequestRule.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _Debug = __webpack_require__(/*! ../../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _FragmentRequest = __webpack_require__(/*! ../../../streaming/vo/FragmentRequest */ "./node_modules/dashjs/src/streaming/vo/FragmentRequest.js");

var _FragmentRequest2 = _interopRequireDefault(_FragmentRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function NextFragmentRequestRule(config) {

    config = config || {};
    var context = this.context;
    var adapter = config.adapter;
    var textController = config.textController;
    var playbackController = config.playbackController;

    var instance = void 0,
        logger = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function execute(streamProcessor, seekTarget, requestToReplace) {
        if (!streamProcessor) {
            return null;
        }
        var representationInfo = streamProcessor.getRepresentationInfo();
        var mediaType = streamProcessor.getType();
        var hasSeekTarget = !isNaN(seekTarget);
        var bufferController = streamProcessor.getBufferController();
        var currentTime = playbackController.getNormalizedTime();
        var time = hasSeekTarget ? seekTarget : adapter.getIndexHandlerTime(streamProcessor);
        var bufferIsDivided = false;
        var request = void 0;

        if (isNaN(time) || mediaType === _Constants2.default.FRAGMENTED_TEXT && !textController.isTextEnabled()) {
            return null;
        }
        /**
         * This is critical for IE/Safari/EDGE
         * */
        if (bufferController) {
            var range = bufferController.getRangeAt(time);
            var playingRange = bufferController.getRangeAt(currentTime);
            var hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);
            if ((range !== null || playingRange !== null) && !hasSeekTarget) {
                if (!range || playingRange && playingRange.start != range.start && playingRange.end != range.end) {
                    if (hasDiscontinuities && mediaType !== _Constants2.default.FRAGMENTED_TEXT) {
                        streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(playingRange.end);
                        bufferIsDivided = true;
                    }
                    range = playingRange;
                }
                if (time !== range.end) {
                    logger.debug('Prior to making a request for time, NextFragmentRequestRule is aligning index handler\'s currentTime with bufferedRange.end for', mediaType, '.', time, 'was changed to', range.end);
                    time = range.end;
                }
            }
        }

        if (requestToReplace) {
            time = requestToReplace.startTime + requestToReplace.duration / 2;
            request = adapter.getFragmentRequest(streamProcessor, representationInfo, time, {
                timeThreshold: 0,
                ignoreIsFinished: true
            });
        } else {
            request = adapter.getFragmentRequest(streamProcessor, representationInfo, time, {
                keepIdx: !hasSeekTarget && !bufferIsDivided
            });
            while (request && request.action !== _FragmentRequest2.default.ACTION_COMPLETE && streamProcessor.getFragmentModel().isFragmentLoaded(request, bufferController.getBuffer().getAllBufferRanges())) {
                // Then, check if this request was downloaded or not
                // loop until we found not loaded fragment, or no fragment
                request = adapter.getFragmentRequest(streamProcessor, representationInfo);
            }
        }

        return request;
    }

    instance = {
        execute: execute
    };

    setup();

    return instance;
}

NextFragmentRequestRule.__dashjs_factory_name = 'NextFragmentRequestRule';
exports.default = _FactoryMaker2.default.getClassFactory(NextFragmentRequestRule);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/text/EmbeddedTextHtmlRender.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/text/EmbeddedTextHtmlRender.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function EmbeddedTextHtmlRender() {

    var captionId = 0;
    var instance = void 0;

    /* HTML Rendering functions */
    function checkIndent(chars) {
        var line = '';

        for (var c = 0; c < chars.length; ++c) {
            var uc = chars[c];
            line += uc.uchar;
        }

        var l = line.length;
        var ll = line.replace(/^\s+/, '').length;
        return l - ll;
    }

    function getRegionProperties(region) {
        return 'left: ' + region.x * 3.125 + '%; top: ' + region.y1 * 6.66 + '%; width: ' + (100 - region.x * 3.125) + '%; height: ' + Math.max(region.y2 - 1 - region.y1, 1) * 6.66 + '%; align-items: flex-start; overflow: visible; -webkit-writing-mode: horizontal-tb;';
    }

    function createRGB(color) {
        if (color === 'red') {
            return 'rgb(255, 0, 0)';
        } else if (color === 'green') {
            return 'rgb(0, 255, 0)';
        } else if (color === 'blue') {
            return 'rgb(0, 0, 255)';
        } else if (color === 'cyan') {
            return 'rgb(0, 255, 255)';
        } else if (color === 'magenta') {
            return 'rgb(255, 0, 255)';
        } else if (color === 'yellow') {
            return 'rgb(255, 255, 0)';
        } else if (color === 'white') {
            return 'rgb(255, 255, 255)';
        } else if (color === 'black') {
            return 'rgb(0, 0, 0)';
        }
        return color;
    }

    function getStyle(videoElement, style) {
        var fontSize = videoElement.videoHeight / 15.0;
        if (style) {
            return 'font-size: ' + fontSize + 'px; font-family: Menlo, Consolas, \'Cutive Mono\', monospace; color: ' + (style.foreground ? createRGB(style.foreground) : 'rgb(255, 255, 255)') + '; font-style: ' + (style.italics ? 'italic' : 'normal') + '; text-decoration: ' + (style.underline ? 'underline' : 'none') + '; white-space: pre; background-color: ' + (style.background ? createRGB(style.background) : 'transparent') + ';';
        } else {
            return 'font-size: ' + fontSize + 'px; font-family: Menlo, Consolas, \'Cutive Mono\', monospace; justify-content: flex-start; text-align: left; color: rgb(255, 255, 255); font-style: normal; white-space: pre; line-height: normal; font-weight: normal; text-decoration: none; width: 100%; display: flex;';
        }
    }

    function ltrim(s) {
        return s.replace(/^\s+/g, '');
    }

    function rtrim(s) {
        return s.replace(/\s+$/g, '');
    }

    function createHTMLCaptionsFromScreen(videoElement, startTime, endTime, captionScreen) {
        var currRegion = null;
        var existingRegion = null;
        var lastRowHasText = false;
        var lastRowIndentL = -1;
        var currP = { start: startTime, end: endTime, spans: [] };
        var currentStyle = 'style_cea608_white_black';
        var seenRegions = {};
        var styleStates = {};
        var regions = [];
        var r = void 0,
            s = void 0;

        for (r = 0; r < 15; ++r) {
            var row = captionScreen.rows[r];
            var line = '';
            var prevPenState = null;

            if (false === row.isEmpty()) {
                /* Row is not empty */

                /* Get indentation of this row */
                var rowIndent = checkIndent(row.chars);

                /* Create a new region is there is none */
                if (currRegion === null) {
                    currRegion = { x: rowIndent, y1: r, y2: r + 1, p: [] };
                }

                /* Check if indentation has changed and we had text of last row */
                if (rowIndent !== lastRowIndentL && lastRowHasText) {
                    currRegion.p.push(currP);
                    currP = { start: startTime, end: endTime, spans: [] };
                    currRegion.y2 = r;
                    currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;
                    if (false === seenRegions.hasOwnProperty(currRegion.name)) {
                        regions.push(currRegion);
                        seenRegions[currRegion.name] = currRegion;
                    } else {
                        existingRegion = seenRegions[currRegion.name];
                        existingRegion.p.contat(currRegion.p);
                    }

                    currRegion = { x: rowIndent, y1: r, y2: r + 1, p: [] };
                }

                for (var c = 0; c < row.chars.length; ++c) {
                    var uc = row.chars[c];
                    var currPenState = uc.penState;
                    if (prevPenState === null || !currPenState.equals(prevPenState)) {
                        if (line.trim().length > 0) {
                            currP.spans.push({ name: currentStyle, line: line, row: r });
                            line = '';
                        }

                        var currPenStateString = 'style_cea608_' + currPenState.foreground + '_' + currPenState.background;
                        if (currPenState.underline) {
                            currPenStateString += '_underline';
                        }
                        if (currPenState.italics) {
                            currPenStateString += '_italics';
                        }

                        if (!styleStates.hasOwnProperty(currPenStateString)) {
                            styleStates[currPenStateString] = JSON.parse(JSON.stringify(currPenState));
                        }

                        prevPenState = currPenState;

                        currentStyle = currPenStateString;
                    }

                    line += uc.uchar;
                }

                if (line.trim().length > 0) {
                    currP.spans.push({ name: currentStyle, line: line, row: r });
                }

                lastRowHasText = true;
                lastRowIndentL = rowIndent;
            } else {
                /* Row is empty */
                lastRowHasText = false;
                lastRowIndentL = -1;

                if (currRegion) {
                    currRegion.p.push(currP);
                    currP = { start: startTime, end: endTime, spans: [] };
                    currRegion.y2 = r;
                    currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;
                    if (false === seenRegions.hasOwnProperty(currRegion.name)) {
                        regions.push(currRegion);
                        seenRegions[currRegion.name] = currRegion;
                    } else {
                        existingRegion = seenRegions[currRegion.name];
                        existingRegion.p.contat(currRegion.p);
                    }

                    currRegion = null;
                }
            }
        }

        if (currRegion) {
            currRegion.p.push(currP);
            currRegion.y2 = r + 1;
            currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;
            if (false === seenRegions.hasOwnProperty(currRegion.name)) {
                regions.push(currRegion);
                seenRegions[currRegion.name] = currRegion;
            } else {
                existingRegion = seenRegions[currRegion.name];
                existingRegion.p.contat(currRegion.p);
            }

            currRegion = null;
        }

        var captionsArray = [];

        /* Loop thru regions */
        for (r = 0; r < regions.length; ++r) {
            var region = regions[r];

            var cueID = 'sub_cea608_' + captionId++;
            var finalDiv = document.createElement('div');
            finalDiv.id = cueID;
            var cueRegionProperties = getRegionProperties(region);
            finalDiv.style.cssText = 'position: absolute; margin: 0; display: flex; box-sizing: border-box; pointer-events: none;' + cueRegionProperties;

            var bodyDiv = document.createElement('div');
            bodyDiv.className = 'paragraph bodyStyle';
            bodyDiv.style.cssText = getStyle(videoElement);

            var cueUniWrapper = document.createElement('div');
            cueUniWrapper.className = 'cueUniWrapper';
            cueUniWrapper.style.cssText = 'unicode-bidi: normal; direction: ltr;';

            for (var p = 0; p < region.p.length; ++p) {
                var ptag = region.p[p];
                var lastSpanRow = 0;
                for (s = 0; s < ptag.spans.length; ++s) {
                    var span = ptag.spans[s];
                    if (span.line.length > 0) {
                        if (s !== 0 && lastSpanRow != span.row) {
                            var brElement = document.createElement('br');
                            brElement.className = 'lineBreak';
                            cueUniWrapper.appendChild(brElement);
                        }
                        var sameRow = false;
                        if (lastSpanRow === span.row) {
                            sameRow = true;
                        }
                        lastSpanRow = span.row;
                        var spanStyle = styleStates[span.name];
                        var spanElement = document.createElement('span');
                        spanElement.className = 'spanPadding ' + span.name + ' customSpanColor';
                        spanElement.style.cssText = getStyle(videoElement, spanStyle);
                        /* If this is not the first span, and it's on the same
                         * row as the last one */
                        if (s !== 0 && sameRow) {
                            /* and it's the last span on this row */
                            if (s === ptag.spans.length - 1) {
                                /* trim only the right side */
                                spanElement.textContent = rtrim(span.line);
                            } else {
                                /* don't trim at all */
                                spanElement.textContent = span.line;
                            }
                        } else {
                            /* if there is more than 1 span and this isn't the last span */
                            if (ptag.spans.length > 1 && s < ptag.spans.length - 1) {
                                /* Check if next text is on same row */
                                if (span.row === ptag.spans[s + 1].row) {
                                    /* Next element on same row, trim start */
                                    spanElement.textContent = ltrim(span.line);
                                } else {
                                    /* Different rows, trim both */
                                    spanElement.textContent = span.line.trim();
                                }
                            } else {
                                spanElement.textContent = span.line.trim();
                            }
                        }
                        cueUniWrapper.appendChild(spanElement);
                    }
                }
            }

            bodyDiv.appendChild(cueUniWrapper);
            finalDiv.appendChild(bodyDiv);

            var fontSize = { 'bodyStyle': ['%', 90] };
            for (var _s in styleStates) {
                if (styleStates.hasOwnProperty(_s)) {
                    fontSize[_s] = ['%', 90];
                }
            }

            captionsArray.push({ type: 'html',
                start: startTime,
                end: endTime,
                cueHTMLElement: finalDiv,
                cueID: cueID,
                cellResolution: [32, 15],
                isFromCEA608: true,
                fontSize: fontSize,
                lineHeight: {},
                linePadding: {}
            });
        }
        return captionsArray;
    }

    instance = {
        createHTMLCaptionsFromScreen: createHTMLCaptionsFromScreen
    };
    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


EmbeddedTextHtmlRender.__dashjs_factory_name = 'EmbeddedTextHtmlRender';
exports.default = _FactoryMaker2.default.getSingletonFactory(EmbeddedTextHtmlRender);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/text/NotFragmentedTextBufferController.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/text/NotFragmentedTextBufferController.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _InitCache = __webpack_require__(/*! ../utils/InitCache */ "./node_modules/dashjs/src/streaming/utils/InitCache.js");

var _InitCache2 = _interopRequireDefault(_InitCache);

var _SourceBufferSink = __webpack_require__(/*! ../SourceBufferSink */ "./node_modules/dashjs/src/streaming/SourceBufferSink.js");

var _SourceBufferSink2 = _interopRequireDefault(_SourceBufferSink);

var _TextController = __webpack_require__(/*! ../../streaming/text/TextController */ "./node_modules/dashjs/src/streaming/text/TextController.js");

var _TextController2 = _interopRequireDefault(_TextController);

var _DashJSError = __webpack_require__(/*! ../../streaming/vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Errors = __webpack_require__(/*! ../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BUFFER_CONTROLLER_TYPE = 'NotFragmentedTextBufferController'; /**
                                                                   * The copyright in this software is being made available under the BSD License,
                                                                   * included below. This software may be subject to other third party and contributor
                                                                   * rights, including patent rights, and no such rights are granted under this license.
                                                                   *
                                                                   * Copyright (c) 2013, Dash Industry Forum.
                                                                   * All rights reserved.
                                                                   *
                                                                   * Redistribution and use in source and binary forms, with or without modification,
                                                                   * are permitted provided that the following conditions are met:
                                                                   *  * Redistributions of source code must retain the above copyright notice, this
                                                                   *  list of conditions and the following disclaimer.
                                                                   *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                   *  this list of conditions and the following disclaimer in the documentation and/or
                                                                   *  other materials provided with the distribution.
                                                                   *  * Neither the name of Dash Industry Forum nor the names of its
                                                                   *  contributors may be used to endorse or promote products derived from this software
                                                                   *  without specific prior written permission.
                                                                   *
                                                                   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                   *  POSSIBILITY OF SUCH DAMAGE.
                                                                   */

function NotFragmentedTextBufferController(config) {

    config = config || {};
    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var textController = (0, _TextController2.default)(context).getInstance();

    var errHandler = config.errHandler;
    var type = config.type;
    var mimeType = config.mimeType;
    var streamProcessor = config.streamProcessor;

    var instance = void 0,
        isBufferingCompleted = void 0,
        initialized = void 0,
        mediaSource = void 0,
        buffer = void 0,
        initCache = void 0;

    function setup() {
        initialized = false;
        mediaSource = null;
        isBufferingCompleted = false;

        eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
        eventBus.on(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);
    }

    function getBufferControllerType() {
        return BUFFER_CONTROLLER_TYPE;
    }

    function initialize(source) {
        setMediaSource(source);
        initCache = (0, _InitCache2.default)(context).getInstance();
    }

    /**
     * @param {MediaInfo }mediaInfo
     * @memberof BufferController#
     */
    function createBuffer(mediaInfo) {
        try {
            buffer = (0, _SourceBufferSink2.default)(context).create(mediaSource, mediaInfo);
            if (!initialized) {
                var textBuffer = buffer.getBuffer();
                if (textBuffer.hasOwnProperty(_Constants2.default.INITIALIZE)) {
                    textBuffer.initialize(mimeType, streamProcessor);
                }
                initialized = true;
            }
            return buffer;
        } catch (e) {
            if (mediaInfo.isText || mediaInfo.codec.indexOf('codecs="stpp') !== -1 || mediaInfo.codec.indexOf('codecs="wvtt') !== -1) {
                try {
                    buffer = textController.getTextSourceBuffer();
                } catch (e) {
                    errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');
                    errHandler.error(new _DashJSError2.default(_Errors2.default.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, _Errors2.default.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type + ' : ' + e.message));
                }
            } else {
                errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');
                errHandler.error(new _DashJSError2.default(_Errors2.default.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, _Errors2.default.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));
            }
        }
    }

    function getType() {
        return type;
    }

    function getBuffer() {
        return buffer;
    }

    function setMediaSource(value) {
        mediaSource = value;
    }

    function getMediaSource() {
        return mediaSource;
    }

    function getStreamProcessor() {
        return streamProcessor;
    }

    function getIsPruningInProgress() {
        return false;
    }

    function dischargePreBuffer() {}

    function setSeekStartTime() {//Unused - TODO Remove need for stub function
    }

    function getBufferLevel() {
        return 0;
    }

    function getIsBufferingCompleted() {
        return isBufferingCompleted;
    }

    function reset(errored) {
        eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
        eventBus.off(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);

        if (!errored && buffer) {
            buffer.abort();
            buffer.reset();
            buffer = null;
        }
    }

    function onDataUpdateCompleted(e) {
        if (e.sender.getStreamProcessor() !== streamProcessor) {
            return;
        }

        var chunk = initCache.extract(streamProcessor.getStreamInfo().id, e.sender.getCurrentRepresentation().id);

        if (!chunk) {
            eventBus.trigger(_Events2.default.TIMED_TEXT_REQUESTED, {
                index: 0,
                sender: e.sender
            }); //TODO make index dynamic if referring to MP?
        }
    }

    function onInitFragmentLoaded(e) {
        if (e.fragmentModel !== streamProcessor.getFragmentModel() || !e.chunk.bytes) {
            return;
        }

        initCache.save(e.chunk);
        buffer.append(e.chunk);

        eventBus.trigger(_Events2.default.STREAM_COMPLETED, {
            request: e.request,
            fragmentModel: e.fragmentModel
        });
    }

    function switchInitData(streamId, representationId) {
        var chunk = initCache.extract(streamId, representationId);

        if (!chunk) {
            eventBus.trigger(_Events2.default.TIMED_TEXT_REQUESTED, {
                index: 0,
                sender: instance
            });
        }
    }

    function getRangeAt() {
        return null;
    }

    function updateTimestampOffset(MSETimeOffset) {
        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {
            buffer.timestampOffset = MSETimeOffset;
        }
    }

    instance = {
        getBufferControllerType: getBufferControllerType,
        initialize: initialize,
        createBuffer: createBuffer,
        getType: getType,
        getStreamProcessor: getStreamProcessor,
        setSeekStartTime: setSeekStartTime,
        getBuffer: getBuffer,
        getBufferLevel: getBufferLevel,
        setMediaSource: setMediaSource,
        getMediaSource: getMediaSource,
        getIsBufferingCompleted: getIsBufferingCompleted,
        getIsPruningInProgress: getIsPruningInProgress,
        dischargePreBuffer: dischargePreBuffer,
        switchInitData: switchInitData,
        getRangeAt: getRangeAt,
        reset: reset,
        updateTimestampOffset: updateTimestampOffset
    };

    setup();

    return instance;
}

NotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;
exports.default = _FactoryMaker2.default.getClassFactory(NotFragmentedTextBufferController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/text/TextBufferController.js":
/*!************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/text/TextBufferController.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _BufferController = __webpack_require__(/*! ./../controllers/BufferController */ "./node_modules/dashjs/src/streaming/controllers/BufferController.js");

var _BufferController2 = _interopRequireDefault(_BufferController);

var _NotFragmentedTextBufferController = __webpack_require__(/*! ./NotFragmentedTextBufferController */ "./node_modules/dashjs/src/streaming/text/NotFragmentedTextBufferController.js");

var _NotFragmentedTextBufferController2 = _interopRequireDefault(_NotFragmentedTextBufferController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function TextBufferController(config) {

    config = config || {};
    var context = this.context;

    var _BufferControllerImpl = void 0,
        instance = void 0;

    function setup() {

        // according to text type, we create corresponding buffer controller
        if (config.type === _Constants2.default.FRAGMENTED_TEXT) {

            // in this case, internal buffer ocntroller is a classical BufferController object
            _BufferControllerImpl = (0, _BufferController2.default)(context).create({
                type: config.type,
                metricsModel: config.metricsModel,
                mediaPlayerModel: config.mediaPlayerModel,
                manifestModel: config.manifestModel,
                errHandler: config.errHandler,
                streamController: config.streamController,
                mediaController: config.mediaController,
                adapter: config.adapter,
                textController: config.textController,
                abrController: config.abrController,
                playbackController: config.playbackController,
                streamProcessor: config.streamProcessor
            });
        } else {

            // in this case, internal buffer controller is a not fragmented text controller object
            _BufferControllerImpl = (0, _NotFragmentedTextBufferController2.default)(context).create({
                type: config.type,
                mimeType: config.mimeType,
                errHandler: config.errHandler,
                streamProcessor: config.streamProcessor
            });
        }
    }

    function getBufferControllerType() {
        return _BufferControllerImpl.getBufferControllerType();
    }

    function initialize(source, StreamProcessor) {
        return _BufferControllerImpl.initialize(source, StreamProcessor);
    }

    /**
     * @param {MediaInfo }mediaInfo
     * @returns {Object} SourceBuffer object
     * @memberof BufferController#
     */
    function createBuffer(mediaInfo) {
        return _BufferControllerImpl.createBuffer(mediaInfo);
    }

    function getType() {
        return _BufferControllerImpl.getType();
    }

    function getBuffer() {
        return _BufferControllerImpl.getBuffer();
    }

    function setBuffer(value) {
        _BufferControllerImpl.setBuffer(value);
    }

    function getMediaSource() {
        return _BufferControllerImpl.getMediaSource();
    }

    function setMediaSource(value) {
        _BufferControllerImpl.setMediaSource(value);
    }

    function getStreamProcessor() {
        _BufferControllerImpl.getStreamProcessor();
    }

    function setSeekStartTime(value) {
        _BufferControllerImpl.setSeekStartTime(value);
    }

    function getBufferLevel() {
        return _BufferControllerImpl.getBufferLevel();
    }

    function reset(errored) {
        _BufferControllerImpl.reset(errored);
    }

    function getIsBufferingCompleted() {
        return _BufferControllerImpl.getIsBufferingCompleted();
    }

    function switchInitData(streamId, representationId) {
        _BufferControllerImpl.switchInitData(streamId, representationId);
    }

    function getIsPruningInProgress() {
        return _BufferControllerImpl.getIsPruningInProgress();
    }

    function dischargePreBuffer() {
        return _BufferControllerImpl.dischargePreBuffer();
    }

    function getRangeAt(time) {
        return _BufferControllerImpl.getRangeAt(time);
    }

    function updateTimestampOffset(MSETimeOffset) {
        var buffer = getBuffer();
        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {
            buffer.timestampOffset = MSETimeOffset;
        }
    }

    instance = {
        getBufferControllerType: getBufferControllerType,
        initialize: initialize,
        createBuffer: createBuffer,
        getType: getType,
        getStreamProcessor: getStreamProcessor,
        setSeekStartTime: setSeekStartTime,
        getBuffer: getBuffer,
        setBuffer: setBuffer,
        getBufferLevel: getBufferLevel,
        setMediaSource: setMediaSource,
        getMediaSource: getMediaSource,
        getIsBufferingCompleted: getIsBufferingCompleted,
        getIsPruningInProgress: getIsPruningInProgress,
        dischargePreBuffer: dischargePreBuffer,
        switchInitData: switchInitData,
        getRangeAt: getRangeAt,
        reset: reset,
        updateTimestampOffset: updateTimestampOffset
    };

    setup();

    return instance;
}

TextBufferController.__dashjs_factory_name = 'TextBufferController';
exports.default = _FactoryMaker2.default.getClassFactory(TextBufferController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/text/TextController.js":
/*!******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/text/TextController.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _TextSourceBuffer = __webpack_require__(/*! ./TextSourceBuffer */ "./node_modules/dashjs/src/streaming/text/TextSourceBuffer.js");

var _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer);

var _TextTracks = __webpack_require__(/*! ./TextTracks */ "./node_modules/dashjs/src/streaming/text/TextTracks.js");

var _TextTracks2 = _interopRequireDefault(_TextTracks);

var _VTTParser = __webpack_require__(/*! ../utils/VTTParser */ "./node_modules/dashjs/src/streaming/utils/VTTParser.js");

var _VTTParser2 = _interopRequireDefault(_VTTParser);

var _TTMLParser = __webpack_require__(/*! ../utils/TTMLParser */ "./node_modules/dashjs/src/streaming/utils/TTMLParser.js");

var _TTMLParser2 = _interopRequireDefault(_TTMLParser);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _SupervisorTools = __webpack_require__(/*! ../utils/SupervisorTools */ "./node_modules/dashjs/src/streaming/utils/SupervisorTools.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TextController() {

    var context = this.context;

    var instance = void 0,
        textSourceBuffer = void 0,
        errHandler = void 0,
        dashManifestModel = void 0,
        manifestModel = void 0,
        mediaController = void 0,
        videoModel = void 0,
        streamController = void 0,
        textTracks = void 0,
        vttParser = void 0,
        ttmlParser = void 0,
        eventBus = void 0,
        defaultLanguage = void 0,
        lastEnabledIndex = void 0,
        textDefaultEnabled = void 0,
        // this is used for default settings (each time a file is loaded, we check value of this settings )
    allTracksAreDisabled = void 0,
        // this is used for one session (when a file has been loaded, we use this settings to enable/disable text)
    forceTextStreaming = void 0;

    function setup() {

        defaultLanguage = '';
        lastEnabledIndex = -1;
        textDefaultEnabled = true;
        forceTextStreaming = false;
        textTracks = (0, _TextTracks2.default)(context).getInstance();
        vttParser = (0, _VTTParser2.default)(context).getInstance();
        ttmlParser = (0, _TTMLParser2.default)(context).getInstance();
        textSourceBuffer = (0, _TextSourceBuffer2.default)(context).getInstance();
        eventBus = (0, _EventBus2.default)(context).getInstance();

        textTracks.initialize();
        eventBus.on(_Events2.default.TEXT_TRACKS_QUEUE_INITIALIZED, onTextTracksAdded, instance);

        resetInitialSettings();
    }

    function setConfig(config) {
        if (!config) {
            return;
        }
        if (config.errHandler) {
            errHandler = config.errHandler;
        }
        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
        if (config.manifestModel) {
            manifestModel = config.manifestModel;
        }
        if (config.mediaController) {
            mediaController = config.mediaController;
        }
        if (config.videoModel) {
            videoModel = config.videoModel;
        }
        if (config.streamController) {
            streamController = config.streamController;
        }
        if (config.textTracks) {
            textTracks = config.textTracks;
        }
        if (config.vttParser) {
            vttParser = config.vttParser;
        }
        if (config.ttmlParser) {
            ttmlParser = config.ttmlParser;
        }

        // create config for source buffer
        textSourceBuffer.setConfig({
            errHandler: errHandler,
            dashManifestModel: dashManifestModel,
            manifestModel: manifestModel,
            mediaController: mediaController,
            videoModel: videoModel,
            streamController: streamController,
            textTracks: textTracks,
            vttParser: vttParser,
            ttmlParser: ttmlParser
        });
    }

    function getTextSourceBuffer() {
        return textSourceBuffer;
    }

    function getAllTracksAreDisabled() {
        return allTracksAreDisabled;
    }

    function addEmbeddedTrack(mediaInfo) {
        textSourceBuffer.addEmbeddedTrack(mediaInfo);
    }

    function setTextDefaultLanguage(lang) {
        (0, _SupervisorTools.checkParameterType)(lang, 'string');
        defaultLanguage = lang;
    }

    function getTextDefaultLanguage() {
        return defaultLanguage;
    }

    function onTextTracksAdded(e) {
        var _this = this;

        var tracks = e.tracks;
        var index = e.index;

        tracks.some(function (item, idx) {
            if (item.lang === defaultLanguage) {
                _this.setTextTrack(idx);
                index = idx;
                return true;
            }
        });

        if (!textDefaultEnabled) {
            // disable text at startup
            this.setTextTrack(-1);
        }

        lastEnabledIndex = index;
        eventBus.trigger(_Events2.default.TEXT_TRACKS_ADDED, {
            enabled: isTextEnabled(),
            index: index,
            tracks: tracks
        });
    }

    function setTextDefaultEnabled(enable) {
        (0, _SupervisorTools.checkParameterType)(enable, 'boolean');
        textDefaultEnabled = enable;

        if (!textDefaultEnabled) {
            // disable text at startup
            this.setTextTrack(-1);
        }
    }

    function getTextDefaultEnabled() {
        return textDefaultEnabled;
    }

    function enableText(enable) {
        (0, _SupervisorTools.checkParameterType)(enable, 'boolean');

        if (isTextEnabled() !== enable) {
            // change track selection
            if (enable) {
                // apply last enabled tractk
                this.setTextTrack(lastEnabledIndex);
            }

            if (!enable) {
                // keep last index and disable text track
                lastEnabledIndex = this.getCurrentTrackIdx();
                this.setTextTrack(-1);
            }
        }
    }

    function isTextEnabled() {
        var enabled = true;
        if (allTracksAreDisabled && !forceTextStreaming) {
            enabled = false;
        }
        return enabled;
    }

    // when set to true NextFragmentRequestRule will allow schedule of chunks even if tracks are all disabled. Allowing streaming to hidden track for external players to work with.
    function enableForcedTextStreaming(enable) {
        (0, _SupervisorTools.checkParameterType)(enable, 'boolean');
        forceTextStreaming = enable;
    }

    function setTextTrack(idx) {
        //For external time text file,  the only action needed to change a track is marking the track mode to showing.
        // Fragmented text tracks need the additional step of calling TextController.setTextTrack();
        var config = textSourceBuffer.getConfig();
        var fragmentModel = config.fragmentModel;
        var fragmentedTracks = config.fragmentedTracks;
        var videoModel = config.videoModel;
        var mediaInfosArr = void 0,
            streamProcessor = void 0;

        allTracksAreDisabled = idx === -1 ? true : false;

        var oldTrackIdx = textTracks.getCurrentTrackIdx();
        if (oldTrackIdx !== idx) {
            textTracks.setModeForTrackIdx(oldTrackIdx, _Constants2.default.TEXT_HIDDEN);
            textTracks.setCurrentTrackIdx(idx);
            textTracks.setModeForTrackIdx(idx, _Constants2.default.TEXT_SHOWING);

            var currentTrackInfo = textTracks.getCurrentTrackInfo();

            if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) {
                for (var i = 0; i < fragmentedTracks.length; i++) {
                    var mediaInfo = fragmentedTracks[i];
                    if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index && (mediaInfo.id ? currentTrackInfo.id === mediaInfo.id : currentTrackInfo.id === mediaInfo.index)) {
                        var currentFragTrack = mediaController.getCurrentTrackFor(_Constants2.default.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());
                        if (mediaInfo !== currentFragTrack) {
                            fragmentModel.abortRequests();
                            fragmentModel.removeExecutedRequestsBeforeTime();
                            textSourceBuffer.remove();
                            textTracks.deleteCuesFromTrackIdx(oldTrackIdx);
                            mediaController.setTrack(mediaInfo);
                            textSourceBuffer.setCurrentFragmentedTrackIdx(i);
                        } else if (oldTrackIdx === -1) {
                            //in fragmented use case, if the user selects the older track (the one selected before disabled text track)
                            //no CURRENT_TRACK_CHANGED event will be trigger, so dashHandler current time has to be updated and the scheduleController
                            //has to be restarted.
                            var streamProcessors = streamController.getActiveStreamProcessors();
                            for (var _i = 0; _i < streamProcessors.length; _i++) {
                                if (streamProcessors[_i].getType() === _Constants2.default.FRAGMENTED_TEXT) {
                                    streamProcessor = streamProcessors[_i];
                                    break;
                                }
                            }
                            streamProcessor.getIndexHandler().setCurrentTime(videoModel.getTime());
                            streamProcessor.getScheduleController().start();
                        }
                    }
                }
            } else if (currentTrackInfo && !currentTrackInfo.isFragmented) {
                var _streamProcessors = streamController.getActiveStreamProcessors();
                for (var _i2 = 0; _i2 < _streamProcessors.length; _i2++) {
                    if (_streamProcessors[_i2].getType() === _Constants2.default.TEXT) {
                        streamProcessor = _streamProcessors[_i2];
                        mediaInfosArr = streamProcessor.getMediaInfoArr();
                        break;
                    }
                }

                if (streamProcessor && mediaInfosArr) {
                    for (var _i3 = 0; _i3 < mediaInfosArr.length; _i3++) {
                        if (mediaInfosArr[_i3].index === currentTrackInfo.index && mediaInfosArr[_i3].lang === currentTrackInfo.lang) {
                            streamProcessor.selectMediaInfo(mediaInfosArr[_i3]);
                            break;
                        }
                    }
                }
            }
        }
    }

    function getCurrentTrackIdx() {
        return textTracks.getCurrentTrackIdx();
    }

    function resetInitialSettings() {
        allTracksAreDisabled = false;
    }

    function reset() {
        resetInitialSettings();
        textSourceBuffer.resetEmbedded();
        textSourceBuffer.reset();
    }

    instance = {
        setConfig: setConfig,
        getTextSourceBuffer: getTextSourceBuffer,
        getAllTracksAreDisabled: getAllTracksAreDisabled,
        addEmbeddedTrack: addEmbeddedTrack,
        getTextDefaultLanguage: getTextDefaultLanguage,
        setTextDefaultLanguage: setTextDefaultLanguage,
        setTextDefaultEnabled: setTextDefaultEnabled,
        getTextDefaultEnabled: getTextDefaultEnabled,
        enableText: enableText,
        isTextEnabled: isTextEnabled,
        setTextTrack: setTextTrack,
        getCurrentTrackIdx: getCurrentTrackIdx,
        enableForcedTextStreaming: enableForcedTextStreaming,
        reset: reset
    };
    setup();
    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


TextController.__dashjs_factory_name = 'TextController';
exports.default = _FactoryMaker2.default.getSingletonFactory(TextController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/text/TextSourceBuffer.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/text/TextSourceBuffer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _HTTPRequest = __webpack_require__(/*! ../vo/metrics/HTTPRequest */ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js");

var _TextTrackInfo = __webpack_require__(/*! ../vo/TextTrackInfo */ "./node_modules/dashjs/src/streaming/vo/TextTrackInfo.js");

var _TextTrackInfo2 = _interopRequireDefault(_TextTrackInfo);

var _BoxParser = __webpack_require__(/*! ../utils/BoxParser */ "./node_modules/dashjs/src/streaming/utils/BoxParser.js");

var _BoxParser2 = _interopRequireDefault(_BoxParser);

var _CustomTimeRanges = __webpack_require__(/*! ../utils/CustomTimeRanges */ "./node_modules/dashjs/src/streaming/utils/CustomTimeRanges.js");

var _CustomTimeRanges2 = _interopRequireDefault(_CustomTimeRanges);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _TextTracks = __webpack_require__(/*! ./TextTracks */ "./node_modules/dashjs/src/streaming/text/TextTracks.js");

var _TextTracks2 = _interopRequireDefault(_TextTracks);

var _EmbeddedTextHtmlRender = __webpack_require__(/*! ./EmbeddedTextHtmlRender */ "./node_modules/dashjs/src/streaming/text/EmbeddedTextHtmlRender.js");

var _EmbeddedTextHtmlRender2 = _interopRequireDefault(_EmbeddedTextHtmlRender);

var _codemIsoboxer = __webpack_require__(/*! codem-isoboxer */ "./node_modules/codem-isoboxer/dist/iso_boxer.js");

var _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);

var _cea608Parser = __webpack_require__(/*! ../../../externals/cea608-parser */ "./node_modules/dashjs/externals/cea608-parser.js");

var _cea608Parser2 = _interopRequireDefault(_cea608Parser);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _DashJSError = __webpack_require__(/*! ../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Errors = __webpack_require__(/*! ../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TextSourceBuffer() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var embeddedInitialized = false;

    var instance = void 0,
        logger = void 0,
        boxParser = void 0,
        errHandler = void 0,
        dashManifestModel = void 0,
        manifestModel = void 0,
        mediaController = void 0,
        parser = void 0,
        vttParser = void 0,
        ttmlParser = void 0,
        mediaInfos = void 0,
        textTracks = void 0,
        fragmentedFragmentModel = void 0,
        initializationSegmentReceived = void 0,
        timescale = void 0,
        fragmentedTracks = void 0,
        videoModel = void 0,
        streamController = void 0,
        firstFragmentedSubtitleStart = void 0,
        currFragmentedTrackIdx = void 0,
        embeddedTracks = void 0,
        embeddedInitializationSegmentReceived = void 0,
        embeddedTimescale = void 0,
        embeddedLastSequenceNumber = void 0,
        embeddedSequenceNumbers = void 0,
        embeddedCea608FieldParsers = void 0,
        embeddedTextHtmlRender = void 0,
        mseTimeOffset = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);

        resetInitialSettings();
    }

    function resetFragmented() {
        fragmentedFragmentModel = null;
        timescale = NaN;
        fragmentedTracks = [];
        firstFragmentedSubtitleStart = null;
        initializationSegmentReceived = false;
    }

    function resetInitialSettings() {
        resetFragmented();

        mediaInfos = [];
        parser = null;
    }

    function initialize(mimeType, streamProcessor) {
        if (!embeddedInitialized) {
            initEmbedded();
        }

        textTracks.setConfig({
            videoModel: videoModel
        });
        textTracks.initialize();

        if (!boxParser) {
            boxParser = (0, _BoxParser2.default)(context).getInstance();
        }

        addMediaInfos(mimeType, streamProcessor);
    }

    function addMediaInfos(mimeType, streamProcessor) {
        var isFragmented = !dashManifestModel.getIsTextTrack(mimeType);
        if (streamProcessor) {
            mediaInfos = mediaInfos.concat(streamProcessor.getMediaInfoArr());

            if (isFragmented) {
                fragmentedFragmentModel = streamProcessor.getFragmentModel();
                instance.buffered = (0, _CustomTimeRanges2.default)(context).create();
                fragmentedTracks = mediaController.getTracksFor(_Constants2.default.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());
                var currFragTrack = mediaController.getCurrentTrackFor(_Constants2.default.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());
                for (var i = 0; i < fragmentedTracks.length; i++) {
                    if (fragmentedTracks[i] === currFragTrack) {
                        setCurrentFragmentedTrackIdx(i);
                        break;
                    }
                }
            }

            for (var _i = 0; _i < mediaInfos.length; _i++) {
                createTextTrackFromMediaInfo(null, mediaInfos[_i]);
            }
        }
    }

    function abort() {
        textTracks.deleteAllTextTracks();
        boxParser = null;
        mediaInfos = [];
        fragmentedFragmentModel = null;
        initializationSegmentReceived = false;
        fragmentedTracks = [];
    }

    function reset() {
        resetInitialSettings();

        streamController = null;
        videoModel = null;
        textTracks = null;
    }

    function onVideoChunkReceived(e) {
        var chunk = e.chunk;

        if (chunk.mediaInfo.embeddedCaptions) {
            append(chunk.bytes, chunk);
        }
    }

    function initEmbedded() {
        embeddedTracks = [];
        textTracks = (0, _TextTracks2.default)(context).getInstance();
        textTracks.setConfig({
            videoModel: videoModel
        });
        textTracks.initialize();
        boxParser = (0, _BoxParser2.default)(context).getInstance();
        currFragmentedTrackIdx = null;
        embeddedInitializationSegmentReceived = false;
        embeddedTimescale = 0;
        embeddedCea608FieldParsers = [];
        embeddedSequenceNumbers = [];
        embeddedLastSequenceNumber = null;
        embeddedInitialized = true;
        embeddedTextHtmlRender = (0, _EmbeddedTextHtmlRender2.default)(context).getInstance();

        var streamProcessors = streamController.getActiveStreamProcessors();
        for (var i in streamProcessors) {
            if (streamProcessors[i].getType() === 'video') {
                mseTimeOffset = streamProcessors[i].getRepresentationInfo().MSETimeOffset;
                break;
            }
        }

        eventBus.on(_Events2.default.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);
    }

    function resetEmbedded() {
        eventBus.off(_Events2.default.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);
        if (textTracks) {
            textTracks.deleteAllTextTracks();
        }
        embeddedInitialized = false;
        embeddedTracks = [];
        embeddedCea608FieldParsers = [null, null];
        embeddedSequenceNumbers = [];
        embeddedLastSequenceNumber = null;
    }

    function addEmbeddedTrack(mediaInfo) {
        if (!embeddedInitialized) {
            initEmbedded();
        }
        if (mediaInfo) {
            if (mediaInfo.id === _Constants2.default.CC1 || mediaInfo.id === _Constants2.default.CC3) {
                for (var i = 0; i < embeddedTracks.length; i++) {
                    if (embeddedTracks[i].id === mediaInfo.id) {
                        return;
                    }
                }
                embeddedTracks.push(mediaInfo);
            } else {
                logger.warn('Embedded track ' + mediaInfo.id + ' not supported!');
            }
        }
    }

    function setConfig(config) {
        if (!config) {
            return;
        }
        if (config.errHandler) {
            errHandler = config.errHandler;
        }
        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
        if (config.manifestModel) {
            manifestModel = config.manifestModel;
        }
        if (config.mediaController) {
            mediaController = config.mediaController;
        }
        if (config.videoModel) {
            videoModel = config.videoModel;
        }
        if (config.streamController) {
            streamController = config.streamController;
        }
        if (config.textTracks) {
            textTracks = config.textTracks;
        }
        if (config.vttParser) {
            vttParser = config.vttParser;
        }
        if (config.ttmlParser) {
            ttmlParser = config.ttmlParser;
        }
    }

    function getConfig() {
        var config = {
            fragmentModel: fragmentedFragmentModel,
            fragmentedTracks: fragmentedTracks,
            videoModel: videoModel
        };

        return config;
    }

    function setCurrentFragmentedTrackIdx(idx) {
        currFragmentedTrackIdx = idx;
    }

    function createTextTrackFromMediaInfo(captionData, mediaInfo) {
        var textTrackInfo = new _TextTrackInfo2.default();
        var trackKindMap = { subtitle: 'subtitles', caption: 'captions' }; //Dash Spec has no "s" on end of KIND but HTML needs plural.
        var getKind = function getKind() {
            var kind = mediaInfo.roles.length > 0 ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;
            kind = kind === trackKindMap.caption || kind === trackKindMap.subtitle ? kind : trackKindMap.caption;
            return kind;
        };

        var checkTTML = function checkTTML() {
            var ttml = false;
            if (mediaInfo.codec && mediaInfo.codec.search(_Constants2.default.STPP) >= 0) {
                ttml = true;
            }
            if (mediaInfo.mimeType && mediaInfo.mimeType.search(_Constants2.default.TTML) >= 0) {
                ttml = true;
            }
            return ttml;
        };

        textTrackInfo.captionData = captionData;
        textTrackInfo.lang = mediaInfo.lang;
        textTrackInfo.labels = mediaInfo.labels;
        textTrackInfo.id = mediaInfo.id ? mediaInfo.id : mediaInfo.index; // AdaptationSet id (an unsigned int) as it's optional parameter, use mediaInfo.index
        textTrackInfo.index = mediaInfo.index; // AdaptationSet index in manifest
        textTrackInfo.isTTML = checkTTML();
        textTrackInfo.defaultTrack = getIsDefault(mediaInfo);
        textTrackInfo.isFragmented = !dashManifestModel.getIsTextTrack(mediaInfo.mimeType);
        textTrackInfo.isEmbedded = mediaInfo.isEmbedded ? true : false;
        textTrackInfo.kind = getKind();
        textTrackInfo.roles = mediaInfo.roles;
        textTrackInfo.accessibility = mediaInfo.accessibility;
        var totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;
        textTracks.addTextTrack(textTrackInfo, totalNrTracks);
    }

    function append(bytes, chunk) {
        var result = void 0,
            sampleList = void 0,
            i = void 0,
            j = void 0,
            k = void 0,
            samplesInfo = void 0,
            ccContent = void 0;
        var mediaInfo = chunk.mediaInfo;
        var mediaType = mediaInfo.type;
        var mimeType = mediaInfo.mimeType;
        var codecType = mediaInfo.codec || mimeType;
        if (!codecType) {
            logger.error('No text type defined');
            return;
        }

        if (mediaType === _Constants2.default.FRAGMENTED_TEXT) {
            if (!initializationSegmentReceived) {
                initializationSegmentReceived = true;
                timescale = boxParser.getMediaTimescaleFromMoov(bytes);
            } else {
                samplesInfo = boxParser.getSamplesInfo(bytes);
                sampleList = samplesInfo.sampleList;
                if (firstFragmentedSubtitleStart === null && sampleList.length > 0) {
                    firstFragmentedSubtitleStart = sampleList[0].cts - chunk.start * timescale;
                }
                if (codecType.search(_Constants2.default.STPP) >= 0) {
                    parser = parser !== null ? parser : getParser(codecType);
                    for (i = 0; i < sampleList.length; i++) {
                        var sample = sampleList[i];
                        var sampleStart = sample.cts;
                        var sampleRelStart = sampleStart - firstFragmentedSubtitleStart;
                        this.buffered.add(sampleRelStart / timescale, (sampleRelStart + sample.duration) / timescale);
                        var dataView = new DataView(bytes, sample.offset, sample.subSizes[0]);
                        ccContent = _codemIsoboxer2.default.Utils.dataViewToString(dataView, _Constants2.default.UTF8);
                        var images = [];
                        var subOffset = sample.offset + sample.subSizes[0];
                        for (j = 1; j < sample.subSizes.length; j++) {
                            var inData = new Uint8Array(bytes, subOffset, sample.subSizes[j]);
                            var raw = String.fromCharCode.apply(null, inData);
                            images.push(raw);
                            subOffset += sample.subSizes[j];
                        }
                        try {
                            // Only used for Miscrosoft Smooth Streaming support - caption time is relative to sample time. In this case, we apply an offset.
                            var manifest = manifestModel.getValue();
                            var offsetTime = manifest.ttmlTimeIsRelative ? sampleStart / timescale : 0;
                            result = parser.parse(ccContent, offsetTime, sampleStart / timescale, (sampleStart + sample.duration) / timescale, images);
                            textTracks.addCaptions(currFragmentedTrackIdx, firstFragmentedSubtitleStart / timescale, result);
                        } catch (e) {
                            fragmentedFragmentModel.removeExecutedRequestsBeforeTime();
                            this.remove();
                            logger.error('TTML parser error: ' + e.message);
                        }
                    }
                } else {
                    // WebVTT case
                    var captionArray = [];
                    for (i = 0; i < sampleList.length; i++) {
                        var _sample = sampleList[i];
                        _sample.cts -= firstFragmentedSubtitleStart;
                        this.buffered.add(_sample.cts / timescale, (_sample.cts + _sample.duration) / timescale);
                        var sampleData = bytes.slice(_sample.offset, _sample.offset + _sample.size);
                        // There are boxes inside the sampleData, so we need a ISOBoxer to get at it.
                        var sampleBoxes = _codemIsoboxer2.default.parseBuffer(sampleData);

                        for (j = 0; j < sampleBoxes.boxes.length; j++) {
                            var box1 = sampleBoxes.boxes[j];
                            logger.debug('VTT box1: ' + box1.type);
                            if (box1.type === 'vtte') {
                                continue; //Empty box
                            }
                            if (box1.type === 'vttc') {
                                logger.debug('VTT vttc boxes.length = ' + box1.boxes.length);
                                for (k = 0; k < box1.boxes.length; k++) {
                                    var box2 = box1.boxes[k];
                                    logger.debug('VTT box2: ' + box2.type);
                                    if (box2.type === 'payl') {
                                        var cue_text = box2.cue_text;
                                        logger.debug('VTT cue_text = ' + cue_text);
                                        var start_time = _sample.cts / timescale;
                                        var end_time = (_sample.cts + _sample.duration) / timescale;
                                        captionArray.push({
                                            start: start_time,
                                            end: end_time,
                                            data: cue_text,
                                            styles: {}
                                        });
                                        logger.debug('VTT ' + start_time + '-' + end_time + ' : ' + cue_text);
                                    }
                                }
                            }
                        }
                    }
                    if (captionArray.length > 0) {
                        textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);
                    }
                }
            }
        } else if (mediaType === _Constants2.default.TEXT) {
            var _dataView = new DataView(bytes, 0, bytes.byteLength);
            ccContent = _codemIsoboxer2.default.Utils.dataViewToString(_dataView, _Constants2.default.UTF8);

            try {
                result = getParser(codecType).parse(ccContent, 0);
                textTracks.addCaptions(textTracks.getCurrentTrackIdx(), 0, result);
            } catch (e) {
                errHandler.timedTextError(e, 'parse', ccContent);
                errHandler.error(new _DashJSError2.default(_Errors2.default.TIMED_TEXT_ERROR_ID_PARSE_CODE, _Errors2.default.TIMED_TEXT_ERROR_MESSAGE_PARSE + e.message, ccContent));
            }
        } else if (mediaType === _Constants2.default.VIDEO) {
            //embedded text
            if (chunk.segmentType === _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE) {
                if (embeddedTimescale === 0) {
                    embeddedTimescale = boxParser.getMediaTimescaleFromMoov(bytes);
                    for (i = 0; i < embeddedTracks.length; i++) {
                        createTextTrackFromMediaInfo(null, embeddedTracks[i]);
                    }
                }
            } else {
                // MediaSegment
                if (embeddedTimescale === 0) {
                    logger.warn('CEA-608: No timescale for embeddedTextTrack yet');
                    return;
                }
                var makeCueAdderForIndex = function makeCueAdderForIndex(self, trackIndex) {
                    function newCue(startTime, endTime, captionScreen) {
                        var captionsArray = null;
                        if (videoModel.getTTMLRenderingDiv()) {
                            captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen);
                        } else {
                            var text = captionScreen.getDisplayText();
                            captionsArray = [{
                                start: startTime,
                                end: endTime,
                                data: text,
                                styles: {}
                            }];
                        }
                        if (captionsArray) {
                            textTracks.addCaptions(trackIndex, 0, captionsArray);
                        }
                    }
                    return newCue;
                };

                samplesInfo = boxParser.getSamplesInfo(bytes);

                var sequenceNumber = samplesInfo.lastSequenceNumber;

                if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {
                    // Time to setup the CEA-608 parsing
                    var field = void 0,
                        handler = void 0,
                        trackIdx = void 0;
                    for (i = 0; i < embeddedTracks.length; i++) {
                        if (embeddedTracks[i].id === _Constants2.default.CC1) {
                            field = 0;
                            trackIdx = textTracks.getTrackIdxForId(_Constants2.default.CC1);
                        } else if (embeddedTracks[i].id === _Constants2.default.CC3) {
                            field = 1;
                            trackIdx = textTracks.getTrackIdxForId(_Constants2.default.CC3);
                        }
                        if (trackIdx === -1) {
                            logger.warn('CEA-608: data before track is ready.');
                            return;
                        }
                        handler = makeCueAdderForIndex(this, trackIdx);
                        embeddedCea608FieldParsers[i] = new _cea608Parser2.default.Cea608Parser(i + 1, {
                            'newCue': handler
                        }, null);
                    }
                }

                if (embeddedTimescale && embeddedSequenceNumbers.indexOf(sequenceNumber) == -1) {
                    if (embeddedLastSequenceNumber !== null && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences) {
                        for (i = 0; i < embeddedCea608FieldParsers.length; i++) {
                            if (embeddedCea608FieldParsers[i]) {
                                embeddedCea608FieldParsers[i].reset();
                            }
                        }
                    }

                    var allCcData = extractCea608Data(bytes, samplesInfo.sampleList);

                    for (var fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {
                        var ccData = allCcData.fields[fieldNr];
                        var fieldParser = embeddedCea608FieldParsers[fieldNr];
                        if (fieldParser) {
                            for (i = 0; i < ccData.length; i++) {
                                fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);
                            }
                        }
                    }
                    embeddedLastSequenceNumber = sequenceNumber;
                    embeddedSequenceNumbers.push(sequenceNumber);
                }
            }
        }
    }
    /**
     * Extract CEA-608 data from a buffer of data.
     * @param {ArrayBuffer} data
     * @param {Array} samples cue information
     * @returns {Object|null} ccData corresponding to one segment.
     */
    function extractCea608Data(data, samples) {
        if (samples.length === 0) {
            return null;
        }

        var allCcData = {
            splits: [],
            fields: [[], []]
        };
        var raw = new DataView(data);
        for (var i = 0; i < samples.length; i++) {
            var sample = samples[i];
            var cea608Ranges = _cea608Parser2.default.findCea608Nalus(raw, sample.offset, sample.size);
            var lastSampleTime = null;
            var idx = 0;
            for (var j = 0; j < cea608Ranges.length; j++) {
                var ccData = _cea608Parser2.default.extractCea608DataFromRange(raw, cea608Ranges[j]);
                for (var k = 0; k < 2; k++) {
                    if (ccData[k].length > 0) {
                        if (sample.cts !== lastSampleTime) {
                            idx = 0;
                        } else {
                            idx += 1;
                        }
                        allCcData.fields[k].push([sample.cts + mseTimeOffset * embeddedTimescale, ccData[k], idx]);
                        lastSampleTime = sample.cts;
                    }
                }
            }
        }

        // Sort by sampleTime ascending order
        // If two packets have the same sampleTime, use them in the order
        // they were received
        allCcData.fields.forEach(function sortField(field) {
            field.sort(function (a, b) {
                if (a[0] === b[0]) {
                    return a[2] - b[2];
                }
                return a[0] - b[0];
            });
        });

        return allCcData;
    }

    function getIsDefault(mediaInfo) {
        //TODO How to tag default. currently same order as listed in manifest.
        // Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND
        // Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.
        var isDefault = false;
        if (embeddedTracks.length > 1 && mediaInfo.isEmbedded) {
            isDefault = mediaInfo.id && mediaInfo.id === _Constants2.default.CC1; // CC1 if both CC1 and CC3 exist
        } else if (embeddedTracks.length === 1) {
            if (mediaInfo.id && typeof mediaInfo.id === 'string' && mediaInfo.id.substring(0, 2) === 'CC') {
                // Either CC1 or CC3
                isDefault = true;
            }
        } else if (embeddedTracks.length === 0) {
            isDefault = mediaInfo.index === mediaInfos[0].index;
        }
        return isDefault;
    }

    function getParser(codecType) {
        var parser = void 0;
        if (codecType.search(_Constants2.default.VTT) >= 0) {
            parser = vttParser;
        } else if (codecType.search(_Constants2.default.TTML) >= 0 || codecType.search(_Constants2.default.STPP) >= 0) {
            parser = ttmlParser;
        }
        return parser;
    }

    function remove(start, end) {
        //if start and end are not defined, remove all
        if (start === undefined && start === end) {
            start = this.buffered.start(0);
            end = this.buffered.end(this.buffered.length - 1);
        }
        this.buffered.remove(start, end);
    }

    instance = {
        initialize: initialize,
        append: append,
        abort: abort,
        addEmbeddedTrack: addEmbeddedTrack,
        resetEmbedded: resetEmbedded,
        setConfig: setConfig,
        getConfig: getConfig,
        setCurrentFragmentedTrackIdx: setCurrentFragmentedTrackIdx,
        remove: remove,
        reset: reset
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


TextSourceBuffer.__dashjs_factory_name = 'TextSourceBuffer';
exports.default = _FactoryMaker2.default.getSingletonFactory(TextSourceBuffer);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/text/TextTracks.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/text/TextTracks.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _imsc = __webpack_require__(/*! imsc */ "./node_modules/imsc/src/main/js/main.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function TextTracks() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    var instance = void 0,
        logger = void 0,
        Cue = void 0,
        videoModel = void 0,
        textTrackQueue = void 0,
        trackElementArr = void 0,
        currentTrackIdx = void 0,
        actualVideoLeft = void 0,
        actualVideoTop = void 0,
        actualVideoWidth = void 0,
        actualVideoHeight = void 0,
        captionContainer = void 0,
        videoSizeCheckInterval = void 0,
        fullscreenAttribute = void 0,
        displayCCOnTop = void 0,
        previousISDState = void 0,
        topZIndex = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function initialize() {
        if (typeof window === 'undefined' || typeof navigator === 'undefined') {
            return;
        }

        Cue = window.VTTCue || window.TextTrackCue;
        textTrackQueue = [];
        trackElementArr = [];
        currentTrackIdx = -1;
        actualVideoLeft = 0;
        actualVideoTop = 0;
        actualVideoWidth = 0;
        actualVideoHeight = 0;
        captionContainer = null;
        videoSizeCheckInterval = null;
        displayCCOnTop = false;
        topZIndex = 2147483647;
        previousISDState = null;

        if (document.fullscreenElement !== undefined) {
            fullscreenAttribute = 'fullscreenElement'; // Standard and Edge
        } else if (document.webkitIsFullScreen !== undefined) {
            fullscreenAttribute = 'webkitIsFullScreen'; // Chrome and Safari (and Edge)
        } else if (document.msFullscreenElement) {
            // IE11
            fullscreenAttribute = 'msFullscreenElement';
        } else if (document.mozFullScreen) {
            // Firefox
            fullscreenAttribute = 'mozFullScreen';
        }
    }

    function createTrackForUserAgent(i) {
        var kind = textTrackQueue[i].kind;
        var label = textTrackQueue[i].id !== undefined ? textTrackQueue[i].id : textTrackQueue[i].lang;
        var lang = textTrackQueue[i].lang;
        var isTTML = textTrackQueue[i].isTTML;
        var isEmbedded = textTrackQueue[i].isEmbedded;
        var track = videoModel.addTextTrack(kind, label, lang);

        track.isEmbedded = isEmbedded;
        track.isTTML = isTTML;

        return track;
    }

    function displayCConTop(value) {
        displayCCOnTop = value;
        if (!captionContainer || document[fullscreenAttribute]) {
            return;
        }
        captionContainer.style.zIndex = value ? topZIndex : null;
    }

    function addTextTrack(textTrackInfoVO, totalTextTracks) {
        if (textTrackQueue.length === totalTextTracks) {
            logger.error('Trying to add too many tracks.');
            return;
        }

        textTrackQueue.push(textTrackInfoVO);

        if (textTrackQueue.length === totalTextTracks) {
            textTrackQueue.sort(function (a, b) {
                //Sort in same order as in manifest
                return a.index - b.index;
            });
            captionContainer = videoModel.getTTMLRenderingDiv();
            var defaultIndex = -1;
            for (var i = 0; i < textTrackQueue.length; i++) {
                var track = createTrackForUserAgent.call(this, i);
                trackElementArr.push(track); //used to remove tracks from video element when added manually

                if (textTrackQueue[i].defaultTrack) {
                    // track.default is an object property identifier that is a reserved word
                    // The following jshint directive is used to suppressed the warning "Expected an identifier and instead saw 'default' (a reserved word)"
                    /*jshint -W024 */
                    track.default = true;
                    defaultIndex = i;
                }

                var textTrack = getTrackByIdx(i);
                if (textTrack) {
                    //each time a track is created, its mode should be showing by default
                    //sometime, it's not on Chrome
                    textTrack.mode = _Constants2.default.TEXT_SHOWING;
                    if (captionContainer && (textTrackQueue[i].isTTML || textTrackQueue[i].isEmbedded)) {
                        textTrack.renderingType = 'html';
                    } else {
                        textTrack.renderingType = 'default';
                    }
                }
                this.addCaptions(i, 0, textTrackQueue[i].captionData);
                eventBus.trigger(_Events2.default.TEXT_TRACK_ADDED);
            }

            //set current track index in textTrackQueue array
            setCurrentTrackIdx.call(this, defaultIndex);

            if (defaultIndex >= 0) {
                for (var idx = 0; idx < textTrackQueue.length; idx++) {
                    var videoTextTrack = getTrackByIdx(idx);
                    if (videoTextTrack) {
                        videoTextTrack.mode = idx === defaultIndex ? _Constants2.default.TEXT_SHOWING : _Constants2.default.TEXT_HIDDEN;
                    }
                }
            }

            eventBus.trigger(_Events2.default.TEXT_TRACKS_QUEUE_INITIALIZED, {
                index: currentTrackIdx,
                tracks: textTrackQueue
            }); //send default idx.
        }
    }

    function getVideoVisibleVideoSize(viewWidth, viewHeight, videoWidth, videoHeight, aspectRatio, use80Percent) {
        var viewAspectRatio = viewWidth / viewHeight;
        var videoAspectRatio = videoWidth / videoHeight;

        var videoPictureWidth = 0;
        var videoPictureHeight = 0;

        if (viewAspectRatio > videoAspectRatio) {
            videoPictureHeight = viewHeight;
            videoPictureWidth = videoPictureHeight / videoHeight * videoWidth;
        } else {
            videoPictureWidth = viewWidth;
            videoPictureHeight = videoPictureWidth / videoWidth * videoHeight;
        }

        var videoPictureXAspect = 0;
        var videoPictureYAspect = 0;
        var videoPictureWidthAspect = 0;
        var videoPictureHeightAspect = 0;
        var videoPictureAspect = videoPictureWidth / videoPictureHeight;

        if (videoPictureAspect > aspectRatio) {
            videoPictureHeightAspect = videoPictureHeight;
            videoPictureWidthAspect = videoPictureHeight * aspectRatio;
        } else {
            videoPictureWidthAspect = videoPictureWidth;
            videoPictureHeightAspect = videoPictureWidth / aspectRatio;
        }
        videoPictureXAspect = (viewWidth - videoPictureWidthAspect) / 2;
        videoPictureYAspect = (viewHeight - videoPictureHeightAspect) / 2;

        if (use80Percent) {
            return {
                x: videoPictureXAspect + videoPictureWidthAspect * 0.1,
                y: videoPictureYAspect + videoPictureHeightAspect * 0.1,
                w: videoPictureWidthAspect * 0.8,
                h: videoPictureHeightAspect * 0.8
            }; /* Maximal picture size in videos aspect ratio */
        } else {
            return {
                x: videoPictureXAspect,
                y: videoPictureYAspect,
                w: videoPictureWidthAspect,
                h: videoPictureHeightAspect
            }; /* Maximal picture size in videos aspect ratio */
        }
    }

    function checkVideoSize(track, forceDrawing) {
        var clientWidth = videoModel.getClientWidth();
        var clientHeight = videoModel.getClientHeight();
        var videoWidth = videoModel.getVideoWidth();
        var videoHeight = videoModel.getVideoHeight();
        var videoOffsetTop = videoModel.getVideoRelativeOffsetTop();
        var videoOffsetLeft = videoModel.getVideoRelativeOffsetLeft();
        var aspectRatio = videoWidth / videoHeight;
        var use80Percent = false;
        if (track.isFromCEA608) {
            // If this is CEA608 then use predefined aspect ratio
            aspectRatio = 3.5 / 3.0;
            use80Percent = true;
        }

        var realVideoSize = getVideoVisibleVideoSize.call(this, clientWidth, clientHeight, videoWidth, videoHeight, aspectRatio, use80Percent);

        var newVideoWidth = realVideoSize.w;
        var newVideoHeight = realVideoSize.h;
        var newVideoLeft = realVideoSize.x;
        var newVideoTop = realVideoSize.y;

        if (newVideoWidth != actualVideoWidth || newVideoHeight != actualVideoHeight || newVideoLeft != actualVideoLeft || newVideoTop != actualVideoTop || forceDrawing) {
            actualVideoLeft = newVideoLeft + videoOffsetLeft;
            actualVideoTop = newVideoTop + videoOffsetTop;
            actualVideoWidth = newVideoWidth;
            actualVideoHeight = newVideoHeight;

            if (captionContainer) {
                var containerStyle = captionContainer.style;
                containerStyle.left = actualVideoLeft + 'px';
                containerStyle.top = actualVideoTop + 'px';
                containerStyle.width = actualVideoWidth + 'px';
                containerStyle.height = actualVideoHeight + 'px';
                containerStyle.zIndex = fullscreenAttribute && document[fullscreenAttribute] || displayCCOnTop ? topZIndex : null;
                eventBus.trigger(_Events2.default.CAPTION_CONTAINER_RESIZE, {});
            }

            // Video view has changed size, so resize any active cues
            var activeCues = track.activeCues;
            if (activeCues) {
                var len = activeCues.length;
                for (var i = 0; i < len; ++i) {
                    var cue = activeCues[i];
                    cue.scaleCue(cue);
                }
            }
        }
    }

    function scaleCue(activeCue) {
        var videoWidth = actualVideoWidth;
        var videoHeight = actualVideoHeight;
        var key = void 0,
            replaceValue = void 0,
            valueFontSize = void 0,
            valueLineHeight = void 0,
            elements = void 0;

        if (activeCue.cellResolution) {
            var cellUnit = [videoWidth / activeCue.cellResolution[0], videoHeight / activeCue.cellResolution[1]];
            if (activeCue.linePadding) {
                for (key in activeCue.linePadding) {
                    if (activeCue.linePadding.hasOwnProperty(key)) {
                        var valueLinePadding = activeCue.linePadding[key];
                        replaceValue = (valueLinePadding * cellUnit[0]).toString();
                        // Compute the CellResolution unit in order to process properties using sizing (fontSize, linePadding, etc).
                        var elementsSpan = document.getElementsByClassName('spanPadding');
                        for (var i = 0; i < elementsSpan.length; i++) {
                            elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-left\s*:\s*)[\d.,]+(?=\s*px)/gi, '$1' + replaceValue);
                            elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-right\s*:\s*)[\d.,]+(?=\s*px)/gi, '$1' + replaceValue);
                        }
                    }
                }
            }

            if (activeCue.fontSize) {
                for (key in activeCue.fontSize) {
                    if (activeCue.fontSize.hasOwnProperty(key)) {
                        if (activeCue.fontSize[key][0] === '%') {
                            valueFontSize = activeCue.fontSize[key][1] / 100;
                        } else if (activeCue.fontSize[key][0] === 'c') {
                            valueFontSize = activeCue.fontSize[key][1];
                        }

                        replaceValue = (valueFontSize * cellUnit[1]).toString();

                        if (key !== 'defaultFontSize') {
                            elements = document.getElementsByClassName(key);
                        } else {
                            elements = document.getElementsByClassName('paragraph');
                        }

                        for (var j = 0; j < elements.length; j++) {
                            elements[j].style.cssText = elements[j].style.cssText.replace(/(font-size\s*:\s*)[\d.,]+(?=\s*px)/gi, '$1' + replaceValue);
                        }
                    }
                }

                if (activeCue.lineHeight) {
                    for (key in activeCue.lineHeight) {
                        if (activeCue.lineHeight.hasOwnProperty(key)) {
                            if (activeCue.lineHeight[key][0] === '%') {
                                valueLineHeight = activeCue.lineHeight[key][1] / 100;
                            } else if (activeCue.fontSize[key][0] === 'c') {
                                valueLineHeight = activeCue.lineHeight[key][1];
                            }

                            replaceValue = (valueLineHeight * cellUnit[1]).toString();
                            elements = document.getElementsByClassName(key);
                            for (var k = 0; k < elements.length; k++) {
                                elements[k].style.cssText = elements[k].style.cssText.replace(/(line-height\s*:\s*)[\d.,]+(?=\s*px)/gi, '$1' + replaceValue);
                            }
                        }
                    }
                }
            }
        }

        if (activeCue.isd) {
            var htmlCaptionDiv = document.getElementById(activeCue.cueID);
            if (htmlCaptionDiv) {
                captionContainer.removeChild(htmlCaptionDiv);
            }
            renderCaption(activeCue);
        }
    }

    function renderCaption(cue) {
        if (captionContainer) {
            var finalCue = document.createElement('div');
            captionContainer.appendChild(finalCue);
            previousISDState = (0, _imsc.renderHTML)(cue.isd, finalCue, function (uri) {
                var imsc1ImgUrnTester = /^(urn:)(mpeg:[a-z0-9][a-z0-9-]{0,31}:)(subs:)([0-9]+)$/;
                var smpteImgUrnTester = /^#(.*)$/;
                if (imsc1ImgUrnTester.test(uri)) {
                    var match = imsc1ImgUrnTester.exec(uri);
                    var imageId = parseInt(match[4], 10) - 1;
                    var imageData = btoa(cue.images[imageId]);
                    var dataUrl = 'data:image/png;base64,' + imageData;
                    return dataUrl;
                } else if (smpteImgUrnTester.test(uri)) {
                    var _match = smpteImgUrnTester.exec(uri);
                    var _imageId = _match[1];
                    var _dataUrl = 'data:image/png;base64,' + cue.embeddedImages[_imageId];
                    return _dataUrl;
                } else {
                    return null;
                }
            }, captionContainer.clientHeight, captionContainer.clientWidth, false /*displayForcedOnlyMode*/, function (err) {
                logger.info('renderCaption :', err);
                //TODO add ErrorHandler management
            }, previousISDState, true /*enableRollUp*/);
            finalCue.id = cue.cueID;
            eventBus.trigger(_Events2.default.CAPTION_RENDERED, { captionDiv: finalCue, currentTrackIdx: currentTrackIdx });
        }
    }

    /*
     * Add captions to track, store for later adding, or add captions added before
     */
    function addCaptions(trackIdx, timeOffset, captionData) {
        var track = getTrackByIdx(trackIdx);
        var self = this;

        if (!track) {
            return;
        }

        if (!captionData || captionData.length === 0) {
            return;
        }

        for (var item = 0; item < captionData.length; item++) {
            var cue = void 0;
            var currentItem = captionData[item];

            track.cellResolution = currentItem.cellResolution;
            track.isFromCEA608 = currentItem.isFromCEA608;

            if (currentItem.type === 'html' && captionContainer) {
                cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, '');
                cue.cueHTMLElement = currentItem.cueHTMLElement;
                cue.isd = currentItem.isd;
                cue.images = currentItem.images;
                cue.embeddedImages = currentItem.embeddedImages;
                cue.cueID = currentItem.cueID;
                cue.scaleCue = scaleCue.bind(self);
                //useful parameters for cea608 subtitles, not for TTML one.
                cue.cellResolution = currentItem.cellResolution;
                cue.lineHeight = currentItem.lineHeight;
                cue.linePadding = currentItem.linePadding;
                cue.fontSize = currentItem.fontSize;

                captionContainer.style.left = actualVideoLeft + 'px';
                captionContainer.style.top = actualVideoTop + 'px';
                captionContainer.style.width = actualVideoWidth + 'px';
                captionContainer.style.height = actualVideoHeight + 'px';

                cue.onenter = function () {
                    if (track.mode === _Constants2.default.TEXT_SHOWING) {
                        if (this.isd) {
                            renderCaption(this);
                            logger.debug('Cue enter id:' + this.cueID);
                        } else {
                            captionContainer.appendChild(this.cueHTMLElement);
                            scaleCue.call(self, this);
                            eventBus.trigger(_Events2.default.CAPTION_RENDERED, { captionDiv: this.cueHTMLElement, currentTrackIdx: currentTrackIdx });
                        }
                    }
                };

                cue.onexit = function () {
                    if (captionContainer) {
                        var divs = captionContainer.childNodes;
                        for (var i = 0; i < divs.length; ++i) {
                            if (divs[i].id === this.cueID) {
                                logger.debug('Cue exit id:' + divs[i].id);
                                captionContainer.removeChild(divs[i]);
                            }
                        }
                    }
                };
            } else {
                if (currentItem.data) {
                    cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, currentItem.data);
                    if (currentItem.styles) {
                        if (currentItem.styles.align !== undefined && 'align' in cue) {
                            cue.align = currentItem.styles.align;
                        }
                        if (currentItem.styles.line !== undefined && 'line' in cue) {
                            cue.line = currentItem.styles.line;
                        }
                        if (currentItem.styles.position !== undefined && 'position' in cue) {
                            cue.position = currentItem.styles.position;
                        }
                        if (currentItem.styles.size !== undefined && 'size' in cue) {
                            cue.size = currentItem.styles.size;
                        }
                    }
                    cue.onenter = function () {
                        if (track.mode === _Constants2.default.TEXT_SHOWING) {
                            eventBus.trigger(_Events2.default.CAPTION_RENDERED, { currentTrackIdx: currentTrackIdx });
                        }
                    };
                }
            }
            try {
                if (cue) {
                    track.addCue(cue);
                } else {
                    logger.error('impossible to display subtitles.');
                }
            } catch (e) {
                // Edge crash, delete everything and start adding again
                // @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11979877/
                deleteTrackCues(track);
                track.addCue(cue);
                throw e;
            }
        }
    }

    function getTrackByIdx(idx) {
        return idx >= 0 && textTrackQueue[idx] ? videoModel.getTextTrack(textTrackQueue[idx].kind, textTrackQueue[idx].id, textTrackQueue[idx].lang, textTrackQueue[idx].isTTML, textTrackQueue[idx].isEmbedded) : null;
    }

    function getCurrentTrackIdx() {
        return currentTrackIdx;
    }

    function getTrackIdxForId(trackId) {
        var idx = -1;
        for (var i = 0; i < textTrackQueue.length; i++) {
            if (textTrackQueue[i].id === trackId) {
                idx = i;
                break;
            }
        }

        return idx;
    }

    function setCurrentTrackIdx(idx) {
        if (idx === currentTrackIdx) {
            return;
        }
        currentTrackIdx = idx;
        var track = getTrackByIdx(currentTrackIdx);
        setCueStyleOnTrack.call(this, track);

        if (videoSizeCheckInterval) {
            clearInterval(videoSizeCheckInterval);
            videoSizeCheckInterval = null;
        }

        if (track && track.renderingType === 'html') {
            checkVideoSize.call(this, track, true);
            videoSizeCheckInterval = setInterval(checkVideoSize.bind(this, track), 500);
        }
    }

    function setCueStyleOnTrack(track) {
        clearCaptionContainer.call(this);
        if (track) {
            if (track.renderingType === 'html') {
                setNativeCueStyle.call(this);
            } else {
                removeNativeCueStyle.call(this);
            }
        } else {
            removeNativeCueStyle.call(this);
        }
    }

    function deleteTrackCues(track) {
        if (track.cues) {
            var cues = track.cues;
            var lastIdx = cues.length - 1;

            for (var r = lastIdx; r >= 0; r--) {
                track.removeCue(cues[r]);
            }
        }
    }

    function deleteCuesFromTrackIdx(trackIdx) {
        var track = getTrackByIdx(trackIdx);
        if (track) {
            deleteTrackCues(track);
        }
    }

    function deleteAllTextTracks() {
        var ln = trackElementArr ? trackElementArr.length : 0;
        for (var i = 0; i < ln; i++) {
            var track = getTrackByIdx(i);
            if (track) {
                deleteTrackCues.call(this, track);
                track.mode = 'disabled';
            }
        }
        trackElementArr = [];
        textTrackQueue = [];
        if (videoSizeCheckInterval) {
            clearInterval(videoSizeCheckInterval);
            videoSizeCheckInterval = null;
        }
        currentTrackIdx = -1;
        clearCaptionContainer.call(this);
    }

    function deleteTextTrack(idx) {
        videoModel.removeChild(trackElementArr[idx]);
        trackElementArr.splice(idx, 1);
    }

    /* Set native cue style to transparent background to avoid it being displayed. */
    function setNativeCueStyle() {
        var styleElement = document.getElementById('native-cue-style');
        if (styleElement) {
            return; //Already set
        }

        styleElement = document.createElement('style');
        styleElement.id = 'native-cue-style';
        document.head.appendChild(styleElement);
        var stylesheet = styleElement.sheet;
        var video = videoModel.getElement();
        try {
            if (video) {
                if (video.id) {
                    stylesheet.insertRule('#' + video.id + '::cue {background: transparent}', 0);
                } else if (video.classList.length !== 0) {
                    stylesheet.insertRule('.' + video.className + '::cue {background: transparent}', 0);
                } else {
                    stylesheet.insertRule('video::cue {background: transparent}', 0);
                }
            }
        } catch (e) {
            logger.info('' + e.message);
        }
    }

    /* Remove the extra cue style with transparent background for native cues. */
    function removeNativeCueStyle() {
        var styleElement = document.getElementById('native-cue-style');
        if (styleElement) {
            document.head.removeChild(styleElement);
        }
    }

    function clearCaptionContainer() {
        if (captionContainer) {
            while (captionContainer.firstChild) {
                captionContainer.removeChild(captionContainer.firstChild);
            }
        }
    }

    function setConfig(config) {
        if (!config) {
            return;
        }
        if (config.videoModel) {
            videoModel = config.videoModel;
        }
    }

    function setModeForTrackIdx(idx, mode) {
        var track = getTrackByIdx(idx);
        if (track && track.mode !== mode) {
            track.mode = mode;
        }
    }

    function getCurrentTrackInfo() {
        return textTrackQueue[currentTrackIdx];
    }

    instance = {
        initialize: initialize,
        displayCConTop: displayCConTop,
        addTextTrack: addTextTrack,
        addCaptions: addCaptions,
        getCurrentTrackIdx: getCurrentTrackIdx,
        setCurrentTrackIdx: setCurrentTrackIdx,
        getTrackIdxForId: getTrackIdxForId,
        getCurrentTrackInfo: getCurrentTrackInfo,
        setModeForTrackIdx: setModeForTrackIdx,
        deleteCuesFromTrackIdx: deleteCuesFromTrackIdx,
        deleteAllTextTracks: deleteAllTextTracks,
        deleteTextTrack: deleteTextTrack,
        setConfig: setConfig
    };

    setup();

    return instance;
}

TextTracks.__dashjs_factory_name = 'TextTracks';
exports.default = _FactoryMaker2.default.getSingletonFactory(TextTracks);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/thumbnail/ThumbnailController.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/thumbnail/ThumbnailController.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _Thumbnail = __webpack_require__(/*! ../vo/Thumbnail */ "./node_modules/dashjs/src/streaming/vo/Thumbnail.js");

var _Thumbnail2 = _interopRequireDefault(_Thumbnail);

var _ThumbnailTracks = __webpack_require__(/*! ./ThumbnailTracks */ "./node_modules/dashjs/src/streaming/thumbnail/ThumbnailTracks.js");

var _ThumbnailTracks2 = _interopRequireDefault(_ThumbnailTracks);

var _BitrateInfo = __webpack_require__(/*! ../vo/BitrateInfo */ "./node_modules/dashjs/src/streaming/vo/BitrateInfo.js");

var _BitrateInfo2 = _interopRequireDefault(_BitrateInfo);

var _SegmentsUtils = __webpack_require__(/*! ../../dash/utils/SegmentsUtils */ "./node_modules/dashjs/src/dash/utils/SegmentsUtils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function ThumbnailController(config) {

    var context = this.context;

    var instance = void 0,
        thumbnailTracks = void 0;

    function setup() {
        reset();
        thumbnailTracks = (0, _ThumbnailTracks2.default)(context).create({
            dashManifestModel: config.dashManifestModel,
            adapter: config.adapter,
            baseURLController: config.baseURLController,
            stream: config.stream,
            timelineConverter: config.timelineConverter
        });
    }

    function getThumbnail(time, callback) {
        var track = thumbnailTracks.getCurrentTrack();
        if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {
            return null;
        }

        // Calculate index of the sprite given a time
        var seq = Math.floor(time / track.segmentDuration);
        var offset = time % track.segmentDuration;
        var thumbIndex = Math.floor(offset * track.tilesHor * track.tilesVert / track.segmentDuration);
        // Create and return the thumbnail
        var thumbnail = new _Thumbnail2.default();

        thumbnail.width = Math.floor(track.widthPerTile);
        thumbnail.height = Math.floor(track.heightPerTile);
        thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;
        thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;

        if ('readThumbnail' in track) {
            return track.readThumbnail(time, function (url) {
                thumbnail.url = url;
                if (callback) callback(thumbnail);
            });
        } else {
            thumbnail.url = buildUrlFromTemplate(track, seq);
            if (callback) callback(thumbnail);
            return thumbnail;
        }
    }

    function buildUrlFromTemplate(track, seq) {
        var seqIdx = seq + track.startNumber;
        var url = (0, _SegmentsUtils.replaceTokenForTemplate)(track.templateUrl, 'Number', seqIdx);
        url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Time', (seqIdx - 1) * track.segmentDuration);
        url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Bandwidth', track.bandwidth);
        return (0, _SegmentsUtils.unescapeDollarsInTemplate)(url);
    }

    function setTrackByIndex(index) {
        thumbnailTracks.setTrackByIndex(index);
    }

    function getCurrentTrackIndex() {
        return thumbnailTracks.getCurrentTrackIndex();
    }

    function getBitrateList() {
        var tracks = thumbnailTracks.getTracks();
        var i = 0;

        return tracks.map(function (t) {
            var bitrateInfo = new _BitrateInfo2.default();
            bitrateInfo.mediaType = _Constants2.default.IMAGE;
            bitrateInfo.qualityIndex = i++;
            bitrateInfo.bitrate = t.bitrate;
            bitrateInfo.width = t.width;
            bitrateInfo.height = t.height;
            return bitrateInfo;
        });
    }

    function reset() {
        if (thumbnailTracks) {
            thumbnailTracks.reset();
        }
    }

    instance = {
        get: getThumbnail,
        setTrackByIndex: setTrackByIndex,
        getCurrentTrackIndex: getCurrentTrackIndex,
        getBitrateList: getBitrateList,
        reset: reset
    };

    setup();

    return instance;
}

ThumbnailController.__dashjs_factory_name = 'ThumbnailController';
exports.default = _FactoryMaker2.default.getClassFactory(ThumbnailController);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/thumbnail/ThumbnailTracks.js":
/*!************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/thumbnail/ThumbnailTracks.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.THUMBNAILS_SCHEME_ID_URIS = undefined;

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _DashConstants = __webpack_require__(/*! ../../dash/constants/DashConstants */ "./node_modules/dashjs/src/dash/constants/DashConstants.js");

var _DashConstants2 = _interopRequireDefault(_DashConstants);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _ThumbnailTrackInfo = __webpack_require__(/*! ../vo/ThumbnailTrackInfo */ "./node_modules/dashjs/src/streaming/vo/ThumbnailTrackInfo.js");

var _ThumbnailTrackInfo2 = _interopRequireDefault(_ThumbnailTrackInfo);

var _URLUtils = __webpack_require__(/*! ../../streaming/utils/URLUtils */ "./node_modules/dashjs/src/streaming/utils/URLUtils.js");

var _URLUtils2 = _interopRequireDefault(_URLUtils);

var _SegmentsUtils = __webpack_require__(/*! ../../dash/utils/SegmentsUtils */ "./node_modules/dashjs/src/dash/utils/SegmentsUtils.js");

var _SegmentBaseLoader = __webpack_require__(/*! ../../dash/SegmentBaseLoader */ "./node_modules/dashjs/src/dash/SegmentBaseLoader.js");

var _SegmentBaseLoader2 = _interopRequireDefault(_SegmentBaseLoader);

var _BoxParser = __webpack_require__(/*! ../../streaming/utils/BoxParser */ "./node_modules/dashjs/src/streaming/utils/BoxParser.js");

var _BoxParser2 = _interopRequireDefault(_BoxParser);

var _XHRLoader = __webpack_require__(/*! ../../streaming/net/XHRLoader */ "./node_modules/dashjs/src/streaming/net/XHRLoader.js");

var _XHRLoader2 = _interopRequireDefault(_XHRLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var THUMBNAILS_SCHEME_ID_URIS = exports.THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile', 'http://dashif.org/guidelines/thumbnail_tile']; /**
                                                                                                                                                          * The copyright in this software is being made available under the BSD License,
                                                                                                                                                          * included below. This software may be subject to other third party and contributor
                                                                                                                                                          * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                          *
                                                                                                                                                          * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                          * All rights reserved.
                                                                                                                                                          *
                                                                                                                                                          * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                          * are permitted provided that the following conditions are met:
                                                                                                                                                          *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                          *  list of conditions and the following disclaimer.
                                                                                                                                                          *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                          *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                          *  other materials provided with the distribution.
                                                                                                                                                          *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                          *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                          *  without specific prior written permission.
                                                                                                                                                          *
                                                                                                                                                          *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                          *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                          *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                          *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                          *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                          *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                          *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                          *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                          *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                          *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                          */


function ThumbnailTracks(config) {
    var context = this.context;

    var dashManifestModel = config.dashManifestModel;
    var adapter = config.adapter;
    var baseURLController = config.baseURLController;
    var stream = config.stream;
    var timelineConverter = config.timelineConverter;
    var metricsModel = config.metricsModel;
    var mediaPlayerModel = config.mediaPlayerModel;
    var errHandler = config.errHandler;

    var urlUtils = (0, _URLUtils2.default)(context).getInstance();

    var instance = void 0,
        tracks = void 0,
        currentTrackIndex = void 0,
        loader = void 0,
        segmentBaseLoader = void 0,
        boxParser = void 0;

    function initialize() {
        reset();
        loader = (0, _XHRLoader2.default)(context).create({});
        boxParser = (0, _BoxParser2.default)(context).getInstance();
        segmentBaseLoader = (0, _SegmentBaseLoader2.default)(context).getInstance();
        segmentBaseLoader.setConfig({
            baseURLController: baseURLController,
            metricsModel: metricsModel,
            mediaPlayerModel: mediaPlayerModel,
            errHandler: errHandler
        });

        // parse representation and create tracks
        addTracks();
    }

    function normalizeSegments(fragments, representation) {
        var segments = [];
        var count = 0;

        var i = void 0,
            len = void 0,
            s = void 0,
            seg = void 0;

        for (i = 0, len = fragments.length; i < len; i++) {
            s = fragments[i];

            seg = (0, _SegmentsUtils.getTimeBasedSegment)(timelineConverter, dashManifestModel.getIsDynamic(), representation, s.startTime, s.duration, s.timescale, s.media, s.mediaRange, count);

            segments.push(seg);

            seg = null;
            count++;
        }
        return segments;
    }

    function addTracks() {
        if (!stream || !dashManifestModel || !adapter) {
            return;
        }

        var streamInfo = stream.getStreamInfo();
        if (!streamInfo) {
            return;
        }

        // Extract thumbnail tracks
        var mediaInfo = adapter.getMediaInfoForType(streamInfo, _Constants2.default.IMAGE);
        if (!mediaInfo) {
            return;
        }

        var voAdaptation = adapter.getDataForMedia(mediaInfo);
        if (!voAdaptation) {
            return;
        }

        var voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);
        if (voReps && voReps.length > 0) {
            voReps.forEach(function (rep) {
                if (rep.segmentInfoType === _DashConstants2.default.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media) createTrack(rep);
                if (rep.segmentInfoType === _DashConstants2.default.SEGMENT_BASE) createTrack(rep, true);
            });
        }

        if (tracks.length > 0) {
            // Sort bitrates and select the lowest bitrate rendition
            tracks.sort(function (a, b) {
                return a.bitrate - b.bitrate;
            });
            currentTrackIndex = tracks.length - 1;
        }
    }

    function createTrack(representation, useSegmentBase) {
        var track = new _ThumbnailTrackInfo2.default();
        track.id = representation.id;
        track.bitrate = representation.bandwidth;
        track.width = representation.width;
        track.height = representation.height;
        track.tilesHor = 1;
        track.tilesVert = 1;

        if (representation.essentialProperties) {
            representation.essentialProperties.forEach(function (p) {
                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {
                    var vars = p.value.split('x');
                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {
                        track.tilesHor = parseInt(vars[0], 10);
                        track.tilesVert = parseInt(vars[1], 10);
                    }
                }
            });
        }

        if (useSegmentBase) {
            segmentBaseLoader.loadSegments(representation, _Constants2.default.IMAGE, representation.indexRange, {}, function (segments, representation) {
                var cache = [];
                segments = normalizeSegments(segments, representation);
                track.segmentDuration = segments[0].duration; //assume all segments have the same duration
                track.readThumbnail = function (time, callback) {

                    var cached = null;
                    cache.some(function (el) {
                        if (el.start <= time && el.end > time) {
                            cached = el.url;
                            return true;
                        }
                    });
                    if (cached) {
                        callback(cached);
                    } else {
                        segments.some(function (ss) {
                            if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {
                                var baseURL = baseURLController.resolve(representation.path);
                                loader.load({
                                    method: 'get',
                                    url: baseURL.url,
                                    request: {
                                        range: ss.mediaRange,
                                        responseType: 'arraybuffer'
                                    },
                                    onload: function onload(e) {
                                        var info = boxParser.getSamplesInfo(e.target.response);
                                        var blob = new Blob([e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size)], { type: 'image/jpeg' });
                                        var imageUrl = window.URL.createObjectURL(blob);
                                        cache.push({
                                            start: ss.mediaStartTime,
                                            end: ss.mediaStartTime + ss.duration,
                                            url: imageUrl
                                        });
                                        if (callback) callback(imageUrl);
                                    }
                                });
                                return true;
                            }
                        });
                    }
                };
            });
        } else {
            track.startNumber = representation.startNumber;
            track.segmentDuration = representation.segmentDuration;
            track.timescale = representation.timescale;
            track.templateUrl = buildTemplateUrl(representation);
        }

        if (track.tilesHor > 0 && track.tilesVert > 0) {
            // Precalculate width and heigth per tile for perf reasons
            track.widthPerTile = track.width / track.tilesHor;
            track.heightPerTile = track.height / track.tilesVert;
            tracks.push(track);
        }
    }

    function buildTemplateUrl(representation) {
        var templateUrl = urlUtils.isRelative(representation.media) ? urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;

        if (!templateUrl) {
            return '';
        }

        return (0, _SegmentsUtils.replaceIDForTemplate)(templateUrl, representation.id);
    }

    function getTracks() {
        return tracks;
    }

    function getCurrentTrackIndex() {
        return currentTrackIndex;
    }

    function getCurrentTrack() {
        if (currentTrackIndex < 0) {
            return null;
        }
        return tracks[currentTrackIndex];
    }

    function setTrackByIndex(index) {
        if (!tracks || tracks.length === 0) {
            return;
        }
        // select highest bitrate in case selected index is higher than bitrate list length
        if (index >= tracks.length) {
            index = tracks.length - 1;
        }
        currentTrackIndex = index;
    }

    function reset() {
        tracks = [];
        currentTrackIndex = -1;
    }

    instance = {
        initialize: initialize,
        getTracks: getTracks,
        reset: reset,
        setTrackByIndex: setTrackByIndex,
        getCurrentTrack: getCurrentTrack,
        getCurrentTrackIndex: getCurrentTrackIndex
    };

    initialize();

    return instance;
}

ThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';
exports.default = _FactoryMaker2.default.getClassFactory(ThumbnailTracks);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/BaseURLSelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/BaseURLSelector.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Errors = __webpack_require__(/*! ../../core/errors/Errors */ "./node_modules/dashjs/src/core/errors/Errors.js");

var _Errors2 = _interopRequireDefault(_Errors);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _BlacklistController = __webpack_require__(/*! ../controllers/BlacklistController */ "./node_modules/dashjs/src/streaming/controllers/BlacklistController.js");

var _BlacklistController2 = _interopRequireDefault(_BlacklistController);

var _DVBSelector = __webpack_require__(/*! ./baseUrlResolution/DVBSelector */ "./node_modules/dashjs/src/streaming/utils/baseUrlResolution/DVBSelector.js");

var _DVBSelector2 = _interopRequireDefault(_DVBSelector);

var _BasicSelector = __webpack_require__(/*! ./baseUrlResolution/BasicSelector */ "./node_modules/dashjs/src/streaming/utils/baseUrlResolution/BasicSelector.js");

var _BasicSelector2 = _interopRequireDefault(_BasicSelector);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _DashJSError = __webpack_require__(/*! ../vo/DashJSError */ "./node_modules/dashjs/src/streaming/vo/DashJSError.js");

var _DashJSError2 = _interopRequireDefault(_DashJSError);

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BaseURLSelector() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();
    var dashManifestModel = void 0;

    var instance = void 0,
        serviceLocationBlacklistController = void 0,
        basicSelector = void 0,
        dvbSelector = void 0,
        selector = void 0;

    function setup() {
        serviceLocationBlacklistController = (0, _BlacklistController2.default)(context).create({
            updateEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED,
            addBlacklistEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_ADD
        });

        basicSelector = (0, _BasicSelector2.default)(context).create({
            blacklistController: serviceLocationBlacklistController
        });

        dvbSelector = (0, _DVBSelector2.default)(context).create({
            blacklistController: serviceLocationBlacklistController
        });

        selector = basicSelector;
    }

    function setConfig(config) {
        if (config.selector) {
            selector = config.selector;
        }
        if (config.dashManifestModel) {
            dashManifestModel = config.dashManifestModel;
        }
    }

    function checkConfig() {
        if (!dashManifestModel || !dashManifestModel.hasOwnProperty('getIsDVB')) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
    }

    function chooseSelectorFromManifest(manifest) {
        checkConfig();
        if (dashManifestModel.getIsDVB(manifest)) {
            selector = dvbSelector;
        } else {
            selector = basicSelector;
        }
    }

    function select(data) {
        if (!data) {
            return;
        }
        var baseUrls = data.baseUrls;
        var selectedIdx = data.selectedIdx;

        // Once a random selection has been carried out amongst a group of BaseURLs with the same
        // @priority attribute value, then that choice should be re-used if the selection needs to be made again
        // unless the blacklist has been modified or the available BaseURLs have changed.
        if (!isNaN(selectedIdx)) {
            return baseUrls[selectedIdx];
        }

        var selectedBaseUrl = selector.select(baseUrls);

        if (!selectedBaseUrl) {
            eventBus.trigger(_Events2.default.URL_RESOLUTION_FAILED, {
                error: new _DashJSError2.default(_Errors2.default.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE, _Errors2.default.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE)
            });
            if (selector === basicSelector) {
                reset();
            }
            return;
        } else {
            eventBus.trigger(_Events2.default.BASEURL_SELECTED, { baseUrl: selectedBaseUrl });
        }

        data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);

        return selectedBaseUrl;
    }

    function reset() {
        serviceLocationBlacklistController.reset();
    }

    instance = {
        chooseSelectorFromManifest: chooseSelectorFromManifest,
        select: select,
        reset: reset,
        setConfig: setConfig
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

BaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';
exports.default = _FactoryMaker2.default.getClassFactory(BaseURLSelector);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/BoxParser.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/BoxParser.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _IsoFile = __webpack_require__(/*! ./IsoFile */ "./node_modules/dashjs/src/streaming/utils/IsoFile.js");

var _IsoFile2 = _interopRequireDefault(_IsoFile);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _codemIsoboxer = __webpack_require__(/*! codem-isoboxer */ "./node_modules/codem-isoboxer/dist/iso_boxer.js");

var _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);

var _IsoBoxSearchInfo = __webpack_require__(/*! ../vo/IsoBoxSearchInfo */ "./node_modules/dashjs/src/streaming/vo/IsoBoxSearchInfo.js");

var _IsoBoxSearchInfo2 = _interopRequireDefault(_IsoBoxSearchInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BoxParser() /*config*/{

    var logger = void 0,
        instance = void 0;
    var context = this.context;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    /**
     * @param {ArrayBuffer} data
     * @returns {IsoFile|null}
     * @memberof BoxParser#
     */
    function parse(data) {
        if (!data) return null;

        if (data.fileStart === undefined) {
            data.fileStart = 0;
        }

        var parsedFile = _codemIsoboxer2.default.parseBuffer(data);
        var dashIsoFile = (0, _IsoFile2.default)(context).create();

        dashIsoFile.setData(parsedFile);

        return dashIsoFile;
    }

    /**
     * From the list of type boxes to look for, returns the latest one that is fully completed (header + payload). This
     * method only looks into the list of top boxes and doesn't analyze nested boxes.
     * @param {string[]} types
     * @param {ArrayBuffer|uint8Array} buffer
     * @param {number} offset
     * @returns {IsoBoxSearchInfo}
     * @memberof BoxParser#
     */
    function findLastTopIsoBoxCompleted(types, buffer, offset) {
        if (offset === undefined) {
            offset = 0;
        }

        // 8 = size (uint32) + type (4 characters)
        if (!buffer || offset + 8 >= buffer.byteLength) {
            return new _IsoBoxSearchInfo2.default(0, false);
        }

        var data = buffer instanceof ArrayBuffer ? new Uint8Array(buffer) : buffer;
        var boxInfo = void 0;
        var lastCompletedOffset = 0;
        while (offset < data.byteLength) {
            var boxSize = parseUint32(data, offset);
            var boxType = parseIsoBoxType(data, offset + 4);

            if (boxSize === 0) {
                break;
            }

            if (offset + boxSize <= data.byteLength) {
                if (types.indexOf(boxType) >= 0) {
                    boxInfo = new _IsoBoxSearchInfo2.default(offset, true, boxSize);
                } else {
                    lastCompletedOffset = offset + boxSize;
                }
            }

            offset += boxSize;
        }

        if (!boxInfo) {
            return new _IsoBoxSearchInfo2.default(lastCompletedOffset, false);
        }

        return boxInfo;
    }

    function getSamplesInfo(ab) {
        if (!ab || ab.byteLength === 0) {
            return { sampleList: [], lastSequenceNumber: NaN, totalDuration: NaN, numSequences: NaN };
        }
        var isoFile = parse(ab);
        // zero or more moofs
        var moofBoxes = isoFile.getBoxes('moof');
        // exactly one mfhd per moof
        var mfhdBoxes = isoFile.getBoxes('mfhd');

        var sampleDuration = void 0,
            sampleCompositionTimeOffset = void 0,
            sampleCount = void 0,
            sampleSize = void 0,
            sampleDts = void 0,
            sampleList = void 0,
            sample = void 0,
            i = void 0,
            j = void 0,
            k = void 0,
            l = void 0,
            m = void 0,
            n = void 0,
            dataOffset = void 0,
            lastSequenceNumber = void 0,
            numSequences = void 0,
            totalDuration = void 0;

        numSequences = isoFile.getBoxes('moof').length;
        lastSequenceNumber = mfhdBoxes[mfhdBoxes.length - 1].sequence_number;
        sampleCount = 0;

        sampleList = [];
        var subsIndex = -1;
        var nextSubsSample = -1;
        for (l = 0; l < moofBoxes.length; l++) {
            var moofBox = moofBoxes[l];
            // zero or more trafs per moof
            var trafBoxes = moofBox.getChildBoxes('traf');
            for (j = 0; j < trafBoxes.length; j++) {
                var trafBox = trafBoxes[j];
                // exactly one tfhd per traf
                var tfhdBox = trafBox.getChildBox('tfhd');
                // zero or one tfdt per traf
                var tfdtBox = trafBox.getChildBox('tfdt');
                sampleDts = tfdtBox.baseMediaDecodeTime;
                // zero or more truns per traf
                var trunBoxes = trafBox.getChildBoxes('trun');
                // zero or more subs per traf
                var subsBoxes = trafBox.getChildBoxes('subs');
                for (k = 0; k < trunBoxes.length; k++) {
                    var trunBox = trunBoxes[k];
                    sampleCount = trunBox.sample_count;
                    dataOffset = (tfhdBox.base_data_offset || 0) + (trunBox.data_offset || 0);

                    for (i = 0; i < sampleCount; i++) {
                        sample = trunBox.samples[i];
                        sampleDuration = sample.sample_duration !== undefined ? sample.sample_duration : tfhdBox.default_sample_duration;
                        sampleSize = sample.sample_size !== undefined ? sample.sample_size : tfhdBox.default_sample_size;
                        sampleCompositionTimeOffset = sample.sample_composition_time_offset !== undefined ? sample.sample_composition_time_offset : 0;
                        var sampleData = {
                            'dts': sampleDts,
                            'cts': sampleDts + sampleCompositionTimeOffset,
                            'duration': sampleDuration,
                            'offset': moofBox.offset + dataOffset,
                            'size': sampleSize,
                            'subSizes': [sampleSize]
                        };
                        if (subsBoxes) {
                            for (m = 0; m < subsBoxes.length; m++) {
                                var subsBox = subsBoxes[m];
                                if (subsIndex < subsBox.entry_count - 1 && i > nextSubsSample) {
                                    subsIndex++;
                                    nextSubsSample += subsBox.entries[subsIndex].sample_delta;
                                }
                                if (i == nextSubsSample) {
                                    sampleData.subSizes = [];
                                    var entry = subsBox.entries[subsIndex];
                                    for (n = 0; n < entry.subsample_count; n++) {
                                        sampleData.subSizes.push(entry.subsamples[n].subsample_size);
                                    }
                                }
                            }
                        }
                        sampleList.push(sampleData);
                        dataOffset += sampleSize;
                        sampleDts += sampleDuration;
                    }
                }
                totalDuration = sampleDts - tfdtBox.baseMediaDecodeTime;
            }
        }
        return { sampleList: sampleList, lastSequenceNumber: lastSequenceNumber, totalDuration: totalDuration, numSequences: numSequences };
    }

    function getMediaTimescaleFromMoov(ab) {
        var isoFile = parse(ab);
        var mdhdBox = isoFile ? isoFile.getBox('mdhd') : undefined;

        return mdhdBox ? mdhdBox.timescale : NaN;
    }

    function parseUint32(data, offset) {
        return data[offset + 3] >>> 0 | data[offset + 2] << 8 >>> 0 | data[offset + 1] << 16 >>> 0 | data[offset] << 24 >>> 0;
    }

    function parseIsoBoxType(data, offset) {
        return String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset]);
    }

    function findInitRange(data) {
        var initRange = null;
        var start = void 0,
            end = void 0;

        var isoFile = parse(data);

        if (!isoFile) {
            return initRange;
        }

        var ftyp = isoFile.getBox('ftyp');
        var moov = isoFile.getBox('moov');

        logger.debug('Searching for initialization.');

        if (moov && moov.isComplete) {
            start = ftyp ? ftyp.offset : moov.offset;
            end = moov.offset + moov.size - 1;
            initRange = start + '-' + end;

            logger.debug('Found the initialization.  Range: ' + initRange);
        }

        return initRange;
    }

    instance = {
        parse: parse,
        findLastTopIsoBoxCompleted: findLastTopIsoBoxCompleted,
        getMediaTimescaleFromMoov: getMediaTimescaleFromMoov,
        getSamplesInfo: getSamplesInfo,
        findInitRange: findInitRange
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

BoxParser.__dashjs_factory_name = 'BoxParser';
exports.default = _FactoryMaker2.default.getSingletonFactory(BoxParser);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/Capabilities.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/Capabilities.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Capabilities() {

    var instance = void 0,
        encryptedMediaSupported = void 0;

    function setup() {
        encryptedMediaSupported = false;
    }

    function supportsMediaSource() {
        var hasWebKit = 'WebKitMediaSource' in window;
        var hasMediaSource = 'MediaSource' in window;

        return hasWebKit || hasMediaSource;
    }

    /**
     * Returns whether Encrypted Media Extensions are supported on this
     * user agent
     *
     * @return {boolean} true if EME is supported, false otherwise
     */
    function supportsEncryptedMedia() {
        return encryptedMediaSupported;
    }

    function setEncryptedMediaSupported(value) {
        encryptedMediaSupported = value;
    }

    function supportsCodec(codec) {
        if ('MediaSource' in window && MediaSource.isTypeSupported(codec)) {
            return true;
        }

        if ('WebKitMediaSource' in window && WebKitMediaSource.isTypeSupported(codec)) {
            return true;
        }

        return false;
    }

    instance = {
        supportsMediaSource: supportsMediaSource,
        supportsEncryptedMedia: supportsEncryptedMedia,
        supportsCodec: supportsCodec,
        setEncryptedMediaSupported: setEncryptedMediaSupported
    };

    setup();

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

Capabilities.__dashjs_factory_name = 'Capabilities';
exports.default = _FactoryMaker2.default.getSingletonFactory(Capabilities);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/CustomTimeRanges.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/CustomTimeRanges.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _SupervisorTools = __webpack_require__(/*! ../utils/SupervisorTools */ "./node_modules/dashjs/src/streaming/utils/SupervisorTools.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The copyright in this software is being made available under the BSD License,
* included below. This software may be subject to other third party and contributor
* rights, including patent rights, and no such rights are granted under this license.
*
* Copyright (c) 2013, Dash Industry Forum.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification,
* are permitted provided that the following conditions are met:
*  * Redistributions of source code must retain the above copyright notice, this
*  list of conditions and the following disclaimer.
*  * Redistributions in binary form must reproduce the above copyright notice,
*  this list of conditions and the following disclaimer in the documentation and/or
*  other materials provided with the distribution.
*  * Neither the name of Dash Industry Forum nor the names of its
*  contributors may be used to endorse or promote products derived from this software
*  without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*/
function CustomTimeRanges() /*config*/{
    var customTimeRangeArray = [];
    var length = 0;

    function add(start, end) {
        var i = 0;

        for (i = 0; i < this.customTimeRangeArray.length && start > this.customTimeRangeArray[i].start; i++) {}

        this.customTimeRangeArray.splice(i, 0, { start: start, end: end });

        for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {
            if (this.mergeRanges(i, i + 1)) {
                i--;
            }
        }
        this.length = this.customTimeRangeArray.length;
    }

    function clear() {
        this.customTimeRangeArray = [];
        this.length = 0;
    }

    function remove(start, end) {
        for (var i = 0; i < this.customTimeRangeArray.length; i++) {
            if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {
                //      |--------------Range i-------|
                //|---------------Range to remove ---------------|
                //    or
                //|--------------Range i-------|
                //|--------------Range to remove ---------------|
                //    or
                //                 |--------------Range i-------|
                //|--------------Range to remove ---------------|
                this.customTimeRangeArray.splice(i, 1);
                i--;
            } else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {
                //|-----------------Range i----------------|
                //        |-------Range to remove -----|
                this.customTimeRangeArray.splice(i + 1, 0, { start: end, end: this.customTimeRangeArray[i].end });
                this.customTimeRangeArray[i].end = start;
                break;
            } else if (start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {
                //|-----------Range i----------|
                //                    |---------Range to remove --------|
                //    or
                //|-----------------Range i----------------|
                //            |-------Range to remove -----|
                this.customTimeRangeArray[i].end = start;
            } else if (end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {
                //                     |-----------Range i----------|
                //|---------Range to remove --------|
                //            or
                //|-----------------Range i----------------|
                //|-------Range to remove -----|
                this.customTimeRangeArray[i].start = end;
            }
        }

        this.length = this.customTimeRangeArray.length;
    }

    function mergeRanges(rangeIndex1, rangeIndex2) {
        var range1 = this.customTimeRangeArray[rangeIndex1];
        var range2 = this.customTimeRangeArray[rangeIndex2];

        if (range1.start <= range2.start && range2.start <= range1.end && range1.end <= range2.end) {
            //|-----------Range1----------|
            //                    |-----------Range2----------|
            range1.end = range2.end;
            this.customTimeRangeArray.splice(rangeIndex2, 1);
            return true;
        } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {
            //                |-----------Range1----------|
            //|-----------Range2----------|
            range1.start = range2.start;
            this.customTimeRangeArray.splice(rangeIndex2, 1);
            return true;
        } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {
            //      |--------Range1-------|
            //|---------------Range2--------------|
            this.customTimeRangeArray.splice(rangeIndex1, 1);
            return true;
        } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {
            //|-----------------Range1--------------|
            //        |-----------Range2----------|
            this.customTimeRangeArray.splice(rangeIndex2, 1);
            return true;
        }
        return false;
    }

    function start(index) {
        (0, _SupervisorTools.checkInteger)(index);

        if (index >= this.customTimeRangeArray.length || index < 0) {
            return NaN;
        }

        return this.customTimeRangeArray[index].start;
    }

    function end(index) {
        (0, _SupervisorTools.checkInteger)(index);

        if (index >= this.customTimeRangeArray.length || index < 0) {
            return NaN;
        }

        return this.customTimeRangeArray[index].end;
    }

    return {
        customTimeRangeArray: customTimeRangeArray,
        length: length,
        add: add,
        clear: clear,
        remove: remove,
        mergeRanges: mergeRanges,
        start: start,
        end: end
    };
}
CustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';
exports.default = _FactoryMaker2.default.getClassFactory(CustomTimeRanges);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/DOMStorage.js":
/*!***************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/DOMStorage.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var legacyKeysAndReplacements = [{ oldKey: 'dashjs_vbitrate', newKey: 'dashjs_video_bitrate' }, { oldKey: 'dashjs_abitrate', newKey: 'dashjs_audio_bitrate' }, { oldKey: 'dashjs_vsettings', newKey: 'dashjs_video_settings' }, { oldKey: 'dashjs_asettings', newKey: 'dashjs_audio_settings' }]; /**
                                                                                                                                                                                                                                                                                                   * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                   * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                   * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                                                   * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                   * All rights reserved.
                                                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                                                   * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                   * are permitted provided that the following conditions are met:
                                                                                                                                                                                                                                                                                                   *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                   *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                                                                                                   *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                   *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                   *  other materials provided with the distribution.
                                                                                                                                                                                                                                                                                                   *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                   *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                   *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                                                   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                                                                                                                                                                   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                                                                                                                                                                   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                                                                                                                                                                   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                                                                                                   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                                                                                                                                                                   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                                                                                                                                                                   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                                                                                                                                                                   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                                                                                                   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                                                                                                                                                                   *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                                                                                                   */


var LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = 'dashjs_?_bitrate';
var LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = 'dashjs_?_settings';

var STORAGE_TYPE_LOCAL = 'localStorage';
var STORAGE_TYPE_SESSION = 'sessionStorage';
var LAST_BITRATE = 'LastBitrate';
var LAST_MEDIA_SETTINGS = 'LastMediaSettings';

function DOMStorage(config) {

    config = config || {};
    var context = this.context;
    var mediaPlayerModel = config.mediaPlayerModel;

    var instance = void 0,
        logger = void 0,
        supported = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        translateLegacyKeys();
    }

    //type can be local, session
    function isSupported(type) {
        if (supported !== undefined) return supported;

        supported = false;

        var testKey = '1';
        var testValue = '1';
        var storage = void 0;

        try {
            if (typeof window !== 'undefined') {
                storage = window[type];
            }
        } catch (error) {
            logger.warn('DOMStorage access denied: ' + error.message);
            return supported;
        }

        if (!storage || type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION) {
            return supported;
        }

        /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.
         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an
          Check if the storage can be used
         */
        try {
            storage.setItem(testKey, testValue);
            storage.removeItem(testKey);
            supported = true;
        } catch (error) {
            logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);
        }

        return supported;
    }

    function translateLegacyKeys() {
        if (isSupported(STORAGE_TYPE_LOCAL)) {
            legacyKeysAndReplacements.forEach(function (entry) {
                var value = localStorage.getItem(entry.oldKey);

                if (value) {
                    localStorage.removeItem(entry.oldKey);

                    try {
                        localStorage.setItem(entry.newKey, value);
                    } catch (e) {
                        logger.error(e.message);
                    }
                }
            });
        }
    }

    // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user
    function getTimestamp() {
        var ten_minutes_ms = 60 * 1000 * 10;
        return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;
    }

    function canStore(storageType, key) {
        return isSupported(storageType) && mediaPlayerModel['get' + key + 'CachingInfo']().enabled;
    }

    function checkConfig() {
        if (!mediaPlayerModel || !mediaPlayerModel.hasOwnProperty('getLastMediaSettingsCachingInfo')) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
    }

    function getSavedMediaSettings(type) {
        checkConfig();
        //Checks local storage to see if there is valid, non-expired media settings
        if (!canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) return null;

        var settings = null;
        var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/, type);
        try {
            var obj = JSON.parse(localStorage.getItem(key)) || {};
            var isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || false;
            settings = obj.settings;

            if (isExpired) {
                localStorage.removeItem(key);
                settings = null;
            }
        } catch (e) {
            return null;
        }
        return settings;
    }

    function getSavedBitrateSettings(type) {
        var savedBitrate = NaN;

        checkConfig();

        //Checks local storage to see if there is valid, non-expired bit rate
        //hinting from the last play session to use as a starting bit rate.
        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {
            var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/, type);
            try {
                var obj = JSON.parse(localStorage.getItem(key)) || {};
                var isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || false;
                var bitrate = parseFloat(obj.bitrate);

                if (!isNaN(bitrate) && !isExpired) {
                    savedBitrate = bitrate;
                    logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);
                } else if (isExpired) {
                    localStorage.removeItem(key);
                }
            } catch (e) {
                return null;
            }
        }
        return savedBitrate;
    }

    function setSavedMediaSettings(type, value) {
        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {
            var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/, type);
            try {
                localStorage.setItem(key, JSON.stringify({ settings: value, timestamp: getTimestamp() }));
            } catch (e) {
                logger.error(e.message);
            }
        }
    }

    function setSavedBitrateSettings(type, bitrate) {
        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {
            var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/, type);
            try {
                localStorage.setItem(key, JSON.stringify({ bitrate: bitrate.toFixed(3), timestamp: getTimestamp() }));
            } catch (e) {
                logger.error(e.message);
            }
        }
    }

    instance = {
        getSavedBitrateSettings: getSavedBitrateSettings,
        setSavedBitrateSettings: setSavedBitrateSettings,
        getSavedMediaSettings: getSavedMediaSettings,
        setSavedMediaSettings: setSavedMediaSettings
    };

    setup();
    return instance;
}

DOMStorage.__dashjs_factory_name = 'DOMStorage';
var factory = _FactoryMaker2.default.getSingletonFactory(DOMStorage);
exports.default = factory;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/EBMLParser.js":
/*!***************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/EBMLParser.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates an instance of an EBMLParser class which implements a large subset
 * of the functionality required to parse Matroska EBML
 *
 * @param {Object} config object with data member which is the buffer to parse
 */
function EBMLParser(config) {

    config = config || {};
    var instance = void 0;

    var data = new DataView(config.data);
    var pos = 0;

    function getPos() {
        return pos;
    }

    function setPos(value) {
        pos = value;
    }

    /**
     * Consumes an EBML tag from the data stream.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and
     * {boolean} required flag.
     * @param {boolean} test whether or not the function should throw if a required
     * tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test
     * param is false or undefined, or if the stream is malformed.
     * @memberof EBMLParser
     */
    function consumeTag(tag, test) {
        var found = true;
        var bytesConsumed = 0;
        var p1 = void 0,
            p2 = void 0;

        if (test === undefined) {
            test = false;
        }

        if (tag.tag > 0xFFFFFF) {
            if (data.getUint32(pos) !== tag.tag) {
                found = false;
            }
            bytesConsumed = 4;
        } else if (tag.tag > 0xFFFF) {
            // 3 bytes
            p1 = data.getUint16(pos);
            p2 = data.getUint8(pos + 2);

            // shift p1 over a byte and add p2
            if (p1 * 256 + p2 !== tag.tag) {
                found = false;
            }
            bytesConsumed = 3;
        } else if (tag.tag > 0xFF) {
            if (data.getUint16(pos) !== tag.tag) {
                found = false;
            }
            bytesConsumed = 2;
        } else {
            if (data.getUint8(pos) !== tag.tag) {
                found = false;
            }
            bytesConsumed = 1;
        }

        if (!found && tag.required && !test) {
            throw new Error('required tag not found');
        }

        if (found) {
            pos += bytesConsumed;
        }

        return found;
    }

    /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and
     * {boolean} required flag.
     * @param {boolean} test whether or not the function should throw if a required
     * tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test
     * param is false or undefined, or if the stream is malformedata.
     * @memberof EBMLParser
     */
    function consumeTagAndSize(tag, test) {
        var found = consumeTag(tag, test);

        if (found) {
            getMatroskaCodedNum();
        }

        return found;
    }

    /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.  It will use the value of the size field to parse a binary
     * field, using a parser defined in the tag itself
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag,
     * {boolean} required flag, and a parse function which takes a size parameter
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found,
     * or if the stream is malformed
     * @memberof EBMLParser
     */
    function parseTag(tag) {
        var size = void 0;

        consumeTag(tag);
        size = getMatroskaCodedNum();
        return instance[tag.parse](size);
    }

    /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.  It will use the value of the size field to skip over the
     * entire section of EBML encapsulated by the tag.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and
     * {boolean} required flag
     * @param {boolean} test a flag to indicate if an exception should be thrown
     * if a required tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test is
     * false or undefined or if the stream is malformed
     * @memberof EBMLParser
     */
    function skipOverElement(tag, test) {
        var found = consumeTag(tag, test);
        var headerSize = void 0;

        if (found) {
            headerSize = getMatroskaCodedNum();
            pos += headerSize;
        }

        return found;
    }

    /**
     * Returns and consumes a number encoded according to the Matroska EBML
     * specification from the bitstream.
     *
     * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the
     * first 1). this is usually true when reading Tag IDs.
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
    function getMatroskaCodedNum(retainMSB) {
        var bytesUsed = 1;
        var mask = 0x80;
        var maxBytes = 8;
        var extraBytes = -1;
        var num = 0;
        var ch = data.getUint8(pos);
        var i = 0;

        for (i = 0; i < maxBytes; i += 1) {
            if ((ch & mask) === mask) {
                num = retainMSB === undefined ? ch & ~mask : ch;
                extraBytes = i;
                break;
            }
            mask >>= 1;
        }

        for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) {
            num = num << 8 | 0xff & data.getUint8(pos + bytesUsed);
        }

        pos += bytesUsed;

        return num;
    }

    /**
     * Returns and consumes a float from the bitstream.
     *
     * @param {number} size 4 or 8 byte floats are supported
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
    function getMatroskaFloat(size) {
        var outFloat = void 0;

        switch (size) {
            case 4:
                outFloat = data.getFloat32(pos);
                pos += 4;
                break;
            case 8:
                outFloat = data.getFloat64(pos);
                pos += 8;
                break;
        }
        return outFloat;
    }

    /**
     * Consumes and returns an unsigned int from the bitstream.
     *
     * @param {number} size 1 to 8 bytes
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
    function getMatroskaUint(size) {
        var val = 0;

        for (var i = 0; i < size; i += 1) {
            val <<= 8;
            val |= data.getUint8(pos + i) & 0xff;
        }

        pos += size;
        return val;
    }

    /**
     * Tests whether there is more data in the bitstream for parsing
     *
     * @return {boolean} whether there is more data to parse
     * @memberof EBMLParser
     */
    function moreData() {
        return pos < data.byteLength;
    }

    instance = {
        getPos: getPos,
        setPos: setPos,
        consumeTag: consumeTag,
        consumeTagAndSize: consumeTagAndSize,
        parseTag: parseTag,
        skipOverElement: skipOverElement,
        getMatroskaCodedNum: getMatroskaCodedNum,
        getMatroskaFloat: getMatroskaFloat,
        getMatroskaUint: getMatroskaUint,
        moreData: moreData
    };

    return instance;
}

EBMLParser.__dashjs_factory_name = 'EBMLParser';
exports.default = _FactoryMaker2.default.getClassFactory(EBMLParser);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/ErrorHandler.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/ErrorHandler.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module ErrorHandler
 */
function ErrorHandler() {

  var instance = void 0;
  var context = this.context;
  var eventBus = (0, _EventBus2.default)(context).getInstance();

  /**
   * @param {number} err  "mediasource"|"mediakeys"
   * @memberof module:ErrorHandler
   * @deprecated
   */
  function capabilityError(err) {
    eventBus.trigger(_Events2.default.ERROR, { error: 'capability', event: err });
  }

  /**
   * @param {string} id "manifest"|"SIDX"|"content"|"initialization"|"xlink"
   * @param {string} url ""
   * @param {object} request {XMLHttpRequest instance}
   * @memberof module:ErrorHandler
   * @deprecated
   */
  function downloadError(id, url, request) {
    eventBus.trigger(_Events2.default.ERROR, { error: 'download', event: { id: id, url: url, request: request } });
  }

  /**
   * @param {string} message ""
   * @param {string} id "parse"|"nostreams"
   * @param {obj} manifest {parsed manifest}
   * @param {obj} err
   * @memberof module:ErrorHandler
   * @deprecated
   */
  function manifestError(message, id, manifest, err) {
    eventBus.trigger(_Events2.default.ERROR, { error: 'manifestError', event: { message: message, id: id, manifest: manifest, event: err } });
  }

  /**
   * @param {string} message ''
   * @param {string} id 'parse'
   * @param {string} ccContent ''
   * @memberof module:ErrorHandler
   * @deprecated
   */
  function timedTextError(message, id, ccContent) {
    eventBus.trigger(_Events2.default.ERROR, { error: 'cc', event: { message: message, id: id, cc: ccContent } });
  }

  /**
   * @param {string} err
   * @memberof module:ErrorHandler
   * @deprecated
   */
  function mediaSourceError(err) {
    eventBus.trigger(_Events2.default.ERROR, { error: 'mediasource', event: err });
  }

  /**
   * @param {string} err
   * @memberof module:ErrorHandler
   * @deprecated
   */
  function mediaKeySessionError(err) {
    eventBus.trigger(_Events2.default.ERROR, { error: 'key_session', event: err });
  }

  /**
   * @param {string} err
   * @memberof module:ErrorHandler
   * @deprecated
   */
  function mediaKeyMessageError(err) {
    eventBus.trigger(_Events2.default.ERROR, { error: 'key_message', event: err });
  }

  /**
   * @param {object} err DashJSError with code, message and data attributes
   * @memberof module:ErrorHandler
   */
  function error(err) {
    eventBus.trigger(_Events2.default.ERROR, { error: err });
  }

  instance = {
    capabilityError: capabilityError,
    downloadError: downloadError,
    manifestError: manifestError,
    timedTextError: timedTextError,
    mediaSourceError: mediaSourceError,
    mediaKeySessionError: mediaKeySessionError,
    mediaKeyMessageError: mediaKeyMessageError,
    error: error
  };

  return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


ErrorHandler.__dashjs_factory_name = 'ErrorHandler';
exports.default = _FactoryMaker2.default.getSingletonFactory(ErrorHandler);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/InitCache.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/InitCache.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function InitCache() {

    var data = {};

    function save(chunk) {
        var id = chunk.streamId;
        var representationId = chunk.representationId;

        data[id] = data[id] || {};
        data[id][representationId] = chunk;
    }

    function extract(streamId, representationId) {
        if (data && data[streamId] && data[streamId][representationId]) {
            return data[streamId][representationId];
        } else {
            return null;
        }
    }

    function reset() {
        data = {};
    }

    var instance = {
        save: save,
        extract: extract,
        reset: reset
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

/**
 * Represents data structure to keep and drive {DataChunk}
 */

InitCache.__dashjs_factory_name = 'InitCache';
exports.default = _FactoryMaker2.default.getSingletonFactory(InitCache);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/IsoFile.js":
/*!************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/IsoFile.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _IsoBox = __webpack_require__(/*! ../vo/IsoBox */ "./node_modules/dashjs/src/streaming/vo/IsoBox.js");

var _IsoBox2 = _interopRequireDefault(_IsoBox);

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function IsoFile() {

    var instance = void 0,
        parsedIsoFile = void 0;

    /**
    * @param {string} type
    * @returns {IsoBox|null}
    * @memberof IsoFile#
    */
    function getBox(type) {
        if (!type || !parsedIsoFile || !parsedIsoFile.boxes || parsedIsoFile.boxes.length === 0 || typeof parsedIsoFile.fetch !== 'function') return null;

        return convertToDashIsoBox(parsedIsoFile.fetch(type));
    }

    /**
    * @param {string} type
    * @returns {Array|null} array of {@link IsoBox}
    * @memberof IsoFile#
    */
    function getBoxes(type) {
        var boxes = [];

        if (!type || !parsedIsoFile || typeof parsedIsoFile.fetchAll !== 'function') {
            return boxes;
        }

        var boxData = parsedIsoFile.fetchAll(type);
        var box = void 0;

        for (var i = 0, ln = boxData.length; i < ln; i++) {
            box = convertToDashIsoBox(boxData[i]);

            if (box) {
                boxes.push(box);
            }
        }

        return boxes;
    }

    /**
    * @param {string} value
    * @memberof IsoFile#
    */
    function setData(value) {
        parsedIsoFile = value;
    }

    /**
    * @returns {IsoBox|null}
    * @memberof IsoFile#
    */
    function getLastBox() {
        if (!parsedIsoFile || !parsedIsoFile.boxes || !parsedIsoFile.boxes.length) return null;

        var type = parsedIsoFile.boxes[parsedIsoFile.boxes.length - 1].type;
        var boxes = getBoxes(type);

        return boxes.length > 0 ? boxes[boxes.length - 1] : null;
    }

    function convertToDashIsoBox(boxData) {
        if (!boxData) return null;

        var box = new _IsoBox2.default(boxData);

        if (boxData.hasOwnProperty('_incomplete')) {
            box.isComplete = !boxData._incomplete;
        }

        return box;
    }

    instance = {
        getBox: getBox,
        getBoxes: getBoxes,
        setData: setData,
        getLastBox: getLastBox
    };

    return instance;
}
IsoFile.__dashjs_factory_name = 'IsoFile';
exports.default = _FactoryMaker2.default.getClassFactory(IsoFile);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/LiveEdgeFinder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/LiveEdgeFinder.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {Object} config
 * @returns {{initialize: initialize, getLiveEdge: getLiveEdge, reset: reset}|*}
 * @constructor
 */
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
function LiveEdgeFinder(config) {

    config = config || {};
    var instance = void 0;
    var timelineConverter = config.timelineConverter;
    var streamProcessor = config.streamProcessor;

    function checkConfig() {
        if (!timelineConverter || !timelineConverter.hasOwnProperty('getExpectedLiveEdge') || !streamProcessor || !streamProcessor.hasOwnProperty('getRepresentationInfo')) {
            throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);
        }
    }

    function getLiveEdge() {
        checkConfig();
        var representationInfo = streamProcessor.getRepresentationInfo();
        var dvrEnd = representationInfo.DVRWindow ? representationInfo.DVRWindow.end : 0;
        var liveEdge = dvrEnd;
        if (representationInfo.useCalculatedLiveEdgeTime) {
            liveEdge = timelineConverter.getExpectedLiveEdge();
            timelineConverter.setClientTimeOffset(liveEdge - dvrEnd);
        }
        return liveEdge;
    }

    function reset() {
        timelineConverter = null;
        streamProcessor = null;
    }

    instance = {
        getLiveEdge: getLiveEdge,
        reset: reset
    };

    return instance;
}

LiveEdgeFinder.__dashjs_factory_name = 'LiveEdgeFinder';
exports.default = _FactoryMaker2.default.getClassFactory(LiveEdgeFinder);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/ObjectUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/ObjectUtils.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _fastDeepEqual = __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js");

var _fastDeepEqual2 = _interopRequireDefault(_fastDeepEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module ObjectUtils
 * @description Provides utility functions for objects
 */
/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

function ObjectUtils() {

  var instance = void 0;

  /**
   * Returns true if objects are equal
   * @return {boolean}
   * @param {object} obj1
   * @param {object} obj2
   * @memberof module:ObjectUtils
   * @instance
   */
  function areEqual(obj1, obj2) {
    return (0, _fastDeepEqual2.default)(obj1, obj2);
  }

  instance = {
    areEqual: areEqual
  };

  return instance;
}

ObjectUtils.__dashjs_factory_name = 'ObjectUtils';
exports.default = _FactoryMaker2.default.getSingletonFactory(ObjectUtils);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/RequestModifier.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/RequestModifier.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function RequestModifier() {

    var instance = void 0;

    function modifyRequestURL(url) {
        return url;
    }

    function modifyRequestHeader(request) {
        return request;
    }

    instance = {
        modifyRequestURL: modifyRequestURL,
        modifyRequestHeader: modifyRequestHeader
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

RequestModifier.__dashjs_factory_name = 'RequestModifier';
exports.default = _FactoryMaker2.default.getSingletonFactory(RequestModifier);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/SupervisorTools.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/SupervisorTools.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                               * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                               * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                               * All rights reserved.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                               * are permitted provided that the following conditions are met:
                                                                                                                                                                                                                                                                               *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                               *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                                                                               *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                               *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                               *  other materials provided with the distribution.
                                                                                                                                                                                                                                                                               *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                               *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                               *  without specific prior written permission.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                                                                                                                                               *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                                                                                                                                               *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                                                                                                                                               *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                                                                               *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                                                                                                                                               *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                                                                                                                                               *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                                                                                                                                               *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                                                                               *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                                                                                                                                               *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                                                                               */


exports.checkParameterType = checkParameterType;
exports.checkInteger = checkInteger;
exports.checkRange = checkRange;
exports.checkIsVideoOrAudioType = checkIsVideoOrAudioType;

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function checkParameterType(parameter, type) {
    if ((typeof parameter === 'undefined' ? 'undefined' : _typeof(parameter)) !== type) {
        throw _Constants2.default.BAD_ARGUMENT_ERROR;
    }
}

function checkInteger(parameter) {
    var isInt = parameter !== null && !isNaN(parameter) && parameter % 1 === 0;

    if (!isInt) {
        throw _Constants2.default.BAD_ARGUMENT_ERROR + ' : argument is not an integer';
    }
}

function checkRange(parameter, min, max) {
    if (parameter < min || parameter > max) {
        throw _Constants2.default.BAD_ARGUMENT_ERROR + ' : argument out of range';
    }
}

function checkIsVideoOrAudioType(type) {
    if (typeof type !== 'string' || type !== _Constants2.default.AUDIO && type !== _Constants2.default.VIDEO) {
        throw _Constants2.default.BAD_ARGUMENT_ERROR;
    }
}

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/TTMLParser.js":
/*!***************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/TTMLParser.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

var _EventBus = __webpack_require__(/*! ../../core/EventBus */ "./node_modules/dashjs/src/core/EventBus.js");

var _EventBus2 = _interopRequireDefault(_EventBus);

var _Events = __webpack_require__(/*! ../../core/events/Events */ "./node_modules/dashjs/src/core/events/Events.js");

var _Events2 = _interopRequireDefault(_Events);

var _imsc = __webpack_require__(/*! imsc */ "./node_modules/imsc/src/main/js/main.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TTMLParser() {

    var context = this.context;
    var eventBus = (0, _EventBus2.default)(context).getInstance();

    /*
     * This TTML parser follows "EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.
     * */
    var instance = void 0,
        logger = void 0;

    var cueCounter = 0; // Used to give every cue a unique ID.

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
    }

    function getCueID() {
        var id = 'cue_TTML_' + cueCounter;
        cueCounter++;
        return id;
    }

    /**
     * Parse the raw data and process it to return the HTML element representing the cue.
     * Return the region to be processed and controlled (hide/show) by the caption controller.
     * @param {string} data - raw data received from the TextSourceBuffer
     * @param {number} offsetTime - offset time to apply to cue time
     * @param {integer} startTimeSegment - startTime for the current segment
     * @param {integer} endTimeSegment - endTime for the current segment
     * @param {Array} images - images array referenced by subs MP4 box
     */
    function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {
        var errorMsg = '';
        var captionArray = [];
        var startTime = void 0,
            endTime = void 0,
            i = void 0;

        var content = {};

        var embeddedImages = {};
        var currentImageId = '';
        var accumulated_image_data = '';
        var metadataHandler = {

            onOpenTag: function onOpenTag(ns, name, attrs) {
                if (name === 'image' && ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt') {
                    if (!attrs[' imagetype'] || attrs[' imagetype'].value !== 'PNG') {
                        logger.warn('smpte-tt imagetype != PNG. Discarded');
                        return;
                    }
                    currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;
                }
            },

            onCloseTag: function onCloseTag() {
                if (currentImageId) {
                    embeddedImages[currentImageId] = accumulated_image_data.trim();
                }
                accumulated_image_data = '';
                currentImageId = '';
            },

            onText: function onText(contents) {
                if (currentImageId) {
                    accumulated_image_data = accumulated_image_data + contents;
                }
            }
        };

        if (!data) {
            errorMsg = 'no ttml data to parse';
            throw new Error(errorMsg);
        }

        content.data = data;

        eventBus.trigger(_Events2.default.TTML_TO_PARSE, content);

        var imsc1doc = (0, _imsc.fromXML)(content.data, function (msg) {
            errorMsg = msg;
        }, metadataHandler);

        eventBus.trigger(_Events2.default.TTML_PARSED, { ttmlString: content.data, ttmlDoc: imsc1doc });

        var mediaTimeEvents = imsc1doc.getMediaTimeEvents();

        for (i = 0; i < mediaTimeEvents.length; i++) {
            var isd = (0, _imsc.generateISD)(imsc1doc, mediaTimeEvents[i], function (error) {
                errorMsg = error;
            });

            if (isd.contents.some(function (topLevelContents) {
                return topLevelContents.contents.length;
            })) {
                //be sure that mediaTimeEvents values are in the mp4 segment time ranges.
                startTime = mediaTimeEvents[i] + offsetTime < startTimeSegment ? startTimeSegment : mediaTimeEvents[i] + offsetTime;
                endTime = mediaTimeEvents[i + 1] + offsetTime > endTimeSegment ? endTimeSegment : mediaTimeEvents[i + 1] + offsetTime;

                if (startTime < endTime) {
                    captionArray.push({
                        start: startTime,
                        end: endTime,
                        type: 'html',
                        cueID: getCueID(),
                        isd: isd,
                        images: images,
                        embeddedImages: embeddedImages
                    });
                }
            }
        }

        if (errorMsg !== '') {
            logger.error(errorMsg);
            throw new Error(errorMsg);
        }

        return captionArray;
    }

    instance = {
        parse: parse
    };

    setup();
    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

TTMLParser.__dashjs_factory_name = 'TTMLParser';
exports.default = _FactoryMaker2.default.getSingletonFactory(TTMLParser);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/URLUtils.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/URLUtils.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module URLUtils
 * @description Provides utility functions for operating on URLs.
 * Initially this is simply a method to determine the Base URL of a URL, but
 * should probably include other things provided all over the place such as
 * determining whether a URL is relative/absolute, resolving two paths etc.
 */
function URLUtils() {

    var resolveFunction = void 0;

    var schemeRegex = /^[a-z][a-z0-9+\-.]*:/i;
    var httpUrlRegex = /^https?:\/\//i;
    var httpsUrlRegex = /^https:\/\//i;
    var originRegex = /^([a-z][a-z0-9+\-.]*:\/\/[^\/]+)\/?/i;

    /**
     * Resolves a url given an optional base url
     * Uses window.URL to do the resolution.
     *
     * @param {string} url
     * @param {string} [baseUrl]
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     * @private
     */
    var nativeURLResolver = function nativeURLResolver(url, baseUrl) {
        try {
            // this will throw if baseurl is undefined, invalid etc
            return new window.URL(url, baseUrl).toString();
        } catch (e) {
            return url;
        }
    };

    /**
     * Resolves a url given an optional base url
     * Does not resolve ./, ../ etc but will do enough to construct something
     * which will satisfy XHR etc when window.URL is not available ie
     * IE11/node etc.
     *
     * @param {string} url
     * @param {string} [baseUrl]
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     * @private
     */
    var dumbURLResolver = function dumbURLResolver(url, baseUrl) {
        var baseUrlParseFunc = parseBaseUrl;

        if (!baseUrl) {
            return url;
        }

        if (!isRelative(url)) {
            return url;
        }

        if (isPathAbsolute(url)) {
            baseUrlParseFunc = parseOrigin;
        }

        if (isSchemeRelative(url)) {
            baseUrlParseFunc = parseScheme;
        }

        var base = baseUrlParseFunc(baseUrl);
        var joinChar = base.charAt(base.length - 1) !== '/' && url.charAt(0) !== '/' ? '/' : '';

        return [base, url].join(joinChar);
    };

    function setup() {
        try {
            var u = new window.URL('x', 'http://y'); //jshint ignore:line
            resolveFunction = nativeURLResolver;
        } catch (e) {
            // must be IE11/Node etc
        } finally {
            resolveFunction = resolveFunction || dumbURLResolver;
        }
    }

    /**
     * Returns a string that contains the Base URL of a URL, if determinable.
     * @param {string} url - full url
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     */
    function parseBaseUrl(url) {
        var slashIndex = url.indexOf('/');
        var lastSlashIndex = url.lastIndexOf('/');

        if (slashIndex !== -1) {
            // if there is only '//'
            if (lastSlashIndex === slashIndex + 1) {
                return url;
            }

            if (url.indexOf('?') !== -1) {
                url = url.substring(0, url.indexOf('?'));
            }

            return url.substring(0, lastSlashIndex + 1);
        }

        return '';
    }

    /**
     * Returns a string that contains the scheme and origin of a URL,
     * if determinable.
     * @param {string} url - full url
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     */
    function parseOrigin(url) {
        var matches = url.match(originRegex);

        if (matches) {
            return matches[1];
        }

        return '';
    }

    /**
     * Returns a string that contains the scheme of a URL, if determinable.
     * @param {string} url - full url
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     */
    function parseScheme(url) {
        var matches = url.match(schemeRegex);

        if (matches) {
            return matches[0];
        }

        return '';
    }

    /**
     * Determines whether the url is relative.
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
    function isRelative(url) {
        return !schemeRegex.test(url);
    }

    /**
     * Determines whether the url is path-absolute.
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
    function isPathAbsolute(url) {
        return isRelative(url) && url.charAt(0) === '/';
    }

    /**
     * Determines whether the url is scheme-relative.
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
    function isSchemeRelative(url) {
        return url.indexOf('//') === 0;
    }

    /**
     * Determines whether the url is an HTTP-URL as defined in ISO/IEC
     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
    function isHTTPURL(url) {
        return httpUrlRegex.test(url);
    }

    /**
     * Determines whether the supplied url has https scheme
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
    function isHTTPS(url) {
        return httpsUrlRegex.test(url);
    }

    /**
     * Resolves a url given an optional base url
     * @return {string}
     * @param {string} url
     * @param {string} [baseUrl]
     * @memberof module:URLUtils
     * @instance
     */
    function resolve(url, baseUrl) {
        return resolveFunction(url, baseUrl);
    }

    setup();

    var instance = {
        parseBaseUrl: parseBaseUrl,
        parseOrigin: parseOrigin,
        parseScheme: parseScheme,
        isRelative: isRelative,
        isPathAbsolute: isPathAbsolute,
        isSchemeRelative: isSchemeRelative,
        isHTTPURL: isHTTPURL,
        isHTTPS: isHTTPS,
        resolve: resolve
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

URLUtils.__dashjs_factory_name = 'URLUtils';
exports.default = _FactoryMaker2.default.getSingletonFactory(URLUtils);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/VTTParser.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/VTTParser.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

var _Debug = __webpack_require__(/*! ../../core/Debug */ "./node_modules/dashjs/src/core/Debug.js");

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
var WEBVTT = 'WEBVTT';

function VTTParser() {
    var context = this.context;

    var instance = void 0,
        logger = void 0,
        regExNewLine = void 0,
        regExToken = void 0,
        regExWhiteSpace = void 0,
        regExWhiteSpaceWordBoundary = void 0;

    function setup() {
        logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);
        regExNewLine = /(?:\r\n|\r|\n)/gm;
        regExToken = /-->/;
        regExWhiteSpace = /(^[\s]+|[\s]+$)/g;
        regExWhiteSpaceWordBoundary = /\s\b/g;
    }

    function parse(data) {
        var captionArray = [];
        var len = void 0,
            lastStartTime = void 0;

        if (!data) {
            return captionArray;
        }

        data = data.split(regExNewLine);
        len = data.length;
        lastStartTime = -1;

        for (var i = 0; i < len; i++) {
            var item = data[i];

            if (item.length > 0 && item !== WEBVTT) {
                if (item.match(regExToken)) {
                    var attributes = parseItemAttributes(item);
                    var cuePoints = attributes.cuePoints;
                    var styles = attributes.styles;
                    var text = getSublines(data, i + 1);
                    var startTime = convertCuePointTimes(cuePoints[0].replace(regExWhiteSpace, ''));
                    var endTime = convertCuePointTimes(cuePoints[1].replace(regExWhiteSpace, ''));

                    if (!isNaN(startTime) && !isNaN(endTime) && startTime >= lastStartTime && endTime > startTime) {
                        if (text !== '') {
                            lastStartTime = startTime;
                            //TODO Make VO external so other parsers can use.
                            captionArray.push({
                                start: startTime,
                                end: endTime,
                                data: text,
                                styles: styles
                            });
                        } else {
                            logger.error('Skipping cue due to empty/malformed cue text');
                        }
                    } else {
                        logger.error('Skipping cue due to incorrect cue timing');
                    }
                }
            }
        }

        return captionArray;
    }

    function convertCuePointTimes(time) {
        var timeArray = time.split(':');
        var len = timeArray.length - 1;

        time = parseInt(timeArray[len - 1], 10) * 60 + parseFloat(timeArray[len]);

        if (len === 2) {
            time += parseInt(timeArray[0], 10) * 3600;
        }

        return time;
    }

    function parseItemAttributes(data) {
        var vttCuePoints = data.split(regExToken);
        var arr = vttCuePoints[1].split(regExWhiteSpaceWordBoundary);
        arr.shift(); //remove first array index it is empty...
        vttCuePoints[1] = arr[0];
        arr.shift();
        return { cuePoints: vttCuePoints, styles: getCaptionStyles(arr) };
    }

    function getCaptionStyles(arr) {
        var styleObject = {};
        arr.forEach(function (element) {
            if (element.split(/:/).length > 1) {
                var val = element.split(/:/)[1];
                if (val && val.search(/%/) != -1) {
                    val = parseInt(val.replace(/%/, ''), 10);
                }
                if (element.match(/align/) || element.match(/A/)) {
                    styleObject.align = val;
                }
                if (element.match(/line/) || element.match(/L/)) {
                    styleObject.line = val;
                }
                if (element.match(/position/) || element.match(/P/)) {
                    styleObject.position = val;
                }
                if (element.match(/size/) || element.match(/S/)) {
                    styleObject.size = val;
                }
            }
        });

        return styleObject;
    }

    /*
    * VTT can have multiple lines to display per cuepoint.
    */
    function getSublines(data, idx) {
        var i = idx;

        var subline = '';
        var lineData = '';
        var lineCount = void 0;

        while (data[i] !== '' && i < data.length) {
            i++;
        }

        lineCount = i - idx;
        if (lineCount > 1) {
            for (var j = 0; j < lineCount; j++) {
                lineData = data[idx + j];
                if (!lineData.match(regExToken)) {
                    subline += lineData;
                    if (j !== lineCount - 1) {
                        subline += '\n';
                    }
                } else {
                    // caption text should not have '-->' in it
                    subline = '';
                    break;
                }
            }
        } else {
            lineData = data[idx];
            if (!lineData.match(regExToken)) subline = lineData;
        }
        return subline;
    }

    instance = {
        parse: parse
    };

    setup();
    return instance;
}
VTTParser.__dashjs_factory_name = 'VTTParser';
exports.default = _FactoryMaker2.default.getSingletonFactory(VTTParser);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/baseUrlResolution/BasicSelector.js":
/*!************************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/baseUrlResolution/BasicSelector.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasicSelector(config) {

    config = config || {};
    var instance = void 0;

    var blacklistController = config.blacklistController;

    function select(baseUrls) {
        var index = 0;
        var selectedBaseUrl = void 0;

        if (baseUrls && baseUrls.some(function (baseUrl, idx) {
            index = idx;

            return !blacklistController.contains(baseUrl.serviceLocation);
        })) {
            selectedBaseUrl = baseUrls[index];
        }

        return selectedBaseUrl;
    }

    instance = {
        select: select
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */

BasicSelector.__dashjs_factory_name = 'BasicSelector';
exports.default = _FactoryMaker2.default.getClassFactory(BasicSelector);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/utils/baseUrlResolution/DVBSelector.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/utils/baseUrlResolution/DVBSelector.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FactoryMaker = __webpack_require__(/*! ../../../core/FactoryMaker */ "./node_modules/dashjs/src/core/FactoryMaker.js");

var _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DVBSelector(config) {

    config = config || {};
    var instance = void 0;

    var blacklistController = config.blacklistController;

    function getNonBlacklistedBaseUrls(urls) {
        var removedPriorities = [];

        var samePrioritiesFilter = function samePrioritiesFilter(el) {
            if (removedPriorities.length) {
                if (el.dvb_priority && removedPriorities.indexOf(el.dvb_priority) !== -1) {
                    return false;
                }
            }

            return true;
        };

        var serviceLocationFilter = function serviceLocationFilter(baseUrl) {
            if (blacklistController.contains(baseUrl.serviceLocation)) {
                // whenever a BaseURL is removed from the available list of
                // BaseURLs, any other BaseURL with the same @priority
                // value as the BaseURL being removed shall also be removed
                if (baseUrl.dvb_priority) {
                    removedPriorities.push(baseUrl.dvb_priority);
                }

                // all URLs in the list which have a @serviceLocation
                // attribute matching an entry in the blacklist shall be
                // removed from the available list of BaseURLs
                return false;
            }

            return true;
        };

        return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);
    }

    function selectByWeight(availableUrls) {
        var prioritySorter = function prioritySorter(a, b) {
            var diff = a.dvb_priority - b.dvb_priority;
            return isNaN(diff) ? 0 : diff;
        };

        var topPriorityFilter = function topPriorityFilter(baseUrl, idx, arr) {
            return !idx || arr[0].dvb_priority && baseUrl.dvb_priority && arr[0].dvb_priority === baseUrl.dvb_priority;
        };

        var totalWeight = 0;
        var cumulWeights = [];
        var idx = 0;
        var rn = void 0,
            urls = void 0;

        // It shall begin by taking the set of resolved BaseURLs present or inherited at the current
        // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest
        // @priority attribute value.
        urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);

        if (urls.length) {
            if (urls.length > 1) {
                // If there is more than one BaseURL with this lowest @priority attribute value then the Player
                // shall select one of them at random such that the probability of each BaseURL being chosen
                // is proportional to the value of its @weight attribute. The method described in RFC 2782
                // [26] or picking from a number of weighted entries is suitable for this, but there may be other
                // algorithms which achieve the same effect.

                // add all the weights together, storing the accumulated weight per entry
                urls.forEach(function (baseUrl) {
                    totalWeight += baseUrl.dvb_weight;
                    cumulWeights.push(totalWeight);
                });

                // pick a random number between zero and totalWeight
                rn = Math.floor(Math.random() * (totalWeight - 1));

                // select the index for the range rn falls within
                cumulWeights.every(function (limit, index) {
                    idx = index;

                    if (rn < limit) {
                        return false;
                    }

                    return true;
                });
            }

            return urls[idx];
        }
    }

    function select(baseUrls) {
        return baseUrls && selectByWeight(getNonBlacklistedBaseUrls(baseUrls));
    }

    instance = {
        select: select
    };

    return instance;
} /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */


DVBSelector.__dashjs_factory_name = 'DVBSelector';
exports.default = _FactoryMaker2.default.getClassFactory(DVBSelector);

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/BitrateInfo.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/BitrateInfo.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var BitrateInfo = function BitrateInfo() {
  _classCallCheck(this, BitrateInfo);

  this.mediaType = null;
  this.bitrate = null;
  this.width = null;
  this.height = null;
  this.scanType = null;
  this.qualityIndex = NaN;
};

exports.default = BitrateInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/DashJSError.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/DashJSError.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var DashJSError = function DashJSError(code, message, data) {
  _classCallCheck(this, DashJSError);

  this.code = code || null;
  this.message = message || null;
  this.data = data || null;
};

exports.default = DashJSError;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/DataChunk.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/DataChunk.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @class
 * @ignore
 */
var DataChunk =
//Represents a data structure that keep all the necessary info about a single init/media segment
function DataChunk() {
  _classCallCheck(this, DataChunk);

  this.streamId = null;
  this.mediaInfo = null;
  this.segmentType = null;
  this.quality = NaN;
  this.index = NaN;
  this.bytes = null;
  this.start = NaN;
  this.end = NaN;
  this.duration = NaN;
  this.representationId = null;
  this.endFragment = null;
};

exports.default = DataChunk;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/FragmentRequest.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/FragmentRequest.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var FragmentRequest = function FragmentRequest() {
  _classCallCheck(this, FragmentRequest);

  this.action = FragmentRequest.ACTION_DOWNLOAD;
  this.startTime = NaN;
  this.mediaType = null;
  this.mediaInfo = null;
  this.type = null;
  this.duration = NaN;
  this.timescale = NaN;
  this.range = null;
  this.url = null;
  this.serviceLocation = null;
  this.requestStartDate = null;
  this.firstByteDate = null;
  this.requestEndDate = null;
  this.quality = NaN;
  this.index = NaN;
  this.availabilityStartTime = null;
  this.availabilityEndTime = null;
  this.wallStartTime = null;
  this.bytesLoaded = NaN;
  this.bytesTotal = NaN;
  this.delayLoadingTime = NaN;
  this.responseType = 'arraybuffer';
  this.representationId = null;
};

FragmentRequest.ACTION_DOWNLOAD = 'download';
FragmentRequest.ACTION_COMPLETE = 'complete';

exports.default = FragmentRequest;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/HeadRequest.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/HeadRequest.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _FragmentRequest2 = __webpack_require__(/*! ./FragmentRequest */ "./node_modules/dashjs/src/streaming/vo/FragmentRequest.js");

var _FragmentRequest3 = _interopRequireDefault(_FragmentRequest2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *







                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @class
 * @ignore
 */


var HeadRequest = function (_FragmentRequest) {
  _inherits(HeadRequest, _FragmentRequest);

  function HeadRequest(url) {
    _classCallCheck(this, HeadRequest);

    var _this = _possibleConstructorReturn(this, (HeadRequest.__proto__ || Object.getPrototypeOf(HeadRequest)).call(this));

    _this.url = url || null;
    _this.checkForExistenceOnly = true;
    return _this;
  }

  return HeadRequest;
}(_FragmentRequest3.default);

exports.default = HeadRequest;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/IsoBox.js":
/*!********************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/IsoBox.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var IsoBox = function () {
    function IsoBox(boxData) {
        _classCallCheck(this, IsoBox);

        this.offset = boxData._offset;
        this.type = boxData.type;
        this.size = boxData.size;
        this.boxes = [];
        if (boxData.boxes) {
            for (var i = 0; i < boxData.boxes.length; i++) {
                this.boxes.push(new IsoBox(boxData.boxes[i]));
            }
        }
        this.isComplete = true;

        switch (boxData.type) {
            case 'sidx':
                this.timescale = boxData.timescale;
                this.earliest_presentation_time = boxData.earliest_presentation_time;
                this.first_offset = boxData.first_offset;
                this.references = boxData.references;
                if (boxData.references) {
                    this.references = [];
                    for (var _i = 0; _i < boxData.references.length; _i++) {
                        var reference = {
                            reference_type: boxData.references[_i].reference_type,
                            referenced_size: boxData.references[_i].referenced_size,
                            subsegment_duration: boxData.references[_i].subsegment_duration
                        };
                        this.references.push(reference);
                    }
                }
                break;
            case 'emsg':
                this.id = boxData.id;
                this.value = boxData.value;
                this.timescale = boxData.timescale;
                this.scheme_id_uri = boxData.scheme_id_uri;
                this.presentation_time_delta = boxData.version === 1 ? boxData.presentation_time : boxData.presentation_time_delta;
                this.event_duration = boxData.event_duration;
                this.message_data = boxData.message_data;
                break;
            case 'mdhd':
                this.timescale = boxData.timescale;
                break;
            case 'mfhd':
                this.sequence_number = boxData.sequence_number;
                break;
            case 'subs':
                this.entry_count = boxData.entry_count;
                this.entries = boxData.entries;
                break;
            case 'tfhd':
                this.base_data_offset = boxData.base_data_offset;
                this.sample_description_index = boxData.sample_description_index;
                this.default_sample_duration = boxData.default_sample_duration;
                this.default_sample_size = boxData.default_sample_size;
                this.default_sample_flags = boxData.default_sample_flags;
                this.flags = boxData.flags;
                break;
            case 'tfdt':
                this.version = boxData.version;
                this.baseMediaDecodeTime = boxData.baseMediaDecodeTime;
                this.flags = boxData.flags;
                break;
            case 'trun':
                this.sample_count = boxData.sample_count;
                this.first_sample_flags = boxData.first_sample_flags;
                this.data_offset = boxData.data_offset;
                this.flags = boxData.flags;
                this.samples = boxData.samples;
                if (boxData.samples) {
                    this.samples = [];
                    for (var _i2 = 0, ln = boxData.samples.length; _i2 < ln; _i2++) {
                        var sample = {
                            sample_size: boxData.samples[_i2].sample_size,
                            sample_duration: boxData.samples[_i2].sample_duration,
                            sample_composition_time_offset: boxData.samples[_i2].sample_composition_time_offset
                        };
                        this.samples.push(sample);
                    }
                }
                break;
        }
    }

    _createClass(IsoBox, [{
        key: 'getChildBox',
        value: function getChildBox(type) {
            for (var i = 0; i < this.boxes.length; i++) {
                if (this.boxes[i].type === type) {
                    return this.boxes[i];
                }
            }
        }
    }, {
        key: 'getChildBoxes',
        value: function getChildBoxes(type) {
            var boxes = [];
            for (var i = 0; i < this.boxes.length; i++) {
                if (this.boxes[i].type === type) {
                    boxes.push(this.boxes[i]);
                }
            }
            return boxes;
        }
    }]);

    return IsoBox;
}();

exports.default = IsoBox;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/IsoBoxSearchInfo.js":
/*!******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/IsoBoxSearchInfo.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var IsoBoxSearchInfo = function IsoBoxSearchInfo(lastCompletedOffset, found, size) {
  _classCallCheck(this, IsoBoxSearchInfo);

  this.lastCompletedOffset = lastCompletedOffset;
  this.found = found;
  this.size = size;
};

exports.default = IsoBoxSearchInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/ManifestInfo.js":
/*!**************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/ManifestInfo.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var ManifestInfo = function ManifestInfo() {
  _classCallCheck(this, ManifestInfo);

  this.DVRWindowSize = NaN;
  this.loadedTime = null;
  this.availableFrom = null;
  this.minBufferTime = NaN;
  this.duration = NaN;
  this.isDynamic = false;
  this.maxFragmentDuration = null;
};

exports.default = ManifestInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/MediaInfo.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/MediaInfo.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var MediaInfo = function () {
    function MediaInfo() {
        _classCallCheck(this, MediaInfo);

        this.id = null;
        this.index = null;
        this.type = null;
        this.streamInfo = null;
        this.representationCount = 0;
        this.lang = null;
        this.viewpoint = null;
        this.accessibility = null;
        this.audioChannelConfiguration = null;
        this.roles = null;
        this.codec = null;
        this.mimeType = null;
        this.contentProtection = null;
        this.isText = false;
        this.KID = null;
        this.bitrateList = null;
    }

    _createClass(MediaInfo, [{
        key: "isMediaInfoEqual",
        value: function isMediaInfoEqual(mediaInfo) {
            if (!mediaInfo) {
                return false;
            }

            var sameId = this.id === mediaInfo.id;
            var sameViewpoint = this.viewpoint === mediaInfo.viewpoint;
            var sameLang = this.lang === mediaInfo.lang;
            var sameRoles = this.roles.toString() === mediaInfo.roles.toString();
            var sameAccessibility = this.accessibility.toString() === mediaInfo.accessibility.toString();
            var sameAudioChannelConfiguration = this.audioChannelConfiguration.toString() === mediaInfo.audioChannelConfiguration.toString();

            return sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration;
        }
    }]);

    return MediaInfo;
}();

exports.default = MediaInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/MetricsList.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/MetricsList.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var MetricsList = function MetricsList() {
  _classCallCheck(this, MetricsList);

  this.TcpList = [];
  this.HttpList = [];
  this.RepSwitchList = [];
  this.BufferLevel = [];
  this.BufferState = [];
  this.PlayList = [];
  this.DroppedFrames = [];
  this.SchedulingInfo = [];
  this.DVRInfo = [];
  this.ManifestUpdate = [];
  this.RequestsQueue = null;
  this.DVBErrors = [];
};

exports.default = MetricsList;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/RepresentationInfo.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/RepresentationInfo.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var RepresentationInfo = function RepresentationInfo() {
  _classCallCheck(this, RepresentationInfo);

  this.id = null;
  this.quality = null;
  this.DVRWindow = null;
  this.fragmentDuration = null;
  this.mediaInfo = null;
  this.MSETimeOffset = null;
};

exports.default = RepresentationInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/StreamInfo.js":
/*!************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/StreamInfo.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var StreamInfo = function StreamInfo() {
  _classCallCheck(this, StreamInfo);

  this.id = null;
  this.index = null;
  this.start = NaN;
  this.duration = NaN;
  this.manifestInfo = null;
  this.isLast = true;
};

exports.default = StreamInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/TextRequest.js":
/*!*************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/TextRequest.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Constants = __webpack_require__(/*! ../constants/Constants */ "./node_modules/dashjs/src/streaming/constants/Constants.js");

var _Constants2 = _interopRequireDefault(_Constants);

var _FragmentRequest2 = __webpack_require__(/*! ./FragmentRequest */ "./node_modules/dashjs/src/streaming/vo/FragmentRequest.js");

var _FragmentRequest3 = _interopRequireDefault(_FragmentRequest2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * are permitted provided that the following conditions are met:
edistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  list of conditions and the following disclaimer.
edistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  other materials provided with the distribution.
either the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  without specific prior written permission.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
 * @class
 * @ignore
 */


var TextRequest = function (_FragmentRequest) {
  _inherits(TextRequest, _FragmentRequest);

  function TextRequest(url, type) {
    _classCallCheck(this, TextRequest);

    var _this = _possibleConstructorReturn(this, (TextRequest.__proto__ || Object.getPrototypeOf(TextRequest)).call(this));

    _this.url = url || null;
    _this.type = type || null;
    _this.mediaType = _Constants2.default.STREAM;
    _this.responseType = ''; //'text' value returns a bad encoding response in Firefox
    return _this;
  }

  return TextRequest;
}(_FragmentRequest3.default);

exports.default = TextRequest;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/TextTrackInfo.js":
/*!***************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/TextTrackInfo.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var TextTrackInfo = function TextTrackInfo() {
  _classCallCheck(this, TextTrackInfo);

  this.captionData = null;
  this.label = null;
  this.lang = null;
  this.defaultTrack = false;
  this.kind = null;
  this.isFragmented = false;
  this.isEmbedded = false;
};

exports.default = TextTrackInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/Thumbnail.js":
/*!***********************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/Thumbnail.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var Thumbnail = function Thumbnail() {
  _classCallCheck(this, Thumbnail);

  this.url = null;
  this.width = null;
  this.height = null;
  this.x = null;
  this.y = null;
};

exports.default = Thumbnail;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/ThumbnailTrackInfo.js":
/*!********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/ThumbnailTrackInfo.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var ThumbnailTrackInfo = function ThumbnailTrackInfo() {
  _classCallCheck(this, ThumbnailTrackInfo);

  this.bitrate = 0;
  this.width = 0;
  this.height = 0;
  this.tilesHor = 0;
  this.tilesVert = 0;
  this.widthPerTile = 0;
  this.heightPerTile = 0;
  this.startNumber = 0;
  this.segmentDuration = 0;
  this.timescale = 0;
  this.templateUrl = '';
  this.id = '';
};

exports.default = ThumbnailTrackInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/URIFragmentData.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/URIFragmentData.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 * @ignore
 */
var URIFragmentData = function URIFragmentData() {
    _classCallCheck(this, URIFragmentData);

    this.t = null;
    this.xywh = null;
    this.track = null;
    this.id = null;
    this.s = null;
    this.r = null;
};

exports.default = URIFragmentData;

/*
    From Spec http://www.w3.org/TR/media-frags/

    temporal (t)     - This dimension denotes a specific time range in the original media, such as "starting at second 10, continuing until second 20";
    spatial  (xywh)  - this dimension denotes a specific range of pixels in the original media, such as "a rectangle with size (100,100) with its top-left at coordinate (10,10)";
                       Media fragments support also addressing the media along two additional dimensions (in the advanced version defined in Media Fragments 1.0 URI (advanced)):
    track    (track) - this dimension denotes one or more tracks in the original media, such as "the english audio and the video track";
    id       (id)    - this dimension denotes a named temporal fragment within the original media, such as "chapter 2", and can be seen as a convenient way of specifying a temporal fragment.


    ## Note
    Akamai is purposing to add #s=X to the ISO standard.
        - (X) Value would be a start time to seek to at startup instead of starting at 0 or live edge
        - Allows for seeking back before the start time unlike a temporal clipping.
*/

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/BufferLevel.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/BufferLevel.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @class
 */
var BufferLevel =
/**
 * @description This Object holds reference to the current buffer level and the time it was recorded.
 */
function BufferLevel() {
  _classCallCheck(this, BufferLevel);

  /**
   * Real-Time | Time of the measurement of the buffer level.
   * @public
   */
  this.t = null;
  /**
   * Level of the buffer in milliseconds. Indicates the playout duration for which
   * media data of all active media components is available starting from the
   * current playout time.
   * @public
   */
  this.level = null;
};

exports.default = BufferLevel;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/BufferState.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/BufferState.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BufferController = __webpack_require__(/*! ../../controllers/BufferController */ "./node_modules/dashjs/src/streaming/controllers/BufferController.js");

var _BufferController2 = _interopRequireDefault(_BufferController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * The copyright in this software is being made available under the BSD License,
                                                                                                                                                           * included below. This software may be subject to other third party and contributor
                                                                                                                                                           * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                           *
                                                                                                                                                           * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                           * All rights reserved.
                                                                                                                                                           *
                                                                                                                                                           * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                           * are permitted provided that the following conditions are met:
                                                                                                                                                           *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                           *  list of conditions and the following disclaimer.
                                                                                                                                                           *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                           *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                           *  other materials provided with the distribution.
                                                                                                                                                           *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                           *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                           *  without specific prior written permission.
                                                                                                                                                           *
                                                                                                                                                           *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                           *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                           *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                           *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                           *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                           *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                           *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                           *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                           *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                           *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                           */


/**
 * @class
 */
var BufferState =
/**
 * @description This Object holds reference to the current buffer state of the video element.
 */
function BufferState() {
  _classCallCheck(this, BufferState);

  /**
   * The Buffer Level Target determined by the BufferLevelRule.
   * @public
   */
  this.target = null;
  /**
   * Current buffer state. Will be BufferController.BUFFER_EMPTY or BufferController.BUFFER_LOADED.
   * @public
   */
  this.state = _BufferController2.default.BUFFER_EMPTY;
};

exports.default = BufferState;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/DVRInfo.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/DVRInfo.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 */
var DVRInfo =
/**
 * @description This Object holds reference to DVR availability window information.
 */
function DVRInfo() {
  _classCallCheck(this, DVRInfo);

  /**
   * The current time of the video element when this was created.
   * @public
   */
  this.time = null;
  /**
   * The current Segment Availability Range as an object with start and end properties.
   * It's delta defined by the timeShiftBufferDepth MPD attribute.
   * @public
   */
  this.range = null;
  /**
   * Reference to the internal ManifestInfo.js VO.
   * @public
   */
  this.manifestInfo = null;
};

exports.default = DVRInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/DroppedFrames.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/DroppedFrames.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 */
var DroppedFrames =
/**
 * @description This Object holds reference to DroppedFrames count and the time it was recorded.
 */
function DroppedFrames() {
  _classCallCheck(this, DroppedFrames);

  /**
   * Real-Time | Time of the measurement of the dropped frames.
   * @public
   */
  this.time = null;
  /**
   * Number of dropped frames
   * @public
   */
  this.droppedFrames = null;
};

exports.default = DroppedFrames;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/HTTPRequest.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.
 * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored
 * by Metrics Reporting code.
 */
var HTTPRequest =
/**
 * @class
 */
function HTTPRequest() {
  _classCallCheck(this, HTTPRequest);

  /**
   * Identifier of the TCP connection on which the HTTP request was sent.
   * @public
   */
  this.tcpid = null;
  /**
   * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.
   * The type of the request:
   * - MPD
   * - XLink expansion
   * - Initialization Fragment
   * - Index Fragment
   * - Media Fragment
   * - Bitstream Switching Fragment
   * - other
   * @public
   */
  this.type = null;
  /**
   * The original URL (before any redirects or failures)
   * @public
   */
  this.url = null;
  /**
   * The actual URL requested, if different from above
   * @public
   */
  this.actualurl = null;
  /**
   * The contents of the byte-range-spec part of the HTTP Range header.
   * @public
   */
  this.range = null;
  /**
   * Real-Time | The real time at which the request was sent.
   * @public
   */
  this.trequest = null;
  /**
   * Real-Time | The real time at which the first byte of the response was received.
   * @public
   */
  this.tresponse = null;
  /**
   * The HTTP response code.
   * @public
   */
  this.responsecode = null;
  /**
   * The duration of the throughput trace intervals (ms), for successful requests only.
   * @public
   */
  this.interval = null;
  /**
   * Throughput traces, for successful requests only.
   * @public
   */
  this.trace = [];

  /**
   * Type of stream ("audio" | "video" etc..)
   * @public
   */
  this._stream = null;
  /**
   * Real-Time | The real time at which the request finished.
   * @public
   */
  this._tfinish = null;
  /**
   * The duration of the media requests, if available, in milliseconds.
   * @public
   */
  this._mediaduration = null;
  /**
   * all the response headers from request.
   * @public
   */
  this._responseHeaders = null;
  /**
   * The selected service location for the request. string.
   * @public
   */
  this._serviceLocation = null;
};

/**
 * @classdesc This Object holds reference to the progress of the HTTPRequest.
 */


var HTTPRequestTrace =
/**
* @class
*/
function HTTPRequestTrace() {
  _classCallCheck(this, HTTPRequestTrace);

  /**
   * Real-Time | Measurement stream start.
   * @public
   */
  this.s = null;
  /**
   * Measurement stream duration (ms).
   * @public
   */
  this.d = null;
  /**
   * List of integers counting the bytes received in each trace interval within the measurement stream.
   * @public
   */
  this.b = [];
};

HTTPRequest.GET = 'GET';
HTTPRequest.HEAD = 'HEAD';
HTTPRequest.MPD_TYPE = 'MPD';
HTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';
HTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';
HTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';
HTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';
HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';
HTTPRequest.OTHER_TYPE = 'other';

exports.HTTPRequest = HTTPRequest;
exports.HTTPRequestTrace = HTTPRequestTrace;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/ManifestUpdate.js":
/*!************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/ManifestUpdate.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc This Object holds reference to the manifest update information.
 */
var ManifestUpdate =
/**
 * @class
 */
function ManifestUpdate() {
  _classCallCheck(this, ManifestUpdate);

  /**
   * Media Type Video | Audio | FragmentedText
   * @public
   */
  this.mediaType = null;
  /**
   * MPD Type static | dynamic
   * @public
   */
  this.type = null;
  /**
   * When this manifest update was requested
   * @public
   */
  this.requestTime = null;
  /**
   * When this manifest update was received
   * @public
   */
  this.fetchTime = null;
  /**
   * Calculated Availability Start time of the stream.
   * @public
   */
  this.availabilityStartTime = null;
  /**
   * the seek point (liveEdge for dynamic, Stream[0].startTime for static)
   * @public
   */
  this.presentationStartTime = 0;
  /**
   * The calculated difference between the server and client wall clock time
   * @public
   */
  this.clientTimeOffset = 0;
  /**
   * Actual element.currentTime
   * @public
   */
  this.currentTime = null;
  /**
   * Actual element.ranges
   * @public
   */
  this.buffered = null;
  /**
   * Static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)
   * @public
   */
  this.latency = 0;
  /**
   * Array holding list of StreamInfo VO Objects
   * @public
   */
  this.streamInfo = [];
  /**
   * Array holding list of RepresentationInfo VO Objects
   * @public
   */
  this.representationInfo = [];
};

/**
 * @classdesc This Object holds reference to the current period's stream information when the manifest was updated.
 */


var ManifestUpdateStreamInfo =
/**
 * @class
 */
function ManifestUpdateStreamInfo() {
  _classCallCheck(this, ManifestUpdateStreamInfo);

  /**
   * Stream@id
   * @public
   */
  this.id = null;
  /**
   * Period Index
   * @public
   */
  this.index = null;
  /**
   * Stream@start
   * @public
   */
  this.start = null;
  /**
   * Stream@duration
   * @public
   */
  this.duration = null;
};

/**
 * @classdesc This Object holds reference to the current representation's info when the manifest was updated.
 */


var ManifestUpdateRepresentationInfo =
/**
 * @class
 */
function ManifestUpdateRepresentationInfo() {
  _classCallCheck(this, ManifestUpdateRepresentationInfo);

  /**
   * Track@id
   * @public
   */
  this.id = null;
  /**
   * Representation Index
   * @public
   */
  this.index = null;
  /**
   * Media Type Video | Audio | FragmentedText
   * @public
   */
  this.mediaType = null;
  /**
   * Which representation
   * @public
   */
  this.streamIndex = null;
  /**
   * Holds reference to @presentationTimeOffset
   * @public
   */
  this.presentationTimeOffset = null;
  /**
   * Holds reference to @startNumber
   * @public
   */
  this.startNumber = null;
  /**
   * list|template|timeline
   * @public
   */
  this.fragmentInfoType = null;
};

exports.ManifestUpdate = ManifestUpdate;
exports.ManifestUpdateStreamInfo = ManifestUpdateStreamInfo;
exports.ManifestUpdateRepresentationInfo = ManifestUpdateRepresentationInfo;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/PlayList.js":
/*!******************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/PlayList.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @classdesc a PlayList from ISO23009-1 Annex D, this Object holds reference to the playback session information
 */
var PlayList =
/**
 * @class
 */
function PlayList() {
  _classCallCheck(this, PlayList);

  /**
   * Timestamp of the user action that starts the playback stream...
   * @public
   */
  this.start = null;
  /**
   * Presentation time at which playout was requested by the user...
   * @public
   */
  this.mstart = null;
  /**
   * Type of user action which triggered playout
   * - New playout request (e.g. initial playout or seeking)
   * - Resume from pause
   * - Other user request (e.g. user-requested quality change)
   * - Start of a metrics collection stream (hence earlier entries in the play list not collected)
   * @public
   */
  this.starttype = null;

  /**
   * List of streams of continuous rendering of decoded samples.
   * @public
   */
  this.trace = [];
};

/* Public Static Constants */


PlayList.INITIAL_PLAYOUT_START_REASON = 'initial_playout';
PlayList.SEEK_START_REASON = 'seek';
PlayList.RESUME_FROM_PAUSE_START_REASON = 'resume';
PlayList.METRICS_COLLECTION_START_REASON = 'metrics_collection_start';

/**
 * @classdesc a PlayList.Trace from ISO23009-1 Annex D
 */

var PlayListTrace =
/**
 * @class
 */
function PlayListTrace() {
  _classCallCheck(this, PlayListTrace);

  /**
   * The value of the Representation@id of the Representation from which the samples were taken.
   * @type {string}
   * @public
   */
  this.representationid = null;
  /**
   * If not present, this metrics concerns the Representation as a whole.
   * If present, subreplevel indicates the greatest value of any
   * Subrepresentation@level being rendered.
   * @type {number}
   * @public
   */
  this.subreplevel = null;
  /**
   * The time at which the first sample was rendered
   * @type {number}
   * @public
   */
  this.start = null;
  /**
   * The presentation time of the first sample rendered.
   * @type {number}
   * @public
   */
  this.mstart = null;
  /**
   * The duration of the continuously presented samples (which is the same in real time and media time). "Continuously presented" means that the media clock continued to advance at the playout speed throughout the interval. NOTE: the spec does not call out the units, but all other durations etc are in ms, and we use ms too.
   * @type {number}
   * @public
   */
  this.duration = null;
  /**
   * The playback speed relative to normal playback speed (i.e.normal forward playback speed is 1.0).
   * @type {number}
   * @public
   */
  this.playbackspeed = null;
  /**
   * The reason why continuous presentation of this Representation was stopped.
   * representation switch
   * rebuffering
   * user request
   * end of Period
   * end of Stream
   * end of content
   * end of a metrics collection period
   *
   * @type {string}
   * @public
   */
  this.stopreason = null;
};

PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON = 'representation_switch';
PlayListTrace.REBUFFERING_REASON = 'rebuffering';
PlayListTrace.USER_REQUEST_STOP_REASON = 'user_request';
PlayListTrace.END_OF_PERIOD_STOP_REASON = 'end_of_period';
PlayListTrace.END_OF_CONTENT_STOP_REASON = 'end_of_content';
PlayListTrace.METRICS_COLLECTION_STOP_REASON = 'metrics_collection_end';
PlayListTrace.FAILURE_STOP_REASON = 'failure';

exports.PlayList = PlayList;
exports.PlayListTrace = PlayListTrace;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/RepresentationSwitch.js":
/*!******************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/RepresentationSwitch.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 */
var RepresentationSwitch =
/**
 * @description This Object holds reference to the info at quality switch between two representations.
 */
function RepresentationSwitch() {
  _classCallCheck(this, RepresentationSwitch);

  /**
   * Time of the switch event.
   * @public
   */
  this.t = null;
  /**
   * The media presentation time of the earliest access unit
   * (out of all media content components) played out from
   * the Representation.
   *
   * @public
   */
  this.mt = null;
  /**
   * Value of Representation@id identifying the switch-to Representation.
   * @public
   */
  this.to = null;
  /**
   * If not present, this metrics concerns the Representation as a whole.
   * If present, lto indicates the value of SubRepresentation@level within
   * Representation identifying the switch-to level of the Representation.
   *
   * @public
   */
  this.lto = null;
};

exports.default = RepresentationSwitch;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/RequestsQueue.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/RequestsQueue.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 */
var RequestsQueue =
/**
 * @description This Object holds reference to Fragment Model's request queues
 */
function RequestsQueue() {
  _classCallCheck(this, RequestsQueue);

  /**
   * Array of all of the requests that have begun to load
   * This request may not make it into the executed queue if it is abandon due to ABR rules for example.
   * @public
   */
  this.loadingRequests = [];
  /**
   * Array of the The requests that have completed
   * @public
   */
  this.executedRequests = [];
};

exports.default = RequestsQueue;

/***/ }),

/***/ "./node_modules/dashjs/src/streaming/vo/metrics/SchedulingInfo.js":
/*!************************************************************************!*\
  !*** ./node_modules/dashjs/src/streaming/vo/metrics/SchedulingInfo.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @class
 */
var SchedulingInfo =
/**
 * @description This Object holds reference to the index handling of the current fragment being loaded or executed.
 */
function SchedulingInfo() {
  _classCallCheck(this, SchedulingInfo);

  /**
   * Type of stream Audio | Video | FragmentedText
   * @public
   */
  this.mediaType = null;
  /**
   * Time of the scheduling event.
   * @public
   */
  this.t = null;

  /**
   * Type of fragment (initialization | media)
   * @public
   */
  this.type = null;
  /**
   * Presentation start time of fragment
   * @public
   */
  this.startTime = null;
  /**
   * Availability start time of fragment
   * @public
   */
  this.availabilityStartTime = null;
  /**
   * Duration of fragment
   * @public
   */
  this.duration = null;
  /**
   * Bit Rate Quality of fragment
   * @public
   */
  this.quality = null;
  /**
   * Range of fragment
   * @public
   */
  this.range = null;

  /**
   * Current state of fragment
   * @public
   */
  this.state = null;
};

exports.default = SchedulingInfo;

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var R = (typeof Reflect === 'undefined' ? 'undefined' : _typeof(Reflect)) === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};

var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function get() {
    return defaultMaxListeners;
  },
  set: function set(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {

  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) {
    args.push(arguments[i]);
  }var doError = type === 'error';

  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) {
      ReflectApply(listeners[i], this, args);
    }
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)));
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) {
    args.push(arguments[i]);
  }if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)));
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)));
  }
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)));
  }

  events = this._events;
  if (events === undefined) return this;

  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }

    if (list.length === 1) events[type] = list[0];

    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;

  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined) return [];

  var evlistener = events[type];
  if (evlistener === undefined) return [];

  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) {
    copy[i] = arr[i];
  }return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) {
    list[index] = list[index + 1];
  }list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

/***/ }),

/***/ "./node_modules/fast-deep-equal/index.js":
/*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;

module.exports = function equal(a, b) {
  if (a === b) return true;

  var arrA = isArray(a),
      arrB = isArray(b),
      i,
      length,
      key;

  if (arrA && arrB) {
    length = a.length;
    if (length != b.length) return false;
    for (i = 0; i < length; i++) {
      if (!equal(a[i], b[i])) return false;
    }return true;
  }

  if (arrA != arrB) return false;

  var dateA = a instanceof Date,
      dateB = b instanceof Date;
  if (dateA != dateB) return false;
  if (dateA && dateB) return a.getTime() == b.getTime();

  var regexpA = a instanceof RegExp,
      regexpB = b instanceof RegExp;
  if (regexpA != regexpB) return false;
  if (regexpA && regexpB) return a.toString() == b.toString();

  if (a instanceof Object && b instanceof Object) {
    var keys = keyList(a);
    length = keys.length;

    if (length !== keyList(b).length) return false;

    for (i = 0; i < length; i++) {
      if (!hasProp.call(b, keys[i])) return false;
    }for (i = 0; i < length; i++) {
      key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  return false;
};

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "./node_modules/imsc/src/main/js/doc.js":
/*!**********************************************!*\
  !*** ./node_modules/imsc/src/main/js/doc.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* 
 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @module imscDoc
 */

;
(function (imscDoc, sax, imscNames, imscStyles, imscUtils) {

        /**
         * Allows a client to provide callbacks to handle children of the <metadata> element
         * @typedef {Object} MetadataHandler
         * @property {?OpenTagCallBack} onOpenTag
         * @property {?CloseTagCallBack} onCloseTag
         * @property {?TextCallBack} onText
         */

        /**
         * Called when the opening tag of an element node is encountered.
         * @callback OpenTagCallBack
         * @param {string} ns Namespace URI of the element
         * @param {string} name Local name of the element
         * @param {Object[]} attributes List of attributes, each consisting of a
         *                              `uri`, `name` and `value`
         */

        /**
         * Called when the closing tag of an element node is encountered.
         * @callback CloseTagCallBack
         */

        /**
         * Called when a text node is encountered.
         * @callback TextCallBack
         * @param {string} contents Contents of the text node
         */

        /**
         * Parses an IMSC1 document into an opaque in-memory representation that exposes
         * a single method <pre>getMediaTimeEvents()</pre> that returns a list of time
         * offsets (in seconds) of the ISD, i.e. the points in time where the visual
         * representation of the document change. `metadataHandler` allows the caller to
         * be called back when nodes are present in <metadata> elements. 
         * 
         * @param {string} xmlstring XML document
         * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
         * @param {?MetadataHandler} metadataHandler Callback for <Metadata> elements
         * @returns {Object} Opaque in-memory representation of an IMSC1 document
         */

        imscDoc.fromXML = function (xmlstring, errorHandler, metadataHandler) {
                var p = sax.parser(true, { xmlns: true });
                var estack = [];
                var xmllangstack = [];
                var xmlspacestack = [];
                var metadata_depth = 0;
                var doc = null;

                p.onclosetag = function (node) {

                        if (estack[0] instanceof Styling) {

                                /* flatten chained referential styling */

                                for (var sid in estack[0].styles) {

                                        mergeChainedStyles(estack[0], estack[0].styles[sid], errorHandler);
                                }
                        } else if (estack[0] instanceof P || estack[0] instanceof Span) {

                                /* merge anonymous spans */

                                if (estack[0].contents.length > 1) {

                                        var cs = [estack[0].contents[0]];

                                        var c;

                                        for (c = 1; c < estack[0].contents.length; c++) {

                                                if (estack[0].contents[c] instanceof AnonymousSpan && cs[cs.length - 1] instanceof AnonymousSpan) {

                                                        cs[cs.length - 1].text += estack[0].contents[c].text;
                                                } else {

                                                        cs.push(estack[0].contents[c]);
                                                }
                                        }

                                        estack[0].contents = cs;
                                }

                                // remove redundant nested anonymous spans (9.3.3(1)(c))

                                if (estack[0] instanceof Span && estack[0].contents.length === 1 && estack[0].contents[0] instanceof AnonymousSpan) {

                                        estack[0].text = estack[0].contents[0].text;
                                        delete estack[0].contents;
                                }
                        } else if (estack[0] instanceof ForeignElement) {

                                if (estack[0].node.uri === imscNames.ns_tt && estack[0].node.local === 'metadata') {

                                        /* leave the metadata element */

                                        metadata_depth--;
                                } else if (metadata_depth > 0 && metadataHandler && 'onCloseTag' in metadataHandler) {

                                        /* end of child of metadata element */

                                        metadataHandler.onCloseTag();
                                }
                        }

                        // TODO: delete stylerefs?

                        // maintain the xml:space stack

                        xmlspacestack.shift();

                        // maintain the xml:lang stack

                        xmllangstack.shift();

                        // prepare for the next element

                        estack.shift();
                };

                p.ontext = function (str) {

                        if (estack[0] === undefined) {

                                /* ignoring text outside of elements */

                        } else if (estack[0] instanceof Span || estack[0] instanceof P) {

                                /* create an anonymous span */

                                var s = new AnonymousSpan();

                                s.initFromText(doc, estack[0], str, xmlspacestack[0], errorHandler);

                                estack[0].contents.push(s);
                        } else if (estack[0] instanceof ForeignElement && metadata_depth > 0 && metadataHandler && 'onText' in metadataHandler) {

                                /* text node within a child of metadata element */

                                metadataHandler.onText(str);
                        }
                };

                p.onopentag = function (node) {

                        // maintain the xml:space stack

                        var xmlspace = node.attributes["xml:space"];

                        if (xmlspace) {

                                xmlspacestack.unshift(xmlspace.value);
                        } else {

                                if (xmlspacestack.length === 0) {

                                        xmlspacestack.unshift("default");
                                } else {

                                        xmlspacestack.unshift(xmlspacestack[0]);
                                }
                        }

                        /* maintain the xml:lang stack */

                        var xmllang = node.attributes["xml:lang"];

                        if (xmllang) {

                                xmllangstack.unshift(xmllang.value);
                        } else {

                                if (xmllangstack.length === 0) {

                                        xmllangstack.unshift("");
                                } else {

                                        xmllangstack.unshift(xmllangstack[0]);
                                }
                        }

                        /* process the element */

                        if (node.uri === imscNames.ns_tt) {

                                if (node.local === 'tt') {

                                        if (doc !== null) {

                                                reportFatal(errorHandler, "Two <tt> elements at (" + this.line + "," + this.column + ")");
                                        }

                                        doc = new TT();

                                        doc.initFromNode(node, errorHandler);

                                        estack.unshift(doc);
                                } else if (node.local === 'head') {

                                        if (!(estack[0] instanceof TT)) {
                                                reportFatal(errorHandler, "Parent of <head> element is not <tt> at (" + this.line + "," + this.column + ")");
                                        }

                                        if (doc.head !== null) {
                                                reportFatal("Second <head> element at (" + this.line + "," + this.column + ")");
                                        }

                                        doc.head = new Head();

                                        estack.unshift(doc.head);
                                } else if (node.local === 'styling') {

                                        if (!(estack[0] instanceof Head)) {
                                                reportFatal(errorHandler, "Parent of <styling> element is not <head> at (" + this.line + "," + this.column + ")");
                                        }

                                        if (doc.head.styling !== null) {
                                                reportFatal("Second <styling> element at (" + this.line + "," + this.column + ")");
                                        }

                                        doc.head.styling = new Styling();

                                        estack.unshift(doc.head.styling);
                                } else if (node.local === 'style') {

                                        var s;

                                        if (estack[0] instanceof Styling) {

                                                s = new Style();

                                                s.initFromNode(node, errorHandler);

                                                /* ignore <style> element missing @id */

                                                if (!s.id) {

                                                        reportError(errorHandler, "<style> element missing @id attribute");
                                                } else {

                                                        doc.head.styling.styles[s.id] = s;
                                                }

                                                estack.unshift(s);
                                        } else if (estack[0] instanceof Region) {

                                                /* nested styles can be merged with specified styles
                                                 * immediately, with lower priority
                                                 * (see 8.4.4.2(3) at TTML1 )
                                                 */

                                                s = new Style();

                                                s.initFromNode(node, errorHandler);

                                                mergeStylesIfNotPresent(s.styleAttrs, estack[0].styleAttrs);

                                                estack.unshift(s);
                                        } else {

                                                reportFatal(errorHandler, "Parent of <style> element is not <styling> or <region> at (" + this.line + "," + this.column + ")");
                                        }
                                } else if (node.local === 'layout') {

                                        if (!(estack[0] instanceof Head)) {

                                                reportFatal(errorHandler, "Parent of <layout> element is not <head> at " + this.line + "," + this.column + ")");
                                        }

                                        if (doc.head.layout !== null) {

                                                reportFatal(errorHandler, "Second <layout> element at " + this.line + "," + this.column + ")");
                                        }

                                        doc.head.layout = new Layout();

                                        estack.unshift(doc.head.layout);
                                } else if (node.local === 'region') {

                                        if (!(estack[0] instanceof Layout)) {
                                                reportFatal(errorHandler, "Parent of <region> element is not <layout> at " + this.line + "," + this.column + ")");
                                        }

                                        var r = new Region();

                                        r.initFromNode(doc, node, errorHandler);

                                        if (!r.id || r.id in doc.head.layout.regions) {

                                                reportError(errorHandler, "Ignoring <region> with duplicate or missing @id at " + this.line + "," + this.column + ")");
                                        } else {

                                                doc.head.layout.regions[r.id] = r;
                                        }

                                        estack.unshift(r);
                                } else if (node.local === 'body') {

                                        if (!(estack[0] instanceof TT)) {

                                                reportFatal(errorHandler, "Parent of <body> element is not <tt> at " + this.line + "," + this.column + ")");
                                        }

                                        if (doc.body !== null) {

                                                reportFatal(errorHandler, "Second <body> element at " + this.line + "," + this.column + ")");
                                        }

                                        var b = new Body();

                                        b.initFromNode(doc, node, errorHandler);

                                        doc.body = b;

                                        estack.unshift(b);
                                } else if (node.local === 'div') {

                                        if (!(estack[0] instanceof Div || estack[0] instanceof Body)) {

                                                reportFatal(errorHandler, "Parent of <div> element is not <body> or <div> at " + this.line + "," + this.column + ")");
                                        }

                                        var d = new Div();

                                        d.initFromNode(doc, estack[0], node, errorHandler);

                                        estack[0].contents.push(d);

                                        estack.unshift(d);
                                } else if (node.local === 'p') {

                                        if (!(estack[0] instanceof Div)) {

                                                reportFatal(errorHandler, "Parent of <p> element is not <div> at " + this.line + "," + this.column + ")");
                                        }

                                        var p = new P();

                                        p.initFromNode(doc, estack[0], node, errorHandler);

                                        estack[0].contents.push(p);

                                        estack.unshift(p);
                                } else if (node.local === 'span') {

                                        if (!(estack[0] instanceof Span || estack[0] instanceof P)) {

                                                reportFatal(errorHandler, "Parent of <span> element is not <span> or <p> at " + this.line + "," + this.column + ")");
                                        }

                                        var ns = new Span();

                                        ns.initFromNode(doc, estack[0], node, xmlspacestack[0], errorHandler);

                                        estack[0].contents.push(ns);

                                        estack.unshift(ns);
                                } else if (node.local === 'br') {

                                        if (!(estack[0] instanceof Span || estack[0] instanceof P)) {

                                                reportFatal(errorHandler, "Parent of <br> element is not <span> or <p> at " + this.line + "," + this.column + ")");
                                        }

                                        var nb = new Br();

                                        nb.initFromNode(doc, estack[0], node, errorHandler);

                                        estack[0].contents.push(nb);

                                        estack.unshift(nb);
                                } else if (node.local === 'set') {

                                        if (!(estack[0] instanceof Span || estack[0] instanceof P || estack[0] instanceof Div || estack[0] instanceof Body || estack[0] instanceof Region || estack[0] instanceof Br)) {

                                                reportFatal(errorHandler, "Parent of <set> element is not a content element or a region at " + this.line + "," + this.column + ")");
                                        }

                                        var st = new Set();

                                        st.initFromNode(doc, estack[0], node, errorHandler);

                                        estack[0].sets.push(st);

                                        estack.unshift(st);
                                } else {

                                        /* element in the TT namespace, but not a content element */

                                        estack.unshift(new ForeignElement(node));
                                }
                        } else {

                                /* ignore elements not in the TTML namespace unless in metadata element */

                                estack.unshift(new ForeignElement(node));
                        }

                        /* handle metadata callbacks */

                        if (estack[0] instanceof ForeignElement) {

                                if (node.uri === imscNames.ns_tt && node.local === 'metadata') {

                                        /* enter the metadata element */

                                        metadata_depth++;
                                } else if (metadata_depth > 0 && metadataHandler && 'onOpenTag' in metadataHandler) {

                                        /* start of child of metadata element */

                                        var attrs = [];

                                        for (var a in node.attributes) {
                                                attrs[node.attributes[a].uri + " " + node.attributes[a].local] = {
                                                        uri: node.attributes[a].uri,
                                                        local: node.attributes[a].local,
                                                        value: node.attributes[a].value
                                                };
                                        }

                                        metadataHandler.onOpenTag(node.uri, node.local, attrs);
                                }
                        }
                };

                // parse the document

                p.write(xmlstring).close();

                // all referential styling has been flatten, so delete the styling elements if there is a head
                // otherwise create an empty head

                if (doc.head !== null) {
                        delete doc.head.styling;
                } else {
                        doc.head = new Head();
                }

                // create default region if no regions specified

                if (doc.head.layout === null) {

                        doc.head.layout = new Layout();
                }

                var hasRegions = false;

                /* AFAIK the only way to determine whether an object has members */

                for (var i in doc.head.layout.regions) {

                        hasRegions = true;

                        break;
                }

                if (!hasRegions) {

                        /* create default region */

                        var dr = Region.prototype.createDefaultRegion();

                        doc.head.layout.regions[dr.id] = dr;
                }

                /* resolve desired timing for regions */

                for (var region_i in doc.head.layout.regions) {

                        resolveTiming(doc, doc.head.layout.regions[region_i], null, null);
                }

                /* resolve desired timing for content elements */

                if (doc.body) {
                        resolveTiming(doc, doc.body, null, null);
                }

                return doc;
        };

        function resolveTiming(doc, element, prev_sibling, parent) {

                /* are we in a seq container? */

                var isinseq = parent && parent.timeContainer === "seq";

                /* determine implicit begin */

                var implicit_begin = 0; /* default */

                if (parent) {

                        if (isinseq && prev_sibling) {

                                /*
                                 * if seq time container, offset from the previous sibling end
                                 */

                                implicit_begin = prev_sibling.end;
                        } else {

                                implicit_begin = parent.begin;
                        }
                }

                /* compute desired begin */

                element.begin = element.explicit_begin ? element.explicit_begin + implicit_begin : implicit_begin;

                /* determine implicit end */

                var implicit_end = element.begin;

                var s = null;

                for (var set_i in element.sets) {

                        resolveTiming(doc, element.sets[set_i], s, element);

                        if (element.timeContainer === "seq") {

                                implicit_end = element.sets[set_i].end;
                        } else {

                                implicit_end = Math.max(implicit_end, element.sets[set_i].end);
                        }

                        s = element.sets[set_i];
                }

                if (!('contents' in element)) {

                        /* anonymous spans and regions and <set> and <br>s and spans with only children text nodes */

                        if (isinseq) {

                                /* in seq container, implicit duration is zero */

                                implicit_end = element.begin;
                        } else {

                                /* in par container, implicit duration is indefinite */

                                implicit_end = Number.POSITIVE_INFINITY;
                        }
                } else {

                        for (var content_i in element.contents) {

                                resolveTiming(doc, element.contents[content_i], s, element);

                                if (element.timeContainer === "seq") {

                                        implicit_end = element.contents[content_i].end;
                                } else {

                                        implicit_end = Math.max(implicit_end, element.contents[content_i].end);
                                }

                                s = element.contents[content_i];
                        }
                }

                /* determine desired end */
                /* it is never made really clear in SMIL that the explicit end is offset by the implicit begin */

                if (element.explicit_end !== null && element.explicit_dur !== null) {

                        element.end = Math.min(element.begin + element.explicit_dur, implicit_begin + element.explicit_end);
                } else if (element.explicit_end === null && element.explicit_dur !== null) {

                        element.end = element.begin + element.explicit_dur;
                } else if (element.explicit_end !== null && element.explicit_dur === null) {

                        element.end = implicit_begin + element.explicit_end;
                } else {

                        element.end = implicit_end;
                }

                delete element.explicit_begin;
                delete element.explicit_dur;
                delete element.explicit_end;

                doc._registerEvent(element);
        }

        function ForeignElement(node) {
                this.node = node;
        }

        function TT() {
                this.events = [];
                this.head = null;
                this.body = null;
        }

        TT.prototype.initFromNode = function (node, errorHandler) {

                /* compute cell resolution */

                this.cellResolution = extractCellResolution(node, errorHandler);

                /* extract frame rate and tick rate */

                var frtr = extractFrameAndTickRate(node, errorHandler);

                this.effectiveFrameRate = frtr.effectiveFrameRate;

                this.tickRate = frtr.tickRate;

                /* extract aspect ratio */

                this.aspectRatio = extractAspectRatio(node, errorHandler);

                /* check timebase */

                var attr = findAttribute(node, imscNames.ns_ttp, "timeBase");

                if (attr !== null && attr !== "media") {

                        reportFatal(errorHandler, "Unsupported time base");
                }

                /* retrieve extent */

                var e = extractExtent(node, errorHandler);

                if (e === null) {

                        /* TODO: remove once unit tests are ready */

                        this.pxDimensions = { 'h': 480, 'w': 640 };
                } else {

                        if (e.h.unit !== "px" || e.w.unit !== "px") {
                                reportFatal(errorHandler, "Extent on TT must be in px or absent");
                        }

                        this.pxDimensions = { 'h': e.h.value, 'w': e.w.value };
                }
        };

        /* register a temporal events */
        TT.prototype._registerEvent = function (elem) {

                /* skip if begin is not < then end */

                if (elem.end <= elem.begin) return;

                /* index the begin time of the event */

                var b_i = indexOf(this.events, elem.begin);

                if (!b_i.found) {
                        this.events.splice(b_i.index, 0, elem.begin);
                }

                /* index the end time of the event */

                if (elem.end !== Number.POSITIVE_INFINITY) {

                        var e_i = indexOf(this.events, elem.end);

                        if (!e_i.found) {
                                this.events.splice(e_i.index, 0, elem.end);
                        }
                }
        };

        /*
         * Retrieves the range of ISD times covered by the document
         * 
         * @returns {Array} Array of two elements: min_begin_time and max_begin_time
         * 
         */
        TT.prototype.getMediaTimeRange = function () {

                return [this.events[0], this.events[this.events.length - 1]];
        };

        /*
         * Returns list of ISD begin times  
         * 
         * @returns {Array}
         */
        TT.prototype.getMediaTimeEvents = function () {

                return this.events;
        };

        /*
         * Represents a TTML Head element
         */

        function Head() {
                this.styling = null;
                this.layout = null;
        }

        /*
         * Represents a TTML Styling element
         */

        function Styling() {
                this.styles = {};
        }

        /*
         * Represents a TTML Style element
         */

        function Style() {
                this.id = null;
                this.styleAttrs = null;
                this.styleRefs = null;
        }

        Style.prototype.initFromNode = function (node, errorHandler) {
                this.id = elementGetXMLID(node);
                this.styleAttrs = elementGetStyles(node, errorHandler);
                this.styleRefs = elementGetStyleRefs(node);
        };

        /*
         * Represents a TTML Layout element
         * 
         */

        function Layout() {
                this.regions = {};
        }

        /*
         * TTML element utility functions
         * 
         */

        function ContentElement(kind) {
                this.kind = kind;
        }

        function IdentifiedElement(id) {
                this.id = id;
        }

        IdentifiedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
                this.id = elementGetXMLID(node);
        };

        function LayoutElement(id) {
                this.regionID = id;
        }

        LayoutElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
                this.regionID = elementGetRegionID(node);
        };

        function StyledElement(styleAttrs) {
                this.styleAttrs = styleAttrs;
        }

        StyledElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {

                this.styleAttrs = elementGetStyles(node, errorHandler);

                if (doc.head !== null && doc.head.styling !== null) {
                        mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);
                }
        };

        function AnimatedElement(sets) {
                this.sets = sets;
        }

        AnimatedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
                this.sets = [];
        };

        function ContainerElement(contents) {
                this.contents = contents;
        }

        ContainerElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
                this.contents = [];
        };

        function TimedElement(explicit_begin, explicit_end, explicit_dur) {
                this.explicit_begin = explicit_begin;
                this.explicit_end = explicit_end;
                this.explicit_dur = explicit_dur;
        }

        TimedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
                var t = processTiming(doc, parent, node, errorHandler);
                this.explicit_begin = t.explicit_begin;
                this.explicit_end = t.explicit_end;
                this.explicit_dur = t.explicit_dur;

                this.timeContainer = elementGetTimeContainer(node, errorHandler);
        };

        /*
         * Represents a TTML body element
         */

        function Body() {
                ContentElement.call(this, 'body');
        }

        Body.prototype.initFromNode = function (doc, node, errorHandler) {
                StyledElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                LayoutElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                ContainerElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
        };

        /*
         * Represents a TTML div element
         */

        function Div() {
                ContentElement.call(this, 'div');
        }

        Div.prototype.initFromNode = function (doc, parent, node, errorHandler) {
                StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
        };

        /*
         * Represents a TTML p element
         */

        function P() {
                ContentElement.call(this, 'p');
        }

        P.prototype.initFromNode = function (doc, parent, node, errorHandler) {
                StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
        };

        /*
         * Represents a TTML span element
         */

        function Span() {
                ContentElement.call(this, 'span');
        }

        Span.prototype.initFromNode = function (doc, parent, node, xmlspace, errorHandler) {
                StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);

                this.space = xmlspace;
        };

        /*
         * Represents a TTML anonymous span element
         */

        function AnonymousSpan() {
                ContentElement.call(this, 'span');
        }

        AnonymousSpan.prototype.initFromText = function (doc, parent, text, xmlspace, errorHandler) {
                TimedElement.prototype.initFromNode.call(this, doc, parent, null, errorHandler);

                this.text = text;
                this.space = xmlspace;
        };

        /*
         * Represents a TTML br element
         */

        function Br() {
                ContentElement.call(this, 'br');
        }

        Br.prototype.initFromNode = function (doc, parent, node, errorHandler) {
                LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
        };

        /*
         * Represents a TTML Region element
         * 
         */

        function Region() {}

        Region.prototype.createDefaultRegion = function () {
                var r = new Region();

                IdentifiedElement.call(r, '');
                StyledElement.call(r, {});
                AnimatedElement.call(r, []);
                TimedElement.call(r, 0, Number.POSITIVE_INFINITY, null);

                return r;
        };

        Region.prototype.initFromNode = function (doc, node, errorHandler) {
                IdentifiedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                StyledElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                TimedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
                AnimatedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);

                /* immediately merge referenced styles */

                if (doc.head !== null && doc.head.styling !== null) {
                        mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);
                }
        };

        /*
         * Represents a TTML Set element
         * 
         */

        function Set() {}

        Set.prototype.initFromNode = function (doc, parent, node, errorHandler) {

                TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);

                var styles = elementGetStyles(node, errorHandler);

                this.qname = null;
                this.value = null;

                for (var qname in styles) {

                        if (this.qname) {

                                reportError(errorHandler, "More than one style specified on set");
                                break;
                        }

                        this.qname = qname;
                        this.value = styles[qname];
                }
        };

        /*
         * Utility functions
         * 
         */

        function elementGetXMLID(node) {
                return node && 'xml:id' in node.attributes ? node.attributes['xml:id'].value || null : null;
        }

        function elementGetRegionID(node) {
                return node && 'region' in node.attributes ? node.attributes.region.value : '';
        }

        function elementGetTimeContainer(node, errorHandler) {

                var tc = node && 'timeContainer' in node.attributes ? node.attributes.timeContainer.value : null;

                if (!tc || tc === "par") {

                        return "par";
                } else if (tc === "seq") {

                        return "seq";
                } else {

                        reportError(errorHandler, "Illegal value of timeContainer (assuming 'par')");

                        return "par";
                }
        }

        function elementGetStyleRefs(node) {

                return node && 'style' in node.attributes ? node.attributes.style.value.split(" ") : [];
        }

        function elementGetStyles(node, errorHandler) {

                var s = {};

                if (node !== null) {

                        for (var i in node.attributes) {

                                var qname = node.attributes[i].uri + " " + node.attributes[i].local;

                                var sa = imscStyles.byQName[qname];

                                if (sa !== undefined) {

                                        var val = sa.parse(node.attributes[i].value);

                                        if (val !== null) {

                                                s[qname] = val;

                                                /* TODO: consider refactoring errorHandler into parse and compute routines */

                                                if (sa === imscStyles.byName.zIndex) {
                                                        reportWarning(errorHandler, "zIndex attribute present but not used by IMSC1 since regions do not overlap");
                                                }
                                        } else {

                                                reportError(errorHandler, "Cannot parse styling attribute " + qname + " --> " + node.attributes[i].value);
                                        }
                                }
                        }
                }

                return s;
        }

        function findAttribute(node, ns, name) {
                for (var i in node.attributes) {

                        if (node.attributes[i].uri === ns && node.attributes[i].local === name) {

                                return node.attributes[i].value;
                        }
                }

                return null;
        }

        function extractAspectRatio(node, errorHandler) {

                var ar = findAttribute(node, imscNames.ns_ittp, "aspectRatio");

                var rslt = null;

                if (ar !== null) {

                        var ASPECT_RATIO_RE = /(\d+) (\d+)/;

                        var m = ASPECT_RATIO_RE.exec(ar);

                        if (m !== null) {

                                var w = parseInt(m[1]);

                                var h = parseInt(m[2]);

                                if (w !== 0 && h !== 0) {

                                        rslt = w / h;
                                } else {

                                        reportError(errorHandler, "Illegal aspectRatio values (ignoring)");
                                }
                        } else {

                                reportError(errorHandler, "Malformed aspectRatio attribute (ignoring)");
                        }
                }

                return rslt;
        }

        /*
         * Returns the cellResolution attribute from a node
         * 
         */
        function extractCellResolution(node, errorHandler) {

                var cr = findAttribute(node, imscNames.ns_ttp, "cellResolution");

                // initial value

                var h = 15;
                var w = 32;

                if (cr !== null) {

                        var CELL_RESOLUTION_RE = /(\d+) (\d+)/;

                        var m = CELL_RESOLUTION_RE.exec(cr);

                        if (m !== null) {

                                w = parseInt(m[1]);

                                h = parseInt(m[2]);
                        } else {

                                reportWarning(errorHandler, "Malformed cellResolution value (using initial value instead)");
                        }
                }

                return { 'w': w, 'h': h };
        }

        function extractFrameAndTickRate(node, errorHandler) {

                // subFrameRate is ignored per IMSC1 specification

                // extract frame rate

                var fps_attr = findAttribute(node, imscNames.ns_ttp, "frameRate");

                // initial value

                var fps = 30;

                // match variable

                var m;

                if (fps_attr !== null) {

                        var FRAME_RATE_RE = /(\d+)/;

                        m = FRAME_RATE_RE.exec(fps_attr);

                        if (m !== null) {

                                fps = parseInt(m[1]);
                        } else {

                                reportWarning(errorHandler, "Malformed frame rate attribute (using initial value instead)");
                        }
                }

                // extract frame rate multiplier

                var frm_attr = findAttribute(node, imscNames.ns_ttp, "frameRateMultiplier");

                // initial value

                var frm = 1;

                if (frm_attr !== null) {

                        var FRAME_RATE_MULT_RE = /(\d+) (\d+)/;

                        m = FRAME_RATE_MULT_RE.exec(frm_attr);

                        if (m !== null) {

                                frm = parseInt(m[1]) / parseInt(m[2]);
                        } else {

                                reportWarning(errorHandler, "Malformed frame rate multiplier attribute (using initial value instead)");
                        }
                }

                var efps = frm * fps;

                // extract tick rate

                var tr = 1;

                var trattr = findAttribute(node, imscNames.ns_ttp, "tickRate");

                if (trattr === null) {

                        if (fps_attr !== null) tr = efps;
                } else {

                        var TICK_RATE_RE = /(\d+)/;

                        m = TICK_RATE_RE.exec(trattr);

                        if (m !== null) {

                                tr = parseInt(m[1]);
                        } else {

                                reportWarning(errorHandler, "Malformed tick rate attribute (using initial value instead)");
                        }
                }

                return { effectiveFrameRate: efps, tickRate: tr };
        }

        function extractExtent(node, errorHandler) {

                var attr = findAttribute(node, imscNames.ns_tts, "extent");

                if (attr === null) return null;

                var s = attr.split(" ");

                if (s.length !== 2) {

                        reportWarning(errorHandler, "Malformed extent (ignoring)");

                        return null;
                }

                var w = imscUtils.parseLength(s[0]);

                var h = imscUtils.parseLength(s[1]);

                if (!h || !w) {

                        reportWarning(errorHandler, "Malformed extent values (ignoring)");

                        return null;
                }

                return { 'h': h, 'w': w };
        }

        function parseTimeExpression(tickRate, effectiveFrameRate, str) {

                var CLOCK_TIME_FRACTION_RE = /^(\d{2,}):(\d\d):(\d\d(?:\.\d+)?)$/;
                var CLOCK_TIME_FRAMES_RE = /^(\d{2,}):(\d\d):(\d\d)\:(\d{2,})$/;
                var OFFSET_FRAME_RE = /^(\d+(?:\.\d+)?)f$/;
                var OFFSET_TICK_RE = /^(\d+(?:\.\d+)?)t$/;
                var OFFSET_MS_RE = /^(\d+(?:\.\d+)?)ms$/;
                var OFFSET_S_RE = /^(\d+(?:\.\d+)?)s$/;
                var OFFSET_H_RE = /^(\d+(?:\.\d+)?)h$/;
                var OFFSET_M_RE = /^(\d+(?:\.\d+)?)m$/;
                var m;
                var r = null;
                if ((m = OFFSET_FRAME_RE.exec(str)) !== null) {

                        if (effectiveFrameRate !== null) {

                                r = parseFloat(m[1]) / effectiveFrameRate;
                        }
                } else if ((m = OFFSET_TICK_RE.exec(str)) !== null) {

                        if (tickRate !== null) {

                                r = parseFloat(m[1]) / tickRate;
                        }
                } else if ((m = OFFSET_MS_RE.exec(str)) !== null) {

                        r = parseFloat(m[1]) / 1000.0;
                } else if ((m = OFFSET_S_RE.exec(str)) !== null) {

                        r = parseFloat(m[1]);
                } else if ((m = OFFSET_H_RE.exec(str)) !== null) {

                        r = parseFloat(m[1]) * 3600.0;
                } else if ((m = OFFSET_M_RE.exec(str)) !== null) {

                        r = parseFloat(m[1]) * 60.0;
                } else if ((m = CLOCK_TIME_FRACTION_RE.exec(str)) !== null) {

                        r = parseInt(m[1]) * 3600 + parseInt(m[2]) * 60 + parseFloat(m[3]);
                } else if ((m = CLOCK_TIME_FRAMES_RE.exec(str)) !== null) {

                        /* this assumes that HH:MM:SS is a clock-time-with-fraction */

                        if (effectiveFrameRate !== null) {

                                r = parseInt(m[1]) * 3600 + parseInt(m[2]) * 60 + parseInt(m[3]) + (m[4] === null ? 0 : parseInt(m[4]) / effectiveFrameRate);
                        }
                }

                return r;
        }

        function processTiming(doc, parent, node, errorHandler) {

                /* determine explicit begin */

                var explicit_begin = null;

                if (node && 'begin' in node.attributes) {

                        explicit_begin = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.begin.value);

                        if (explicit_begin === null) {

                                reportWarning(errorHandler, "Malformed begin value " + node.attributes.begin.value + " (using 0)");
                        }
                }

                /* determine explicit duration */

                var explicit_dur = null;

                if (node && 'dur' in node.attributes) {

                        explicit_dur = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.dur.value);

                        if (explicit_dur === null) {

                                reportWarning(errorHandler, "Malformed dur value " + node.attributes.dur.value + " (ignoring)");
                        }
                }

                /* determine explicit end */

                var explicit_end = null;

                if (node && 'end' in node.attributes) {

                        explicit_end = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.end.value);

                        if (explicit_end === null) {

                                reportWarning(errorHandler, "Malformed end value (ignoring)");
                        }
                }

                return { explicit_begin: explicit_begin,
                        explicit_end: explicit_end,
                        explicit_dur: explicit_dur };
        }

        function mergeChainedStyles(styling, style, errorHandler) {

                while (style.styleRefs.length > 0) {

                        var sref = style.styleRefs.pop();

                        if (!(sref in styling.styles)) {
                                reportError(errorHandler, "Non-existant style id referenced");
                                continue;
                        }

                        mergeChainedStyles(styling, styling.styles[sref], errorHandler);

                        mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, style.styleAttrs);
                }
        }

        function mergeReferencedStyles(styling, stylerefs, styleattrs, errorHandler) {

                for (var i = stylerefs.length - 1; i >= 0; i--) {

                        var sref = stylerefs[i];

                        if (!(sref in styling.styles)) {
                                reportError(errorHandler, "Non-existant style id referenced");
                                continue;
                        }

                        mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, styleattrs);
                }
        }

        function mergeStylesIfNotPresent(from_styles, into_styles) {

                for (var sname in from_styles) {

                        if (sname in into_styles) continue;

                        into_styles[sname] = from_styles[sname];
                }
        }

        /* TODO: validate style format at parsing */

        /*
         * ERROR HANDLING UTILITY FUNCTIONS
         * 
         */

        function reportInfo(errorHandler, msg) {

                if (errorHandler && errorHandler.info && errorHandler.info(msg)) throw msg;
        }

        function reportWarning(errorHandler, msg) {

                if (errorHandler && errorHandler.warn && errorHandler.warn(msg)) throw msg;
        }

        function reportError(errorHandler, msg) {

                if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
        }

        function reportFatal(errorHandler, msg) {

                if (errorHandler && errorHandler.fatal) errorHandler.fatal(msg);

                throw msg;
        }

        /*
         * Binary search utility function
         * 
         * @typedef {Object} BinarySearchResult
         * @property {boolean} found Was an exact match found?
         * @property {number} index Position of the exact match or insert position
         * 
         * @returns {BinarySearchResult}
         */

        function indexOf(arr, searchval) {

                var min = 0;
                var max = arr.length - 1;
                var cur;

                while (min <= max) {

                        cur = Math.floor((min + max) / 2);

                        var curval = arr[cur];

                        if (curval < searchval) {

                                min = cur + 1;
                        } else if (curval > searchval) {

                                max = cur - 1;
                        } else {

                                return { found: true, index: cur };
                        }
                }

                return { found: false, index: min };
        }
})( false ? undefined : exports, typeof sax === 'undefined' ? __webpack_require__(/*! sax */ "./node_modules/sax/lib/sax.js") : sax, typeof imscNames === 'undefined' ? __webpack_require__(/*! ./names */ "./node_modules/imsc/src/main/js/names.js") : imscNames, typeof imscStyles === 'undefined' ? __webpack_require__(/*! ./styles */ "./node_modules/imsc/src/main/js/styles.js") : imscStyles, typeof imscUtils === 'undefined' ? __webpack_require__(/*! ./utils */ "./node_modules/imsc/src/main/js/utils.js") : imscUtils);

/***/ }),

/***/ "./node_modules/imsc/src/main/js/html.js":
/*!***********************************************!*\
  !*** ./node_modules/imsc/src/main/js/html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* 
 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @module imscHTML
 */

;
(function (imscHTML, imscNames, imscStyles) {

                /**
                 * Function that maps <pre>smpte:background</pre> URIs to URLs resolving to image resource
                 * @callback IMGResolver
                 * @param {string} <pre>smpte:background</pre> URI
                 * @return {string} PNG resource URL
                 */

                /**
                 * Renders an ISD object (returned by <pre>generateISD()</pre>) into a 
                 * parent element, that must be attached to the DOM. The ISD will be rendered
                 * into a child <pre>div</pre>
                 * with heigh and width equal to the clientHeight and clientWidth of the element,
                 * unless explicitly specified otherwise by the caller. Images URIs specified 
                 * by <pre>smpte:background</pre> attributes are mapped to image resource URLs
                 * by an <pre>imgResolver</pre> function. The latter takes the value of <code>smpte:background</code>
                 * attribute and an <code>img</code> DOM element as input, and is expected to
                 * set the <code>src</code> attribute of the <code>img</code> to the absolute URI of the image.
                 * <pre>displayForcedOnlyMode</pre> sets the (boolean)
                 * value of the IMSC1 displayForcedOnlyMode parameter. The function returns
                 * an opaque object that should passed in <code>previousISDState</code> when this function
                 * is called for the next ISD, otherwise <code>previousISDState</code> should be set to 
                 * <code>null</code>.
                 * 
                 * @param {Object} isd ISD to be rendered
                 * @param {Object} element Element into which the ISD is rendered
                 * @param {?IMGResolver} imgResolver Resolve <pre>smpte:background</pre> URIs into URLs.
                 * @param {?number} eheight Height (in pixel) of the child <div>div</div> or null 
                 *                  to use clientHeight of the parent element
                 * @param {?number} ewidth Width (in pixel) of the child <div>div</div> or null
                 *                  to use clientWidth of the parent element
                 * @param {?boolean} displayForcedOnlyMode Value of the IMSC1 displayForcedOnlyMode parameter,
                 *                   or false if null         
                 * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
                 * @param {Object} previousISDState State saved during processing of the previous ISD, or null if initial call
                 * @param {?boolean} enableRollUp Enables roll-up animations (see CEA 708)
                 * @return {Object} ISD state to be provided when this funtion is called for the next ISD
                 */

                imscHTML.render = function (isd, element, imgResolver, eheight, ewidth, displayForcedOnlyMode, errorHandler, previousISDState, enableRollUp) {

                                /* maintain aspect ratio if specified */

                                var height = eheight || element.clientHeight;
                                var width = ewidth || element.clientWidth;

                                if (isd.aspectRatio !== null) {

                                                var twidth = height * isd.aspectRatio;

                                                if (twidth > width) {

                                                                height = Math.round(width / isd.aspectRatio);
                                                } else {

                                                                width = twidth;
                                                }
                                }

                                var rootcontainer = document.createElement("div");

                                rootcontainer.style.position = "relative";
                                rootcontainer.style.width = width + "px";
                                rootcontainer.style.height = height + "px";
                                rootcontainer.style.margin = "auto";
                                rootcontainer.style.top = 0;
                                rootcontainer.style.bottom = 0;
                                rootcontainer.style.left = 0;
                                rootcontainer.style.right = 0;
                                rootcontainer.style.zIndex = 0;

                                var context = {
                                                h: height,
                                                w: width,
                                                regionH: null,
                                                regionW: null,
                                                imgResolver: imgResolver,
                                                displayForcedOnlyMode: displayForcedOnlyMode || false,
                                                isd: isd,
                                                errorHandler: errorHandler,
                                                previousISDState: previousISDState,
                                                enableRollUp: enableRollUp || false,
                                                currentISDState: {},
                                                flg: null, /* current fillLineGap value if active, null otherwise */
                                                lp: null, /* current linePadding value if active, null otherwise */
                                                mra: null, /* current multiRowAlign value if active, null otherwise */
                                                ipd: null, /* inline progression direction (lr, rl, tb) */
                                                bpd: null /* block progression direction (lr, rl, tb) */
                                };

                                element.appendChild(rootcontainer);

                                for (var i in isd.contents) {

                                                processElement(context, rootcontainer, isd.contents[i]);
                                }

                                return context.currentISDState;
                };

                function processElement(context, dom_parent, isd_element) {

                                var e;

                                if (isd_element.kind === 'region') {

                                                e = document.createElement("div");
                                                e.style.position = "absolute";
                                } else if (isd_element.kind === 'body') {

                                                e = document.createElement("div");
                                } else if (isd_element.kind === 'div') {

                                                e = document.createElement("div");
                                } else if (isd_element.kind === 'p') {

                                                e = document.createElement("p");
                                } else if (isd_element.kind === 'span') {

                                                e = document.createElement("span");

                                                //e.textContent = isd_element.text;
                                } else if (isd_element.kind === 'br') {

                                                e = document.createElement("br");
                                }

                                if (!e) {

                                                reportError(context.errorHandler, "Error processing ISD element kind: " + isd_element.kind);

                                                return;
                                }

                                /* override UA default margin */
                                /* TODO: should apply to <p> only */

                                e.style.margin = "0";

                                /* tranform TTML styles to CSS styles */

                                for (var i in STYLING_MAP_DEFS) {

                                                var sm = STYLING_MAP_DEFS[i];

                                                var attr = isd_element.styleAttrs[sm.qname];

                                                if (attr !== undefined && sm.map !== null) {

                                                                sm.map(context, e, isd_element, attr);
                                                }
                                }

                                var proc_e = e;

                                /* remember writing direction */

                                if (isd_element.kind === "region") {

                                                var wdir = isd_element.styleAttrs[imscStyles.byName.writingMode.qname];

                                                if (wdir === "lrtb" || wdir === "lr") {

                                                                context.ipd = "lr";
                                                                context.bpd = "tb";
                                                } else if (wdir === "rltb" || wdir === "rl") {

                                                                context.ipd = "rl";
                                                                context.bpd = "tb";
                                                } else if (wdir === "tblr") {

                                                                context.ipd = "tb";
                                                                context.bpd = "lr";
                                                } else if (wdir === "tbrl" || wdir === "tb") {

                                                                context.ipd = "tb";
                                                                context.bpd = "rl";
                                                }
                                }

                                /* do we have linePadding ? */

                                var lp = isd_element.styleAttrs[imscStyles.byName.linePadding.qname];

                                if (lp && lp > 0) {

                                                /* apply padding to the <p> so that line padding does not cause line wraps */

                                                var padmeasure = Math.ceil(lp * context.h) + "px";

                                                if (context.bpd === "tb") {

                                                                proc_e.style.paddingLeft = padmeasure;
                                                                proc_e.style.paddingRight = padmeasure;
                                                } else {

                                                                proc_e.style.paddingTop = padmeasure;
                                                                proc_e.style.paddingBottom = padmeasure;
                                                }

                                                context.lp = lp;
                                }

                                // do we have multiRowAlign?

                                var mra = isd_element.styleAttrs[imscStyles.byName.multiRowAlign.qname];

                                if (mra && mra !== "auto") {

                                                /* create inline block to handle multirowAlign */

                                                var s = document.createElement("span");

                                                s.style.display = "inline-block";

                                                s.style.textAlign = mra;

                                                e.appendChild(s);

                                                proc_e = s;

                                                context.mra = mra;
                                }

                                /* remember we are filling line gaps */

                                if (isd_element.styleAttrs[imscStyles.byName.fillLineGap.qname]) {
                                                context.flg = true;
                                }

                                if (isd_element.kind === "span" && isd_element.text) {

                                                if (context.lp || context.mra || context.flg) {

                                                                // wrap characters in spans to find the line wrap locations

                                                                var cbuf = '';

                                                                for (var j = 0; j < isd_element.text.length; j++) {

                                                                                cbuf += isd_element.text.charAt(j);

                                                                                var cc = isd_element.text.charCodeAt(j);

                                                                                if (cc < 0xD800 || cc > 0xDBFF || j === isd_element.text.length) {

                                                                                                /* wrap the character(s) in a span unless it is a high surrogate */

                                                                                                var span = document.createElement("span");

                                                                                                span.textContent = cbuf;

                                                                                                e.appendChild(span);

                                                                                                cbuf = '';
                                                                                }
                                                                }
                                                } else {

                                                                e.textContent = isd_element.text;
                                                }
                                }

                                dom_parent.appendChild(e);

                                /* process the children of the ISD element */

                                for (var k in isd_element.contents) {

                                                processElement(context, proc_e, isd_element.contents[k]);
                                }

                                /* list of lines */

                                var linelist = [];

                                /* paragraph processing */
                                /* TODO: linePadding only supported for horizontal scripts */

                                if ((context.lp || context.mra || context.flg) && isd_element.kind === "p") {

                                                constructLineList(context, proc_e, linelist, null);

                                                /* insert line breaks for multirowalign */

                                                if (context.mra) {

                                                                applyMultiRowAlign(linelist);

                                                                context.mra = null;
                                                }

                                                /* add linepadding */

                                                if (context.lp) {

                                                                applyLinePadding(linelist, context.lp * context.h, context);

                                                                context.lp = null;
                                                }

                                                /* fill line gaps linepadding */

                                                if (context.flg) {

                                                                var par_edges = rect2edges(proc_e.getBoundingClientRect(), context);

                                                                applyFillLineGap(linelist, par_edges.before, par_edges.after, context);

                                                                context.flg = null;
                                                }
                                }

                                /* region processing */

                                if (isd_element.kind === "region") {

                                                /* build line list */

                                                constructLineList(context, proc_e, linelist);

                                                /* perform roll up if needed */

                                                if (context.bpd === "tb" && context.enableRollUp && isd_element.contents.length > 0 && isd_element.styleAttrs[imscStyles.byName.displayAlign.qname] === 'after') {

                                                                /* horrible hack, perhaps default region id should be underscore everywhere? */

                                                                var rid = isd_element.id === '' ? '_' : isd_element.id;

                                                                var rb = new RegionPBuffer(rid, linelist);

                                                                context.currentISDState[rb.id] = rb;

                                                                if (context.previousISDState && rb.id in context.previousISDState && context.previousISDState[rb.id].plist.length > 0 && rb.plist.length > 1 && rb.plist[rb.plist.length - 2].text === context.previousISDState[rb.id].plist[context.previousISDState[rb.id].plist.length - 1].text) {

                                                                                var body_elem = e.firstElementChild;

                                                                                var h = rb.plist[rb.plist.length - 1].after - rb.plist[rb.plist.length - 1].before;

                                                                                body_elem.style.bottom = "-" + h + "px";
                                                                                body_elem.style.transition = "transform 0.4s";
                                                                                body_elem.style.position = "relative";
                                                                                body_elem.style.transform = "translateY(-" + h + "px)";
                                                                }
                                                }

                                                /* TODO: clean-up the spans ? */
                                }
                }

                function applyLinePadding(lineList, lp, context) {

                                for (var i in lineList) {

                                                var l = lineList[i].elements.length;

                                                var se = lineList[i].elements[lineList[i].start_elem];

                                                var ee = lineList[i].elements[lineList[i].end_elem];

                                                var pospadpxlen = Math.ceil(lp) + "px";

                                                var negpadpxlen = "-" + Math.ceil(lp) + "px";

                                                if (l !== 0) {

                                                                if (context.ipd === "lr") {

                                                                                se.node.style.borderLeftColor = se.bgcolor || "#00000000";
                                                                                se.node.style.borderLeftStyle = "solid";
                                                                                se.node.style.borderLeftWidth = pospadpxlen;
                                                                                se.node.style.marginLeft = negpadpxlen;
                                                                } else if (context.ipd === "rl") {

                                                                                se.node.style.borderRightColor = se.bgcolor || "#00000000";
                                                                                se.node.style.borderRightStyle = "solid";
                                                                                se.node.style.borderRightWidth = pospadpxlen;
                                                                                se.node.style.marginRight = negpadpxlen;
                                                                } else if (context.ipd === "tb") {

                                                                                se.node.style.borderTopColor = se.bgcolor || "#00000000";
                                                                                se.node.style.borderTopStyle = "solid";
                                                                                se.node.style.borderTopWidth = pospadpxlen;
                                                                                se.node.style.marginTop = negpadpxlen;
                                                                }

                                                                if (context.ipd === "lr") {

                                                                                ee.node.style.borderRightColor = ee.bgcolor || "#00000000";
                                                                                ee.node.style.borderRightStyle = "solid";
                                                                                ee.node.style.borderRightWidth = pospadpxlen;
                                                                                ee.node.style.marginRight = negpadpxlen;
                                                                } else if (context.ipd === "rl") {

                                                                                ee.node.style.borderLeftColor = ee.bgcolor || "#00000000";
                                                                                ee.node.style.borderLeftStyle = "solid";
                                                                                ee.node.style.borderLeftWidth = pospadpxlen;
                                                                                ee.node.style.marginLeft = negpadpxlen;
                                                                } else if (context.ipd === "tb") {

                                                                                ee.node.style.borderBottomColor = ee.bgcolor || "#00000000";
                                                                                ee.node.style.borderBottomStyle = "solid";
                                                                                ee.node.style.borderBottomWidth = pospadpxlen;
                                                                                ee.node.style.marginBottom = negpadpxlen;
                                                                }
                                                }
                                }
                }

                function applyMultiRowAlign(lineList) {

                                /* apply an explicit br to all but the last line */

                                for (var i = 0; i < lineList.length - 1; i++) {

                                                var l = lineList[i].elements.length;

                                                if (l !== 0 && lineList[i].br === false) {
                                                                var br = document.createElement("br");

                                                                var lastnode = lineList[i].elements[l - 1].node;

                                                                lastnode.parentElement.insertBefore(br, lastnode.nextSibling);
                                                }
                                }
                }

                function applyFillLineGap(lineList, par_before, par_after, context) {

                                /* positive for BPD = lr and tb, negative for BPD = rl */
                                var s = Math.sign(par_after - par_before);

                                for (var i = 0; i <= lineList.length; i++) {

                                                /* compute frontier between lines */

                                                var frontier;

                                                if (i === 0) {

                                                                frontier = par_before;
                                                } else if (i === lineList.length) {

                                                                frontier = par_after;
                                                } else {

                                                                frontier = (lineList[i].before + lineList[i - 1].after) / 2;
                                                }

                                                /* padding amount */

                                                var pad;

                                                /* current element */

                                                var e;

                                                /* before line */

                                                if (i > 0) {

                                                                for (var j = 0; j < lineList[i - 1].elements.length; j++) {

                                                                                if (lineList[i - 1].elements[j].bgcolor === null) continue;

                                                                                e = lineList[i - 1].elements[j];

                                                                                if (s * (e.after - frontier) < 0) {

                                                                                                pad = Math.ceil(Math.abs(frontier - e.after)) + "px";

                                                                                                e.node.style.backgroundColor = e.bgcolor;

                                                                                                if (context.bpd === "lr") {

                                                                                                                e.node.style.paddingRight = pad;
                                                                                                } else if (context.bpd === "rl") {

                                                                                                                e.node.style.paddingLeft = pad;
                                                                                                } else if (context.bpd === "tb") {

                                                                                                                e.node.style.paddingBottom = pad;
                                                                                                }
                                                                                }
                                                                }
                                                }

                                                /* after line */

                                                if (i < lineList.length) {

                                                                for (var k = 0; k < lineList[i].elements.length; k++) {

                                                                                e = lineList[i].elements[k];

                                                                                if (e.bgcolor === null) continue;

                                                                                if (s * (e.before - frontier) > 0) {

                                                                                                pad = Math.ceil(Math.abs(e.before - frontier)) + "px";

                                                                                                e.node.style.backgroundColor = e.bgcolor;

                                                                                                if (context.bpd === "lr") {

                                                                                                                e.node.style.paddingLeft = pad;
                                                                                                } else if (context.bpd === "rl") {

                                                                                                                e.node.style.paddingRight = pad;
                                                                                                } else if (context.bpd === "tb") {

                                                                                                                e.node.style.paddingTop = pad;
                                                                                                }
                                                                                }
                                                                }
                                                }
                                }
                }

                function RegionPBuffer(id, lineList) {

                                this.id = id;

                                this.plist = lineList;
                }

                function pruneEmptySpans(element) {

                                var child = element.firstChild;

                                while (child) {

                                                var nchild = child.nextSibling;

                                                if (child.nodeType === Node.ELEMENT_NODE && child.localName === 'span') {

                                                                pruneEmptySpans(child);

                                                                if (child.childElementCount === 0 && child.textContent.length === 0) {

                                                                                element.removeChild(child);
                                                                }
                                                }

                                                child = nchild;
                                }
                }

                function rect2edges(rect, context) {

                                var edges = { before: null, after: null, start: null, end: null };

                                if (context.bpd === "tb") {

                                                edges.before = rect.top;
                                                edges.after = rect.bottom;

                                                if (context.ipd === "lr") {

                                                                edges.start = rect.left;
                                                                edges.end = rect.right;
                                                } else {

                                                                edges.start = rect.right;
                                                                edges.end = rect.left;
                                                }
                                } else if (context.bpd === "lr") {

                                                edges.before = rect.left;
                                                edges.after = rect.right;
                                                edges.start = rect.top;
                                                edges.end = rect.bottom;
                                } else if (context.bpd === "rl") {

                                                edges.before = rect.right;
                                                edges.after = rect.left;
                                                edges.start = rect.top;
                                                edges.end = rect.bottom;
                                }

                                return edges;
                }

                function constructLineList(context, element, llist, bgcolor) {

                                var curbgcolor = element.style.backgroundColor || bgcolor;

                                if (element.childElementCount === 0) {

                                                if (element.localName === 'span') {

                                                                var r = element.getBoundingClientRect();

                                                                /* skip if span is not displayed */

                                                                if (r.height === 0 || r.width === 0) return;

                                                                var edges = rect2edges(r, context);

                                                                if (llist.length === 0 || !isSameLine(edges.before, edges.after, llist[llist.length - 1].before, llist[llist.length - 1].after)) {

                                                                                llist.push({
                                                                                                before: edges.before,
                                                                                                after: edges.after,
                                                                                                start: edges.start,
                                                                                                end: edges.end,
                                                                                                start_elem: 0,
                                                                                                end_elem: 0,
                                                                                                elements: [],
                                                                                                text: "",
                                                                                                br: false
                                                                                });
                                                                } else {

                                                                                /* positive for BPD = lr and tb, negative for BPD = rl */
                                                                                var bpd_dir = Math.sign(edges.after - edges.before);

                                                                                /* positive for IPD = lr and tb, negative for IPD = rl */
                                                                                var ipd_dir = Math.sign(edges.end - edges.start);

                                                                                /* check if the line height has increased */

                                                                                if (bpd_dir * (edges.before - llist[llist.length - 1].before) < 0) {
                                                                                                llist[llist.length - 1].before = edges.before;
                                                                                }

                                                                                if (bpd_dir * (edges.after - llist[llist.length - 1].after) > 0) {
                                                                                                llist[llist.length - 1].after = edges.after;
                                                                                }

                                                                                if (ipd_dir * (edges.start - llist[llist.length - 1].start) < 0) {
                                                                                                llist[llist.length - 1].start = edges.start;
                                                                                                llist[llist.length - 1].start_elem = llist[llist.length - 1].elements.length;
                                                                                }

                                                                                if (ipd_dir * (edges.end - llist[llist.length - 1].end) > 0) {
                                                                                                llist[llist.length - 1].end = edges.end;
                                                                                                llist[llist.length - 1].end_elem = llist[llist.length - 1].elements.length;
                                                                                }
                                                                }

                                                                llist[llist.length - 1].text += element.textContent;

                                                                llist[llist.length - 1].elements.push({
                                                                                node: element,
                                                                                bgcolor: curbgcolor,
                                                                                before: edges.before,
                                                                                after: edges.after
                                                                });
                                                } else if (element.localName === 'br' && llist.length !== 0) {

                                                                llist[llist.length - 1].br = true;
                                                }
                                } else {

                                                var child = element.firstChild;

                                                while (child) {

                                                                if (child.nodeType === Node.ELEMENT_NODE) {

                                                                                constructLineList(context, child, llist, curbgcolor);
                                                                }

                                                                child = child.nextSibling;
                                                }
                                }
                }

                function isSameLine(before1, after1, before2, after2) {

                                return after1 < after2 && before1 > before2 || after2 <= after1 && before2 >= before1;
                }

                function HTMLStylingMapDefintion(qName, mapFunc) {
                                this.qname = qName;
                                this.map = mapFunc;
                }

                var STYLING_MAP_DEFS = [new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling backgroundColor", function (context, dom_element, isd_element, attr) {

                                /* skip if transparent */
                                if (attr[3] === 0) return;

                                dom_element.style.backgroundColor = "rgba(" + attr[0].toString() + "," + attr[1].toString() + "," + attr[2].toString() + "," + (attr[3] / 255).toString() + ")";
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling color", function (context, dom_element, isd_element, attr) {
                                dom_element.style.color = "rgba(" + attr[0].toString() + "," + attr[1].toString() + "," + attr[2].toString() + "," + (attr[3] / 255).toString() + ")";
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling direction", function (context, dom_element, isd_element, attr) {
                                dom_element.style.direction = attr;
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling display", function (context, dom_element, isd_element, attr) {}), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling displayAlign", function (context, dom_element, isd_element, attr) {

                                /* see https://css-tricks.com/snippets/css/a-guide-to-flexbox/ */

                                /* TODO: is this affected by writing direction? */

                                dom_element.style.display = "flex";
                                dom_element.style.flexDirection = "column";

                                if (attr === "before") {

                                                dom_element.style.justifyContent = "flex-start";
                                } else if (attr === "center") {

                                                dom_element.style.justifyContent = "center";
                                } else if (attr === "after") {

                                                dom_element.style.justifyContent = "flex-end";
                                }
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling extent", function (context, dom_element, isd_element, attr) {
                                /* TODO: this is super ugly */

                                context.regionH = attr.h * context.h;
                                context.regionW = attr.w * context.w;

                                /* 
                                 * CSS height/width are measured against the content rectangle,
                                 * whereas TTML height/width include padding
                                 */

                                var hdelta = 0;
                                var wdelta = 0;

                                var p = isd_element.styleAttrs["http://www.w3.org/ns/ttml#styling padding"];

                                if (!p) {

                                                /* error */

                                } else {

                                                hdelta = (p[0] + p[2]) * context.h;
                                                wdelta = (p[1] + p[3]) * context.w;
                                }

                                dom_element.style.height = context.regionH - hdelta + "px";
                                dom_element.style.width = context.regionW - wdelta + "px";
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontFamily", function (context, dom_element, isd_element, attr) {

                                var rslt = [];

                                /* per IMSC1 */

                                for (var i in attr) {

                                                if (attr[i] === "monospaceSerif") {

                                                                rslt.push("Courier New");
                                                                rslt.push('"Liberation Mono"');
                                                                rslt.push("Courier");
                                                                rslt.push("monospace");
                                                } else if (attr[i] === "proportionalSansSerif") {

                                                                rslt.push("Arial");
                                                                rslt.push("Helvetica");
                                                                rslt.push('"Liberation Sans"');
                                                                rslt.push("sans-serif");
                                                } else if (attr[i] === "monospace") {

                                                                rslt.push("monospace");
                                                } else if (attr[i] === "sansSerif") {

                                                                rslt.push("sans-serif");
                                                } else if (attr[i] === "serif") {

                                                                rslt.push("serif");
                                                } else if (attr[i] === "monospaceSansSerif") {

                                                                rslt.push("Consolas");
                                                                rslt.push("monospace");
                                                } else if (attr[i] === "proportionalSerif") {

                                                                rslt.push("serif");
                                                } else {

                                                                rslt.push(attr[i]);
                                                }
                                }

                                dom_element.style.fontFamily = rslt.join(",");
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontSize", function (context, dom_element, isd_element, attr) {
                                dom_element.style.fontSize = attr * context.h + "px";
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontStyle", function (context, dom_element, isd_element, attr) {
                                dom_element.style.fontStyle = attr;
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontWeight", function (context, dom_element, isd_element, attr) {
                                dom_element.style.fontWeight = attr;
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling lineHeight", function (context, dom_element, isd_element, attr) {
                                if (attr === "normal") {

                                                dom_element.style.lineHeight = "normal";
                                } else {

                                                dom_element.style.lineHeight = attr * context.h + "px";
                                }
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling opacity", function (context, dom_element, isd_element, attr) {
                                dom_element.style.opacity = attr;
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling origin", function (context, dom_element, isd_element, attr) {
                                dom_element.style.top = attr.h * context.h + "px";
                                dom_element.style.left = attr.w * context.w + "px";
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling overflow", function (context, dom_element, isd_element, attr) {
                                dom_element.style.overflow = attr;
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling padding", function (context, dom_element, isd_element, attr) {

                                /* attr: top,left,bottom,right*/

                                /* style: top right bottom left*/

                                var rslt = [];

                                rslt[0] = attr[0] * context.h + "px";
                                rslt[1] = attr[3] * context.w + "px";
                                rslt[2] = attr[2] * context.h + "px";
                                rslt[3] = attr[1] * context.w + "px";

                                dom_element.style.padding = rslt.join(" ");
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling showBackground", null), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textAlign", function (context, dom_element, isd_element, attr) {

                                var ta;
                                var dir = isd_element.styleAttrs[imscStyles.byName.direction.qname];

                                /* handle UAs that do not understand start or end */

                                if (attr === "start") {

                                                ta = dir === "rtl" ? "right" : "left";
                                } else if (attr === "end") {

                                                ta = dir === "rtl" ? "left" : "right";
                                } else {

                                                ta = attr;
                                }

                                dom_element.style.textAlign = ta;
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textDecoration", function (context, dom_element, isd_element, attr) {
                                dom_element.style.textDecoration = attr.join(" ").replace("lineThrough", "line-through");
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textOutline", function (context, dom_element, isd_element, attr) {

                                if (attr === "none") {

                                                dom_element.style.textShadow = "";
                                } else {

                                                dom_element.style.textShadow = "rgba(" + attr.color[0].toString() + "," + attr.color[1].toString() + "," + attr.color[2].toString() + "," + (attr.color[3] / 255).toString() + ")" + " 0px 0px " + attr.thickness * context.h + "px";
                                }
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling unicodeBidi", function (context, dom_element, isd_element, attr) {

                                var ub;

                                if (attr === 'bidiOverride') {
                                                ub = "bidi-override";
                                } else {
                                                ub = attr;
                                }

                                dom_element.style.unicodeBidi = ub;
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling visibility", function (context, dom_element, isd_element, attr) {
                                dom_element.style.visibility = attr;
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling wrapOption", function (context, dom_element, isd_element, attr) {

                                if (attr === "wrap") {

                                                if (isd_element.space === "preserve") {
                                                                dom_element.style.whiteSpace = "pre-wrap";
                                                } else {
                                                                dom_element.style.whiteSpace = "normal";
                                                }
                                } else {

                                                if (isd_element.space === "preserve") {

                                                                dom_element.style.whiteSpace = "pre";
                                                } else {
                                                                dom_element.style.whiteSpace = "noWrap";
                                                }
                                }
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling writingMode", function (context, dom_element, isd_element, attr) {
                                if (attr === "lrtb" || attr === "lr") {

                                                dom_element.style.writingMode = "horizontal-tb";
                                } else if (attr === "rltb" || attr === "rl") {

                                                dom_element.style.writingMode = "horizontal-tb";
                                } else if (attr === "tblr") {

                                                dom_element.style.writingMode = "vertical-lr";
                                } else if (attr === "tbrl" || attr === "tb") {

                                                dom_element.style.writingMode = "vertical-rl";
                                }
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling zIndex", function (context, dom_element, isd_element, attr) {
                                dom_element.style.zIndex = attr;
                }), new HTMLStylingMapDefintion("http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt backgroundImage", function (context, dom_element, isd_element, attr) {

                                if (context.imgResolver !== null && attr !== null) {

                                                var img = document.createElement("img");

                                                var uri = context.imgResolver(attr, img);

                                                if (uri) img.src = uri;

                                                img.height = context.regionH;
                                                img.width = context.regionW;

                                                dom_element.appendChild(img);
                                }
                }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay", function (context, dom_element, isd_element, attr) {

                                if (context.displayForcedOnlyMode && attr === false) {
                                                dom_element.style.visibility = "hidden";
                                }
                })];

                var STYLMAP_BY_QNAME = {};

                for (var i in STYLING_MAP_DEFS) {

                                STYLMAP_BY_QNAME[STYLING_MAP_DEFS[i].qname] = STYLING_MAP_DEFS[i];
                }

                function reportError(errorHandler, msg) {

                                if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
                }
})( false ? undefined : exports, typeof imscNames === 'undefined' ? __webpack_require__(/*! ./names */ "./node_modules/imsc/src/main/js/names.js") : imscNames, typeof imscStyles === 'undefined' ? __webpack_require__(/*! ./styles */ "./node_modules/imsc/src/main/js/styles.js") : imscStyles);

/***/ }),

/***/ "./node_modules/imsc/src/main/js/isd.js":
/*!**********************************************!*\
  !*** ./node_modules/imsc/src/main/js/isd.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* 
 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @module imscISD
 */

;
(function (imscISD, imscNames, imscStyles) {
        // wrapper for non-node envs

        /** 
         * Creates a canonical representation of an IMSC1 document returned by <pre>imscDoc.fromXML()</pre>
         * at a given absolute offset in seconds. This offset does not have to be one of the values returned
         * by <pre>getMediaTimeEvents()</pre>.
         * 
         * @param {Object} tt IMSC1 document
         * @param {number} offset Absolute offset (in seconds)
         * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
         * @returns {Object} Opaque in-memory representation of an ISD
         */

        imscISD.generateISD = function (tt, offset, errorHandler) {

                /* TODO check for tt and offset validity */

                /* create the ISD object from the IMSC1 doc */

                var isd = new ISD(tt);

                /* context */

                var context = {

                        /* empty for now */

                };

                /* process regions */

                for (var r in tt.head.layout.regions) {

                        /* post-order traversal of the body tree per [construct intermediate document] */

                        var c = isdProcessContentElement(tt, offset, tt.head.layout.regions[r], tt.body, null, '', tt.head.layout.regions[r], errorHandler, context);

                        if (c !== null) {

                                /* add the region to the ISD */

                                isd.contents.push(c.element);
                        }
                }

                return isd;
        };

        function isdProcessContentElement(doc, offset, region, body, parent, inherited_region_id, elem, errorHandler, context) {

                /* prune if temporally inactive */

                if (offset < elem.begin || offset >= elem.end) {
                        return null;
                }

                /* 
                 * set the associated region as specified by the regionID attribute, or the 
                 * inherited associated region otherwise
                 */

                var associated_region_id = 'regionID' in elem && elem.regionID !== '' ? elem.regionID : inherited_region_id;

                /* prune the element if either:
                 * - the element is not terminal and the associated region is neither the default
                 *   region nor the parent region (this allows children to be associated with a 
                 *   region later on)
                 * - the element is terminal and the associated region is not the parent region
                 */

                /* TODO: improve detection of terminal elements since <region> has no contents */

                if (parent !== null /* are we in the region element */ && associated_region_id !== region.id && (!('contents' in elem) || 'contents' in elem && elem.contents.length === 0 || associated_region_id !== '')) return null;

                /* create an ISD element, including applying specified styles */

                var isd_element = new ISDContentElement(elem);

                /* apply set (animation) styling */

                for (var i in elem.sets) {

                        if (offset < elem.sets[i].begin || offset >= elem.sets[i].end) continue;

                        isd_element.styleAttrs[elem.sets[i].qname] = elem.sets[i].value;
                }

                /* 
                 * keep track of specified styling attributes so that we
                 * can compute them later
                 */

                var spec_attr = {};

                for (var qname in isd_element.styleAttrs) {

                        spec_attr[qname] = true;

                        /* special rule for tts:writingMode (section 7.29.1 of XSL)
                         * direction is set consistently with writingMode only
                         * if writingMode sets inline-direction to LTR or RTL  
                         */

                        if (qname === imscStyles.byName.writingMode.qname && !(imscStyles.byName.direction.qname in isd_element.styleAttrs)) {

                                var wm = isd_element.styleAttrs[qname];

                                if (wm === "lrtb" || wm === "lr") {

                                        isd_element.styleAttrs[imscStyles.byName.direction.qname] = "ltr";
                                } else if (wm === "rltb" || wm === "rl") {

                                        isd_element.styleAttrs[imscStyles.byName.direction.qname] = "rtl";
                                }
                        }
                }

                /* inherited styling */

                if (parent !== null) {

                        for (var j in imscStyles.all) {

                                var sa = imscStyles.all[j];

                                /* textDecoration has special inheritance rules */

                                if (sa.qname === imscStyles.byName.textDecoration.qname) {

                                        /* handle both textDecoration inheritance and specification */

                                        var ps = parent.styleAttrs[sa.qname];
                                        var es = isd_element.styleAttrs[sa.qname];
                                        var outs = [];

                                        if (es === undefined) {

                                                outs = ps;
                                        } else if (es.indexOf("none") === -1) {

                                                if (es.indexOf("noUnderline") === -1 && ps.indexOf("underline") !== -1 || es.indexOf("underline") !== -1) {

                                                        outs.push("underline");
                                                }

                                                if (es.indexOf("noLineThrough") === -1 && ps.indexOf("lineThrough") !== -1 || es.indexOf("lineThrough") !== -1) {

                                                        outs.push("lineThrough");
                                                }

                                                if (es.indexOf("noOverline") === -1 && ps.indexOf("overline") !== -1 || es.indexOf("overline") !== -1) {

                                                        outs.push("overline");
                                                }
                                        } else {

                                                outs.push("none");
                                        }

                                        isd_element.styleAttrs[sa.qname] = outs;
                                } else if (sa.inherit && sa.qname in parent.styleAttrs && !(sa.qname in isd_element.styleAttrs)) {

                                        isd_element.styleAttrs[sa.qname] = parent.styleAttrs[sa.qname];
                                }
                        }
                }

                /* initial value styling */

                for (var k in imscStyles.all) {

                        var ivs = imscStyles.all[k];

                        /* skip if value is already specified */

                        if (ivs.qname in isd_element.styleAttrs) continue;

                        /* apply initial value to elements other than region only if non-inherited */

                        if (isd_element.kind === 'region' || ivs.inherit === false && ivs.initial !== null) {

                                isd_element.styleAttrs[ivs.qname] = ivs.parse(ivs.initial);

                                /* keep track of the style as specified */

                                spec_attr[ivs.qname] = true;
                        }
                }

                /* compute styles (only for non-inherited styles) */
                /* TODO: get rid of spec_attr */

                for (var z in imscStyles.all) {

                        var cs = imscStyles.all[z];

                        if (!(cs.qname in spec_attr)) continue;

                        if (cs.compute !== null) {

                                var cstyle = cs.compute(
                                /*doc, parent, element, attr, context*/
                                doc, parent, isd_element, isd_element.styleAttrs[cs.qname], context);

                                if (cstyle !== null) {
                                        isd_element.styleAttrs[cs.qname] = cstyle;
                                } else {
                                        reportError(errorHandler, "Style '" + cs.qname + "' on element '" + isd_element.kind + "' cannot be computed");
                                }
                        }
                }

                /* prune if tts:display is none */

                if (isd_element.styleAttrs[imscStyles.byName.display.qname] === "none") return null;

                /* process contents of the element */

                var contents;

                if (parent === null) {

                        /* we are processing the region */

                        if (body === null) {

                                /* if there is no body, still process the region but with empty content */

                                contents = [];
                        } else {

                                /*use the body element as contents */

                                contents = [body];
                        }
                } else if ('contents' in elem) {

                        contents = elem.contents;
                }

                for (var x in contents) {

                        var c = isdProcessContentElement(doc, offset, region, body, isd_element, associated_region_id, contents[x], errorHandler, context);

                        /* 
                         * keep child element only if they are non-null and their region match 
                         * the region of this element
                         */

                        if (c !== null) {

                                isd_element.contents.push(c.element);
                        }
                }

                /* compute used value of lineHeight="normal" */

                /*        if (isd_element.styleAttrs[imscStyles.byName.lineHeight.qname] === "normal"  ) {
                 
                 isd_element.styleAttrs[imscStyles.byName.lineHeight.qname] =
                 isd_element.styleAttrs[imscStyles.byName.fontSize.qname] * 1.2;
                 
                 }
                 */

                /* remove styles that are not applicable */

                for (var qnameb in isd_element.styleAttrs) {
                        var da = imscStyles.byQName[qnameb];

                        if (da.applies.indexOf(isd_element.kind) === -1) {
                                delete isd_element.styleAttrs[qnameb];
                        }
                }

                /* collapse white space if space is "default" */

                if (isd_element.kind === 'span' && isd_element.text && isd_element.space === "default") {

                        var trimmedspan = isd_element.text.replace(/\s+/g, ' ');

                        isd_element.text = trimmedspan;
                }

                /* trim whitespace around explicit line breaks */

                if (isd_element.kind === 'p') {

                        var elist = [];

                        constructSpanList(isd_element, elist);

                        var l = 0;

                        var state = "after_br";
                        var br_pos = 0;

                        while (true) {

                                if (state === "after_br") {

                                        if (l >= elist.length || elist[l].kind === "br") {

                                                state = "before_br";
                                                br_pos = l;
                                                l--;
                                        } else {

                                                if (elist[l].space !== "preserve") {

                                                        elist[l].text = elist[l].text.replace(/^\s+/g, '');
                                                }

                                                if (elist[l].text.length > 0) {

                                                        state = "looking_br";
                                                        l++;
                                                } else {

                                                        elist.splice(l, 1);
                                                }
                                        }
                                } else if (state === "before_br") {

                                        if (l < 0 || elist[l].kind === "br") {

                                                state = "after_br";
                                                l = br_pos + 1;

                                                if (l >= elist.length) break;
                                        } else {

                                                if (elist[l].space !== "preserve") {

                                                        elist[l].text = elist[l].text.replace(/\s+$/g, '');
                                                }

                                                if (elist[l].text.length > 0) {

                                                        state = "after_br";
                                                        l = br_pos + 1;

                                                        if (l >= elist.length) break;
                                                } else {

                                                        elist.splice(l, 1);
                                                        l--;
                                                }
                                        }
                                } else {

                                        if (l >= elist.length || elist[l].kind === "br") {

                                                state = "before_br";
                                                br_pos = l;
                                                l--;
                                        } else {

                                                l++;
                                        }
                                }
                        }

                        pruneEmptySpans(isd_element);
                }

                /* keep element if:
                 * * contains a background image
                 * * <br/>
                 * * if there are children
                 * * if <span> and has text
                 * * if region and showBackground = always
                 */

                if (isd_element.kind === 'div' && imscStyles.byName.backgroundImage.qname in isd_element.styleAttrs || isd_element.kind === 'br' || 'contents' in isd_element && isd_element.contents.length > 0 || isd_element.kind === 'span' && isd_element.text !== null || isd_element.kind === 'region' && isd_element.styleAttrs[imscStyles.byName.showBackground.qname] === 'always') {

                        return {
                                region_id: associated_region_id,
                                element: isd_element
                        };
                }

                return null;
        }

        function constructSpanList(element, elist) {

                if ('contents' in element) {

                        for (var i in element.contents) {
                                constructSpanList(element.contents[i], elist);
                        }
                } else {

                        elist.push(element);
                }
        }

        function pruneEmptySpans(element) {

                if (element.kind === 'br') {

                        return false;
                } else if ('text' in element) {

                        return element.text.length === 0;
                } else if ('contents' in element) {

                        var i = element.contents.length;

                        while (i--) {

                                if (pruneEmptySpans(element.contents[i])) {
                                        element.contents.splice(i, 1);
                                }
                        }

                        return element.contents.length === 0;
                }
        }

        function ISD(tt) {
                this.contents = [];
                this.aspectRatio = tt.aspectRatio;
        }

        function ISDContentElement(ttelem) {

                /* assume the element is a region if it does not have a kind */

                this.kind = ttelem.kind || 'region';

                /* copy id */

                if (ttelem.id) {
                        this.id = ttelem.id;
                }

                /* deep copy of style attributes */
                this.styleAttrs = {};

                for (var sname in ttelem.styleAttrs) {

                        this.styleAttrs[sname] = ttelem.styleAttrs[sname];
                }

                /* TODO: clean this! */

                if ('text' in ttelem) {

                        this.text = ttelem.text;
                } else if (ttelem.kind !== 'br') {

                        this.contents = [];
                }

                if ('space' in ttelem) {

                        this.space = ttelem.space;
                }
        }

        /*
         * ERROR HANDLING UTILITY FUNCTIONS
         * 
         */

        function reportInfo(errorHandler, msg) {

                if (errorHandler && errorHandler.info && errorHandler.info(msg)) throw msg;
        }

        function reportWarning(errorHandler, msg) {

                if (errorHandler && errorHandler.warn && errorHandler.warn(msg)) throw msg;
        }

        function reportError(errorHandler, msg) {

                if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
        }

        function reportFatal(errorHandler, msg) {

                if (errorHandler && errorHandler.fatal) errorHandler.fatal(msg);

                throw msg;
        }
})( false ? undefined : exports, typeof imscNames === 'undefined' ? __webpack_require__(/*! ./names */ "./node_modules/imsc/src/main/js/names.js") : imscNames, typeof imscStyles === 'undefined' ? __webpack_require__(/*! ./styles */ "./node_modules/imsc/src/main/js/styles.js") : imscStyles);

/***/ }),

/***/ "./node_modules/imsc/src/main/js/main.js":
/*!***********************************************!*\
  !*** ./node_modules/imsc/src/main/js/main.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* 
 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

exports.generateISD = __webpack_require__(/*! ./isd */ "./node_modules/imsc/src/main/js/isd.js").generateISD;
exports.fromXML = __webpack_require__(/*! ./doc */ "./node_modules/imsc/src/main/js/doc.js").fromXML;
exports.renderHTML = __webpack_require__(/*! ./html */ "./node_modules/imsc/src/main/js/html.js").render;

/***/ }),

/***/ "./node_modules/imsc/src/main/js/names.js":
/*!************************************************!*\
  !*** ./node_modules/imsc/src/main/js/names.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* 
 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @module imscNames
 */

;
(function (imscNames) {
  // wrapper for non-node envs

  imscNames.ns_tt = "http://www.w3.org/ns/ttml";
  imscNames.ns_tts = "http://www.w3.org/ns/ttml#styling";
  imscNames.ns_ttp = "http://www.w3.org/ns/ttml#parameter";
  imscNames.ns_xml = "http://www.w3.org/XML/1998/namespace";
  imscNames.ns_itts = "http://www.w3.org/ns/ttml/profile/imsc1#styling";
  imscNames.ns_ittp = "http://www.w3.org/ns/ttml/profile/imsc1#parameter";
  imscNames.ns_smpte = "http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt";
  imscNames.ns_ebutts = "urn:ebu:tt:style";
})( false ? undefined : exports);

/***/ }),

/***/ "./node_modules/imsc/src/main/js/styles.js":
/*!*************************************************!*\
  !*** ./node_modules/imsc/src/main/js/styles.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* 
 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @module imscStyles
 */

;
(function (imscStyles, imscNames, imscUtils) {
                    // wrapper for non-node envs

                    function StylingAttributeDefinition(ns, name, initialValue, appliesTo, isInherit, isAnimatable, parseFunc, computeFunc) {
                                        this.name = name;
                                        this.ns = ns;
                                        this.qname = ns + " " + name;
                                        this.inherit = isInherit;
                                        this.animatable = isAnimatable;
                                        this.initial = initialValue;
                                        this.applies = appliesTo;
                                        this.parse = parseFunc;
                                        this.compute = computeFunc;
                    }

                    imscStyles.all = [new StylingAttributeDefinition(imscNames.ns_tts, "backgroundColor", "transparent", ['body', 'div', 'p', 'region', 'span'], false, true, imscUtils.parseColor, null), new StylingAttributeDefinition(imscNames.ns_tts, "color", "white", ['span'], true, true, imscUtils.parseColor, null), new StylingAttributeDefinition(imscNames.ns_tts, "direction", "ltr", ['p', 'span'], true, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "display", "auto", ['body', 'div', 'p', 'region', 'span'], false, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "displayAlign", "before", ['region'], false, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "extent", "auto", ['tt', 'region'], false, true, function (str) {

                                        if (str === "auto") {

                                                            return str;
                                        } else {

                                                            var s = str.split(" ");
                                                            if (s.length !== 2) return null;
                                                            var w = imscUtils.parseLength(s[0]);
                                                            var h = imscUtils.parseLength(s[1]);
                                                            if (!h || !w) return null;
                                                            return { 'h': h, 'w': w };
                                        }
                    }, function (doc, parent, element, attr, context) {

                                        var h;
                                        var w;

                                        if (attr === "auto") {

                                                            h = 1;
                                        } else if (attr.h.unit === "%") {

                                                            h = attr.h.value / 100;
                                        } else if (attr.h.unit === "px") {

                                                            h = attr.h.value / doc.pxDimensions.h;
                                        } else {

                                                            return null;
                                        }

                                        if (attr === "auto") {

                                                            w = 1;
                                        } else if (attr.w.unit === "%") {

                                                            w = attr.w.value / 100;
                                        } else if (attr.w.unit === "px") {

                                                            w = attr.w.value / doc.pxDimensions.w;
                                        } else {

                                                            return null;
                                        }

                                        return { 'h': h, 'w': w };
                    }), new StylingAttributeDefinition(imscNames.ns_tts, "fontFamily", "default", ['span'], true, true, function (str) {
                                        var ffs = str.split(",");
                                        var rslt = [];

                                        for (var i in ffs) {

                                                            if (ffs[i].charAt(0) !== "'" && ffs[i].charAt(0) !== '"') {

                                                                                if (ffs[i] === "default") {

                                                                                                    /* per IMSC1 */

                                                                                                    rslt.push("monospaceSerif");
                                                                                } else {

                                                                                                    rslt.push(ffs[i]);
                                                                                }
                                                            } else {

                                                                                rslt.push(ffs[i]);
                                                            }
                                        }

                                        return rslt;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "fontSize", "1c", ['span'], true, true, imscUtils.parseLength, function (doc, parent, element, attr, context) {

                                        var fs;

                                        if (attr.unit === "%") {

                                                            if (parent !== null) {

                                                                                fs = parent.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value / 100;
                                                            } else {

                                                                                /* region, so percent of 1c */

                                                                                fs = attr.value / 100 / doc.cellResolution.h;
                                                            }
                                        } else if (attr.unit === "em") {

                                                            if (parent !== null) {

                                                                                fs = parent.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value;
                                                            } else {

                                                                                /* region, so percent of 1c */

                                                                                fs = attr.value / doc.cellResolution.h;
                                                            }
                                        } else if (attr.unit === "c") {

                                                            fs = attr.value / doc.cellResolution.h;
                                        } else if (attr.unit === "px") {

                                                            fs = attr.value / doc.pxDimensions.h;
                                        } else {

                                                            return null;
                                        }

                                        return fs;
                    }), new StylingAttributeDefinition(imscNames.ns_tts, "fontStyle", "normal", ['span'], true, true, function (str) {
                                        /* TODO: handle font style */

                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "fontWeight", "normal", ['span'], true, true, function (str) {
                                        /* TODO: handle font weight */

                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "lineHeight", "normal", ['p'], true, true, function (str) {
                                        if (str === "normal") {
                                                            return str;
                                        } else {
                                                            return imscUtils.parseLength(str);
                                        }
                    }, function (doc, parent, element, attr, context) {

                                        var lh;

                                        if (attr === "normal") {

                                                            /* inherit normal per https://github.com/w3c/ttml1/issues/220 */

                                                            lh = attr;
                                        } else if (attr.unit === "%") {

                                                            lh = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value / 100;
                                        } else if (attr.unit === "em") {

                                                            lh = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value;
                                        } else if (attr.unit === "c") {

                                                            lh = attr.value / doc.cellResolution.h;
                                        } else if (attr.unit === "px") {

                                                            /* TODO: handle error if no px dimensions are provided */

                                                            lh = attr.value / doc.pxDimensions.h;
                                        } else {

                                                            return null;
                                        }

                                        /* TODO: create a Length constructor */

                                        return lh;
                    }), new StylingAttributeDefinition(imscNames.ns_tts, "opacity", 1.0, ['region'], false, true, parseFloat, null), new StylingAttributeDefinition(imscNames.ns_tts, "origin", "auto", ['region'], false, true, function (str) {

                                        if (str === "auto") {

                                                            return str;
                                        } else {

                                                            var s = str.split(" ");
                                                            if (s.length !== 2) return null;
                                                            var w = imscUtils.parseLength(s[0]);
                                                            var h = imscUtils.parseLength(s[1]);
                                                            if (!h || !w) return null;
                                                            return { 'h': h, 'w': w };
                                        }
                    }, function (doc, parent, element, attr, context) {

                                        var h;
                                        var w;

                                        if (attr === "auto") {

                                                            h = 0;
                                        } else if (attr.h.unit === "%") {

                                                            h = attr.h.value / 100;
                                        } else if (attr.h.unit === "px") {

                                                            h = attr.h.value / doc.pxDimensions.h;
                                        } else {

                                                            return null;
                                        }

                                        if (attr === "auto") {

                                                            w = 0;
                                        } else if (attr.w.unit === "%") {

                                                            w = attr.w.value / 100;
                                        } else if (attr.w.unit === "px") {

                                                            w = attr.w.value / doc.pxDimensions.w;
                                        } else {

                                                            return null;
                                        }

                                        return { 'h': h, 'w': w };
                    }), new StylingAttributeDefinition(imscNames.ns_tts, "overflow", "hidden", ['region'], false, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "padding", "0px", ['region'], false, true, function (str) {

                                        var s = str.split(" ");
                                        if (s.length > 4) return null;
                                        var r = [];
                                        for (var i in s) {

                                                            var l = imscUtils.parseLength(s[i]);
                                                            if (!l) return null;
                                                            r.push(l);
                                        }

                                        return r;
                    }, function (doc, parent, element, attr, context) {

                                        var padding;

                                        /* TODO: make sure we are in region */

                                        /*
                                         * expand padding shortcuts to 
                                         * [before, end, after, start]
                                         * 
                                         */

                                        if (attr.length === 1) {

                                                            padding = [attr[0], attr[0], attr[0], attr[0]];
                                        } else if (attr.length === 2) {

                                                            padding = [attr[0], attr[1], attr[0], attr[1]];
                                        } else if (attr.length === 3) {

                                                            padding = [attr[0], attr[1], attr[2], attr[1]];
                                        } else if (attr.length === 4) {

                                                            padding = [attr[0], attr[1], attr[2], attr[3]];
                                        } else {

                                                            return null;
                                        }

                                        /* TODO: take into account tts:direction */

                                        /* 
                                         * transform [before, end, after, start] according to writingMode to 
                                         * [top,left,bottom,right]
                                         * 
                                         */

                                        var dir = element.styleAttrs[imscStyles.byName.writingMode.qname];

                                        if (dir === "lrtb" || dir === "lr") {

                                                            padding = [padding[0], padding[3], padding[2], padding[1]];
                                        } else if (dir === "rltb" || dir === "rl") {

                                                            padding = [padding[0], padding[1], padding[2], padding[3]];
                                        } else if (dir === "tblr") {

                                                            padding = [padding[3], padding[0], padding[1], padding[2]];
                                        } else if (dir === "tbrl" || dir === "tb") {

                                                            padding = [padding[3], padding[2], padding[1], padding[0]];
                                        } else {

                                                            return null;
                                        }

                                        var out = [];

                                        for (var i in padding) {

                                                            if (padding[i].value === 0) {

                                                                                out[i] = 0;
                                                            } else if (padding[i].unit === "%") {

                                                                                if (i === "0" || i === "2") {

                                                                                                    out[i] = element.styleAttrs[imscStyles.byName.extent.qname].h * padding[i].value / 100;
                                                                                } else {

                                                                                                    out[i] = element.styleAttrs[imscStyles.byName.extent.qname].w * padding[i].value / 100;
                                                                                }
                                                            } else if (padding[i].unit === "em") {

                                                                                out[i] = element.styleAttrs[imscStyles.byName.fontSize.qname] * padding[i].value;
                                                            } else if (padding[i].unit === "c") {

                                                                                out[i] = padding[i].value / doc.cellResolution.h;
                                                            } else if (padding[i].unit === "px") {

                                                                                if (i === "0" || i === "2") {

                                                                                                    out[i] = padding[i].value / doc.pxDimensions.h;
                                                                                } else {

                                                                                                    out[i] = padding[i].value / doc.pxDimensions.w;
                                                                                }
                                                            } else {

                                                                                return null;
                                                            }
                                        }

                                        return out;
                    }), new StylingAttributeDefinition(imscNames.ns_tts, "showBackground", "always", ['region'], false, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "textAlign", "start", ['p'], true, true, function (str) {
                                        return str;
                    }, function (doc, parent, element, attr, context) {

                                        /* Section 7.16.9 of XSL */

                                        if (attr === "left") {

                                                            return "start";
                                        } else if (attr === "right") {

                                                            return "end";
                                        } else {

                                                            return attr;
                                        }
                    }), new StylingAttributeDefinition(imscNames.ns_tts, "textDecoration", "none", ['span'], true, true, function (str) {
                                        return str.split(" ");
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "textOutline", "none", ['span'], true, true, function (str) {

                                        /*
                                         * returns {c: <color>?, thichness: <length>} | "none"
                                         * 
                                         */

                                        if (str === "none") {

                                                            return str;
                                        } else {

                                                            var r = {};
                                                            var s = str.split(" ");
                                                            if (s.length === 0 || s.length > 2) return null;
                                                            var c = imscUtils.parseColor(s[0]);

                                                            r.color = c;

                                                            if (c !== null) s.shift();

                                                            if (s.length !== 1) return null;

                                                            var l = imscUtils.parseLength(s[0]);

                                                            if (!l) return null;

                                                            r.thickness = l;

                                                            return r;
                                        }
                    }, function (doc, parent, element, attr, context) {

                                        /*
                                         * returns {color: <color>, thickness: <norm length>}
                                         * 
                                         */

                                        if (attr === "none") return attr;

                                        var rslt = {};

                                        if (attr.color === null) {

                                                            rslt.color = element.styleAttrs[imscStyles.byName.color.qname];
                                        } else {

                                                            rslt.color = attr.color;
                                        }

                                        if (attr.thickness.unit === "%") {

                                                            rslt.thickness = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.thickness.value / 100;
                                        } else if (attr.thickness.unit === "em") {

                                                            rslt.thickness = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.thickness.value;
                                        } else if (attr.thickness.unit === "c") {

                                                            rslt.thickness = attr.thickness.value / doc.cellResolution.h;
                                        } else if (attr.thickness.unit === "px") {

                                                            rslt.thickness = attr.thickness.value / doc.pxDimensions.h;
                                        } else {

                                                            return null;
                                        }

                                        return rslt;
                    }), new StylingAttributeDefinition(imscNames.ns_tts, "unicodeBidi", "normal", ['span', 'p'], false, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "visibility", "visible", ['body', 'div', 'p', 'region', 'span'], true, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "wrapOption", "wrap", ['span'], true, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "writingMode", "lrtb", ['region'], false, true, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_tts, "zIndex", "auto", ['region'], false, true, function (str) {

                                        var rslt;

                                        if (str === 'auto') {

                                                            rslt = str;
                                        } else {

                                                            rslt = parseInt(str);

                                                            if (isNaN(rslt)) {
                                                                                rslt = null;
                                                            }
                                        }

                                        return rslt;
                    }, null), new StylingAttributeDefinition(imscNames.ns_ebutts, "linePadding", "0c", ['p'], true, false, imscUtils.parseLength, function (doc, parent, element, attr, context) {
                                        if (attr.unit === "c") {

                                                            return attr.value / doc.cellResolution.h;
                                        } else {

                                                            return null;
                                        }
                    }), new StylingAttributeDefinition(imscNames.ns_ebutts, "multiRowAlign", "auto", ['p'], true, false, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_smpte, "backgroundImage", null, ['div'], false, false, function (str) {
                                        return str;
                    }, null), new StylingAttributeDefinition(imscNames.ns_itts, "forcedDisplay", "false", ['body', 'div', 'p', 'region', 'span'], true, true, function (str) {
                                        return str === 'true' ? true : false;
                    }, null), new StylingAttributeDefinition(imscNames.ns_itts, "fillLineGap", "false", ['p'], true, true, function (str) {
                                        return str === 'true' ? true : false;
                    }, null)];

                    /* TODO: allow null parse function */

                    imscStyles.byQName = {};
                    for (var i in imscStyles.all) {

                                        imscStyles.byQName[imscStyles.all[i].qname] = imscStyles.all[i];
                    }

                    imscStyles.byName = {};
                    for (var j in imscStyles.all) {

                                        imscStyles.byName[imscStyles.all[j].name] = imscStyles.all[j];
                    }
})( false ? undefined : exports, typeof imscNames === 'undefined' ? __webpack_require__(/*! ./names */ "./node_modules/imsc/src/main/js/names.js") : imscNames, typeof imscUtils === 'undefined' ? __webpack_require__(/*! ./utils */ "./node_modules/imsc/src/main/js/utils.js") : imscUtils);

/***/ }),

/***/ "./node_modules/imsc/src/main/js/utils.js":
/*!************************************************!*\
  !*** ./node_modules/imsc/src/main/js/utils.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* 
 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @module imscUtils
 */

;
(function (imscUtils) {
    // wrapper for non-node envs

    /* Documents the error handler interface */

    /**
     * @classdesc Generic interface for handling events. The interface exposes four
     * methods:
     * * <pre>info</pre>: unusual event that does not result in an inconsistent state
     * * <pre>warn</pre>: unexpected event that should not result in an inconsistent state
     * * <pre>error</pre>: unexpected event that may result in an inconsistent state
     * * <pre>fatal</pre>: unexpected event that results in an inconsistent state
     *   and termination of processing
     * Each method takes a single <pre>string</pre> describing the event as argument,
     * and returns a single <pre>boolean</pre>, which terminates processing if <pre>true</pre>.
     *
     * @name ErrorHandler
     * @class
     */

    /*
     * Parses a TTML color expression
     * 
     */

    var HEX_COLOR_RE = /#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?/;
    var DEC_COLOR_RE = /rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
    var DEC_COLORA_RE = /rgba\(\s*(\d+),\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
    var NAMED_COLOR = {
        transparent: [0, 0, 0, 0],
        black: [0, 0, 0, 255],
        silver: [192, 192, 192, 255],
        gray: [128, 128, 128, 255],
        white: [255, 255, 255, 255],
        maroon: [128, 0, 0, 255],
        red: [255, 0, 0, 255],
        purple: [128, 0, 128, 255],
        fuchsia: [255, 0, 255, 255],
        magenta: [255, 0, 255, 255],
        green: [0, 128, 0, 255],
        lime: [0, 255, 0, 255],
        olive: [128, 128, 0, 255],
        yellow: [255, 255, 0, 255],
        navy: [0, 0, 128, 255],
        blue: [0, 0, 255, 255],
        teal: [0, 128, 128, 255],
        aqua: [0, 255, 255, 255],
        cyan: [0, 255, 255, 255]
    };

    imscUtils.parseColor = function (str) {

        var m;

        var r = null;

        var nc = NAMED_COLOR[str.toLowerCase()];

        if (nc !== undefined) {

            r = nc;
        } else if ((m = HEX_COLOR_RE.exec(str)) !== null) {

            r = [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] !== undefined ? parseInt(m[4], 16) : 255];
        } else if ((m = DEC_COLOR_RE.exec(str)) !== null) {

            r = [parseInt(m[1]), parseInt(m[2]), parseInt(m[3]), 255];
        } else if ((m = DEC_COLORA_RE.exec(str)) !== null) {

            r = [parseInt(m[1]), parseInt(m[2]), parseInt(m[3]), parseInt(m[4])];
        }

        return r;
    };

    var LENGTH_RE = /^((?:\+|\-)?\d*(?:\.\d+)?)(px|em|c|%)$/;

    imscUtils.parseLength = function (str) {

        var m;

        var r = null;

        if ((m = LENGTH_RE.exec(str)) !== null) {

            r = { value: parseFloat(m[1]), unit: m[2] };
        }

        return r;
    };
})( false ? undefined : exports);

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function TempCtor() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);
    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

var Readable = __webpack_require__(/*! ./_stream_readable */ "./node_modules/readable-stream/lib/_stream_readable.js");
var Writable = __webpack_require__(/*! ./_stream_writable */ "./node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "./node_modules/readable-stream/lib/_stream_transform.js");

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(/*! util */ 0);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ "./node_modules/readable-stream/lib/internal/streams/BufferList.js");
var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "./node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var util = __webpack_require__(/*! util */ 1);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").PassThrough;

/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "./node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "./node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "./node_modules/readable-stream/lib/_stream_passthrough.js");

/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").Transform;

/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }
  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return buffer.SlowBuffer(size);
};

/***/ }),

/***/ "./node_modules/sax/lib/sax.js":
/*!*************************************!*\
  !*** ./node_modules/sax/lib/sax.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (sax) {
  // wrapper for non-node envs
  sax.parser = function (strict, opt) {
    return new SAXParser(strict, opt);
  };
  sax.SAXParser = SAXParser;
  sax.SAXStream = SAXStream;
  sax.createStream = createStream;

  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
  // since that's the earliest that a buffer overrun could occur.  This way, checks are
  // as rare as required, but as often as necessary to ensure never crossing this bound.
  // Furthermore, buffers are only tested at most once per write(), so passing a very
  // large string into write() might have undesirable effects, but this is manageable by
  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
  // edge case, result in creating at most one complete copy of the string passed in.
  // Set to Infinity to have unlimited buffers.
  sax.MAX_BUFFER_LENGTH = 64 * 1024;

  var buffers = ['comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype', 'procInstName', 'procInstBody', 'entity', 'attribName', 'attribValue', 'cdata', 'script'];

  sax.EVENTS = ['text', 'processinginstruction', 'sgmldeclaration', 'doctype', 'comment', 'opentagstart', 'attribute', 'opentag', 'closetag', 'opencdata', 'cdata', 'closecdata', 'error', 'end', 'ready', 'script', 'opennamespace', 'closenamespace'];

  function SAXParser(strict, opt) {
    if (!(this instanceof SAXParser)) {
      return new SAXParser(strict, opt);
    }

    var parser = this;
    clearBuffers(parser);
    parser.q = parser.c = '';
    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
    parser.opt = opt || {};
    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
    parser.tags = [];
    parser.closed = parser.closedRoot = parser.sawRoot = false;
    parser.tag = parser.error = null;
    parser.strict = !!strict;
    parser.noscript = !!(strict || parser.opt.noscript);
    parser.state = S.BEGIN;
    parser.strictEntities = parser.opt.strictEntities;
    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
    parser.attribList = [];

    // namespaces form a prototype chain.
    // it always points at the current tag,
    // which protos to its parent tag.
    if (parser.opt.xmlns) {
      parser.ns = Object.create(rootNS);
    }

    // mostly just for error reporting
    parser.trackPosition = parser.opt.position !== false;
    if (parser.trackPosition) {
      parser.position = parser.line = parser.column = 0;
    }
    emit(parser, 'onready');
  }

  if (!Object.create) {
    Object.create = function (o) {
      function F() {}
      F.prototype = o;
      var newf = new F();
      return newf;
    };
  }

  if (!Object.keys) {
    Object.keys = function (o) {
      var a = [];
      for (var i in o) {
        if (o.hasOwnProperty(i)) a.push(i);
      }return a;
    };
  }

  function checkBufferLength(parser) {
    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
    var maxActual = 0;
    for (var i = 0, l = buffers.length; i < l; i++) {
      var len = parser[buffers[i]].length;
      if (len > maxAllowed) {
        // Text/cdata nodes can get big, and since they're buffered,
        // we can get here under normal conditions.
        // Avoid issues by emitting the text node now,
        // so at least it won't get any bigger.
        switch (buffers[i]) {
          case 'textNode':
            closeText(parser);
            break;

          case 'cdata':
            emitNode(parser, 'oncdata', parser.cdata);
            parser.cdata = '';
            break;

          case 'script':
            emitNode(parser, 'onscript', parser.script);
            parser.script = '';
            break;

          default:
            error(parser, 'Max buffer length exceeded: ' + buffers[i]);
        }
      }
      maxActual = Math.max(maxActual, len);
    }
    // schedule the next check for the earliest possible buffer overrun.
    var m = sax.MAX_BUFFER_LENGTH - maxActual;
    parser.bufferCheckPosition = m + parser.position;
  }

  function clearBuffers(parser) {
    for (var i = 0, l = buffers.length; i < l; i++) {
      parser[buffers[i]] = '';
    }
  }

  function flushBuffers(parser) {
    closeText(parser);
    if (parser.cdata !== '') {
      emitNode(parser, 'oncdata', parser.cdata);
      parser.cdata = '';
    }
    if (parser.script !== '') {
      emitNode(parser, 'onscript', parser.script);
      parser.script = '';
    }
  }

  SAXParser.prototype = {
    end: function end() {
      _end(this);
    },
    write: write,
    resume: function resume() {
      this.error = null;return this;
    },
    close: function close() {
      return this.write(null);
    },
    flush: function flush() {
      flushBuffers(this);
    }
  };

  var Stream;
  try {
    Stream = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js").Stream;
  } catch (ex) {
    Stream = function Stream() {};
  }

  var streamWraps = sax.EVENTS.filter(function (ev) {
    return ev !== 'error' && ev !== 'end';
  });

  function createStream(strict, opt) {
    return new SAXStream(strict, opt);
  }

  function SAXStream(strict, opt) {
    if (!(this instanceof SAXStream)) {
      return new SAXStream(strict, opt);
    }

    Stream.apply(this);

    this._parser = new SAXParser(strict, opt);
    this.writable = true;
    this.readable = true;

    var me = this;

    this._parser.onend = function () {
      me.emit('end');
    };

    this._parser.onerror = function (er) {
      me.emit('error', er);

      // if didn't throw, then means error was handled.
      // go ahead and clear error, so we can write again.
      me._parser.error = null;
    };

    this._decoder = null;

    streamWraps.forEach(function (ev) {
      Object.defineProperty(me, 'on' + ev, {
        get: function get() {
          return me._parser['on' + ev];
        },
        set: function set(h) {
          if (!h) {
            me.removeAllListeners(ev);
            me._parser['on' + ev] = h;
            return h;
          }
          me.on(ev, h);
        },
        enumerable: true,
        configurable: false
      });
    });
  }

  SAXStream.prototype = Object.create(Stream.prototype, {
    constructor: {
      value: SAXStream
    }
  });

  SAXStream.prototype.write = function (data) {
    if (typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function' && Buffer.isBuffer(data)) {
      if (!this._decoder) {
        var SD = __webpack_require__(/*! string_decoder */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
        this._decoder = new SD('utf8');
      }
      data = this._decoder.write(data);
    }

    this._parser.write(data.toString());
    this.emit('data', data);
    return true;
  };

  SAXStream.prototype.end = function (chunk) {
    if (chunk && chunk.length) {
      this.write(chunk);
    }
    this._parser.end();
    return true;
  };

  SAXStream.prototype.on = function (ev, handler) {
    var me = this;
    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
      me._parser['on' + ev] = function () {
        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
        args.splice(0, 0, ev);
        me.emit.apply(me, args);
      };
    }

    return Stream.prototype.on.call(me, ev, handler);
  };

  // character classes and tokens
  var whitespace = '\r\n\t ';

  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  var number = '0124356789';
  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

  // (Letter | "_" | ":")
  var quote = '\'"';
  var attribEnd = whitespace + '>';
  var CDATA = '[CDATA[';
  var DOCTYPE = 'DOCTYPE';
  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE

    // turn all the string character sets into character class objects.
  };whitespace = charClass(whitespace);
  number = charClass(number);
  letter = charClass(letter);

  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
  // This implementation works on strings, a single character at a time
  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
  // without a significant breaking change to either this  parser, or the
  // JavaScript language.  Implementation of an emoji-capable xml parser
  // is left as an exercise for the reader.
  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;

  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;

  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;

  quote = charClass(quote);
  attribEnd = charClass(attribEnd);

  function charClass(str) {
    return str.split('').reduce(function (s, c) {
      s[c] = true;
      return s;
    }, {});
  }

  function isRegExp(c) {
    return Object.prototype.toString.call(c) === '[object RegExp]';
  }

  function is(charclass, c) {
    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c];
  }

  function not(charclass, c) {
    return !is(charclass, c);
  }

  var S = 0;
  sax.STATE = {
    BEGIN: S++, // leading byte order mark or whitespace
    BEGIN_WHITESPACE: S++, // leading whitespace
    TEXT: S++, // general stuff
    TEXT_ENTITY: S++, // &amp and such.
    OPEN_WAKA: S++, // <
    SGML_DECL: S++, // <!BLARG
    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
    DOCTYPE: S++, // <!DOCTYPE
    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
    COMMENT_STARTING: S++, // <!-
    COMMENT: S++, // <!--
    COMMENT_ENDING: S++, // <!-- blah -
    COMMENT_ENDED: S++, // <!-- blah --
    CDATA: S++, // <![CDATA[ something
    CDATA_ENDING: S++, // ]
    CDATA_ENDING_2: S++, // ]]
    PROC_INST: S++, // <?hi
    PROC_INST_BODY: S++, // <?hi there
    PROC_INST_ENDING: S++, // <?hi "there" ?
    OPEN_TAG: S++, // <strong
    OPEN_TAG_SLASH: S++, // <strong /
    ATTRIB: S++, // <a
    ATTRIB_NAME: S++, // <a foo
    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
    ATTRIB_VALUE: S++, // <a foo=
    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
    CLOSE_TAG: S++, // </a
    CLOSE_TAG_SAW_WHITE: S++, // </a   >
    SCRIPT: S++, // <script> ...
    SCRIPT_ENDING: S++ // <script> ... <
  };

  sax.XML_ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'"
  };

  sax.ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'",
    'AElig': 198,
    'Aacute': 193,
    'Acirc': 194,
    'Agrave': 192,
    'Aring': 197,
    'Atilde': 195,
    'Auml': 196,
    'Ccedil': 199,
    'ETH': 208,
    'Eacute': 201,
    'Ecirc': 202,
    'Egrave': 200,
    'Euml': 203,
    'Iacute': 205,
    'Icirc': 206,
    'Igrave': 204,
    'Iuml': 207,
    'Ntilde': 209,
    'Oacute': 211,
    'Ocirc': 212,
    'Ograve': 210,
    'Oslash': 216,
    'Otilde': 213,
    'Ouml': 214,
    'THORN': 222,
    'Uacute': 218,
    'Ucirc': 219,
    'Ugrave': 217,
    'Uuml': 220,
    'Yacute': 221,
    'aacute': 225,
    'acirc': 226,
    'aelig': 230,
    'agrave': 224,
    'aring': 229,
    'atilde': 227,
    'auml': 228,
    'ccedil': 231,
    'eacute': 233,
    'ecirc': 234,
    'egrave': 232,
    'eth': 240,
    'euml': 235,
    'iacute': 237,
    'icirc': 238,
    'igrave': 236,
    'iuml': 239,
    'ntilde': 241,
    'oacute': 243,
    'ocirc': 244,
    'ograve': 242,
    'oslash': 248,
    'otilde': 245,
    'ouml': 246,
    'szlig': 223,
    'thorn': 254,
    'uacute': 250,
    'ucirc': 251,
    'ugrave': 249,
    'uuml': 252,
    'yacute': 253,
    'yuml': 255,
    'copy': 169,
    'reg': 174,
    'nbsp': 160,
    'iexcl': 161,
    'cent': 162,
    'pound': 163,
    'curren': 164,
    'yen': 165,
    'brvbar': 166,
    'sect': 167,
    'uml': 168,
    'ordf': 170,
    'laquo': 171,
    'not': 172,
    'shy': 173,
    'macr': 175,
    'deg': 176,
    'plusmn': 177,
    'sup1': 185,
    'sup2': 178,
    'sup3': 179,
    'acute': 180,
    'micro': 181,
    'para': 182,
    'middot': 183,
    'cedil': 184,
    'ordm': 186,
    'raquo': 187,
    'frac14': 188,
    'frac12': 189,
    'frac34': 190,
    'iquest': 191,
    'times': 215,
    'divide': 247,
    'OElig': 338,
    'oelig': 339,
    'Scaron': 352,
    'scaron': 353,
    'Yuml': 376,
    'fnof': 402,
    'circ': 710,
    'tilde': 732,
    'Alpha': 913,
    'Beta': 914,
    'Gamma': 915,
    'Delta': 916,
    'Epsilon': 917,
    'Zeta': 918,
    'Eta': 919,
    'Theta': 920,
    'Iota': 921,
    'Kappa': 922,
    'Lambda': 923,
    'Mu': 924,
    'Nu': 925,
    'Xi': 926,
    'Omicron': 927,
    'Pi': 928,
    'Rho': 929,
    'Sigma': 931,
    'Tau': 932,
    'Upsilon': 933,
    'Phi': 934,
    'Chi': 935,
    'Psi': 936,
    'Omega': 937,
    'alpha': 945,
    'beta': 946,
    'gamma': 947,
    'delta': 948,
    'epsilon': 949,
    'zeta': 950,
    'eta': 951,
    'theta': 952,
    'iota': 953,
    'kappa': 954,
    'lambda': 955,
    'mu': 956,
    'nu': 957,
    'xi': 958,
    'omicron': 959,
    'pi': 960,
    'rho': 961,
    'sigmaf': 962,
    'sigma': 963,
    'tau': 964,
    'upsilon': 965,
    'phi': 966,
    'chi': 967,
    'psi': 968,
    'omega': 969,
    'thetasym': 977,
    'upsih': 978,
    'piv': 982,
    'ensp': 8194,
    'emsp': 8195,
    'thinsp': 8201,
    'zwnj': 8204,
    'zwj': 8205,
    'lrm': 8206,
    'rlm': 8207,
    'ndash': 8211,
    'mdash': 8212,
    'lsquo': 8216,
    'rsquo': 8217,
    'sbquo': 8218,
    'ldquo': 8220,
    'rdquo': 8221,
    'bdquo': 8222,
    'dagger': 8224,
    'Dagger': 8225,
    'bull': 8226,
    'hellip': 8230,
    'permil': 8240,
    'prime': 8242,
    'Prime': 8243,
    'lsaquo': 8249,
    'rsaquo': 8250,
    'oline': 8254,
    'frasl': 8260,
    'euro': 8364,
    'image': 8465,
    'weierp': 8472,
    'real': 8476,
    'trade': 8482,
    'alefsym': 8501,
    'larr': 8592,
    'uarr': 8593,
    'rarr': 8594,
    'darr': 8595,
    'harr': 8596,
    'crarr': 8629,
    'lArr': 8656,
    'uArr': 8657,
    'rArr': 8658,
    'dArr': 8659,
    'hArr': 8660,
    'forall': 8704,
    'part': 8706,
    'exist': 8707,
    'empty': 8709,
    'nabla': 8711,
    'isin': 8712,
    'notin': 8713,
    'ni': 8715,
    'prod': 8719,
    'sum': 8721,
    'minus': 8722,
    'lowast': 8727,
    'radic': 8730,
    'prop': 8733,
    'infin': 8734,
    'ang': 8736,
    'and': 8743,
    'or': 8744,
    'cap': 8745,
    'cup': 8746,
    'int': 8747,
    'there4': 8756,
    'sim': 8764,
    'cong': 8773,
    'asymp': 8776,
    'ne': 8800,
    'equiv': 8801,
    'le': 8804,
    'ge': 8805,
    'sub': 8834,
    'sup': 8835,
    'nsub': 8836,
    'sube': 8838,
    'supe': 8839,
    'oplus': 8853,
    'otimes': 8855,
    'perp': 8869,
    'sdot': 8901,
    'lceil': 8968,
    'rceil': 8969,
    'lfloor': 8970,
    'rfloor': 8971,
    'lang': 9001,
    'rang': 9002,
    'loz': 9674,
    'spades': 9824,
    'clubs': 9827,
    'hearts': 9829,
    'diams': 9830
  };

  Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key];
    var s = typeof e === 'number' ? String.fromCharCode(e) : e;
    sax.ENTITIES[key] = s;
  });

  for (var s in sax.STATE) {
    sax.STATE[sax.STATE[s]] = s;
  }

  // shorthand
  S = sax.STATE;

  function emit(parser, event, data) {
    parser[event] && parser[event](data);
  }

  function emitNode(parser, nodeType, data) {
    if (parser.textNode) closeText(parser);
    emit(parser, nodeType, data);
  }

  function closeText(parser) {
    parser.textNode = textopts(parser.opt, parser.textNode);
    if (parser.textNode) emit(parser, 'ontext', parser.textNode);
    parser.textNode = '';
  }

  function textopts(opt, text) {
    if (opt.trim) text = text.trim();
    if (opt.normalize) text = text.replace(/\s+/g, ' ');
    return text;
  }

  function error(parser, er) {
    closeText(parser);
    if (parser.trackPosition) {
      er += '\nLine: ' + parser.line + '\nColumn: ' + parser.column + '\nChar: ' + parser.c;
    }
    er = new Error(er);
    parser.error = er;
    emit(parser, 'onerror', er);
    return parser;
  }

  function _end(parser) {
    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');
    if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
      error(parser, 'Unexpected end');
    }
    closeText(parser);
    parser.c = '';
    parser.closed = true;
    emit(parser, 'onend');
    SAXParser.call(parser, parser.strict, parser.opt);
    return parser;
  }

  function strictFail(parser, message) {
    if ((typeof parser === 'undefined' ? 'undefined' : _typeof(parser)) !== 'object' || !(parser instanceof SAXParser)) {
      throw new Error('bad call to strictFail');
    }
    if (parser.strict) {
      error(parser, message);
    }
  }

  function newTag(parser) {
    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
    var parent = parser.tags[parser.tags.length - 1] || parser;
    var tag = parser.tag = { name: parser.tagName, attributes: {}

      // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
    };if (parser.opt.xmlns) {
      tag.ns = parent.ns;
    }
    parser.attribList.length = 0;
    emitNode(parser, 'onopentagstart', tag);
  }

  function qname(name, attribute) {
    var i = name.indexOf(':');
    var qualName = i < 0 ? ['', name] : name.split(':');
    var prefix = qualName[0];
    var local = qualName[1];

    // <x "xmlns"="http://foo">
    if (attribute && name === 'xmlns') {
      prefix = 'xmlns';
      local = '';
    }

    return { prefix: prefix, local: local };
  }

  function attrib(parser) {
    if (!parser.strict) {
      parser.attribName = parser.attribName[parser.looseCase]();
    }

    if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
      parser.attribName = parser.attribValue = '';
      return;
    }

    if (parser.opt.xmlns) {
      var qn = qname(parser.attribName, true);
      var prefix = qn.prefix;
      var local = qn.local;

      if (prefix === 'xmlns') {
        // namespace binding attribute. push the binding into scope
        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
          strictFail(parser, 'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue);
        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
          strictFail(parser, 'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue);
        } else {
          var tag = parser.tag;
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (tag.ns === parent.ns) {
            tag.ns = Object.create(parent.ns);
          }
          tag.ns[local] = parser.attribValue;
        }
      }

      // defer onattribute events until all attributes have been seen
      // so any new bindings can take effect. preserve attribute order
      // so deferred events can be emitted in document order
      parser.attribList.push([parser.attribName, parser.attribValue]);
    } else {
      // in non-xmlns mode, we can emit the event right away
      parser.tag.attributes[parser.attribName] = parser.attribValue;
      emitNode(parser, 'onattribute', {
        name: parser.attribName,
        value: parser.attribValue
      });
    }

    parser.attribName = parser.attribValue = '';
  }

  function openTag(parser, selfClosing) {
    if (parser.opt.xmlns) {
      // emit namespace binding events
      var tag = parser.tag;

      // add namespace info to tag
      var qn = qname(parser.tagName);
      tag.prefix = qn.prefix;
      tag.local = qn.local;
      tag.uri = tag.ns[qn.prefix] || '';

      if (tag.prefix && !tag.uri) {
        strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(parser.tagName));
        tag.uri = qn.prefix;
      }

      var parent = parser.tags[parser.tags.length - 1] || parser;
      if (tag.ns && parent.ns !== tag.ns) {
        Object.keys(tag.ns).forEach(function (p) {
          emitNode(parser, 'onopennamespace', {
            prefix: p,
            uri: tag.ns[p]
          });
        });
      }

      // handle deferred onattribute events
      // Note: do not apply default ns to attributes:
      //   http://www.w3.org/TR/REC-xml-names/#defaulting
      for (var i = 0, l = parser.attribList.length; i < l; i++) {
        var nv = parser.attribList[i];
        var name = nv[0];
        var value = nv[1];
        var qualName = qname(name, true);
        var prefix = qualName.prefix;
        var local = qualName.local;
        var uri = prefix === '' ? '' : tag.ns[prefix] || '';
        var a = {
          name: name,
          value: value,
          prefix: prefix,
          local: local,
          uri: uri

          // if there's any attributes with an undefined namespace,
          // then fail on them now.
        };if (prefix && prefix !== 'xmlns' && !uri) {
          strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(prefix));
          a.uri = prefix;
        }
        parser.tag.attributes[name] = a;
        emitNode(parser, 'onattribute', a);
      }
      parser.attribList.length = 0;
    }

    parser.tag.isSelfClosing = !!selfClosing;

    // process the tag
    parser.sawRoot = true;
    parser.tags.push(parser.tag);
    emitNode(parser, 'onopentag', parser.tag);
    if (!selfClosing) {
      // special case for <script> in non-strict mode.
      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
        parser.state = S.SCRIPT;
      } else {
        parser.state = S.TEXT;
      }
      parser.tag = null;
      parser.tagName = '';
    }
    parser.attribName = parser.attribValue = '';
    parser.attribList.length = 0;
  }

  function closeTag(parser) {
    if (!parser.tagName) {
      strictFail(parser, 'Weird empty close tag.');
      parser.textNode += '</>';
      parser.state = S.TEXT;
      return;
    }

    if (parser.script) {
      if (parser.tagName !== 'script') {
        parser.script += '</' + parser.tagName + '>';
        parser.tagName = '';
        parser.state = S.SCRIPT;
        return;
      }
      emitNode(parser, 'onscript', parser.script);
      parser.script = '';
    }

    // first make sure that the closing tag actually exists.
    // <a><b></c></b></a> will close everything, otherwise.
    var t = parser.tags.length;
    var tagName = parser.tagName;
    if (!parser.strict) {
      tagName = tagName[parser.looseCase]();
    }
    var closeTo = tagName;
    while (t--) {
      var close = parser.tags[t];
      if (close.name !== closeTo) {
        // fail the first time in strict mode
        strictFail(parser, 'Unexpected close tag');
      } else {
        break;
      }
    }

    // didn't find it.  we already failed for strict, so just abort.
    if (t < 0) {
      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
      parser.textNode += '</' + parser.tagName + '>';
      parser.state = S.TEXT;
      return;
    }
    parser.tagName = tagName;
    var s = parser.tags.length;
    while (s-- > t) {
      var tag = parser.tag = parser.tags.pop();
      parser.tagName = parser.tag.name;
      emitNode(parser, 'onclosetag', parser.tagName);

      var x = {};
      for (var i in tag.ns) {
        x[i] = tag.ns[i];
      }

      var parent = parser.tags[parser.tags.length - 1] || parser;
      if (parser.opt.xmlns && tag.ns !== parent.ns) {
        // remove namespace bindings introduced by tag
        Object.keys(tag.ns).forEach(function (p) {
          var n = tag.ns[p];
          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n });
        });
      }
    }
    if (t === 0) parser.closedRoot = true;
    parser.tagName = parser.attribValue = parser.attribName = '';
    parser.attribList.length = 0;
    parser.state = S.TEXT;
  }

  function parseEntity(parser) {
    var entity = parser.entity;
    var entityLC = entity.toLowerCase();
    var num;
    var numStr = '';

    if (parser.ENTITIES[entity]) {
      return parser.ENTITIES[entity];
    }
    if (parser.ENTITIES[entityLC]) {
      return parser.ENTITIES[entityLC];
    }
    entity = entityLC;
    if (entity.charAt(0) === '#') {
      if (entity.charAt(1) === 'x') {
        entity = entity.slice(2);
        num = parseInt(entity, 16);
        numStr = num.toString(16);
      } else {
        entity = entity.slice(1);
        num = parseInt(entity, 10);
        numStr = num.toString(10);
      }
    }
    entity = entity.replace(/^0+/, '');
    if (numStr.toLowerCase() !== entity) {
      strictFail(parser, 'Invalid character entity');
      return '&' + parser.entity + ';';
    }

    return String.fromCodePoint(num);
  }

  function beginWhiteSpace(parser, c) {
    if (c === '<') {
      parser.state = S.OPEN_WAKA;
      parser.startTagPosition = parser.position;
    } else if (not(whitespace, c)) {
      // have to process this as a text node.
      // weird, but happens.
      strictFail(parser, 'Non-whitespace before first tag.');
      parser.textNode = c;
      parser.state = S.TEXT;
    }
  }

  function charAt(chunk, i) {
    var result = '';
    if (i < chunk.length) {
      result = chunk.charAt(i);
    }
    return result;
  }

  function write(chunk) {
    var parser = this;
    if (this.error) {
      throw this.error;
    }
    if (parser.closed) {
      return error(parser, 'Cannot write after close. Assign an onready handler.');
    }
    if (chunk === null) {
      return _end(parser);
    }
    if ((typeof chunk === 'undefined' ? 'undefined' : _typeof(chunk)) === 'object') {
      chunk = chunk.toString();
    }
    var i = 0;
    var c = '';
    while (true) {
      c = charAt(chunk, i++);
      parser.c = c;
      if (!c) {
        break;
      }
      if (parser.trackPosition) {
        parser.position++;
        if (c === '\n') {
          parser.line++;
          parser.column = 0;
        } else {
          parser.column++;
        }
      }
      switch (parser.state) {
        case S.BEGIN:
          parser.state = S.BEGIN_WHITESPACE;
          if (c === '\uFEFF') {
            continue;
          }
          beginWhiteSpace(parser, c);
          continue;

        case S.BEGIN_WHITESPACE:
          beginWhiteSpace(parser, c);
          continue;

        case S.TEXT:
          if (parser.sawRoot && !parser.closedRoot) {
            var starti = i - 1;
            while (c && c !== '<' && c !== '&') {
              c = charAt(chunk, i++);
              if (c && parser.trackPosition) {
                parser.position++;
                if (c === '\n') {
                  parser.line++;
                  parser.column = 0;
                } else {
                  parser.column++;
                }
              }
            }
            parser.textNode += chunk.substring(starti, i - 1);
          }
          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
            parser.state = S.OPEN_WAKA;
            parser.startTagPosition = parser.position;
          } else {
            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
              strictFail(parser, 'Text data outside of root node.');
            }
            if (c === '&') {
              parser.state = S.TEXT_ENTITY;
            } else {
              parser.textNode += c;
            }
          }
          continue;

        case S.SCRIPT:
          // only non-strict
          if (c === '<') {
            parser.state = S.SCRIPT_ENDING;
          } else {
            parser.script += c;
          }
          continue;

        case S.SCRIPT_ENDING:
          if (c === '/') {
            parser.state = S.CLOSE_TAG;
          } else {
            parser.script += '<' + c;
            parser.state = S.SCRIPT;
          }
          continue;

        case S.OPEN_WAKA:
          // either a /, ?, !, or text is coming next.
          if (c === '!') {
            parser.state = S.SGML_DECL;
            parser.sgmlDecl = '';
          } else if (is(whitespace, c)) {
            // wait for it...
          } else if (is(nameStart, c)) {
            parser.state = S.OPEN_TAG;
            parser.tagName = c;
          } else if (c === '/') {
            parser.state = S.CLOSE_TAG;
            parser.tagName = '';
          } else if (c === '?') {
            parser.state = S.PROC_INST;
            parser.procInstName = parser.procInstBody = '';
          } else {
            strictFail(parser, 'Unencoded <');
            // if there was some whitespace, then add that in.
            if (parser.startTagPosition + 1 < parser.position) {
              var pad = parser.position - parser.startTagPosition;
              c = new Array(pad).join(' ') + c;
            }
            parser.textNode += '<' + c;
            parser.state = S.TEXT;
          }
          continue;

        case S.SGML_DECL:
          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
            emitNode(parser, 'onopencdata');
            parser.state = S.CDATA;
            parser.sgmlDecl = '';
            parser.cdata = '';
          } else if (parser.sgmlDecl + c === '--') {
            parser.state = S.COMMENT;
            parser.comment = '';
            parser.sgmlDecl = '';
          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
            parser.state = S.DOCTYPE;
            if (parser.doctype || parser.sawRoot) {
              strictFail(parser, 'Inappropriately located doctype declaration');
            }
            parser.doctype = '';
            parser.sgmlDecl = '';
          } else if (c === '>') {
            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
            parser.sgmlDecl = '';
            parser.state = S.TEXT;
          } else if (is(quote, c)) {
            parser.state = S.SGML_DECL_QUOTED;
            parser.sgmlDecl += c;
          } else {
            parser.sgmlDecl += c;
          }
          continue;

        case S.SGML_DECL_QUOTED:
          if (c === parser.q) {
            parser.state = S.SGML_DECL;
            parser.q = '';
          }
          parser.sgmlDecl += c;
          continue;

        case S.DOCTYPE:
          if (c === '>') {
            parser.state = S.TEXT;
            emitNode(parser, 'ondoctype', parser.doctype);
            parser.doctype = true; // just remember that we saw it.
          } else {
            parser.doctype += c;
            if (c === '[') {
              parser.state = S.DOCTYPE_DTD;
            } else if (is(quote, c)) {
              parser.state = S.DOCTYPE_QUOTED;
              parser.q = c;
            }
          }
          continue;

        case S.DOCTYPE_QUOTED:
          parser.doctype += c;
          if (c === parser.q) {
            parser.q = '';
            parser.state = S.DOCTYPE;
          }
          continue;

        case S.DOCTYPE_DTD:
          parser.doctype += c;
          if (c === ']') {
            parser.state = S.DOCTYPE;
          } else if (is(quote, c)) {
            parser.state = S.DOCTYPE_DTD_QUOTED;
            parser.q = c;
          }
          continue;

        case S.DOCTYPE_DTD_QUOTED:
          parser.doctype += c;
          if (c === parser.q) {
            parser.state = S.DOCTYPE_DTD;
            parser.q = '';
          }
          continue;

        case S.COMMENT:
          if (c === '-') {
            parser.state = S.COMMENT_ENDING;
          } else {
            parser.comment += c;
          }
          continue;

        case S.COMMENT_ENDING:
          if (c === '-') {
            parser.state = S.COMMENT_ENDED;
            parser.comment = textopts(parser.opt, parser.comment);
            if (parser.comment) {
              emitNode(parser, 'oncomment', parser.comment);
            }
            parser.comment = '';
          } else {
            parser.comment += '-' + c;
            parser.state = S.COMMENT;
          }
          continue;

        case S.COMMENT_ENDED:
          if (c !== '>') {
            strictFail(parser, 'Malformed comment');
            // allow <!-- blah -- bloo --> in non-strict mode,
            // which is a comment of " blah -- bloo "
            parser.comment += '--' + c;
            parser.state = S.COMMENT;
          } else {
            parser.state = S.TEXT;
          }
          continue;

        case S.CDATA:
          if (c === ']') {
            parser.state = S.CDATA_ENDING;
          } else {
            parser.cdata += c;
          }
          continue;

        case S.CDATA_ENDING:
          if (c === ']') {
            parser.state = S.CDATA_ENDING_2;
          } else {
            parser.cdata += ']' + c;
            parser.state = S.CDATA;
          }
          continue;

        case S.CDATA_ENDING_2:
          if (c === '>') {
            if (parser.cdata) {
              emitNode(parser, 'oncdata', parser.cdata);
            }
            emitNode(parser, 'onclosecdata');
            parser.cdata = '';
            parser.state = S.TEXT;
          } else if (c === ']') {
            parser.cdata += ']';
          } else {
            parser.cdata += ']]' + c;
            parser.state = S.CDATA;
          }
          continue;

        case S.PROC_INST:
          if (c === '?') {
            parser.state = S.PROC_INST_ENDING;
          } else if (is(whitespace, c)) {
            parser.state = S.PROC_INST_BODY;
          } else {
            parser.procInstName += c;
          }
          continue;

        case S.PROC_INST_BODY:
          if (!parser.procInstBody && is(whitespace, c)) {
            continue;
          } else if (c === '?') {
            parser.state = S.PROC_INST_ENDING;
          } else {
            parser.procInstBody += c;
          }
          continue;

        case S.PROC_INST_ENDING:
          if (c === '>') {
            emitNode(parser, 'onprocessinginstruction', {
              name: parser.procInstName,
              body: parser.procInstBody
            });
            parser.procInstName = parser.procInstBody = '';
            parser.state = S.TEXT;
          } else {
            parser.procInstBody += '?' + c;
            parser.state = S.PROC_INST_BODY;
          }
          continue;

        case S.OPEN_TAG:
          if (is(nameBody, c)) {
            parser.tagName += c;
          } else {
            newTag(parser);
            if (c === '>') {
              openTag(parser);
            } else if (c === '/') {
              parser.state = S.OPEN_TAG_SLASH;
            } else {
              if (not(whitespace, c)) {
                strictFail(parser, 'Invalid character in tag name');
              }
              parser.state = S.ATTRIB;
            }
          }
          continue;

        case S.OPEN_TAG_SLASH:
          if (c === '>') {
            openTag(parser, true);
            closeTag(parser);
          } else {
            strictFail(parser, 'Forward-slash in opening tag not followed by >');
            parser.state = S.ATTRIB;
          }
          continue;

        case S.ATTRIB:
          // haven't read the attribute name yet.
          if (is(whitespace, c)) {
            continue;
          } else if (c === '>') {
            openTag(parser);
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH;
          } else if (is(nameStart, c)) {
            parser.attribName = c;
            parser.attribValue = '';
            parser.state = S.ATTRIB_NAME;
          } else {
            strictFail(parser, 'Invalid attribute name');
          }
          continue;

        case S.ATTRIB_NAME:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE;
          } else if (c === '>') {
            strictFail(parser, 'Attribute without value');
            parser.attribValue = parser.attribName;
            attrib(parser);
            openTag(parser);
          } else if (is(whitespace, c)) {
            parser.state = S.ATTRIB_NAME_SAW_WHITE;
          } else if (is(nameBody, c)) {
            parser.attribName += c;
          } else {
            strictFail(parser, 'Invalid attribute name');
          }
          continue;

        case S.ATTRIB_NAME_SAW_WHITE:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE;
          } else if (is(whitespace, c)) {
            continue;
          } else {
            strictFail(parser, 'Attribute without value');
            parser.tag.attributes[parser.attribName] = '';
            parser.attribValue = '';
            emitNode(parser, 'onattribute', {
              name: parser.attribName,
              value: ''
            });
            parser.attribName = '';
            if (c === '>') {
              openTag(parser);
            } else if (is(nameStart, c)) {
              parser.attribName = c;
              parser.state = S.ATTRIB_NAME;
            } else {
              strictFail(parser, 'Invalid attribute name');
              parser.state = S.ATTRIB;
            }
          }
          continue;

        case S.ATTRIB_VALUE:
          if (is(whitespace, c)) {
            continue;
          } else if (is(quote, c)) {
            parser.q = c;
            parser.state = S.ATTRIB_VALUE_QUOTED;
          } else {
            strictFail(parser, 'Unquoted attribute value');
            parser.state = S.ATTRIB_VALUE_UNQUOTED;
            parser.attribValue = c;
          }
          continue;

        case S.ATTRIB_VALUE_QUOTED:
          if (c !== parser.q) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_Q;
            } else {
              parser.attribValue += c;
            }
            continue;
          }
          attrib(parser);
          parser.q = '';
          parser.state = S.ATTRIB_VALUE_CLOSED;
          continue;

        case S.ATTRIB_VALUE_CLOSED:
          if (is(whitespace, c)) {
            parser.state = S.ATTRIB;
          } else if (c === '>') {
            openTag(parser);
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH;
          } else if (is(nameStart, c)) {
            strictFail(parser, 'No whitespace between attributes');
            parser.attribName = c;
            parser.attribValue = '';
            parser.state = S.ATTRIB_NAME;
          } else {
            strictFail(parser, 'Invalid attribute name');
          }
          continue;

        case S.ATTRIB_VALUE_UNQUOTED:
          if (not(attribEnd, c)) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_U;
            } else {
              parser.attribValue += c;
            }
            continue;
          }
          attrib(parser);
          if (c === '>') {
            openTag(parser);
          } else {
            parser.state = S.ATTRIB;
          }
          continue;

        case S.CLOSE_TAG:
          if (!parser.tagName) {
            if (is(whitespace, c)) {
              continue;
            } else if (not(nameStart, c)) {
              if (parser.script) {
                parser.script += '</' + c;
                parser.state = S.SCRIPT;
              } else {
                strictFail(parser, 'Invalid tagname in closing tag.');
              }
            } else {
              parser.tagName = c;
            }
          } else if (c === '>') {
            closeTag(parser);
          } else if (is(nameBody, c)) {
            parser.tagName += c;
          } else if (parser.script) {
            parser.script += '</' + parser.tagName;
            parser.tagName = '';
            parser.state = S.SCRIPT;
          } else {
            if (not(whitespace, c)) {
              strictFail(parser, 'Invalid tagname in closing tag');
            }
            parser.state = S.CLOSE_TAG_SAW_WHITE;
          }
          continue;

        case S.CLOSE_TAG_SAW_WHITE:
          if (is(whitespace, c)) {
            continue;
          }
          if (c === '>') {
            closeTag(parser);
          } else {
            strictFail(parser, 'Invalid characters in closing tag');
          }
          continue;

        case S.TEXT_ENTITY:
        case S.ATTRIB_VALUE_ENTITY_Q:
        case S.ATTRIB_VALUE_ENTITY_U:
          var returnState;
          var buffer;
          switch (parser.state) {
            case S.TEXT_ENTITY:
              returnState = S.TEXT;
              buffer = 'textNode';
              break;

            case S.ATTRIB_VALUE_ENTITY_Q:
              returnState = S.ATTRIB_VALUE_QUOTED;
              buffer = 'attribValue';
              break;

            case S.ATTRIB_VALUE_ENTITY_U:
              returnState = S.ATTRIB_VALUE_UNQUOTED;
              buffer = 'attribValue';
              break;
          }

          if (c === ';') {
            parser[buffer] += parseEntity(parser);
            parser.entity = '';
            parser.state = returnState;
          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
            parser.entity += c;
          } else {
            strictFail(parser, 'Invalid character in entity name');
            parser[buffer] += '&' + parser.entity + c;
            parser.entity = '';
            parser.state = returnState;
          }

          continue;

        default:
          throw new Error(parser, 'Unknown state: ' + parser.state);
      }
    } // while

    if (parser.position >= parser.bufferCheckPosition) {
      checkBufferLength(parser);
    }
    return parser;
  }

  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
  if (!String.fromCodePoint) {
    (function () {
      var stringFromCharCode = String.fromCharCode;
      var floor = Math.floor;
      var fromCodePoint = function fromCodePoint() {
        var MAX_SIZE = 0x4000;
        var codeUnits = [];
        var highSurrogate;
        var lowSurrogate;
        var index = -1;
        var length = arguments.length;
        if (!length) {
          return '';
        }
        var result = '';
        while (++index < length) {
          var codePoint = Number(arguments[index]);
          if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
          codePoint < 0 || // not a valid Unicode code point
          codePoint > 0x10FFFF || // not a valid Unicode code point
          floor(codePoint) !== codePoint // not an integer
          ) {
              throw RangeError('Invalid code point: ' + codePoint);
            }
          if (codePoint <= 0xFFFF) {
            // BMP code point
            codeUnits.push(codePoint);
          } else {
            // Astral code point; split in surrogate halves
            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            codePoint -= 0x10000;
            highSurrogate = (codePoint >> 10) + 0xD800;
            lowSurrogate = codePoint % 0x400 + 0xDC00;
            codeUnits.push(highSurrogate, lowSurrogate);
          }
          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
            result += stringFromCharCode.apply(null, codeUnits);
            codeUnits.length = 0;
          }
        }
        return result;
      };
      if (Object.defineProperty) {
        Object.defineProperty(String, 'fromCodePoint', {
          value: fromCodePoint,
          configurable: true,
          writable: true
        });
      } else {
        String.fromCodePoint = fromCodePoint;
      }
    })();
  }
})( false ? undefined : exports);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") {
            callback = new Function("" + callback);
        }
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1];
        }
        // Store and register the task
        var task = { callback: callback, args: args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function registerImmediate(handle) {
            process.nextTick(function () {
                runIfPresent(handle);
            });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function onGlobalMessage(event) {
            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function registerImmediate(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function registerImmediate(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function registerImmediate(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function registerImmediate(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();
    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();
    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();
    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();
    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? undefined : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

inherits(Stream, EE);
Stream.Readable = __webpack_require__(/*! readable-stream/readable.js */ "./node_modules/readable-stream/readable-browser.js");
Stream.Writable = __webpack_require__(/*! readable-stream/writable.js */ "./node_modules/readable-stream/writable-browser.js");
Stream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ "./node_modules/readable-stream/duplex-browser.js");
Stream.Transform = __webpack_require__(/*! readable-stream/transform.js */ "./node_modules/readable-stream/transform.js");
Stream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ "./node_modules/readable-stream/passthrough.js");

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\uFFFD';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\uFFFD';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\uFFFD';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\uFFFD';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function () {};
Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || undefined && undefined.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || undefined && undefined.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),

/***/ "./script/index.js":
/*!*************************!*\
  !*** ./script/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! bigscreenplayer/bigscreenplayer */ "./node_modules/bigscreen-player/script/bigscreenplayer.js"), __webpack_require__(/*! bigscreenplayer/models/windowtypes */ "./node_modules/bigscreen-player/script/models/windowtypes.js"), __webpack_require__(/*! bigscreenplayer/debugger/debugtool */ "./node_modules/bigscreen-player/script/debugger/debugtool.js"), __webpack_require__(/*! bigscreenplayer/playbackspinner */ "./node_modules/bigscreen-player/script/playbackspinner.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (BigscreenPlayer, WindowTypes, DebugTool, PlaybackSpinner) {

  var playbackElement = document.getElementById('videoContainer');
  var controlsElement = document.getElementById('bsp_controls');
  var playButton = document.getElementById('playButton');
  var pauseButton = document.getElementById('pauseButton');
  var seekForwardButton = document.getElementById('forwardButton');
  var seekBackButton = document.getElementById('backButton');
  var seekToEndButton = document.getElementById('seekEndButton');
  var debugToolButton = document.getElementById('toggleDebugToolButton');
  var controlsTimeout;

  // Create playback spinner
  var playbackSpinner = new PlaybackSpinner();

  // Set controls to invisible initially
  controlsElement.style.display = "none";

  // Toggle on screen playback controls
  function toggleControls() {
    controlsElement.style.display = controlsElement.style.display == "none" ? "block" : "none";
    if (controlsElement.style.display === "block") {
      playButton.focus();
    }
  }

  // Timeout feature for controls
  function startControlsTimeOut() {

    clearTimeout(controlsTimeout);

    if (controlsElement.style.display === "block") {
      controlsTimeout = setTimeout(function () {
        toggleControls();
      }, 5000);
    } else {
      toggleControls();
    }
  }

  // Create event listeners
  function setupControls() {

    window.addEventListener('keydown', function () {
      startControlsTimeOut();
    });

    playButton.addEventListener('click', function () {
      bigscreenPlayer.play();
      startControlsTimeOut();
    });

    pauseButton.addEventListener('click', function () {
      bigscreenPlayer.pause();
      startControlsTimeOut();
    });

    seekForwardButton.addEventListener('click', function () {
      bigscreenPlayer.setCurrentTime(bigscreenPlayer.getCurrentTime() + 10);
      startControlsTimeOut();
    });

    seekBackButton.addEventListener('click', function () {
      bigscreenPlayer.setCurrentTime(bigscreenPlayer.getCurrentTime() - 10);
      startControlsTimeOut();
    });

    seekToEndButton.addEventListener('click', function () {
      bigscreenPlayer.setCurrentTime(bigscreenPlayer.getDuration() - 10);
      startControlsTimeOut();
    });

    debugToolButton.addEventListener('click', function () {
      DebugTool.toggleVisibility();
      startControlsTimeOut();
    });

    bigscreenPlayer.registerForTimeUpdates(function (event) {});

    bigscreenPlayer.registerForStateChanges(function (event) {
      var state = 'EMPTY';
      switch (event.state) {
        case 0:
          state = 'STOPPED';break;
        case 1:
          state = 'PAUSED';break;
        case 2:
          state = 'PLAYING';break;
        case 4:
          state = 'WAITING';break;
        case 5:
          state = 'ENDED';break;
        case 6:
          state = 'FATAL_ERROR';break;
      }
      if (state === 'WAITING') {
        playbackElement.appendChild(playbackSpinner);
      } else {
        if (playbackElement.contains(playbackSpinner)) playbackElement.removeChild(playbackSpinner);
      }
    });
  }

  // Create player instance
  var bigscreenPlayer = BigscreenPlayer();

  // Init UI controls
  setupControls();

  // Set initial focus
  playButton.focus();

  // Create data source for bigscreen-plauer
  var minimalData = {
    media: {
      mimeType: 'video/mp4',
      urls: [{
        // Content from DASH IF testing assests (used in their reference player)
        // https://reference.dashif.org/dash.js/v2.9.2/samples/dash-if-reference-player/index.htm
        url: 'https://dash.akamaized.net/akamai/bbb_30fps/bbb_30fps.mpd'
      }]
    }
  };

  // Specify extra input args
  var windowType = WindowTypes.STATIC;
  var enableSubtitles = false;

  // Initialise the player
  // At this point TAL environment can be injected, if needed
  bigscreenPlayer.init(playbackElement, minimalData, windowType, enableSubtitles);
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=index.js.map